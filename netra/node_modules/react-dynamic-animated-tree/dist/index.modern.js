import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Tree from 'react-animated-tree';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var TreeComponent = /*#__PURE__*/function (_Component) {
  _inheritsLoose(TreeComponent, _Component);

  function TreeComponent(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    _this.state = {
      nodeData: [],
      showIcon: "hidden",
      isActive: ""
    };
    return _this;
  }

  var _proto = TreeComponent.prototype;

  _proto.render = function render() {
    var _this2 = this;

    return this.props.nodeData.length < 0 ? null : /*#__PURE__*/React.createElement("div", {
      style: {
        textAlign: 'left'
      }
    }, /*#__PURE__*/React.createElement(Tree, {
      key: this.props.id,
      open: this.props.open,
      content: /*#__PURE__*/React.createElement("div", {
        style: _extends({}, this.props.styles.node)
      }, /*#__PURE__*/React.createElement("span", {
        key: this.props.id,
        value: this.props.content,
        className: "treeNode",
        style: this.props.isActive && this.props.id == this.props.isActive.id ? this.props.styles.selected : {
          color: 'black'
        },
        onClick: this.props.treeNodeClick ? function () {
          return _this2.props.treeNodeClick({
            id: _this2.props.id,
            title: _this2.props.content,
            parentNode: _this2.props.parentNode,
            childNodes: _this2.props.nodeData
          });
        } : null
      }, this.props.content))
    }, this.props.nodeData.map(function (currentNode, index) {
      return !currentNode.childNodes.length > 0 ? /*#__PURE__*/React.createElement(Tree, {
        key: currentNode.id,
        content: /*#__PURE__*/React.createElement("div", {
          style: _extends({}, _this2.props.styles.node)
        }, /*#__PURE__*/React.createElement("span", {
          key: currentNode.id,
          style: _this2.props.isActive && currentNode.id == _this2.props.isActive.id ? _this2.props.styles.selected : null,
          value: currentNode.id,
          className: "treeNode",
          onClick: _this2.props.treeNodeClick ? function () {
            return _this2.props.treeNodeClick(currentNode);
          } : null
        }, currentNode.title))
      }) : /*#__PURE__*/React.createElement(TreeComponent, {
        nodeData: currentNode.childNodes,
        isActive: _this2.props.isActive,
        key: currentNode.id,
        id: currentNode.id,
        parentNode: currentNode.parentNode,
        content: currentNode.title,
        treeNodeClick: _this2.props.treeNodeClick,
        open: false,
        styles: _this2.props.styles
      });
    })));
  };

  return TreeComponent;
}(Component);

TreeComponent.propTypes = {
  content: PropTypes.string,
  id: PropTypes.string,
  nodeData: PropTypes.array
};

var styles = {
  leaf: {
    cursor: 'pointer',
    display: 'inline'
  },
  node: {
    cursor: 'pointer',
    display: 'inline',
    color: 'black'
  },
  icon: {
    width: '1em',
    height: '1em',
    marginLeft: 5,
    cursor: 'cursor'
  },
  selected: {
    color: 'blue'
  }
};

var DynamicTree = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(DynamicTree, _React$Component);

  function DynamicTree(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;

    _this.handleTreeNodeClick = function (e) {
      _this.setState({
        selected: e
      });

      if (_this.props.onClick) {
        _this.props.onClick(e);
      }
    };

    _this.state = {
      selected: null
    };
    _this.handleTreeNodeClick = _this.handleTreeNodeClick.bind(_assertThisInitialized(_this));
    return _this;
  }

  var _proto = DynamicTree.prototype;

  _proto.render = function render() {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(TreeComponent, {
      key: "dynamicTree",
      id: this.props.id,
      nodeData: this.props.data,
      content: this.props.title,
      open: true,
      treeNodeClick: this.handleTreeNodeClick,
      isActive: this.state.selected,
      styles: styles
    }));
  };

  return DynamicTree;
}(React.Component);

DynamicTree.propTypes = {
  title: PropTypes.string,
  id: PropTypes.string,
  data: PropTypes.array
};

export default DynamicTree;
//# sourceMappingURL=index.modern.js.map
