{"ast":null,"code":"var _jsxFileName = \"D:\\\\NETRA -P\\\\Netra\\\\netra\\\\src\\\\pages\\\\Phase_Manager\\\\Phasemanager.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Navigation from \"../../components/navigation/Navigation\";\nimport StageSlider from \"../../components/slider/NewSlider\";\nimport { Button } from \"@material-ui/core\";\nimport Table from \"../../ui/Table/Table\";\nimport styles from \"./Phasemanager.module.css\";\nimport { useState } from \"react\";\nimport { Switch, Route, Link, useLocation } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core\";\nimport NewModule from \"../../components/module/NewModule\";\nimport PhaseManagerHome from \"./Home/Home\";\nimport AddPhase from \"./Add/AddPhase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { phaseActions } from \"../../store/PhaseStore\";\nimport LifeMultiplier from \"./LifeMultiplier/LifeMultiplier\";\nimport DCMultiplier from \"./DCMultiplier/dcMultiplier\";\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\nimport UserSelection from \"../../ui/userSelection/userSelection\";\nimport { treeDataActions } from \"../../store/TreeDataStore\";\nimport { v4 as uuid } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PhaseStyles = makeStyles({\n  formControl: {\n    // margin: '2rem',\n    minWidth: \"20%\"\n  },\n  Submit: {\n    // margin: '2rem',\n    height: 40\n  },\n  Pbuttons: {\n    margin: 5,\n    minWidth: 170,\n    float: \"right\"\n  }\n});\n\nconst PhaseManager = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const systemData = useSelector(state => state.treeData.treeData);\n  const currentSelectedSystem = useSelector(state => state.userSelection.currentSelection.equipmentName);\n  const [gridApi, setGridApi] = useState(null);\n  const [finalTableData, setFinalData] = useState([]);\n\n  const setFinalTableData = d => {\n    setFinalData(d);\n\n    if (finalTableData.length > 0) {\n      console.log(\"Hi\");\n    }\n  };\n\n  const currentSelection = useSelector(state => state.userSelection.currentSelection);\n  const location = useLocation();\n  console.log(\"This is Phase Manager Redux Call\");\n  console.log(systemData);\n  const [Stage, setStage] = useState(0);\n  const PhaseClasses = PhaseStyles();\n  const [paramName, setParamName] = useState(\"\");\n  const [MType, setMType] = useState(\"Quantative\");\n  const [Unit, setUnit] = useState(\"\");\n  const [Status, setStatus] = useState(\"\");\n  const [desc, setDesc] = useState(\"\");\n  const [LBound, setLBound] = useState(\"\");\n  const [UBound, setUBound] = useState(\"\");\n  const [PRange, setPrange] = useState(\"\");\n\n  const handleParamNameChange = e => {\n    setParamName(e.target.value);\n  };\n\n  const handleMTypeChange = e => {\n    setMType(e.target.value);\n  };\n\n  const handleUnitChange = e => {\n    setUnit(e.target.value);\n  };\n\n  const handleStatusChange = e => {\n    setStatus(e.target.value);\n  };\n\n  const handleDescChange = e => {\n    setDesc(e.target.value);\n  };\n\n  const handleLBoundChange = e => {\n    setLBound(e.target.value);\n  };\n\n  const handleUBoundChange = e => {\n    setUBound(e.target.value);\n  };\n\n  const handlePRangeChange = e => {\n    setPrange(e.target.value);\n  }; //\n\n\n  const AddRange = () => {\n    props.history.push(\"/phase_manager/add\");\n  };\n\n  const NextStage = () => {\n    if (Stage === 0) {\n      setStage(1);\n      props.history.push(\"/phase_manager/life_multiplier\");\n    }\n\n    if (Stage === 1) {\n      setStage(2);\n      props.history.push(\"/phase_manager/dcmultiplier\");\n    }\n  };\n\n  let marks = [{\n    value: 30,\n    label: \"Modify Phase\"\n  }, {\n    value: 60,\n    label: \"Life Multiplier\"\n  }, {\n    value: 90,\n    label: \"Duty Cycle Multiplier(System)\"\n  }];\n\n  const addPhaseTodBList = () => {\n    if (paramName.trim() !== \"\" && PRange.trim() !== \"\") {\n      let newRows = [{\n        PhaseName: paramName,\n        MeasurementType: MType,\n        LowerBound: LBound,\n        UpperBound: UBound,\n        Status: Status,\n        PhaseRange: PRange,\n        Unit: Unit,\n        Description: desc,\n        id: uuid()\n      }];\n      let lowRow = {\n        PhaseName: paramName,\n        MeasurementType: MType,\n        LowerBound: 0,\n        UpperBound: LBound - 1,\n        Status: Status,\n        PhaseRange: \"Low\",\n        Unit: Unit,\n        Description: \"This is system generated phase.\",\n        id: uuid()\n      };\n      let upperRow = {\n        PhaseName: paramName,\n        MeasurementType: MType,\n        LowerBound: +UBound + 1,\n        UpperBound: 100,\n        Status: Status,\n        PhaseRange: \"High\",\n        Unit: Unit,\n        Description: \"This is system generated phase.\",\n        id: uuid()\n      };\n      newRows.push(lowRow);\n      newRows.push(upperRow);\n      debugger;\n      dispatch(phaseActions.addPhase({\n        newPhase: newRows\n      }));\n      setParamName(\"\");\n      setLBound(\"\");\n      setUBound(\"\");\n      setStatus(\"\");\n      setPrange(\"\");\n      setUnit(\"\");\n      setDesc(\"\");\n      props.history.push(\"/phase_manager/\");\n    } else {\n      alert(\"Please Enter Phase Name and Phase Range Name\");\n    }\n  };\n\n  const nextModule = settings => {\n    if (settings.HEP) {\n      props.history.push(\"/HEP\");\n    } else if (settings.DataManager) {\n      props.history.push(\"/data_manager\");\n    } else if (settings.ReliabilityDashboard) {\n      props.history.push(\"/rDashboard\");\n    }\n  };\n\n  const [SnackBarMessage, setSnackBarMessage] = useState({\n    severity: \"error\",\n    message: \"This is awesome\",\n    showSnackBar: false\n  });\n\n  const onHandleSnackClose = () => {\n    setSnackBarMessage({\n      severity: \"error\",\n      message: \"Please Add Systemss\",\n      showSnackBar: false\n    });\n  };\n\n  const onLoadTreeStructure = () => {\n    fetch(\"/fetch_system\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        system: currentSelection[\"equipmentName\"],\n        ship_name: currentSelection[\"shipName\"],\n        request_from: \"phase\"\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => res.json()).then(d => {\n      let system_data = d[\"system_data\"];\n      let phase_data = d[\"phase_data\"];\n      dispatch(treeDataActions.setTreeData({\n        treeData: system_data\n      }));\n      dispatch(phaseActions.loadPhase({\n        newPhase: phase_data\n      }));\n    });\n  };\n\n  const onSaveButtonClickHandler = () => {\n    const currentLocation = location.pathname;\n    let newTdata = [];\n    let dType = \"\";\n\n    if (currentLocation === \"/phase_manager/\") {\n      const ComponentId = systemData.filter(x => x.name === currentSelectedSystem)[0].id;\n      newTdata = finalTableData.map(x => {\n        return { ...x,\n          ComponentId: ComponentId\n        };\n      });\n      dType = \"insertPhase\";\n    } else if (currentLocation === \"/phase_manager/life_multiplier\") {\n      newTdata = finalTableData;\n      dType = \"insertLifeMultiplier\";\n    } else if (currentLocation === \"/phase_manager/dcmultiplier\") {\n      newTdata = finalTableData;\n      dType = \"insertDCMultiplier\";\n    }\n\n    debugger; //Else End\n\n    if (newTdata.length > 0) {\n      fetch(\"/save_phase\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          flatData: newTdata,\n          dtype: dType\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      }).then(res => {\n        return res.json();\n      }).then(data => {\n        setSnackBarMessage({\n          severity: \"success\",\n          message: data.message,\n          showSnackBar: true\n        });\n      }).catch(error => {\n        setSnackBarMessage({\n          severity: \"error\",\n          message: \"Some Error Occured. \" + error,\n          showSnackBar: true\n        });\n      });\n    } else {\n      setSnackBarMessage(prevState => {\n        const data = { ...prevState,\n          message: \"This is error\",\n          showSnackBar: true\n        };\n        return data;\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewModule, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StageSlider, {\n      marks: marks,\n      default: marks[Stage][\"value\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: [\"/phase_manager/\", \"/phase_manager/life_multiplier\", \"/phase_manager/dcmultiplier\"],\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.flex1,\n        children: [/*#__PURE__*/_jsxDEV(UserSelection, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/phase_manager\",\n            exact: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              onClick: () => AddRange(),\n              className: PhaseClasses.Pbuttons,\n              children: \"Add More Range\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/phase_manager/life_multiplier\",\n            exact: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              className: PhaseClasses.Pbuttons,\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route // exact\n          , {\n            path: [\"/phase_manager\", \"/phase_manager/life_multiplier\"],\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              className: PhaseClasses.Pbuttons,\n              onClick: () => onSaveButtonClickHandler(),\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: [\"/phase_manager\"],\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              className: PhaseClasses.Pbuttons,\n              onClick: () => onLoadTreeStructure(),\n              children: \"Load Equipment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: [\"/phase_manager\", \"/phase_manager/life_multiplier\", \"/phase_manager/add\"],\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              className: PhaseClasses.Pbuttons,\n              onClick: () => NextStage(),\n              children: \"Next Stage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            exact: true,\n            path: \"/phase_manager/dcmultiplier\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: () => nextModule(props.settings),\n              variant: \"contained\",\n              color: \"primary\",\n              className: PhaseClasses.Pbuttons,\n              children: \"Next Module\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/phase_manager/add\",\n      exact: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.addFlex,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: PhaseClasses.Pbuttons,\n          onClick: addPhaseTodBList,\n          children: \"Update Phase List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: PhaseClasses.Pbuttons,\n          onClick: () => NextStage(),\n          children: \"Next Stage\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/phase_manager\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(PhaseManagerHome, {\n          gridApi: gridApi,\n          setGridApi: setGridApi,\n          tableUpdate: setFinalTableData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/phase_manager/add\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(AddPhase, {\n          MType: MType,\n          Status: Status,\n          handleDescChange: handleDescChange,\n          desc: desc,\n          handleUBoundChange: handleUBoundChange,\n          UBound: UBound,\n          handleLBoundChange: handleLBoundChange,\n          LBound: LBound,\n          handlePRangeChange: handlePRangeChange,\n          PRange: PRange,\n          handleStatusChange: handleStatusChange,\n          handleUnitChange: handleUnitChange,\n          Unit: Unit,\n          handleMTypeChange: handleMTypeChange,\n          handleParamNameChange: handleParamNameChange,\n          paramName: paramName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/phase_manager/life_multiplier\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(LifeMultiplier, {\n          tableUpdate: setFinalTableData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/phase_manager/dcmultiplier\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(DCMultiplier, {\n          tableUpdate: setFinalTableData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this), SnackBarMessage.showSnackBar && /*#__PURE__*/_jsxDEV(CustomizedSnackbars, {\n      message: SnackBarMessage,\n      onHandleClose: onHandleSnackClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PhaseManager, \"ArzbpdJHK5J1ra5AUtCmHiZWg2I=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useLocation];\n});\n\n_c = PhaseManager;\nexport default PhaseManager; // const save_fm = () => {\n//   let final_fm_data = [];\n//   finalTableData.map(x => {\n//     if(x.fouthCol.trim() != \"\"){\n//       fm_split = x.fouthCol.split(',')\n//       fm_split.forEach(x => {\n//         final_fm_data.push({\n//           id: uuid(),\n//           componentId,\n//           x,\n//         });\n//       })\n//     }else{\n//     }\n//     final_fm_data.push({\n//       id: uuid(),\n//       componentId,\n//       failure_mode_value,\n//     });\n//   })\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"PhaseManager\");","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/src/pages/Phase_Manager/Phasemanager.js"],"names":["React","Navigation","StageSlider","Button","Table","styles","useState","Switch","Route","Link","useLocation","makeStyles","NewModule","PhaseManagerHome","AddPhase","useDispatch","useSelector","phaseActions","LifeMultiplier","DCMultiplier","CustomizedSnackbars","UserSelection","treeDataActions","v4","uuid","PhaseStyles","formControl","minWidth","Submit","height","Pbuttons","margin","float","PhaseManager","props","dispatch","systemData","state","treeData","currentSelectedSystem","userSelection","currentSelection","equipmentName","gridApi","setGridApi","finalTableData","setFinalData","setFinalTableData","d","length","console","log","location","Stage","setStage","PhaseClasses","paramName","setParamName","MType","setMType","Unit","setUnit","Status","setStatus","desc","setDesc","LBound","setLBound","UBound","setUBound","PRange","setPrange","handleParamNameChange","e","target","value","handleMTypeChange","handleUnitChange","handleStatusChange","handleDescChange","handleLBoundChange","handleUBoundChange","handlePRangeChange","AddRange","history","push","NextStage","marks","label","addPhaseTodBList","trim","newRows","PhaseName","MeasurementType","LowerBound","UpperBound","PhaseRange","Description","id","lowRow","upperRow","addPhase","newPhase","alert","nextModule","settings","HEP","DataManager","ReliabilityDashboard","SnackBarMessage","setSnackBarMessage","severity","message","showSnackBar","onHandleSnackClose","onLoadTreeStructure","fetch","method","body","JSON","stringify","system","ship_name","request_from","headers","Accept","then","res","json","system_data","phase_data","setTreeData","loadPhase","onSaveButtonClickHandler","currentLocation","pathname","newTdata","dType","ComponentId","filter","x","name","map","flatData","dtype","data","catch","error","prevState","flex1","addFlex"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport StageSlider from \"../../components/slider/NewSlider\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Table from \"../../ui/Table/Table\";\r\nimport styles from \"./Phasemanager.module.css\";\r\nimport { useState } from \"react\";\r\nimport { Switch, Route, Link, useLocation } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport NewModule from \"../../components/module/NewModule\";\r\nimport PhaseManagerHome from \"./Home/Home\";\r\nimport AddPhase from \"./Add/AddPhase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { phaseActions } from \"../../store/PhaseStore\";\r\nimport LifeMultiplier from \"./LifeMultiplier/LifeMultiplier\";\r\nimport DCMultiplier from \"./DCMultiplier/dcMultiplier\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst PhaseStyles = makeStyles({\r\n  formControl: {\r\n    // margin: '2rem',\r\n    minWidth: \"20%\",\r\n  },\r\n  Submit: {\r\n    // margin: '2rem',\r\n    height: 40,\r\n  },\r\n  Pbuttons: {\r\n    margin: 5,\r\n    minWidth: 170,\r\n    float: \"right\",\r\n  },\r\n});\r\nconst PhaseManager = (props) => {\r\n  const dispatch = useDispatch();\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n\r\n  const currentSelectedSystem = useSelector(\r\n    (state) => state.userSelection.currentSelection.equipmentName\r\n  );\r\n\r\n  const [gridApi, setGridApi] = useState(null);\r\n\r\n  const [finalTableData, setFinalData] = useState([]);\r\n\r\n  const setFinalTableData = (d) => {\r\n    setFinalData(d);\r\n    if (finalTableData.length > 0) {\r\n      console.log(\"Hi\");\r\n    }\r\n  };\r\n\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n\r\n  const location = useLocation();\r\n  console.log(\"This is Phase Manager Redux Call\");\r\n  console.log(systemData);\r\n  const [Stage, setStage] = useState(0);\r\n  const PhaseClasses = PhaseStyles();\r\n  const [paramName, setParamName] = useState(\"\");\r\n  const [MType, setMType] = useState(\"Quantative\");\r\n  const [Unit, setUnit] = useState(\"\");\r\n  const [Status, setStatus] = useState(\"\");\r\n  const [desc, setDesc] = useState(\"\");\r\n  const [LBound, setLBound] = useState(\"\");\r\n  const [UBound, setUBound] = useState(\"\");\r\n  const [PRange, setPrange] = useState(\"\");\r\n\r\n  const handleParamNameChange = (e) => {\r\n    setParamName(e.target.value);\r\n  };\r\n  const handleMTypeChange = (e) => {\r\n    setMType(e.target.value);\r\n  };\r\n  const handleUnitChange = (e) => {\r\n    setUnit(e.target.value);\r\n  };\r\n  const handleStatusChange = (e) => {\r\n    setStatus(e.target.value);\r\n  };\r\n  const handleDescChange = (e) => {\r\n    setDesc(e.target.value);\r\n  };\r\n  const handleLBoundChange = (e) => {\r\n    setLBound(e.target.value);\r\n  };\r\n  const handleUBoundChange = (e) => {\r\n    setUBound(e.target.value);\r\n  };\r\n  const handlePRangeChange = (e) => {\r\n    setPrange(e.target.value);\r\n  };\r\n  //\r\n  const AddRange = () => {\r\n    props.history.push(\"/phase_manager/add\");\r\n  };\r\n  const NextStage = () => {\r\n    if (Stage === 0) {\r\n      setStage(1);\r\n      props.history.push(\"/phase_manager/life_multiplier\");\r\n    }\r\n    if (Stage === 1) {\r\n      setStage(2);\r\n      props.history.push(\"/phase_manager/dcmultiplier\");\r\n    }\r\n  };\r\n\r\n  let marks = [\r\n    {\r\n      value: 30,\r\n      label: \"Modify Phase\",\r\n    },\r\n    {\r\n      value: 60,\r\n      label: \"Life Multiplier\",\r\n    },\r\n    {\r\n      value: 90,\r\n      label: \"Duty Cycle Multiplier(System)\",\r\n    },\r\n  ];\r\n  const addPhaseTodBList = () => {\r\n    if (paramName.trim() !== \"\" && PRange.trim() !== \"\") {\r\n      let newRows = [\r\n        {\r\n          PhaseName: paramName,\r\n          MeasurementType: MType,\r\n          LowerBound: LBound,\r\n          UpperBound: UBound,\r\n          Status: Status,\r\n          PhaseRange: PRange,\r\n          Unit: Unit,\r\n          Description: desc,\r\n          id: uuid(),\r\n        },\r\n      ];\r\n      let lowRow = {\r\n        PhaseName: paramName,\r\n        MeasurementType: MType,\r\n        LowerBound: 0,\r\n        UpperBound: LBound - 1,\r\n        Status: Status,\r\n        PhaseRange: \"Low\",\r\n        Unit: Unit,\r\n        Description: \"This is system generated phase.\",\r\n        id: uuid(),\r\n      };\r\n      let upperRow = {\r\n        PhaseName: paramName,\r\n        MeasurementType: MType,\r\n        LowerBound: +UBound + 1,\r\n        UpperBound: 100,\r\n        Status: Status,\r\n        PhaseRange: \"High\",\r\n        Unit: Unit,\r\n        Description: \"This is system generated phase.\",\r\n        id: uuid(),\r\n      };\r\n      newRows.push(lowRow);\r\n      newRows.push(upperRow);\r\n      debugger;\r\n      dispatch(phaseActions.addPhase({ newPhase: newRows }));\r\n      setParamName(\"\");\r\n      setLBound(\"\");\r\n      setUBound(\"\");\r\n      setStatus(\"\");\r\n      setPrange(\"\");\r\n      setUnit(\"\");\r\n      setDesc(\"\");\r\n      props.history.push(\"/phase_manager/\");\r\n    } else {\r\n      alert(\"Please Enter Phase Name and Phase Range Name\");\r\n    }\r\n  };\r\n\r\n  const nextModule = (settings) => {\r\n    if (settings.HEP) {\r\n      props.history.push(\"/HEP\");\r\n    } else if (settings.DataManager) {\r\n      props.history.push(\"/data_manager\");\r\n    } else if (settings.ReliabilityDashboard) {\r\n      props.history.push(\"/rDashboard\");\r\n    }\r\n  };\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n\r\n  const onLoadTreeStructure = () => {\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        system: currentSelection[\"equipmentName\"],\r\n        ship_name: currentSelection[\"shipName\"],\r\n        request_from: \"phase\",\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        let system_data = d[\"system_data\"];\r\n        let phase_data = d[\"phase_data\"];\r\n        dispatch(treeDataActions.setTreeData({ treeData: system_data }));\r\n        dispatch(phaseActions.loadPhase({ newPhase: phase_data }));\r\n      });\r\n  };\r\n\r\n  const onSaveButtonClickHandler = () => {\r\n    const currentLocation = location.pathname;\r\n    let newTdata = [];\r\n    let dType = \"\";\r\n    if (currentLocation === \"/phase_manager/\") {\r\n      const ComponentId = systemData.filter(\r\n        (x) => x.name === currentSelectedSystem\r\n      )[0].id;\r\n      newTdata = finalTableData.map((x) => {\r\n        return { ...x, ComponentId: ComponentId };\r\n      });\r\n      dType = \"insertPhase\";\r\n    } else if (currentLocation === \"/phase_manager/life_multiplier\") {\r\n      newTdata = finalTableData;\r\n      dType = \"insertLifeMultiplier\";\r\n    } else if (currentLocation === \"/phase_manager/dcmultiplier\") {\r\n      newTdata = finalTableData;\r\n      dType = \"insertDCMultiplier\";\r\n    }\r\n    debugger;\r\n    //Else End\r\n    if (newTdata.length > 0) {\r\n      fetch(\"/save_phase\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          flatData: newTdata,\r\n          dtype: dType,\r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          setSnackBarMessage({\r\n            severity: \"success\",\r\n            message: data.message,\r\n            showSnackBar: true,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setSnackBarMessage({\r\n            severity: \"error\",\r\n            message: \"Some Error Occured. \" + error,\r\n            showSnackBar: true,\r\n          });\r\n        });\r\n    } else {\r\n      setSnackBarMessage((prevState) => {\r\n        const data = {\r\n          ...prevState,\r\n          message: \"This is error\",\r\n          showSnackBar: true,\r\n        };\r\n        return data;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      {/* <Module/> */}\r\n      <NewModule />\r\n      {/* <Slider marks={marks} default={marks[0][\"value\"]}/> */}\r\n      <StageSlider marks={marks} default={marks[Stage][\"value\"]} />\r\n      <Route\r\n        exact\r\n        path={[\r\n          \"/phase_manager/\",\r\n          \"/phase_manager/life_multiplier\",\r\n          \"/phase_manager/dcmultiplier\",\r\n        ]}\r\n      >\r\n        <div className={styles.flex1}>\r\n          <UserSelection />\r\n\r\n          <div>\r\n            <Route path=\"/phase_manager\" exact={true}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => AddRange()}\r\n                className={PhaseClasses.Pbuttons}\r\n              >\r\n                Add More Range\r\n              </Button>\r\n            </Route>\r\n            <Route path=\"/phase_manager/life_multiplier\" exact={true}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={PhaseClasses.Pbuttons}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Route>\r\n\r\n            <Route\r\n              // exact\r\n              path={[\"/phase_manager\", \"/phase_manager/life_multiplier\"]}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={PhaseClasses.Pbuttons}\r\n                onClick={() => onSaveButtonClickHandler()}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Route>\r\n            <Route path={[\"/phase_manager\"]}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={PhaseClasses.Pbuttons}\r\n                onClick={() => onLoadTreeStructure()}\r\n              >\r\n                Load Equipment\r\n              </Button>\r\n            </Route>\r\n            <Route\r\n              exact\r\n              path={[\r\n                \"/phase_manager\",\r\n                \"/phase_manager/life_multiplier\",\r\n                \"/phase_manager/add\",\r\n              ]}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={PhaseClasses.Pbuttons}\r\n                onClick={() => NextStage()}\r\n              >\r\n                Next Stage\r\n              </Button>\r\n            </Route>\r\n            <Route exact path=\"/phase_manager/dcmultiplier\">\r\n              <Button\r\n                onClick={() => nextModule(props.settings)}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={PhaseClasses.Pbuttons}\r\n              >\r\n                Next Module\r\n              </Button>\r\n            </Route>\r\n          </div>\r\n        </div>\r\n      </Route>\r\n      <Route path=\"/phase_manager/add\" exact={true}>\r\n        <div className={styles.addFlex}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={PhaseClasses.Pbuttons}\r\n            onClick={addPhaseTodBList}\r\n          >\r\n            Update Phase List\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={PhaseClasses.Pbuttons}\r\n            onClick={() => NextStage()}\r\n          >\r\n            Next Stage\r\n          </Button>\r\n        </div>\r\n      </Route>\r\n      <Switch>\r\n        <Route path=\"/phase_manager\" exact={true}>\r\n          <PhaseManagerHome\r\n            gridApi={gridApi}\r\n            setGridApi={setGridApi}\r\n            tableUpdate={setFinalTableData}\r\n          ></PhaseManagerHome>\r\n        </Route>\r\n        <Route path=\"/phase_manager/add\" exact={true}>\r\n          <AddPhase\r\n            MType={MType}\r\n            Status={Status}\r\n            handleDescChange={handleDescChange}\r\n            desc={desc}\r\n            handleUBoundChange={handleUBoundChange}\r\n            UBound={UBound}\r\n            handleLBoundChange={handleLBoundChange}\r\n            LBound={LBound}\r\n            handlePRangeChange={handlePRangeChange}\r\n            PRange={PRange}\r\n            handleStatusChange={handleStatusChange}\r\n            handleUnitChange={handleUnitChange}\r\n            Unit={Unit}\r\n            handleMTypeChange={handleMTypeChange}\r\n            handleParamNameChange={handleParamNameChange}\r\n            paramName={paramName}\r\n          ></AddPhase>\r\n        </Route>\r\n        <Route path=\"/phase_manager/life_multiplier\" exact={true}>\r\n          <LifeMultiplier tableUpdate={setFinalTableData}></LifeMultiplier>\r\n        </Route>\r\n        <Route path=\"/phase_manager/dcmultiplier\" exact={true}>\r\n          <DCMultiplier tableUpdate={setFinalTableData}></DCMultiplier>\r\n        </Route>\r\n      </Switch>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default PhaseManager;\r\n\r\n// const save_fm = () => {\r\n//   let final_fm_data = [];\r\n//   finalTableData.map(x => {\r\n//     if(x.fouthCol.trim() != \"\"){\r\n//       fm_split = x.fouthCol.split(',')\r\n//       fm_split.forEach(x => {\r\n//         final_fm_data.push({\r\n//           id: uuid(),\r\n//           componentId,\r\n//           x,\r\n//         });\r\n//       })\r\n\r\n//     }else{\r\n\r\n//     }\r\n//     final_fm_data.push({\r\n//       id: uuid(),\r\n//       componentId,\r\n//       failure_mode_value,\r\n//     });\r\n//   })\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}