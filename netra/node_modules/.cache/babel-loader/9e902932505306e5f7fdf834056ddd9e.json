{"ast":null,"code":"var _jsxFileName = \"D:\\\\NETRA -P\\\\Netra\\\\netra\\\\src\\\\components\\\\LevelsHOC\\\\AccessControlHOC.js\";\n// components/AccessControlHOC.js\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AccessControlHOC = (allowedLevels, WrappedComponent, userAccessLevel) => {\n  return props => {\n    // Check if the user's access level is included in the allowedLevels array.\n    const isAllowed = allowedLevels.includes(userAccessLevel);\n\n    if (!isAllowed) {\n      // Replace this with your preferred way to handle unauthorized access.\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"You are not authorized to access this content.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(WrappedComponent, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    }, this);\n  };\n};\n\n_c = AccessControlHOC;\nexport default AccessControlHOC;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccessControlHOC\");","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/src/components/LevelsHOC/AccessControlHOC.js"],"names":["React","AccessControlHOC","allowedLevels","WrappedComponent","userAccessLevel","props","isAllowed","includes"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,aAAD,EAAgBC,gBAAhB,EAAkCC,eAAlC,KAAsD;AAC7E,SAAQC,KAAD,IAAW;AAChB;AACA,UAAMC,SAAS,GAAGJ,aAAa,CAACK,QAAd,CAAuBH,eAAvB,CAAlB;;AAEA,QAAI,CAACE,SAAL,EAAgB;AACd;AACA,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,wBAAO,QAAC,gBAAD,OAAsBD;AAAtB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAVD;AAWD,CAZD;;KAAMJ,gB;AAcN,eAAeA,gBAAf","sourcesContent":["// components/AccessControlHOC.js\r\nimport React from 'react';\r\n\r\nconst AccessControlHOC = (allowedLevels, WrappedComponent, userAccessLevel) => {\r\n  return (props) => {\r\n    // Check if the user's access level is included in the allowedLevels array.\r\n    const isAllowed = allowedLevels.includes(userAccessLevel);\r\n\r\n    if (!isAllowed) {\r\n      // Replace this with your preferred way to handle unauthorized access.\r\n      return <div>You are not authorized to access this content.</div>;\r\n    }\r\n\r\n    return <WrappedComponent {...props} />;\r\n  };\r\n};\r\n\r\nexport default AccessControlHOC;\r\n"]},"metadata":{},"sourceType":"module"}