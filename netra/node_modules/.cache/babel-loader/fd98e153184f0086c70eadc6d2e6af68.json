{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\TaskDashboard\\\\TaskDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport styles from \"./TaskDashboard.module.css\";\nimport { InputLabel, TextField, makeStyles, Button } from \"@material-ui/core\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Label, ReferenceLine } from 'recharts'; // import { arr,arr2 } from \"./data\";\n\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport MomentUtils from \"@date-io/moment\";\nimport Navigation from \"../../components/navigation/Navigation\";\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskDashboard = () => {\n  _s();\n\n  const [shipOption, setshipOption] = useState([]);\n  const [taskOption, settaskOption] = useState([]);\n  const [missionOption, setmissionOption] = useState([]);\n  useEffect(() => {\n    fetch(\"/task_dash_populate\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      debugger;\n      const mission_data = data[\"missionData\"];\n      const taskNames = data[\"tasks\"];\n      setmissionOption(mission_data);\n      settaskOption(taskNames);\n    });\n  }, []);\n  const dropDownStyle = makeStyles({\n    root: {\n      paddingLeft: 10,\n      background: \"#fff\",\n      border: \"1px solid #0263a1\",\n      borderRadius: \"5px\",\n      width: \"320px\",\n      minHeight: \"40px\",\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\"\n    },\n    inputRoot: {\n      width: '100%'\n    }\n  });\n  const classes = dropDownStyle();\n  let arr = [];\n  let arr2 = [];\n\n  for (let i = 0; i < 50; i++) {\n    // const maxDate = Date.now();\n    // const timestamp = Math.floor(Math.random() * maxDate);\n    arr = [...arr, {\n      name: new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0, 10),\n      uv: Math.floor(Math.random() * (80 - 30 + 1)) + 30\n    }];\n    arr2 = [...arr2, {\n      name: new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0, 10),\n      uv: Math.floor(Math.random() * (75 - 30 + 1)) + 30\n    }];\n  }\n\n  const [showGraph, setShowGraph] = useState(false);\n\n  const onSubmitHandler = () => {\n    setGraphData([]);\n    setSubSystem(false);\n    setLoading(true);\n    const data = {\n      missions: selectedMissionName,\n      equipments: selectedEqName,\n      shipClass: selectedShipName,\n      tempMissions: tempMissionData\n    };\n    setMission(0);\n    console.log(missionInfo);\n    fetch(\"/rel_estimate\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        data: data\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => res.json()).then(d => {\n      console.log(d);\n\n      if (data.missions.length == 1) {\n        if (data.shipClass.length == 1) {\n          //for Single Ship and Single Mission\n          let newGraphData = [];\n          let newSubSystem = [];\n          let newCardData = [];\n          data.missions.forEach((mission, mid) => {\n            let missionData = d[mid][mission];\n            missionInfo.forEach(element => {\n              if (element.missionName === mission) {\n                newCardData[mid] = { ...newCardData[mid],\n                  name: mission,\n                  target: element.tar_rel\n                };\n                newGraphData = [...newGraphData, {\n                  name: \"Target Reliability\",\n                  Reliability: element.tar_rel\n                }];\n              }\n            }); //console.log(missionData)\n\n            data.shipClass.forEach(ship => {\n              let shipData = missionData[ship]; //console.log(shipData);\n\n              let actual = [];\n              data.equipments.forEach((eqpt, eid) => {\n                let eqptData = shipData[eid][eqpt.name];\n                actual[eid] = {\n                  name: eqpt.name,\n                  rel: 100 * eqptData.rel,\n                  prob: 100 * eqptData.prob_ac\n                };\n                newCardData[mid].actual = actual;\n                console.log(newCardData); //console.log(eqptData);\n\n                newGraphData = [...newGraphData, {\n                  name: `${eqpt.name}`,\n                  Reliability: 100 * eqptData.rel\n                }];\n                eqptData.child.forEach((child, cid) => {\n                  newSubSystem[cid] = { ...newSubSystem[cid],\n                    name: child.name,\n                    [eqpt.name]: 100 * child.rel\n                  };\n                });\n              });\n            });\n          });\n          setGraphData(newGraphData);\n          setSubSystemData(newSubSystem);\n          setCardData(newCardData);\n          setLoading(false);\n        } else {\n          //for many Ship Classes and Single Mission\n          let newGraphData = [];\n          let newSubSystem = [];\n          let newCardData = [];\n          data.missions.forEach((mission, mid) => {\n            let missionData = d[mid][mission];\n            missionInfo.forEach(element => {\n              if (element.missionName === mission) {\n                newCardData[mid] = { ...newCardData[mid],\n                  name: mission,\n                  target: element.tar_rel\n                };\n                newGraphData = [...newGraphData, {\n                  name: \"Target Reliability\",\n                  Reliability: element.tar_rel\n                }];\n              }\n            }); //console.log(missionData)\n\n            data.shipClass.forEach((ship, sid) => {\n              let shipData = missionData[ship]; //console.log(shipData);\n\n              let actual = [];\n              data.equipments.forEach((eqpt, eid) => {\n                let eqptData = shipData[eid][eqpt.name];\n                actual[eid] = {\n                  name: eqpt.name,\n                  rel: 100 * eqptData.rel,\n                  prob: 100 * eqptData.prob_ac\n                };\n                newCardData[mid].actual = actual; //console.log(eqptData);\n\n                newGraphData[sid] = { ...newGraphData[sid],\n                  name: ship,\n                  [eqpt.name]: 100 * eqptData.rel\n                };\n                eqptData.child.forEach((child, cid) => {\n                  newSubSystem[cid] = { ...newSubSystem[cid],\n                    name: [`${ship} ${child.name}`],\n                    [ship]: 100 * child.rel\n                  };\n                });\n              });\n            });\n          });\n          setGraphData(newGraphData);\n          setSubSystemData(newSubSystem);\n          setCardData(newCardData);\n          setLoading(false);\n        }\n      } else if (data.missions.length > 1) {\n        //for many Missions\n        let newGraphData = [];\n        let newSubSystem = [];\n        let newCardData = [];\n        let targetRel = {};\n        data.missions.forEach((mission, mid) => {\n          let missionData = d[mid][mission];\n          missionInfo.forEach(element => {\n            if (element.missionName === mission) {\n              newCardData[mid] = { ...newCardData[mid],\n                name: mission,\n                target: element.tar_rel\n              };\n              targetRel = { ...targetRel,\n                name: \"Target Reliability\",\n                [mission]: element.tar_rel\n              };\n            }\n          }); //console.log(missionData)\n\n          data.shipClass.forEach(ship => {\n            let shipData = missionData[ship]; //console.log(shipData);\n\n            let actual = [];\n            data.equipments.forEach((eqpt, eid) => {\n              let eqptData = shipData[eid][eqpt.name];\n              actual[eid] = {\n                name: eqpt.name,\n                rel: 100 * eqptData.rel,\n                prob: 100 * eqptData.prob_ac\n              };\n              newCardData[mid].actual = actual; //console.log(eqptData);\n\n              newGraphData[eid] = { ...newGraphData[eid],\n                name: eqpt.name,\n                [mission]: 100 * eqptData.rel\n              };\n              eqptData.child.forEach((child, cid) => {\n                newSubSystem[cid] = { ...newSubSystem[cid],\n                  name: [`${eqpt.name} ${child.name}`],\n                  [mission]: 100 * child.rel\n                };\n              });\n            });\n          });\n        });\n        newGraphData = [targetRel, ...newGraphData];\n        setGraphData(newGraphData);\n        setSubSystemData(newSubSystem);\n        setCardData(newCardData);\n        setLoading(false);\n        console.log(cardData);\n      }\n    });\n  };\n\n  const minThreshold = 45;\n  const maxThreshold = 60;\n  return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n    utils: MomentUtils,\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.body,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.mprofile,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"300px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            style: {\n              fontWeight: \"bold\",\n              color: \"black\",\n              fontSize: \"16px\",\n              marginBottom: \"10px\"\n            },\n            children: \"Task Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            classes: classes,\n            multiple: true,\n            id: \"tags-standard\",\n            options: taskOption,\n            getOptionLabel: option => option.name,\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              InputProps: { ...params.InputProps,\n                disableUnderline: true\n              },\n              variant: \"standard\" // label=\"Multiple values\"\n              // placeholder=\"Favorites\"\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"300px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            style: {\n              fontWeight: \"bold\",\n              color: \"black\",\n              fontSize: \"16px\",\n              marginBottom: \"10px\"\n            },\n            children: \"Select Mission\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            classes: classes,\n            multiple: true,\n            id: \"tags-standard\",\n            options: missionOption,\n            getOptionLabel: option => option.missionName,\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              InputProps: { ...params.InputProps,\n                disableUnderline: true\n              },\n              variant: \"standard\" // label=\"Multiple values\"\n              // placeholder=\"Favorites\"\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          style: {\n            marginTop: \"2rem\"\n          },\n          onClick: onSubmitHandler,\n          children: [console.log(arr[arr.length - 1][\"uv\"] + \"hello2\"), \"Submit\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), showGraph ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.midSection,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.rchart,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.content,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Parameter 1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n              width: 550,\n              height: 300,\n              data: arr2,\n              children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"name\",\n                tick: false,\n                label: {\n                  value: \"Date\",\n                  position: \"insideBottom\",\n                  dy: 10\n                },\n                height: 45\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                domain: [30, 75],\n                label: {\n                  value: 'Vibration Data',\n                  angle: -90,\n                  position: 'center',\n                  paddingRight: '20px',\n                  dy: -10\n                },\n                width: 80\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                y: 45,\n                stroke: \"red\",\n                strokeDasharray: \"6 6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                y: 60,\n                stroke: \"red\",\n                strokeDasharray: \"6 6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n                horizontal: false,\n                vertical: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"uv\",\n                stroke: maxThreshold >= arr2[arr2.length - 1][\"uv\"] && arr2[arr2.length - 1][\"uv\"] >= minThreshold ? \"green\" : \"red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 395,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.rchart,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.content,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Parameter 2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n              width: 550,\n              height: 300,\n              data: arr2,\n              children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"name\",\n                tick: false,\n                label: {\n                  value: \"Date\",\n                  position: \"insideBottom\",\n                  dy: 10\n                },\n                height: 45\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                domain: [30, 75],\n                label: {\n                  value: 'Vibration Data',\n                  angle: -90,\n                  position: 'center',\n                  paddingRight: '20px',\n                  dy: -10\n                },\n                width: 80\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                y: 45,\n                stroke: \"red\",\n                strokeDasharray: \"6 6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                y: 60,\n                stroke: \"red\",\n                strokeDasharray: \"6 6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n                horizontal: false,\n                vertical: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"uv\",\n                stroke: maxThreshold >= arr2[arr2.length - 1][\"uv\"] && arr2[arr2.length - 1][\"uv\"] >= minThreshold ? \"green\" : \"red\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.rchart,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.content,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Parameter 3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n              width: 550,\n              height: 300,\n              data: arr,\n              children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"name\",\n                tick: false,\n                label: {\n                  value: \"Date\",\n                  position: \"insideBottom\",\n                  dy: 10\n                },\n                height: 45\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                domain: [30, 80],\n                label: {\n                  value: 'Vibration Data',\n                  angle: -90,\n                  position: 'center',\n                  paddingRight: '20px',\n                  dy: -10\n                },\n                width: 80\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                y: 45,\n                stroke: \"red\",\n                strokeDasharray: \"6 6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                y: 60,\n                stroke: \"red\",\n                strokeDasharray: \"6 6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 430,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n                horizontal: false,\n                vertical: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"uv\",\n                stroke: \"#8884d8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"pv\",\n                stroke: \"#82ca9d\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 425,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.rchart,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.content,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Parameter 4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 444,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n              width: 500,\n              height: 300,\n              data: arr,\n              children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                dataKey: \"name\",\n                label: {\n                  value: \"Date\",\n                  position: \"insideBottom\",\n                  dy: 10\n                },\n                height: 45,\n                tick: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 447,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                domain: [30, 80],\n                label: {\n                  value: 'Vibration Data',\n                  angle: -90,\n                  position: 'center',\n                  paddingRight: '20px',\n                  dy: -10\n                },\n                width: 80\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                y: 40,\n                stroke: \"red\",\n                strokeDasharray: \"6 6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                y: 60,\n                stroke: \"red\",\n                strokeDasharray: \"6 6\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n                horizontal: false,\n                vertical: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"uv\",\n                stroke: \"#8884d8\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Line, {\n                type: \"monotone\",\n                dataKey: \"pv\",\n                stroke: \"#82ca9d\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 457,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 24\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 281,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskDashboard, \"+KB5BzXxNaP0YlC3xLhwiTZD3aU=\");\n\n_c = TaskDashboard;\nexport default TaskDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskDashboard\");","map":{"version":3,"sources":["D:/NetraB/netra/src/pages/TaskDashboard/TaskDashboard.js"],"names":["React","useState","useEffect","styles","InputLabel","TextField","makeStyles","Button","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Label","ReferenceLine","MuiPickersUtilsProvider","KeyboardDatePicker","MomentUtils","Navigation","CustomSelect","Autocomplete","TaskDashboard","shipOption","setshipOption","taskOption","settaskOption","missionOption","setmissionOption","fetch","method","headers","Accept","then","res","json","data","mission_data","taskNames","dropDownStyle","root","paddingLeft","background","border","borderRadius","width","minHeight","boxShadow","inputRoot","classes","arr","arr2","i","name","Date","getTime","Math","random","toISOString","slice","uv","floor","showGraph","setShowGraph","onSubmitHandler","setGraphData","setSubSystem","setLoading","missions","selectedMissionName","equipments","selectedEqName","shipClass","selectedShipName","tempMissions","tempMissionData","setMission","console","log","missionInfo","body","JSON","stringify","d","length","newGraphData","newSubSystem","newCardData","forEach","mission","mid","missionData","element","missionName","target","tar_rel","Reliability","ship","shipData","actual","eqpt","eid","eqptData","rel","prob","prob_ac","child","cid","setSubSystemData","setCardData","sid","targetRel","cardData","minThreshold","maxThreshold","mprofile","fontWeight","color","fontSize","marginBottom","option","params","InputProps","disableUnderline","marginTop","midSection","rchart","content","value","position","dy","angle","paddingRight"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAAUC,UAAV,EAAsBC,SAAtB,EAAgCC,UAAhC,EAA2CC,MAA3C,QAAwD,mBAAxD;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,aAAxC,EAAuDC,OAAvD,EAA+DC,KAA/D,EAAqEC,aAArE,QAA0F,UAA1F,C,CACA;;AACA,SACEC,uBADF,EAEEC,kBAFF,QAGO,sBAHP;AAIA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,UAAP,MAAuB,wCAAvB;AAEA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,YAAT,QAA6B,kBAA7B;;;AAIA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACwB,UAAD,EAAaC,aAAb,IAA8BzB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC0B,aAAD,EAAgBC,gBAAhB,IAAoC3B,QAAQ,CAAC,EAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd2B,IAAAA,KAAK,CAAC,qBAAD,EAAwB;AAC3BC,MAAAA,MAAM,EAAE,KADmB;AAE3BC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AAFkB,KAAxB,CAAL,CAOGC,IAPH,CAOSC,GAAD,IAAS;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KATH,EAUGF,IAVH,CAUSG,IAAD,IAAU;AACd;AACA,YAAMC,YAAY,GAAGD,IAAI,CAAC,aAAD,CAAzB;AACA,YAAME,SAAS,GAAGF,IAAI,CAAC,OAAD,CAAtB;AACAR,MAAAA,gBAAgB,CAACS,YAAD,CAAhB;AACAX,MAAAA,aAAa,CAACY,SAAD,CAAb;AACD,KAhBH;AAiBD,GAlBQ,EAkBN,EAlBM,CAAT;AAqBA,QAAMC,aAAa,GAAGjC,UAAU,CAAC;AAC/BkC,IAAAA,IAAI,EAAE;AACJC,MAAAA,WAAW,EAAE,EADT;AAEJC,MAAAA,UAAU,EAAE,MAFR;AAGJC,MAAAA,MAAM,EAAE,mBAHJ;AAIJC,MAAAA,YAAY,EAAE,KAJV;AAKJC,MAAAA,KAAK,EAAE,OALH;AAMJC,MAAAA,SAAS,EAAE,MANP;AAOJC,MAAAA,SAAS,EAAE;AAPP,KADyB;AAU/BC,IAAAA,SAAS,EAAC;AACRH,MAAAA,KAAK,EAAE;AADC;AAVqB,GAAD,CAAhC;AAcA,QAAMI,OAAO,GAACV,aAAa,EAA3B;AACA,MAAIW,GAAG,GAAC,EAAR;AACA,MAAIC,IAAI,GAAC,EAAT;;AACA,OAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,EAAd,EAAiBA,CAAC,EAAlB,EAAqB;AACnB;AACA;AACAF,IAAAA,GAAG,GAAC,CAAC,GAAGA,GAAJ,EAAQ;AAACG,MAAAA,IAAI,EAAC,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqBC,OAArB,KAAiCC,IAAI,CAACC,MAAL,MAAiB,IAAIH,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqBC,OAArB,KAAiC,IAAID,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqBC,OAArB,EAAlD,CAA1C,EAA6HG,WAA7H,GAA2IC,KAA3I,CAAiJ,CAAjJ,EAAmJ,EAAnJ,CAAN;AAA6JC,MAAAA,EAAE,EAACJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACC,MAAL,MAAiB,KAAK,EAAL,GAAU,CAA3B,CAAX,IAA4C;AAA5M,KAAR,CAAJ;AAEAN,IAAAA,IAAI,GAAC,CAAC,GAAGA,IAAJ,EAAS;AAACE,MAAAA,IAAI,EAAC,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqBC,OAArB,KAAiCC,IAAI,CAACC,MAAL,MAAiB,IAAIH,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqBC,OAArB,KAAiC,IAAID,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqBC,OAArB,EAAlD,CAA1C,EAA6HG,WAA7H,GAA2IC,KAA3I,CAAiJ,CAAjJ,EAAmJ,EAAnJ,CAAN;AAA6JC,MAAAA,EAAE,EAACJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACC,MAAL,MAAiB,KAAK,EAAL,GAAU,CAA3B,CAAX,IAA4C;AAA5M,KAAT,CAAL;AACD;;AACD,QAAM,CAACK,SAAD,EAAWC,YAAX,IAAyB9D,QAAQ,CAAC,KAAD,CAAvC;;AAEA,QAAM+D,eAAe,GAAG,MAAM;AAC5BC,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAC,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,UAAM/B,IAAI,GAAG;AACXgC,MAAAA,QAAQ,EAAEC,mBADC;AAEXC,MAAAA,UAAU,EAAEC,cAFD;AAGXC,MAAAA,SAAS,EAAEC,gBAHA;AAIXC,MAAAA,YAAY,EAAEC;AAJH,KAAb;AAMAC,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,WAAZ;AACAlD,IAAAA,KAAK,CAAC,eAAD,EAAkB;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBkD,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAE9C,QAAAA,IAAI,EAAEA;AAAR,OAAf,CAFe;AAGrBL,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AAHY,KAAlB,CAAL,CAQGC,IARH,CAQSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EARjB,EASGF,IATH,CASSkD,CAAD,IAAO;AACXN,MAAAA,OAAO,CAACC,GAAR,CAAYK,CAAZ;;AAEA,UAAI/C,IAAI,CAACgC,QAAL,CAAcgB,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,YAAIhD,IAAI,CAACoC,SAAL,CAAeY,MAAf,IAAyB,CAA7B,EAAgC;AAC9B;AACA,cAAIC,YAAY,GAAG,EAAnB;AACA,cAAIC,YAAY,GAAG,EAAnB;AACA,cAAIC,WAAW,GAAG,EAAlB;AACAnD,UAAAA,IAAI,CAACgC,QAAL,CAAcoB,OAAd,CAAsB,CAACC,OAAD,EAAUC,GAAV,KAAkB;AACtC,gBAAIC,WAAW,GAAGR,CAAC,CAACO,GAAD,CAAD,CAAOD,OAAP,CAAlB;AACAV,YAAAA,WAAW,CAACS,OAAZ,CAAqBI,OAAD,IAAa;AAC/B,kBAAIA,OAAO,CAACC,WAAR,KAAwBJ,OAA5B,EAAqC;AACnCF,gBAAAA,WAAW,CAACG,GAAD,CAAX,GAAmB,EACjB,GAAGH,WAAW,CAACG,GAAD,CADG;AAEjBrC,kBAAAA,IAAI,EAAEoC,OAFW;AAGjBK,kBAAAA,MAAM,EAAEF,OAAO,CAACG;AAHC,iBAAnB;AAKAV,gBAAAA,YAAY,GAAG,CACb,GAAGA,YADU,EAEb;AACEhC,kBAAAA,IAAI,EAAE,oBADR;AAEE2C,kBAAAA,WAAW,EAAEJ,OAAO,CAACG;AAFvB,iBAFa,CAAf;AAOD;AACF,aAfD,EAFsC,CAkBtC;;AACA3D,YAAAA,IAAI,CAACoC,SAAL,CAAegB,OAAf,CAAwBS,IAAD,IAAU;AAC/B,kBAAIC,QAAQ,GAAGP,WAAW,CAACM,IAAD,CAA1B,CAD+B,CAE/B;;AACA,kBAAIE,MAAM,GAAG,EAAb;AACA/D,cAAAA,IAAI,CAACkC,UAAL,CAAgBkB,OAAhB,CAAwB,CAACY,IAAD,EAAOC,GAAP,KAAe;AACrC,oBAAIC,QAAQ,GAAGJ,QAAQ,CAACG,GAAD,CAAR,CAAcD,IAAI,CAAC/C,IAAnB,CAAf;AAEA8C,gBAAAA,MAAM,CAACE,GAAD,CAAN,GAAc;AACZhD,kBAAAA,IAAI,EAAE+C,IAAI,CAAC/C,IADC;AAEZkD,kBAAAA,GAAG,EAAE,MAAMD,QAAQ,CAACC,GAFR;AAGZC,kBAAAA,IAAI,EAAE,MAAMF,QAAQ,CAACG;AAHT,iBAAd;AAMAlB,gBAAAA,WAAW,CAACG,GAAD,CAAX,CAAiBS,MAAjB,GAA0BA,MAA1B;AAEAtB,gBAAAA,OAAO,CAACC,GAAR,CAAYS,WAAZ,EAXqC,CAYrC;;AACAF,gBAAAA,YAAY,GAAG,CACb,GAAGA,YADU,EAEb;AAAEhC,kBAAAA,IAAI,EAAG,GAAE+C,IAAI,CAAC/C,IAAK,EAArB;AAAwB2C,kBAAAA,WAAW,EAAE,MAAMM,QAAQ,CAACC;AAApD,iBAFa,CAAf;AAIAD,gBAAAA,QAAQ,CAACI,KAAT,CAAelB,OAAf,CAAuB,CAACkB,KAAD,EAAQC,GAAR,KAAgB;AACrCrB,kBAAAA,YAAY,CAACqB,GAAD,CAAZ,GAAoB,EAClB,GAAGrB,YAAY,CAACqB,GAAD,CADG;AAElBtD,oBAAAA,IAAI,EAAEqD,KAAK,CAACrD,IAFM;AAGlB,qBAAC+C,IAAI,CAAC/C,IAAN,GAAa,MAAMqD,KAAK,CAACH;AAHP,mBAApB;AAKD,iBAND;AAOD,eAxBD;AAyBD,aA7BD;AA8BD,WAjDD;AAkDAtC,UAAAA,YAAY,CAACoB,YAAD,CAAZ;AACAuB,UAAAA,gBAAgB,CAACtB,YAAD,CAAhB;AACAuB,UAAAA,WAAW,CAACtB,WAAD,CAAX;AACApB,UAAAA,UAAU,CAAC,KAAD,CAAV;AACD,SA3DD,MA2DO;AACL;AACA,cAAIkB,YAAY,GAAG,EAAnB;AACA,cAAIC,YAAY,GAAG,EAAnB;AACA,cAAIC,WAAW,GAAG,EAAlB;AACAnD,UAAAA,IAAI,CAACgC,QAAL,CAAcoB,OAAd,CAAsB,CAACC,OAAD,EAAUC,GAAV,KAAkB;AACtC,gBAAIC,WAAW,GAAGR,CAAC,CAACO,GAAD,CAAD,CAAOD,OAAP,CAAlB;AACAV,YAAAA,WAAW,CAACS,OAAZ,CAAqBI,OAAD,IAAa;AAC/B,kBAAIA,OAAO,CAACC,WAAR,KAAwBJ,OAA5B,EAAqC;AACnCF,gBAAAA,WAAW,CAACG,GAAD,CAAX,GAAmB,EACjB,GAAGH,WAAW,CAACG,GAAD,CADG;AAEjBrC,kBAAAA,IAAI,EAAEoC,OAFW;AAGjBK,kBAAAA,MAAM,EAAEF,OAAO,CAACG;AAHC,iBAAnB;AAKAV,gBAAAA,YAAY,GAAG,CACb,GAAGA,YADU,EAEb;AACEhC,kBAAAA,IAAI,EAAE,oBADR;AAEE2C,kBAAAA,WAAW,EAAEJ,OAAO,CAACG;AAFvB,iBAFa,CAAf;AAOD;AACF,aAfD,EAFsC,CAkBtC;;AACA3D,YAAAA,IAAI,CAACoC,SAAL,CAAegB,OAAf,CAAuB,CAACS,IAAD,EAAOa,GAAP,KAAe;AACpC,kBAAIZ,QAAQ,GAAGP,WAAW,CAACM,IAAD,CAA1B,CADoC,CAEpC;;AACA,kBAAIE,MAAM,GAAG,EAAb;AACA/D,cAAAA,IAAI,CAACkC,UAAL,CAAgBkB,OAAhB,CAAwB,CAACY,IAAD,EAAOC,GAAP,KAAe;AACrC,oBAAIC,QAAQ,GAAGJ,QAAQ,CAACG,GAAD,CAAR,CAAcD,IAAI,CAAC/C,IAAnB,CAAf;AAEA8C,gBAAAA,MAAM,CAACE,GAAD,CAAN,GAAc;AACZhD,kBAAAA,IAAI,EAAE+C,IAAI,CAAC/C,IADC;AAEZkD,kBAAAA,GAAG,EAAE,MAAMD,QAAQ,CAACC,GAFR;AAGZC,kBAAAA,IAAI,EAAE,MAAMF,QAAQ,CAACG;AAHT,iBAAd;AAMAlB,gBAAAA,WAAW,CAACG,GAAD,CAAX,CAAiBS,MAAjB,GAA0BA,MAA1B,CATqC,CAWrC;;AACAd,gBAAAA,YAAY,CAACyB,GAAD,CAAZ,GAAoB,EAClB,GAAGzB,YAAY,CAACyB,GAAD,CADG;AAElBzD,kBAAAA,IAAI,EAAE4C,IAFY;AAGlB,mBAACG,IAAI,CAAC/C,IAAN,GAAa,MAAMiD,QAAQ,CAACC;AAHV,iBAApB;AAKAD,gBAAAA,QAAQ,CAACI,KAAT,CAAelB,OAAf,CAAuB,CAACkB,KAAD,EAAQC,GAAR,KAAgB;AACrCrB,kBAAAA,YAAY,CAACqB,GAAD,CAAZ,GAAoB,EAClB,GAAGrB,YAAY,CAACqB,GAAD,CADG;AAElBtD,oBAAAA,IAAI,EAAE,CAAE,GAAE4C,IAAK,IAAGS,KAAK,CAACrD,IAAK,EAAvB,CAFY;AAGlB,qBAAC4C,IAAD,GAAQ,MAAMS,KAAK,CAACH;AAHF,mBAApB;AAKD,iBAND;AAOD,eAxBD;AAyBD,aA7BD;AA8BD,WAjDD;AAkDAtC,UAAAA,YAAY,CAACoB,YAAD,CAAZ;AACAuB,UAAAA,gBAAgB,CAACtB,YAAD,CAAhB;AACAuB,UAAAA,WAAW,CAACtB,WAAD,CAAX;AACApB,UAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,OAxHD,MAwHO,IAAI/B,IAAI,CAACgC,QAAL,CAAcgB,MAAd,GAAuB,CAA3B,EAA8B;AACnC;AACA,YAAIC,YAAY,GAAG,EAAnB;AACA,YAAIC,YAAY,GAAG,EAAnB;AACA,YAAIC,WAAW,GAAG,EAAlB;AACA,YAAIwB,SAAS,GAAG,EAAhB;AACA3E,QAAAA,IAAI,CAACgC,QAAL,CAAcoB,OAAd,CAAsB,CAACC,OAAD,EAAUC,GAAV,KAAkB;AACtC,cAAIC,WAAW,GAAGR,CAAC,CAACO,GAAD,CAAD,CAAOD,OAAP,CAAlB;AACAV,UAAAA,WAAW,CAACS,OAAZ,CAAqBI,OAAD,IAAa;AAC/B,gBAAIA,OAAO,CAACC,WAAR,KAAwBJ,OAA5B,EAAqC;AACnCF,cAAAA,WAAW,CAACG,GAAD,CAAX,GAAmB,EACjB,GAAGH,WAAW,CAACG,GAAD,CADG;AAEjBrC,gBAAAA,IAAI,EAAEoC,OAFW;AAGjBK,gBAAAA,MAAM,EAAEF,OAAO,CAACG;AAHC,eAAnB;AAKAgB,cAAAA,SAAS,GAAG,EACV,GAAGA,SADO;AAEV1D,gBAAAA,IAAI,EAAE,oBAFI;AAGV,iBAACoC,OAAD,GAAWG,OAAO,CAACG;AAHT,eAAZ;AAKD;AACF,WAbD,EAFsC,CAgBtC;;AACA3D,UAAAA,IAAI,CAACoC,SAAL,CAAegB,OAAf,CAAwBS,IAAD,IAAU;AAC/B,gBAAIC,QAAQ,GAAGP,WAAW,CAACM,IAAD,CAA1B,CAD+B,CAE/B;;AACA,gBAAIE,MAAM,GAAG,EAAb;AACA/D,YAAAA,IAAI,CAACkC,UAAL,CAAgBkB,OAAhB,CAAwB,CAACY,IAAD,EAAOC,GAAP,KAAe;AACrC,kBAAIC,QAAQ,GAAGJ,QAAQ,CAACG,GAAD,CAAR,CAAcD,IAAI,CAAC/C,IAAnB,CAAf;AAEA8C,cAAAA,MAAM,CAACE,GAAD,CAAN,GAAc;AACZhD,gBAAAA,IAAI,EAAE+C,IAAI,CAAC/C,IADC;AAEZkD,gBAAAA,GAAG,EAAE,MAAMD,QAAQ,CAACC,GAFR;AAGZC,gBAAAA,IAAI,EAAE,MAAMF,QAAQ,CAACG;AAHT,eAAd;AAMAlB,cAAAA,WAAW,CAACG,GAAD,CAAX,CAAiBS,MAAjB,GAA0BA,MAA1B,CATqC,CAWrC;;AACAd,cAAAA,YAAY,CAACgB,GAAD,CAAZ,GAAoB,EAClB,GAAGhB,YAAY,CAACgB,GAAD,CADG;AAElBhD,gBAAAA,IAAI,EAAE+C,IAAI,CAAC/C,IAFO;AAGlB,iBAACoC,OAAD,GAAW,MAAMa,QAAQ,CAACC;AAHR,eAApB;AAKAD,cAAAA,QAAQ,CAACI,KAAT,CAAelB,OAAf,CAAuB,CAACkB,KAAD,EAAQC,GAAR,KAAgB;AACrCrB,gBAAAA,YAAY,CAACqB,GAAD,CAAZ,GAAoB,EAClB,GAAGrB,YAAY,CAACqB,GAAD,CADG;AAElBtD,kBAAAA,IAAI,EAAE,CAAE,GAAE+C,IAAI,CAAC/C,IAAK,IAAGqD,KAAK,CAACrD,IAAK,EAA5B,CAFY;AAGlB,mBAACoC,OAAD,GAAW,MAAMiB,KAAK,CAACH;AAHL,iBAApB;AAKD,eAND;AAOD,aAxBD;AAyBD,WA7BD;AA8BD,SA/CD;AAgDAlB,QAAAA,YAAY,GAAG,CAAC0B,SAAD,EAAY,GAAG1B,YAAf,CAAf;AACApB,QAAAA,YAAY,CAACoB,YAAD,CAAZ;AACAuB,QAAAA,gBAAgB,CAACtB,YAAD,CAAhB;AACAuB,QAAAA,WAAW,CAACtB,WAAD,CAAX;AACApB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACAU,QAAAA,OAAO,CAACC,GAAR,CAAYkC,QAAZ;AACD;AACF,KAjMH;AAkMD,GA9MD;;AAgNA,QAAMC,YAAY,GAAC,EAAnB;AACA,QAAMC,YAAY,GAAC,EAAnB;AACA,sBACE,QAAC,uBAAD;AAAyB,IAAA,KAAK,EAAEhG,WAAhC;AAAA,4BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAEf,MAAM,CAAC6E,IAAvB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAE7E,MAAM,CAACgH,QAAvB;AAAA,gCAiBE;AAAK,UAAA,KAAK,EAAE;AAAEtE,YAAAA,KAAK,EAAE;AAAT,WAAZ;AAAA,kCACE,QAAC,UAAD;AACE,YAAA,KAAK,EAAE;AACLuE,cAAAA,UAAU,EAAE,MADP;AAELC,cAAAA,KAAK,EAAE,OAFF;AAGLC,cAAAA,QAAQ,EAAE,MAHL;AAILC,cAAAA,YAAY,EAAE;AAJT,aADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAYE,QAAC,YAAD;AACA,YAAA,OAAO,EAAEtE,OADT;AAEE,YAAA,QAAQ,MAFV;AAGE,YAAA,EAAE,EAAC,eAHL;AAIE,YAAA,OAAO,EAAExB,UAJX;AAKE,YAAA,cAAc,EAAG+F,MAAD,IAAYA,MAAM,CAACnE,IALrC;AAOE,YAAA,WAAW,EAAGoE,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,cAAA,UAAU,EAAE,EAAC,GAAGA,MAAM,CAACC,UAAX;AAAuBC,gBAAAA,gBAAgB,EAAE;AAAzC,eAFd;AAGE,cAAA,OAAO,EAAC,UAHV,CAIE;AACA;;AALF;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,kBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBF,eAiDE;AAAK,UAAA,KAAK,EAAE;AAAE9E,YAAAA,KAAK,EAAE;AAAT,WAAZ;AAAA,kCACE,QAAC,UAAD;AACE,YAAA,KAAK,EAAE;AACLuE,cAAAA,UAAU,EAAE,MADP;AAELC,cAAAA,KAAK,EAAE,OAFF;AAGLC,cAAAA,QAAQ,EAAE,MAHL;AAILC,cAAAA,YAAY,EAAE;AAJT,aADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAYE,QAAC,YAAD;AACA,YAAA,OAAO,EAAEtE,OADT;AAEE,YAAA,QAAQ,MAFV;AAGE,YAAA,EAAE,EAAC,eAHL;AAIE,YAAA,OAAO,EAAEtB,aAJX;AAKE,YAAA,cAAc,EAAG6F,MAAD,IAAYA,MAAM,CAAC3B,WALrC;AAME,YAAA,WAAW,EAAG4B,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,cAAA,UAAU,EAAE,EAAC,GAAGA,MAAM,CAACC,UAAX;AAAuBC,gBAAAA,gBAAgB,EAAE;AAAzC,eAFd;AAGE,cAAA,OAAO,EAAC,UAHV,CAIE;AACA;;AALF;AAAA;AAAA;AAAA;AAAA;AAPJ;AAAA;AAAA;AAAA;AAAA,kBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjDF,eAgFE,QAAC,MAAD;AACE,UAAA,OAAO,EAAC,WADV;AAEE,UAAA,KAAK,EAAC,SAFR;AAGE,UAAA,KAAK,EAAE;AACLC,YAAAA,SAAS,EAAE;AADN,WAHT;AAME,UAAA,OAAO,EAAE5D,eANX;AAAA,qBAOEa,OAAO,CAACC,GAAR,CAAY5B,GAAG,CAACA,GAAG,CAACkC,MAAJ,GAAW,CAAZ,CAAH,CAAkB,IAAlB,IAAwB,QAApC,CAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAmGOtB,SAAS,gBAAC;AAAK,QAAA,SAAS,EAAE3D,MAAM,CAAC0H,UAAvB;AAAA,gCAEX;AAAK,UAAA,SAAS,EAAE1H,MAAM,CAAC2H,MAAvB;AAAA,iCACI;AAAK,YAAA,SAAS,EAAE3H,MAAM,CAAC4H,OAAvB;AAAA,oCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,eAEA,QAAC,SAAD;AAAW,cAAA,KAAK,EAAE,GAAlB;AAAuB,cAAA,MAAM,EAAE,GAA/B;AAAoC,cAAA,IAAI,EAAE5E,IAA1C;AAAA,sCACE,QAAC,KAAD;AAAO,gBAAA,OAAO,EAAC,MAAf;AAAsB,gBAAA,IAAI,EAAE,KAA5B;AAAmC,gBAAA,KAAK,EAAE;AAAE6E,kBAAAA,KAAK,EAAE,MAAT;AAAiBC,kBAAAA,QAAQ,EAAE,cAA3B;AAA2CC,kBAAAA,EAAE,EAAE;AAA/C,iBAA1C;AAA8F,gBAAA,MAAM,EAAE;AAAtG;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,KAAD;AAAO,gBAAA,MAAM,EAAE,CAAC,EAAD,EAAI,EAAJ,CAAf;AAAwB,gBAAA,KAAK,EAAE;AAAEF,kBAAAA,KAAK,EAAE,gBAAT;AAA2BG,kBAAAA,KAAK,EAAE,CAAC,EAAnC;AAAuCF,kBAAAA,QAAQ,EAAE,QAAjD;AAA2DG,kBAAAA,YAAY,EAAC,MAAxE;AAAgFF,kBAAAA,EAAE,EAAE,CAAC;AAArF,iBAA/B;AAAyH,gBAAA,KAAK,EAAE;AAAhI;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE,QAAC,aAAD;AAAe,gBAAA,CAAC,EAAE,EAAlB;AAAsB,gBAAA,MAAM,EAAC,KAA7B;AAAmC,gBAAA,eAAe,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,sBAHF,eAIE,QAAC,aAAD;AAAe,gBAAA,CAAC,EAAE,EAAlB;AAAsB,gBAAA,MAAM,EAAC,KAA7B;AAAmC,gBAAA,eAAe,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,sBAJF,eAKE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,sBALF,eAME,QAAC,aAAD;AAAe,gBAAA,UAAU,EAAE,KAA3B;AAAkC,gBAAA,QAAQ,EAAE;AAA5C;AAAA;AAAA;AAAA;AAAA,sBANF,eAQE,QAAC,IAAD;AAAM,gBAAA,IAAI,EAAC,UAAX;AAAsB,gBAAA,OAAO,EAAC,IAA9B;AAAmC,gBAAA,MAAM,EAAEhB,YAAY,IAAE/D,IAAI,CAACA,IAAI,CAACiC,MAAL,GAAY,CAAb,CAAJ,CAAoB,IAApB,CAAd,IAA2CjC,IAAI,CAACA,IAAI,CAACiC,MAAL,GAAY,CAAb,CAAJ,CAAoB,IAApB,KAA2B6B,YAAtE,GAAmF,OAAnF,GAA2F;AAAtI;AAAA;AAAA;AAAA;AAAA,sBARF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFW,eAmBT;AAAK,UAAA,SAAS,EAAE9G,MAAM,CAAC2H,MAAvB;AAAA,iCACE;AAAK,YAAA,SAAS,EAAE3H,MAAM,CAAC4H,OAAvB;AAAA,oCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,eAEA,QAAC,SAAD;AAAW,cAAA,KAAK,EAAE,GAAlB;AAAuB,cAAA,MAAM,EAAE,GAA/B;AAAoC,cAAA,IAAI,EAAE5E,IAA1C;AAAA,sCACE,QAAC,KAAD;AAAO,gBAAA,OAAO,EAAC,MAAf;AAAsB,gBAAA,IAAI,EAAE,KAA5B;AAAmC,gBAAA,KAAK,EAAE;AAAE6E,kBAAAA,KAAK,EAAE,MAAT;AAAiBC,kBAAAA,QAAQ,EAAE,cAA3B;AAA2CC,kBAAAA,EAAE,EAAE;AAA/C,iBAA1C;AAA8F,gBAAA,MAAM,EAAE;AAAtG;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,KAAD;AAAO,gBAAA,MAAM,EAAE,CAAC,EAAD,EAAI,EAAJ,CAAf;AAAwB,gBAAA,KAAK,EAAE;AAAEF,kBAAAA,KAAK,EAAE,gBAAT;AAA2BG,kBAAAA,KAAK,EAAE,CAAC,EAAnC;AAAuCF,kBAAAA,QAAQ,EAAE,QAAjD;AAA2DG,kBAAAA,YAAY,EAAC,MAAxE;AAAgFF,kBAAAA,EAAE,EAAE,CAAC;AAArF,iBAA/B;AAAyH,gBAAA,KAAK,EAAE;AAAhI;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE,QAAC,aAAD;AAAe,gBAAA,CAAC,EAAE,EAAlB;AAAsB,gBAAA,MAAM,EAAC,KAA7B;AAAmC,gBAAA,eAAe,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,sBAHF,eAIE,QAAC,aAAD;AAAe,gBAAA,CAAC,EAAE,EAAlB;AAAsB,gBAAA,MAAM,EAAC,KAA7B;AAAmC,gBAAA,eAAe,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,sBAJF,eAKE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,sBALF,eAME,QAAC,aAAD;AAAe,gBAAA,UAAU,EAAE,KAA3B;AAAkC,gBAAA,QAAQ,EAAE;AAA5C;AAAA;AAAA;AAAA;AAAA,sBANF,eAOE,QAAC,IAAD;AAAM,gBAAA,IAAI,EAAC,UAAX;AAAsB,gBAAA,OAAO,EAAC,IAA9B;AAAmC,gBAAA,MAAM,EAAEhB,YAAY,IAAE/D,IAAI,CAACA,IAAI,CAACiC,MAAL,GAAY,CAAb,CAAJ,CAAoB,IAApB,CAAd,IAA2CjC,IAAI,CAACA,IAAI,CAACiC,MAAL,GAAY,CAAb,CAAJ,CAAoB,IAApB,KAA2B6B,YAAtE,GAAmF,OAAnF,GAA2F;AAAtI;AAAA;AAAA;AAAA;AAAA,sBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAnBS,eAwCT;AAAK,UAAA,SAAS,EAAE9G,MAAM,CAAC2H,MAAvB;AAAA,iCACE;AAAK,YAAA,SAAS,EAAE3H,MAAM,CAAC4H,OAAvB;AAAA,oCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,eAEA,QAAC,SAAD;AAAW,cAAA,KAAK,EAAE,GAAlB;AAAuB,cAAA,MAAM,EAAE,GAA/B;AAAoC,cAAA,IAAI,EAAE7E,GAA1C;AAAA,sCACE,QAAC,KAAD;AAAO,gBAAA,OAAO,EAAC,MAAf;AAAsB,gBAAA,IAAI,EAAE,KAA5B;AAAmC,gBAAA,KAAK,EAAE;AAAE8E,kBAAAA,KAAK,EAAE,MAAT;AAAiBC,kBAAAA,QAAQ,EAAE,cAA3B;AAA2CC,kBAAAA,EAAE,EAAE;AAA/C,iBAA1C;AAA8F,gBAAA,MAAM,EAAE;AAAtG;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,KAAD;AAAO,gBAAA,MAAM,EAAE,CAAC,EAAD,EAAI,EAAJ,CAAf;AAAwB,gBAAA,KAAK,EAAE;AAAEF,kBAAAA,KAAK,EAAE,gBAAT;AAA2BG,kBAAAA,KAAK,EAAE,CAAC,EAAnC;AAAuCF,kBAAAA,QAAQ,EAAE,QAAjD;AAA2DG,kBAAAA,YAAY,EAAC,MAAxE;AAAgFF,kBAAAA,EAAE,EAAE,CAAC;AAArF,iBAA/B;AAAyH,gBAAA,KAAK,EAAE;AAAhI;AAAA;AAAA;AAAA;AAAA,sBAFF,eAGE,QAAC,aAAD;AAAe,gBAAA,CAAC,EAAE,EAAlB;AAAsB,gBAAA,MAAM,EAAC,KAA7B;AAAmC,gBAAA,eAAe,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,sBAHF,eAIE,QAAC,aAAD;AAAe,gBAAA,CAAC,EAAE,EAAlB;AAAsB,gBAAA,MAAM,EAAC,KAA7B;AAAmC,gBAAA,eAAe,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,sBAJF,eAKE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,sBALF,eAME,QAAC,aAAD;AAAe,gBAAA,UAAU,EAAE,KAA3B;AAAkC,gBAAA,QAAQ,EAAE;AAA5C;AAAA;AAAA;AAAA;AAAA,sBANF,eAOE,QAAC,IAAD;AAAM,gBAAA,IAAI,EAAC,UAAX;AAAsB,gBAAA,OAAO,EAAC,IAA9B;AAAmC,gBAAA,MAAM,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,sBAPF,eAQE,QAAC,IAAD;AAAM,gBAAA,IAAI,EAAC,UAAX;AAAsB,gBAAA,OAAO,EAAC,IAA9B;AAAmC,gBAAA,MAAM,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,sBARF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAxCS,eA4DT;AAAK,UAAA,SAAS,EAAE/H,MAAM,CAAC2H,MAAvB;AAAA,iCACE;AAAK,YAAA,SAAS,EAAE3H,MAAM,CAAC4H,OAAvB;AAAA,oCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,eAEA,QAAC,SAAD;AAAW,cAAA,KAAK,EAAE,GAAlB;AAAuB,cAAA,MAAM,EAAE,GAA/B;AAAoC,cAAA,IAAI,EAAE7E,GAA1C;AAAA,sCAEA,QAAC,KAAD;AAAO,gBAAA,OAAO,EAAC,MAAf;AAAsB,gBAAA,KAAK,EAAE;AAAE8E,kBAAAA,KAAK,EAAE,MAAT;AAAiBC,kBAAAA,QAAQ,EAAE,cAA3B;AAA2CC,kBAAAA,EAAE,EAAE;AAA/C,iBAA7B;AAAiF,gBAAA,MAAM,EAAE,EAAzF;AAA6F,gBAAA,IAAI,EAAE;AAAnG;AAAA;AAAA;AAAA;AAAA,sBAFA,eAIE,QAAC,KAAD;AAAO,gBAAA,MAAM,EAAE,CAAC,EAAD,EAAI,EAAJ,CAAf;AAAwB,gBAAA,KAAK,EAAE;AAAEF,kBAAAA,KAAK,EAAE,gBAAT;AAA2BG,kBAAAA,KAAK,EAAE,CAAC,EAAnC;AAAuCF,kBAAAA,QAAQ,EAAE,QAAjD;AAA2DG,kBAAAA,YAAY,EAAC,MAAxE;AAAgFF,kBAAAA,EAAE,EAAE,CAAC;AAArF,iBAA/B;AAAyH,gBAAA,KAAK,EAAE;AAAhI;AAAA;AAAA;AAAA;AAAA,sBAJF,eAOE,QAAC,aAAD;AAAe,gBAAA,CAAC,EAAE,EAAlB;AAAsB,gBAAA,MAAM,EAAC,KAA7B;AAAmC,gBAAA,eAAe,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,sBAPF,eAQE,QAAC,aAAD;AAAe,gBAAA,CAAC,EAAE,EAAlB;AAAsB,gBAAA,MAAM,EAAC,KAA7B;AAAmC,gBAAA,eAAe,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,sBARF,eASE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,sBATF,eAUE,QAAC,aAAD;AAAe,gBAAA,UAAU,EAAE,KAA3B;AAAkC,gBAAA,QAAQ,EAAE;AAA5C;AAAA;AAAA;AAAA;AAAA,sBAVF,eAWE,QAAC,IAAD;AAAM,gBAAA,IAAI,EAAC,UAAX;AAAsB,gBAAA,OAAO,EAAC,IAA9B;AAAmC,gBAAA,MAAM,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,sBAXF,eAYE,QAAC,IAAD;AAAM,gBAAA,IAAI,EAAC,UAAX;AAAsB,gBAAA,OAAO,EAAC,IAA9B;AAAmC,gBAAA,MAAM,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA,sBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBA5DS;AAAA;AAAA;AAAA;AAAA;AAAA,cAAD,GAsFH,IAzLb;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmMD,CAzcD;;GAAM5G,a;;KAAAA,a;AA0cN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./TaskDashboard.module.css\";\r\nimport {  InputLabel, TextField,makeStyles,Button} from \"@material-ui/core\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip,Label,ReferenceLine } from 'recharts';\r\n// import { arr,arr2 } from \"./data\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\n\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\n\r\n\r\nconst TaskDashboard = () => {\r\n  const [shipOption, setshipOption] = useState([]);\r\n  const [taskOption, settaskOption] = useState([]);\r\n  const [missionOption, setmissionOption] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/task_dash_populate\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        debugger;\r\n        const mission_data = data[\"missionData\"];\r\n        const taskNames = data[\"tasks\"]\r\n        setmissionOption(mission_data);\r\n        settaskOption(taskNames);      \r\n      });\r\n  }, []);\r\n\r\n\r\n  const dropDownStyle = makeStyles({\r\n    root: {\r\n      paddingLeft: 10,\r\n      background: \"#fff\",\r\n      border: \"1px solid #0263a1\",\r\n      borderRadius: \"5px\",\r\n      width: \"320px\",\r\n      minHeight: \"40px\",\r\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n    },\r\n    inputRoot:{\r\n      width: '100%'\r\n    },\r\n  });\r\n  const classes=dropDownStyle();\r\n  let arr=[]\r\n  let arr2=[]\r\n  for(let i=0;i<50;i++){\r\n    // const maxDate = Date.now();\r\n    // const timestamp = Math.floor(Math.random() * maxDate);\r\n    arr=[...arr,{name:new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0,10),uv:Math.floor(Math.random() * (80 - 30 + 1)) + 30}]\r\n\r\n    arr2=[...arr2,{name:new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0,10),uv:Math.floor(Math.random() * (75 - 30 + 1)) + 30}]\r\n  }\r\n  const [showGraph,setShowGraph]=useState(false);\r\n\r\n  const onSubmitHandler = () => {\r\n    setGraphData([]);\r\n    setSubSystem(false);\r\n    setLoading(true);\r\n    const data = {\r\n      missions: selectedMissionName,\r\n      equipments: selectedEqName,\r\n      shipClass: selectedShipName,\r\n      tempMissions: tempMissionData,\r\n    };\r\n    setMission(0);\r\n    console.log(missionInfo);\r\n    fetch(\"/rel_estimate\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ data: data }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        console.log(d);\r\n\r\n        if (data.missions.length == 1) {\r\n          if (data.shipClass.length == 1) {\r\n            //for Single Ship and Single Mission\r\n            let newGraphData = [];\r\n            let newSubSystem = [];\r\n            let newCardData = [];\r\n            data.missions.forEach((mission, mid) => {\r\n              let missionData = d[mid][mission];\r\n              missionInfo.forEach((element) => {\r\n                if (element.missionName === mission) {\r\n                  newCardData[mid] = {\r\n                    ...newCardData[mid],\r\n                    name: mission,\r\n                    target: element.tar_rel,\r\n                  };\r\n                  newGraphData = [\r\n                    ...newGraphData,\r\n                    {\r\n                      name: \"Target Reliability\",\r\n                      Reliability: element.tar_rel,\r\n                    },\r\n                  ];\r\n                }\r\n              });\r\n              //console.log(missionData)\r\n              data.shipClass.forEach((ship) => {\r\n                let shipData = missionData[ship];\r\n                //console.log(shipData);\r\n                let actual = [];\r\n                data.equipments.forEach((eqpt, eid) => {\r\n                  let eqptData = shipData[eid][eqpt.name];\r\n\r\n                  actual[eid] = {\r\n                    name: eqpt.name,\r\n                    rel: 100 * eqptData.rel,\r\n                    prob: 100 * eqptData.prob_ac,\r\n                  };\r\n\r\n                  newCardData[mid].actual = actual;\r\n\r\n                  console.log(newCardData);\r\n                  //console.log(eqptData);\r\n                  newGraphData = [\r\n                    ...newGraphData,\r\n                    { name: `${eqpt.name}`, Reliability: 100 * eqptData.rel },\r\n                  ];\r\n                  eqptData.child.forEach((child, cid) => {\r\n                    newSubSystem[cid] = {\r\n                      ...newSubSystem[cid],\r\n                      name: child.name,\r\n                      [eqpt.name]: 100 * child.rel,\r\n                    };\r\n                  });\r\n                });\r\n              });\r\n            });\r\n            setGraphData(newGraphData);\r\n            setSubSystemData(newSubSystem);\r\n            setCardData(newCardData);\r\n            setLoading(false);\r\n          } else {\r\n            //for many Ship Classes and Single Mission\r\n            let newGraphData = [];\r\n            let newSubSystem = [];\r\n            let newCardData = [];\r\n            data.missions.forEach((mission, mid) => {\r\n              let missionData = d[mid][mission];\r\n              missionInfo.forEach((element) => {\r\n                if (element.missionName === mission) {\r\n                  newCardData[mid] = {\r\n                    ...newCardData[mid],\r\n                    name: mission,\r\n                    target: element.tar_rel,\r\n                  };\r\n                  newGraphData = [\r\n                    ...newGraphData,\r\n                    {\r\n                      name: \"Target Reliability\",\r\n                      Reliability: element.tar_rel,\r\n                    },\r\n                  ];\r\n                }\r\n              });\r\n              //console.log(missionData)\r\n              data.shipClass.forEach((ship, sid) => {\r\n                let shipData = missionData[ship];\r\n                //console.log(shipData);\r\n                let actual = [];\r\n                data.equipments.forEach((eqpt, eid) => {\r\n                  let eqptData = shipData[eid][eqpt.name];\r\n\r\n                  actual[eid] = {\r\n                    name: eqpt.name,\r\n                    rel: 100 * eqptData.rel,\r\n                    prob: 100 * eqptData.prob_ac,\r\n                  };\r\n\r\n                  newCardData[mid].actual = actual;\r\n\r\n                  //console.log(eqptData);\r\n                  newGraphData[sid] = {\r\n                    ...newGraphData[sid],\r\n                    name: ship,\r\n                    [eqpt.name]: 100 * eqptData.rel,\r\n                  };\r\n                  eqptData.child.forEach((child, cid) => {\r\n                    newSubSystem[cid] = {\r\n                      ...newSubSystem[cid],\r\n                      name: [`${ship} ${child.name}`],\r\n                      [ship]: 100 * child.rel,\r\n                    };\r\n                  });\r\n                });\r\n              });\r\n            });\r\n            setGraphData(newGraphData);\r\n            setSubSystemData(newSubSystem);\r\n            setCardData(newCardData);\r\n            setLoading(false);\r\n          }\r\n        } else if (data.missions.length > 1) {\r\n          //for many Missions\r\n          let newGraphData = [];\r\n          let newSubSystem = [];\r\n          let newCardData = [];\r\n          let targetRel = {};\r\n          data.missions.forEach((mission, mid) => {\r\n            let missionData = d[mid][mission];\r\n            missionInfo.forEach((element) => {\r\n              if (element.missionName === mission) {\r\n                newCardData[mid] = {\r\n                  ...newCardData[mid],\r\n                  name: mission,\r\n                  target: element.tar_rel,\r\n                };\r\n                targetRel = {\r\n                  ...targetRel,\r\n                  name: \"Target Reliability\",\r\n                  [mission]: element.tar_rel,\r\n                };\r\n              }\r\n            });\r\n            //console.log(missionData)\r\n            data.shipClass.forEach((ship) => {\r\n              let shipData = missionData[ship];\r\n              //console.log(shipData);\r\n              let actual = [];\r\n              data.equipments.forEach((eqpt, eid) => {\r\n                let eqptData = shipData[eid][eqpt.name];\r\n\r\n                actual[eid] = {\r\n                  name: eqpt.name,\r\n                  rel: 100 * eqptData.rel,\r\n                  prob: 100 * eqptData.prob_ac,\r\n                };\r\n\r\n                newCardData[mid].actual = actual;\r\n\r\n                //console.log(eqptData);\r\n                newGraphData[eid] = {\r\n                  ...newGraphData[eid],\r\n                  name: eqpt.name,\r\n                  [mission]: 100 * eqptData.rel,\r\n                };\r\n                eqptData.child.forEach((child, cid) => {\r\n                  newSubSystem[cid] = {\r\n                    ...newSubSystem[cid],\r\n                    name: [`${eqpt.name} ${child.name}`],\r\n                    [mission]: 100 * child.rel,\r\n                  };\r\n                });\r\n              });\r\n            });\r\n          });\r\n          newGraphData = [targetRel, ...newGraphData];\r\n          setGraphData(newGraphData);\r\n          setSubSystemData(newSubSystem);\r\n          setCardData(newCardData);\r\n          setLoading(false);\r\n          console.log(cardData);\r\n        }\r\n      });\r\n  };\r\n\r\n  const minThreshold=45\r\n  const maxThreshold=60\r\n  return (\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        <div className={styles.mprofile}>\r\n          {/* <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Ship Name\r\n            </InputLabel>\r\n            <CustomSelect fields={['a','b','c','d','e']}/>\r\n              \r\n           \r\n            \r\n          </div> */}\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Task Name\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n            classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={taskOption}\r\n              getOptionLabel={(option) => option.name}\r\n              \r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{...params.InputProps, disableUnderline: true}}\r\n                  variant=\"standard\"\r\n                  // label=\"Multiple values\"\r\n                  // placeholder=\"Favorites\"\r\n                />\r\n              )}\r\n            />\r\n            \r\n          </div>\r\n          \r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Select Mission\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n            classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={missionOption}\r\n              getOptionLabel={(option) => option.missionName}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{...params.InputProps, disableUnderline: true}}\r\n                  variant=\"standard\"\r\n                  // label=\"Multiple values\"\r\n                  // placeholder=\"Favorites\"\r\n                />\r\n              )}\r\n            />\r\n            \r\n          </div>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              marginTop: \"2rem\",\r\n            }}\r\n            onClick={onSubmitHandler} \r\n          >{console.log(arr[arr.length-1][\"uv\"]+\"hello2\")}\r\n            Submit\r\n          </Button>\r\n\r\n\r\n         \r\n          \r\n        </div>\r\n        \r\n        \r\n        \r\n            {showGraph?<div className={styles.midSection}>\r\n\r\n            <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                <div>Parameter 1</div>\r\n                <LineChart width={550} height={300} data={arr2}>\r\n                  <XAxis dataKey=\"name\" tick={false} label={{ value: \"Date\", position: \"insideBottom\", dy: 10}} height={45} />\r\n                  <YAxis domain={[30,75]} label={{ value: 'Vibration Data', angle: -90, position: 'center' ,paddingRight:'20px', dy: -10}} width={80}/>\r\n                  <ReferenceLine y={45} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <ReferenceLine y={60} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <Tooltip />\r\n                  <CartesianGrid horizontal={false} vertical={false}/>\r\n                  \r\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke={maxThreshold>=arr2[arr2.length-1][\"uv\"] && arr2[arr2.length-1][\"uv\"]>=minThreshold?\"green\":\"red\"} />\r\n                 \r\n                </LineChart>\r\n                </div>\r\n              </div>\r\n\r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                <div>Parameter 2</div>\r\n                <LineChart width={550} height={300} data={arr2}>\r\n                  <XAxis dataKey=\"name\" tick={false} label={{ value: \"Date\", position: \"insideBottom\", dy: 10}} height={45} />\r\n                  <YAxis domain={[30,75]} label={{ value: 'Vibration Data', angle: -90, position: 'center' ,paddingRight:'20px', dy: -10}} width={80}/>\r\n                  <ReferenceLine y={45} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <ReferenceLine y={60} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <Tooltip />\r\n                  <CartesianGrid horizontal={false} vertical={false}/>\r\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke={maxThreshold>=arr2[arr2.length-1][\"uv\"] && arr2[arr2.length-1][\"uv\"]>=minThreshold?\"green\":\"red\"} />\r\n                  \r\n                </LineChart>\r\n\r\n\r\n    \r\n                 \r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                <div>Parameter 3</div>\r\n                <LineChart width={550} height={300} data={arr}>\r\n                  <XAxis dataKey=\"name\" tick={false} label={{ value: \"Date\", position: \"insideBottom\", dy: 10}} height={45} />\r\n                  <YAxis domain={[30,80]} label={{ value: 'Vibration Data', angle: -90, position: 'center' ,paddingRight:'20px', dy: -10}} width={80}/>\r\n                  <ReferenceLine y={45} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <ReferenceLine y={60} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <Tooltip />\r\n                  <CartesianGrid horizontal={false} vertical={false}/>\r\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\r\n                  <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n\r\n\r\n    \r\n                 \r\n                </div>\r\n              </div>\r\n            \r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                <div>Parameter 4</div>\r\n                <LineChart width={500} height={300} data={arr}>\r\n                \r\n                <XAxis dataKey=\"name\" label={{ value: \"Date\", position: \"insideBottom\", dy: 10}} height={45} tick={false} />\r\n                 \r\n                  <YAxis domain={[30,80]} label={{ value: 'Vibration Data', angle: -90, position: 'center' ,paddingRight:'20px', dy: -10}} width={80}/>\r\n\r\n                  \r\n                  <ReferenceLine y={40} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <ReferenceLine y={60} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <Tooltip />\r\n                  <CartesianGrid horizontal={false} vertical={false}/>\r\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\r\n                  <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n\r\n                \r\n    \r\n                 \r\n                </div>\r\n              </div>\r\n\r\n              \r\n             \r\n            </div>:null}\r\n            \r\n          \r\n        \r\n      </div>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\nexport default TaskDashboard;\r\n"]},"metadata":{},"sourceType":"module"}