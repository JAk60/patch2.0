{"ast":null,"code":"var _jsxFileName = \"D:\\\\NETRA -P\\\\Netra\\\\netra\\\\src\\\\pages\\\\CDashboard\\\\CGraph.js\";\nimport React from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\";\nimport styles from \"./CDashboard.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CGraph = ({\n  graphData,\n  selectedParameterNames\n}) => {\n  // Group the data by parameter name\n  const groupedData = graphData.reduce((acc, cur) => {\n    if (!acc[cur.name]) {\n      acc[cur.name] = {\n        equipmentName: cur.name,\n        componentName: cur.name,\n        parameterName: cur.name,\n        data: []\n      };\n    }\n\n    acc[cur.name].data.push(cur);\n    return acc;\n  }, {});\n  const paramChartData = Object.values(groupedData);\n  console.log(paramChartData);\n  const filteredParamChartData = paramChartData.filter(param => {\n    return selectedParameterNames.includes(param.parameterName);\n  });\n  console.log(filteredParamChartData); // Utility function to convert date string to Date object\n\n  const parseDate = dateString => {\n    const dateParts = dateString.split(\", \")[0].split(\"/\");\n    const timeParts = dateString.split(\", \")[1].split(\":\");\n    const year = parseInt(dateParts[2], 10);\n    const month = parseInt(dateParts[1], 10) - 1; // Months are 0-based in JavaScript Date\n\n    const day = parseInt(dateParts[0], 10);\n    const hour = parseInt(timeParts[0], 10);\n    const minute = parseInt(timeParts[1], 10);\n    const second = parseInt(timeParts[2], 10);\n    return new Date(year, month, day, hour, minute, second);\n  };\n\n  const getDomainByUnit = (unit, minThreshold, maxThreshold) => {\n    const adjustedMin = minThreshold / 1.5;\n    const adjustedMax = maxThreshold * 1.5;\n    console.log(adjustedMin, adjustedMax);\n\n    switch (unit) {\n      case \"RMS\":\n        return [adjustedMin, adjustedMax];\n\n      case \"kg\":\n        return [adjustedMin, adjustedMax];\n\n      case \"deg C\":\n        return [adjustedMin, adjustedMax];\n      // Add more cases for other units as needed\n\n      default:\n        return [adjustedMin, adjustedMax];\n    }\n  };\n\n  const sortDataByDate = data => {\n    return data.sort((a, b) => {\n      const dateA = parseDate(a.date);\n      const dateB = parseDate(b.date);\n      return dateA - dateB;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.midSection,\n    children: filteredParamChartData.map(param => {\n      var _sortedData$, _sortedData$2, _sortedData$value, _sortedData, _sortedData$value2, _sortedData2, _sortedData$3, _param$data$;\n\n      if (param.data.length === 0) {\n        return null;\n      }\n\n      const sortedData = sortDataByDate(param.data);\n      const minThreshold = parseInt((_sortedData$ = sortedData[0]) === null || _sortedData$ === void 0 ? void 0 : _sortedData$.min_value);\n      const maxThreshold = parseInt((_sortedData$2 = sortedData[0]) === null || _sortedData$2 === void 0 ? void 0 : _sortedData$2.max_value);\n      const crossingThreshold = ((_sortedData$value = (_sortedData = sortedData[sortedData.length - 1]) === null || _sortedData === void 0 ? void 0 : _sortedData.value) !== null && _sortedData$value !== void 0 ? _sortedData$value : 0) < minThreshold || ((_sortedData$value2 = (_sortedData2 = sortedData[sortedData.length - 1]) === null || _sortedData2 === void 0 ? void 0 : _sortedData2.value) !== null && _sortedData$value2 !== void 0 ? _sortedData$value2 : 0) > maxThreshold;\n      const unit = (_sortedData$3 = sortedData[0]) === null || _sortedData$3 === void 0 ? void 0 : _sortedData$3.unit;\n      const yDomain = getDomainByUnit(unit, minThreshold, maxThreshold);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.rchart}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.content} ${crossingThreshold ? styles.blinkingChart : \"\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [crossingThreshold, /*#__PURE__*/_jsxDEV(\"text\", {\n              x: 550 / 2 // Center the text horizontally\n              ,\n              y: 10 // Position the text 10 units from the top\n              ,\n              textAnchor: \"middle\" // Center the text relative to x position\n              ,\n              fill: \"black\" // Text color\n              ,\n              fontSize: \"12px\" // Text font size\n              ,\n              children: (_param$data$ = param.data[0]) === null || _param$data$ === void 0 ? void 0 : _param$data$.failure_mode_id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n            width: 550,\n            height: 300,\n            data: sortedData,\n            children: [/*#__PURE__*/_jsxDEV(XAxis, {\n              dataKey: \"date\",\n              tick: false,\n              label: {\n                value: \"Date\",\n                position: \"insideBottom\",\n                dy: 10\n              },\n              height: 45 // Format the XAxis ticks to show formatted dates\n              ,\n              tickFormatter: dateString => {\n                const dateObject = parseDate(dateString);\n                return dateObject.toLocaleDateString();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n              domain: yDomain,\n              label: {\n                value: `${param.parameterName} (${unit})`,\n                angle: -90,\n                position: \"center\",\n                dx: -30,\n                // Adjust the label's distance from the axis\n                dy: -10,\n                // Adjust the label's distance from the axis\n                paddingRight: \"20px\"\n              },\n              width: 80\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 18\n            }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n              horizontal: false,\n              vertical: false\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Line, {\n              layout: \"horizontal\",\n              dataKey: \"value\",\n              stroke: crossingThreshold ? \"red\" : \"green\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n              y: parseInt(minThreshold),\n              stroke: \"gray\",\n              strokeDasharray: \"6 6\",\n              label: {\n                value: `Min Value: ${minThreshold}`,\n                position: \"right\",\n                fill: \"gray\",\n                fontSize: \"12px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n              y: parseInt(maxThreshold),\n              stroke: \"gray\",\n              strokeDasharray: \"6 6\",\n              label: {\n                value: `Max Value: ${maxThreshold}`,\n                position: \"right\",\n                fill: \"gray\",\n                fontSize: \"12px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n              labelFormatter: label => {\n                const dateObject = parseDate(label);\n                const formattedDate = dateObject.toLocaleDateString();\n                const formattedTime = dateObject.toLocaleTimeString();\n                return `${formattedDate} ${formattedTime}`;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)\n      }, param.parameterName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_c = CGraph;\nexport default CGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"CGraph\");","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/src/pages/CDashboard/CGraph.js"],"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ReferenceLine","styles","CGraph","graphData","selectedParameterNames","groupedData","reduce","acc","cur","name","equipmentName","componentName","parameterName","data","push","paramChartData","Object","values","console","log","filteredParamChartData","filter","param","includes","parseDate","dateString","dateParts","split","timeParts","year","parseInt","month","day","hour","minute","second","Date","getDomainByUnit","unit","minThreshold","maxThreshold","adjustedMin","adjustedMax","sortDataByDate","sort","a","b","dateA","date","dateB","midSection","map","length","sortedData","min_value","max_value","crossingThreshold","value","yDomain","rchart","content","blinkingChart","failure_mode_id","position","dy","dateObject","toLocaleDateString","angle","dx","paddingRight","fill","fontSize","label","formattedDate","formattedTime","toLocaleTimeString"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ReferenceLine,\r\n} from \"recharts\";\r\nimport styles from \"./CDashboard.module.css\";\r\n\r\nconst CGraph = ({ graphData, selectedParameterNames }) => {\r\n  // Group the data by parameter name\r\n  const groupedData = graphData.reduce((acc, cur) => {\r\n    if (!acc[cur.name]) {\r\n      acc[cur.name] = {\r\n        equipmentName: cur.name,\r\n        componentName: cur.name,\r\n        parameterName: cur.name,\r\n        data: [],\r\n      };\r\n    }\r\n    acc[cur.name].data.push(cur);\r\n    return acc;\r\n  }, {});\r\n\r\n  const paramChartData = Object.values(groupedData);\r\n  console.log(paramChartData);\r\n  const filteredParamChartData = paramChartData.filter((param) => {\r\n    return selectedParameterNames.includes(param.parameterName);\r\n  });\r\n  console.log(filteredParamChartData);\r\n  // Utility function to convert date string to Date object\r\n  const parseDate = (dateString) => {\r\n    const dateParts = dateString.split(\", \")[0].split(\"/\");\r\n    const timeParts = dateString.split(\", \")[1].split(\":\");\r\n    const year = parseInt(dateParts[2], 10);\r\n    const month = parseInt(dateParts[1], 10) - 1; // Months are 0-based in JavaScript Date\r\n    const day = parseInt(dateParts[0], 10);\r\n    const hour = parseInt(timeParts[0], 10);\r\n    const minute = parseInt(timeParts[1], 10);\r\n    const second = parseInt(timeParts[2], 10);\r\n    return new Date(year, month, day, hour, minute, second);\r\n  };\r\n\r\n  const getDomainByUnit = (unit, minThreshold, maxThreshold) => {\r\n    const adjustedMin = minThreshold / 1.5;\r\n    const adjustedMax = maxThreshold * 1.5;\r\n    console.log(adjustedMin, adjustedMax)\r\n\r\n    switch (unit) {\r\n      case \"RMS\":\r\n        return [adjustedMin, adjustedMax];\r\n      case \"kg\":\r\n        return [adjustedMin, adjustedMax];\r\n      case \"deg C\":\r\n        return [adjustedMin, adjustedMax];\r\n      // Add more cases for other units as needed\r\n      default:\r\n        return [adjustedMin, adjustedMax];\r\n    }\r\n  };\r\n  const sortDataByDate = (data) => {\r\n    return data.sort((a, b) => {\r\n      const dateA = parseDate(a.date);\r\n      const dateB = parseDate(b.date);\r\n      return dateA - dateB;\r\n    });\r\n  };\r\n  return (\r\n    <div className={styles.midSection}>\r\n      {filteredParamChartData.map((param) => {\r\n        if (param.data.length === 0) {\r\n          return null;\r\n        }\r\n\r\n        const sortedData = sortDataByDate(param.data);\r\n\r\n        const minThreshold = parseInt(sortedData[0]?.min_value);\r\n        const maxThreshold = parseInt(sortedData[0]?.max_value);\r\n        const crossingThreshold =\r\n          (sortedData[sortedData.length - 1]?.value ?? 0) < minThreshold ||\r\n          (sortedData[sortedData.length - 1]?.value ?? 0) > maxThreshold;\r\n\r\n        const unit = sortedData[0]?.unit;\r\n        const yDomain = getDomainByUnit(unit, minThreshold, maxThreshold);\r\n\r\n        return (\r\n          <div className={`${styles.rchart}`} key={param.parameterName}>\r\n            <div\r\n              className={`${styles.content} ${\r\n                crossingThreshold ? styles.blinkingChart : \"\"\r\n              }`}\r\n            >\r\n              <div>\r\n                {crossingThreshold}\r\n                <text\r\n                  x={550 / 2} // Center the text horizontally\r\n                  y={10} // Position the text 10 units from the top\r\n                  textAnchor=\"middle\" // Center the text relative to x position\r\n                  fill=\"black\" // Text color\r\n                  fontSize=\"12px\" // Text font size\r\n                >\r\n                  {param.data[0]?.failure_mode_id}\r\n                </text>\r\n              </div>\r\n              <LineChart width={550} height={300} data={sortedData}>\r\n                <XAxis\r\n                  dataKey=\"date\"\r\n                  tick={false}\r\n                  label={{\r\n                    value: \"Date\",\r\n                    position: \"insideBottom\",\r\n                    dy: 10,\r\n                  }}\r\n                  height={45}\r\n                  // Format the XAxis ticks to show formatted dates\r\n                  tickFormatter={(dateString) => {\r\n                    const dateObject = parseDate(dateString);\r\n                    return dateObject.toLocaleDateString();\r\n                  }}\r\n                />\r\n                 <YAxis\r\n                  domain={yDomain}\r\n                  label={{\r\n                    value: `${param.parameterName} (${unit})`,\r\n                    angle: -90,\r\n                    position: \"center\",\r\n                    dx: -30, // Adjust the label's distance from the axis\r\n                    dy: -10, // Adjust the label's distance from the axis\r\n                    paddingRight: \"20px\",\r\n                  }}\r\n                  width={80}\r\n                />\r\n                <CartesianGrid horizontal={false} vertical={false} />\r\n\r\n                <Line\r\n                  layout=\"horizontal\"\r\n                  dataKey=\"value\"\r\n                  stroke={crossingThreshold ? \"red\" : \"green\"}\r\n                />\r\n\r\n                <ReferenceLine\r\n                  y={parseInt(minThreshold)}\r\n                  stroke=\"gray\"\r\n                  strokeDasharray=\"6 6\"\r\n                  label={{\r\n                    value: `Min Value: ${minThreshold}`,\r\n                    position: \"right\",\r\n                    fill: \"gray\",\r\n                    fontSize: \"12px\",\r\n                  }}\r\n                />\r\n                <ReferenceLine\r\n                  y={parseInt(maxThreshold)}\r\n                  stroke=\"gray\"\r\n                  strokeDasharray=\"6 6\"\r\n                  label={{\r\n                    value: `Max Value: ${maxThreshold}`,\r\n                    position: \"right\",\r\n                    fill: \"gray\",\r\n                    fontSize: \"12px\",\r\n                  }}\r\n                />\r\n                <Tooltip\r\n                  labelFormatter={(label) => {\r\n                    const dateObject = parseDate(label);\r\n                    const formattedDate = dateObject.toLocaleDateString();\r\n                    const formattedTime = dateObject.toLocaleTimeString();\r\n                    return `${formattedDate} ${formattedTime}`;\r\n                  }}\r\n                />\r\n              </LineChart>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CGraph;\r\n"]},"metadata":{},"sourceType":"module"}