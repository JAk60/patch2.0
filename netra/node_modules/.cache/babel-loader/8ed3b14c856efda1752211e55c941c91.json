{"ast":null,"code":"var _jsxFileName = \"D:\\\\Netraaaa\\\\Netra\\\\netra\\\\src\\\\pages\\\\PM OPTIM\\\\OptiQ.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { TextField, Button, Dialog, DialogTitle, DialogContent, DialogActions } from \"@material-ui/core\";\nimport styles from \"./pm.module.css\";\nimport OptTable from \"./OptTable\";\nimport GroupTable from \"./GroupTable\"; // ... (other imports and styles)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst OptiQ = ({\n  questions,\n  name,\n  currQ,\n  option\n}) => {\n  _s();\n\n  var _currQ$columns, _currQ$columns2;\n\n  const [answers, setAnswers] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [n, setN] = useState(0);\n  console.log(tableData); // Added tableData state to store the row data for the table\n\n  const handleAnswerChange = (event, questionId) => {\n    const {\n      value\n    } = event.target;\n    setAnswers(prevAnswers => ({ ...prevAnswers,\n      [questionId]: parseFloat(value)\n    }));\n    console.log(answers);\n  };\n\n  const handleAddRow = e => {\n    e.preventDefault();\n    const newRow = { ...answers,\n      method: name\n    };\n    setTableData(prevTableData => [...prevTableData, newRow]);\n    setN(newRow === null || newRow === void 0 ? void 0 : newRow.n);\n  };\n\n  console.log(tableData);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.mainOp,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.userSele,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [name, \" Questions\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [questions === null || questions === void 0 ? void 0 : questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: question.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 17\n            }, this), question.type === \"text\" && /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"number\",\n              value: answers[question.id] || \"\",\n              onChange: event => handleAnswerChange(event, question.id),\n              required: question.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 19\n            }, this)]\n          }, question.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleAddRow,\n            children: \"Add Row\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.OptTable,\n        children: n ? /*#__PURE__*/_jsxDEV(GroupTable, {\n          n: n,\n          columnDefs: (_currQ$columns = currQ.columns) === null || _currQ$columns === void 0 ? void 0 : _currQ$columns.map(column => ({\n            headerName: column,\n            field: column\n          })),\n          tData: tableData // Use tableData as the rowData for the OptTable\n          ,\n          height: 200,\n          answers: answers,\n          name: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 12\n        }, this) : /*#__PURE__*/_jsxDEV(OptTable, {\n          columnDefs: (_currQ$columns2 = currQ.columns) === null || _currQ$columns2 === void 0 ? void 0 : _currQ$columns2.map(column => ({\n            headerName: column,\n            field: column\n          })),\n          rowData: tableData,\n          setRowData: setTableData // Use tableData as the rowData for the OptTable\n          ,\n          height: 200,\n          answers: answers,\n          name: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(OptiQ, \"6ieD7V1OBji4VvdNlfwFB9nEbXU=\");\n\n_c = OptiQ;\nexport default OptiQ;\n\nvar _c;\n\n$RefreshReg$(_c, \"OptiQ\");","map":{"version":3,"sources":["D:/Netraaaa/Netra/netra/src/pages/PM OPTIM/OptiQ.js"],"names":["React","useState","TextField","Button","Dialog","DialogTitle","DialogContent","DialogActions","styles","OptTable","GroupTable","OptiQ","questions","name","currQ","option","answers","setAnswers","tableData","setTableData","n","setN","console","log","handleAnswerChange","event","questionId","value","target","prevAnswers","parseFloat","handleAddRow","e","preventDefault","newRow","method","prevTableData","mainOp","userSele","map","question","text","type","id","required","columns","column","headerName","field"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\nimport styles from \"./pm.module.css\";\r\nimport OptTable from \"./OptTable\";\r\nimport GroupTable from \"./GroupTable\";\r\n\r\n// ... (other imports and styles)\r\n\r\nconst OptiQ = ({ questions, name, currQ,option }) => {\r\n  const [answers, setAnswers] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [n, setN] = useState(0);\r\n  console.log(tableData)\r\n  // Added tableData state to store the row data for the table\r\n\r\n  const handleAnswerChange = (event, questionId) => {\r\n    const { value } = event.target;\r\n    setAnswers((prevAnswers) => ({\r\n      ...prevAnswers,\r\n      [questionId]: parseFloat(value),\r\n    }));\r\n    console.log(answers);\r\n  };\r\n  const handleAddRow = (e) => {\r\n    e.preventDefault();\r\n    const newRow = { ...answers, method: name };\r\n    setTableData((prevTableData) => [...prevTableData, newRow]);\r\n    setN(newRow?.n);\r\n  };\r\n  console.log(tableData)\r\n  return (\r\n    <>\r\n      <div className={styles.mainOp}>\r\n        <div className={styles.userSele}>\r\n          <h3>{name} Questions</h3>\r\n          <form>\r\n            {questions?.map((question) => (\r\n              <div key={question.id}>\r\n                <label>{question.text}</label>\r\n                {question.type === \"text\" && (\r\n                  <TextField\r\n                    type=\"number\"\r\n                    value={answers[question.id] || \"\"}\r\n                    onChange={(event) => handleAnswerChange(event, question.id)}\r\n                    required={question.required}\r\n                  />\r\n                )}\r\n                {/* Add other input types (e.g., select, radio, checkbox) based on the question type */}\r\n              </div>\r\n            ))}\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleAddRow}\r\n            >\r\n              Add Row\r\n            </Button>\r\n          </form>\r\n        </div>\r\n        <div className={styles.OptTable}>\r\n          {/* {option === 'option3' || option === 'option4'? */}\r\n          {n ?\r\n           <GroupTable \r\n           n={n}\r\n           columnDefs={currQ.columns?.map((column) => ({\r\n            headerName: column,\r\n            field: column,\r\n          }))}\r\n          tData={tableData} // Use tableData as the rowData for the OptTable\r\n          height={200}\r\n          answers={answers}\r\n          name={name}\r\n           />\r\n          \r\n          :<OptTable\r\n            columnDefs={currQ.columns?.map((column) => ({\r\n              headerName: column,\r\n              field: column,\r\n            }))}\r\n            rowData={tableData}\r\n            setRowData={setTableData} // Use tableData as the rowData for the OptTable\r\n            height={200}\r\n            answers={answers}\r\n            name={name}\r\n          />}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OptiQ;\r\n"]},"metadata":{},"sourceType":"module"}