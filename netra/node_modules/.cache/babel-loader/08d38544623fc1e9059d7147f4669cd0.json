{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AccessControl = ({\n  allowedLevels,\n  children\n}) => {\n  _s();\n\n  const userAccessLevel = useSelector(state => state.LevelsData);\n  const trueLevels = Object.entries(userAccessLevel).filter(([key, value]) => value === true).map(([key]) => key); // Get the history object\n\n  const history = useHistory();\n  const isAllowed = allowedLevels.some(level => trueLevels.includes(level)); // If not allowed, redirect to the root route with a state object\n\n  React.useEffect(() => {\n    if (!isAllowed) {\n      history.push('/', {\n        message: 'Access Denied'\n      });\n    }\n  }, [isAllowed, history]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isAllowed ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: children\n    }, void 0, false) : null\n  }, void 0, false);\n};\n\n_s(AccessControl, \"63SGkEKtrldg8vv/El5yMzg7nXo=\", false, function () {\n  return [useSelector, useHistory];\n});\n\n_c = AccessControl;\nexport default AccessControl;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccessControl\");","map":{"version":3,"sources":["E:/NETRA PROJECT/Netra/netra/src/pages/Home/AccessControl.js"],"names":["React","useSelector","useHistory","AccessControl","allowedLevels","children","userAccessLevel","state","LevelsData","trueLevels","Object","entries","filter","key","value","map","history","isAllowed","some","level","includes","useEffect","push","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAiC;AAAA;;AACrD,QAAMC,eAAe,GAAGL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACC,UAAlB,CAAnC;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,OAAP,CAAeL,eAAf,EAChBM,MADgB,CACT,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,KAAkBA,KAAK,KAAK,IADnB,EAEhBC,GAFgB,CAEZ,CAAC,CAACF,GAAD,CAAD,KAAWA,GAFC,CAAnB,CAFqD,CAMrD;;AACA,QAAMG,OAAO,GAAGd,UAAU,EAA1B;AAEA,QAAMe,SAAS,GAAGb,aAAa,CAACc,IAAd,CAAoBC,KAAD,IAAWV,UAAU,CAACW,QAAX,CAAoBD,KAApB,CAA9B,CAAlB,CATqD,CAWrD;;AACAnB,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACJ,SAAL,EAAgB;AACdD,MAAAA,OAAO,CAACM,IAAR,CAAa,GAAb,EAAkB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAlB;AACD;AACF,GAJD,EAIG,CAACN,SAAD,EAAYD,OAAZ,CAJH;AAMA,sBACE;AAAA,cACGC,SAAS,gBAAG;AAAA,gBAAGZ;AAAH,qBAAH,GAAqB;AADjC,mBADF;AAKD,CAvBD;;GAAMF,a;UACoBF,W,EAMRC,U;;;KAPZC,a;AAyBN,eAAeA,aAAf","sourcesContent":["import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst AccessControl = ({ allowedLevels, children }) => {\r\n  const userAccessLevel = useSelector((state) => state.LevelsData);\r\n  const trueLevels = Object.entries(userAccessLevel)\r\n    .filter(([key, value]) => value === true)\r\n    .map(([key]) => key);\r\n\r\n  // Get the history object\r\n  const history = useHistory();\r\n\r\n  const isAllowed = allowedLevels.some((level) => trueLevels.includes(level));\r\n\r\n  // If not allowed, redirect to the root route with a state object\r\n  React.useEffect(() => {\r\n    if (!isAllowed) {\r\n      history.push('/', { message: 'Access Denied' });\r\n    }\r\n  }, [isAllowed, history]);\r\n\r\n  return (\r\n    <>\r\n      {isAllowed ? <>{children}</> : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AccessControl;\r\n"]},"metadata":{},"sourceType":"module"}