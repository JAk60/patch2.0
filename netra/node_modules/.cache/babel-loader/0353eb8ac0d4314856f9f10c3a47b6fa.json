{"ast":null,"code":"var _jsxFileName = \"D:\\\\Netraaaa\\\\Netra\\\\netra\\\\src\\\\pages\\\\Data Manager\\\\DataManager.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Navigation from \"../../components/navigation/Navigation\";\nimport NewModule from \"../../components/module/NewModule\";\nimport StageSlider from \"../../components/slider/NewSlider\";\nimport { Button } from \"@material-ui/core\";\nimport { Switch, Route, useHistory, Link, Redirect, useLocation } from \"react-router-dom\";\nimport styles from \"./DataManager.module.css\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport OperationalData from \"./operationalData/operationalData\";\nimport MaintenanceData from \"./maintenanceData/maintenanceData\";\nimport ImportData from \"./importData/importData\";\nimport ParameterEstimation from \"./parameterEstimation/parameterEstimation\";\nimport HistoricalData from \"./historicalData/historicalData\";\nimport UserSelection from \"../../ui/userSelection/userSelection\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { treeDataActions } from \"../../store/TreeDataStore\";\nimport { isAllOf } from \"@reduxjs/toolkit\";\nimport { v4 as uuid } from \"uuid\";\nimport RepairableOverhaul from \"./repairableOverhaul/repairableOverhaul\";\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ManagerStyles = makeStyles({\n  buttons: {\n    marginLeft: 10,\n    marginTop: 15,\n    minWidth: 150\n  }\n});\n\nfunction DataManager(props) {\n  _s();\n\n  var _matchingItems$;\n\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n  const [SnackBarMessage, setSnackBarMessage] = useState({\n    severity: \"error\",\n    message: \"This is awesome\",\n    showSnackBar: false\n  });\n  const location = useLocation();\n  const [Stage, setStage] = useState(0);\n  const [isLoadEqt, setIsLoadEqt] = useState(false);\n  const ManagerClasses = ManagerStyles();\n  const history = useHistory();\n  const [tableRows, setTableRows] = useState([]);\n  const [dataType, setDataType] = useState(\"\");\n  const dispatch = useDispatch();\n  const currentSelection = useSelector(state => state.userSelection.currentSelection);\n  const systemConfigurationTreeData = useSelector(state => state.treeData.treeData);\n\n  const NextStage = () => {\n    if (Stage === 0) {\n      setStage(1);\n      history.push(\"/data_manager/maintenance_data\");\n    }\n\n    if (Stage === 1) {\n      setStage(2);\n      history.push(\"/data_manager/parameter_estimation\");\n    }\n\n    if (Stage === 2) {\n      setStage(3);\n      history.push(\"/data_manager/historical_data\");\n    }\n  };\n\n  const PreviousStage = () => {\n    if (Stage === 1) {\n      setStage(0);\n      history.push(\"/data_manager\");\n    }\n\n    if (Stage === 2) {\n      setStage(1);\n      history.push(\"/data_manager/maintenance_data\");\n    }\n\n    if (Stage === 3) {\n      setStage(2);\n      history.push(\"/data_manager/parameter_estimation\");\n    }\n  };\n\n  const nextModule = settings => {\n    if (settings.ReliabilityDashboard) {\n      props.history.push(\"/rDashboard\");\n    }\n  };\n\n  const [locationKeys, setLocationKeys] = useState([]);\n  useEffect(() => {\n    return history.listen(location => {\n      if (history.action === \"PUSH\") {\n        setLocationKeys([location.key]);\n      }\n\n      if (history.action === \"POP\") {\n        if (locationKeys[1] === location.key) {\n          setLocationKeys(([_, ...keys]) => keys);\n          NextStage();\n        } else {\n          setLocationKeys(keys => [location.key, ...keys]);\n          PreviousStage();\n        }\n      }\n    });\n  }, [locationKeys]);\n  let marks = [{\n    value: 20,\n    label: \"Operational Data\"\n  }, {\n    value: 50,\n    label: \"Maintenance Data\"\n  }, {\n    value: 90,\n    label: \"Parameter Estimation\"\n  }];\n  const sData = useSelector(state => state.userSelection.componentsData);\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\n  const matchingId = (_matchingItems$ = matchingItems[0]) === null || _matchingItems$ === void 0 ? void 0 : _matchingItems$.id;\n\n  const handleOnLoadSystem = () => {\n    const payload = {\n      system: currentSelection[\"equipmentName\"],\n      ship_name: currentSelection[\"shipName\"]\n    };\n\n    if (matchingId) {\n      payload.component_id = matchingId;\n    }\n\n    console.log(payload);\n    fetch(\"/fetch_system\", {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => res.json()).then(d => {\n      // alert(\"Hurray\");\n      debugger;\n\n      if (location.pathname === \"/data_manager\") {\n        history.push(\"/data_manager\");\n      } else if (location.pathname === \"/data_manager/maintenance_data\") {\n        history.push(\"/data_manager/maintenance_data\");\n      } else if (location.pathname === \"/data_manager/parameter_estimation\") {\n        history.push(\"/data_manager/parameter_estimation\");\n      } else {\n        const equipment = d.treeD.filter(x => x.parentId === null)[0];\n\n        if (equipment.repairType === \"Replaceable\") {\n          history.push(\"/data_manager/historical_data\");\n        } else {\n          // <Redirect to=\"/data_manager/historical_data/repairable_overhaul\"></Redirect>;\n          history.push(\"/data_manager/historical_data/repairable_overhaul\");\n        }\n      } // if (\n      //   location.pathname !== \"/data_manager\" ||\n      //   location.pathname !== \"/data_manager/maintenance_data\" ||\n      //   location !== \"/data_manager/parameter_estimation\"\n      // ) {\n      // }\n\n\n      dispatch(treeDataActions.setTreeData({\n        treeData: d.treeD\n      }));\n    });\n  };\n\n  const handleSaveSupport = data => {\n    fetch(\"/save_historical_data\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        data: data\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setSnackBarMessage({\n        severity: \"success\",\n        message: data.message,\n        showSnackBar: true\n      });\n    }).catch(error => {\n      setSnackBarMessage({\n        severity: \"error\",\n        message: \"Some Error Occured. \" + error,\n        showSnackBar: true\n      });\n    });\n  };\n\n  const onHandleSnackClose = () => {\n    setSnackBarMessage({\n      severity: \"error\",\n      message: \"Please Add Systemss\",\n      showSnackBar: false\n    });\n  };\n\n  const handleSave = () => {\n    debugger;\n    let data = [];\n\n    if (dataType === \"oem\") {\n      data = tableRows.map(x => {\n        const life_estimate1 = Object.keys(x).sort()[1];\n        const life_estimate2 = Object.keys(x).sort()[2];\n        return {\n          component_id: x.id,\n          id: uuid(),\n          life_estimate1,\n          life_estimate2,\n          life_estimate1_val: x[life_estimate1],\n          life_estimate2_val: x[life_estimate2]\n        };\n      });\n    } else if (dataType === \"fdp\") {\n      data = tableRows.map(x => {\n        return {\n          component_id: x.id,\n          id: uuid(),\n          installationDate: x.installationDate,\n          removalDate: x.removalDate,\n          actual_failure: x.AFS\n        };\n      }); //End of FDP\n    } else if (dataType === \"oemE\") {\n      data = tableRows.map(x => {\n        const life_estimate1 = Object.keys(x).sort()[1];\n        return {\n          component_id: x.id,\n          id: uuid(),\n          life_estimate1,\n          maxLife: x.MaxLife,\n          minLife: x.MinLife,\n          life_estimate1_val: x[life_estimate1],\n          mostLikely: x.MostLikely,\n          componentFailure: x.componentFailure,\n          time_wo_failure: x.time_wo_failure\n        };\n      });\n    } else if (dataType === \"expert\") {\n      data = tableRows.map(x => {\n        return {\n          component_id: x.id,\n          id: uuid(),\n          maxLife: x.MaxLife,\n          minLife: x.MinLife,\n          mostLikely: x.MostLikely,\n          componentFailure: x.componentFailure,\n          time_wo_failure: x.time_wo_failure\n        };\n      });\n    } else if (dataType === \"prob\") {\n      data = tableRows.map(x => {\n        return {\n          component_id: x.id,\n          id: uuid(),\n          failureProb: x.FailureProbability,\n          time: x.Time\n        };\n      });\n    } else if (dataType === \"nprd\") {\n      data = tableRows.map(x => {\n        return {\n          component_id: x.id,\n          id: uuid(),\n          failureRate: x.FailureRate,\n          beta: x.Beta\n        };\n      });\n    } else if (dataType === \"import_replacable\") {\n      data = tableRows.map(x => {\n        if (x.ScaleParameter !== \"\" && x.ShapeParameter !== \"\") {\n          return {\n            component_id: x.id,\n            id: uuid(),\n            eta: x.ScaleParameter,\n            beta: x.ShapeParameter\n          };\n        }\n      });\n      console.log(\"\");\n    } else if (dataType === \"insertOpData\") {\n      data = tableRows.map(x => {\n        return {\n          id: x.id,\n          oid: uuid(),\n          Date: x.Date,\n          AverageRunning: x.AverageRunning\n        };\n      });\n      debugger;\n    } else if (dataType === \"maintData\") {\n      data = tableRows;\n    } else if (dataType === \"overhauls\") {\n      const main_data = tableRows[\"mainTable\"];\n      const sub_data = tableRows[\"subTable\"];\n      console.log(\"This is from Overhauls\");\n      console.log(main_data);\n      console.log(sub_data);\n      let parent = \"\";\n      let subSystem = [];\n\n      try {\n        parent = systemConfigurationTreeData.filter(x => x.parentId === null)[0].id;\n        subSystem = systemConfigurationTreeData.filter(x => x.parentId === null || x.parentId === parent);\n        const subFinalData = sub_data.map(x => {\n          return {\n            id: uuid(),\n            overhaulNum: x.overhaulNum,\n            runAge: x.runAge,\n            numMaint: x.numMaint,\n            component_id: parent\n          };\n        });\n        const mainFinalData = main_data.map(x => {\n          if (x.subSystem) {\n            const subSystemId = subSystem.filter(sS => sS.name === x.subSystem)[0].id;\n            return {\n              id: uuid(),\n              overhaulId: x.overhaulId,\n              date: x.Date,\n              maintenanceType: x.maintenanceType,\n              totalRunAge: x.totalRunAge,\n              subSystemId: subSystemId\n            };\n          }\n        });\n        data = [{\n          mainData: mainFinalData,\n          subData: subFinalData\n        }];\n      } catch {\n        console.log(\"Error\");\n      }\n    } else if (dataType === \"interval\") {\n      data = tableRows.map(x => {\n        return {\n          component_id: x.id,\n          id: uuid(),\n          installationStartDate: x.installationStartDate,\n          installationEndDate: x.installationEndDate,\n          removalStartDate: x.removalStartDate,\n          removalEndDate: x.removalEndDate,\n          interval_failure: x.IFS\n        };\n      });\n    }\n\n    debugger;\n    data = data.filter(x => x !== undefined);\n    handleSaveSupport({\n      data,\n      dataType: dataType\n    });\n  };\n\n  const handleTableUpdatedRows = (allRows, dataType) => {\n    setTableRows(allRows);\n\n    if (location.pathname == '/data_manager/historical_data/repairable_overhaul') {\n      setDataType(dataType);\n    } else if (location.pathname == '/data_manager/maintenance_data') {\n      setDataType(dataType);\n    } else if (location.pathname == '/data_manager/maintenance_data') {\n      setDataType(dataType);\n    }\n  };\n\n  const handleHistoricalDataDropdownChange = dataType => {\n    setDataType(dataType);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewModule, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StageSlider, {\n      marks: marks,\n      default: marks[Stage][\"value\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: [\"/data_manager/maintenance_data\", \"/data_manager/\", \"/data_manager/parameter_estimation\"],\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.flex,\n        children: [/*#__PURE__*/_jsxDEV(UserSelection, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/data_manager\",\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/data_manager/\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                className: ManagerClasses.buttons,\n                onClick: handleOnLoadSystem,\n                children: \"Load Equipment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/data_manager/parameter_estimation\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                className: ManagerClasses.buttons,\n                children: \"Update List\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: [\"/data_manager/maintenance_data\", \"/data_manager\", \"/data_manager/parameter_estimation\"],\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                className: ManagerClasses.buttons,\n                onClick: () => PreviousStage(),\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 440,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: [\"/data_manager/historical_data\", \"/data_manager/historical_data/failure_datapoint\", \"/data_manager/historical_data/oem\", \"/data_manager/historical_data/oem_expert\", \"/data_manager/historical_data/expert_judgement\", \"/data_manager/historical_data/probability_failure\", \"/data_manager/historical_data/nprd\", \"/data_manager/historical_data/import_data\", \"/data_manager/historical_data/repairable_overhaul\"],\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                className: ManagerClasses.buttons,\n                component: Link,\n                to: \"/data_manager/parameter_estimation\",\n                children: \"Back to Parameter Estimation\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              className: ManagerClasses.buttons,\n              onClick: handleSave,\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: [\"/data_manager\", \"/data_manager/maintenance_data\", \"/data_manager/import_data\", \"/data_manager/historical_data/nprd\"],\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                className: ManagerClasses.buttons,\n                onClick: () => NextStage(),\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/data_manager/parameter_estimation\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => nextModule(props.settings),\n                variant: \"contained\",\n                color: \"primary\",\n                className: ManagerClasses.buttons,\n                children: \"Next Module\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 500,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/data_manager\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.managerTable,\n          children: /*#__PURE__*/_jsxDEV(OperationalData, {\n            tableUpdate: handleTableUpdatedRows\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/data_manager/maintenance_data\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.managerTable,\n          children: /*#__PURE__*/_jsxDEV(MaintenanceData, {\n            tableUpdate: handleTableUpdatedRows\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/data_manager/historical_data/:subRoute*\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.historicalTable,\n          children: /*#__PURE__*/_jsxDEV(HistoricalData, {\n            tableUpdate: handleTableUpdatedRows,\n            handleDropdown: handleHistoricalDataDropdownChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/data_manager/parameter_estimation\",\n        exact: true,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.managerTable,\n          children: /*#__PURE__*/_jsxDEV(ParameterEstimation, {\n            list: systemConfigurationTreeData.filter(x => x.lmu === 1 || x.parent_id == null),\n            rope: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this), SnackBarMessage.showSnackBar && /*#__PURE__*/_jsxDEV(CustomizedSnackbars, {\n      message: SnackBarMessage,\n      onHandleClose: onHandleSnackClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 398,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DataManager, \"FyIiXI7KmN3ZsdecidVfARW5dWA=\", false, function () {\n  return [useLocation, useHistory, useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = DataManager;\nexport default DataManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataManager\");","map":{"version":3,"sources":["D:/Netraaaa/Netra/netra/src/pages/Data Manager/DataManager.js"],"names":["React","useEffect","useState","Navigation","NewModule","StageSlider","Button","Switch","Route","useHistory","Link","Redirect","useLocation","styles","makeStyles","OperationalData","MaintenanceData","ImportData","ParameterEstimation","HistoricalData","UserSelection","useDispatch","useSelector","treeDataActions","isAllOf","v4","uuid","RepairableOverhaul","CustomizedSnackbars","ManagerStyles","buttons","marginLeft","marginTop","minWidth","DataManager","props","innerWidth","width","innerHeight","height","window","SnackBarMessage","setSnackBarMessage","severity","message","showSnackBar","location","Stage","setStage","isLoadEqt","setIsLoadEqt","ManagerClasses","history","tableRows","setTableRows","dataType","setDataType","dispatch","currentSelection","state","userSelection","systemConfigurationTreeData","treeData","NextStage","push","PreviousStage","nextModule","settings","ReliabilityDashboard","locationKeys","setLocationKeys","listen","action","key","_","keys","marks","value","label","sData","componentsData","currentEquipmentName","matchingItems","filter","item","name","matchingId","id","handleOnLoadSystem","payload","system","ship_name","component_id","console","log","fetch","method","body","JSON","stringify","headers","Accept","then","res","json","d","pathname","equipment","treeD","x","parentId","repairType","setTreeData","handleSaveSupport","data","catch","error","onHandleSnackClose","handleSave","map","life_estimate1","Object","sort","life_estimate2","life_estimate1_val","life_estimate2_val","installationDate","removalDate","actual_failure","AFS","maxLife","MaxLife","minLife","MinLife","mostLikely","MostLikely","componentFailure","time_wo_failure","failureProb","FailureProbability","time","Time","failureRate","FailureRate","beta","Beta","ScaleParameter","ShapeParameter","eta","oid","Date","AverageRunning","main_data","sub_data","parent","subSystem","subFinalData","overhaulNum","runAge","numMaint","mainFinalData","subSystemId","sS","overhaulId","date","maintenanceType","totalRunAge","mainData","subData","installationStartDate","installationEndDate","removalStartDate","removalEndDate","interval_failure","IFS","undefined","handleTableUpdatedRows","allRows","handleHistoricalDataDropdownChange","flex","managerTable","historicalTable","lmu","parent_id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport NewModule from \"../../components/module/NewModule\";\r\nimport StageSlider from \"../../components/slider/NewSlider\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport {\r\n  Switch,\r\n  Route,\r\n  useHistory,\r\n  Link,\r\n  Redirect,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\nimport styles from \"./DataManager.module.css\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport OperationalData from \"./operationalData/operationalData\";\r\nimport MaintenanceData from \"./maintenanceData/maintenanceData\";\r\nimport ImportData from \"./importData/importData\";\r\nimport ParameterEstimation from \"./parameterEstimation/parameterEstimation\";\r\nimport HistoricalData from \"./historicalData/historicalData\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\nimport { isAllOf } from \"@reduxjs/toolkit\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport RepairableOverhaul from \"./repairableOverhaul/repairableOverhaul\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\n\r\nconst ManagerStyles = makeStyles({\r\n  buttons: {\r\n    marginLeft: 10,\r\n    marginTop: 15,\r\n    minWidth: 150,\r\n  },\r\n});\r\n\r\nfunction DataManager(props) {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const location = useLocation();\r\n  const [Stage, setStage] = useState(0);\r\n  const [isLoadEqt, setIsLoadEqt] = useState(false);\r\n  const ManagerClasses = ManagerStyles();\r\n  const history = useHistory();\r\n  const [tableRows, setTableRows] = useState([]);\r\n  const [dataType, setDataType] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  const systemConfigurationTreeData = useSelector(\r\n    (state) => state.treeData.treeData\r\n  );\r\n  const NextStage = () => {\r\n    if (Stage === 0) {\r\n      setStage(1);\r\n      history.push(\"/data_manager/maintenance_data\");\r\n    }\r\n    if (Stage === 1) {\r\n      setStage(2);\r\n      history.push(\"/data_manager/parameter_estimation\");\r\n    }\r\n    if (Stage === 2) {\r\n      setStage(3);\r\n      history.push(\"/data_manager/historical_data\");\r\n    }\r\n  };\r\n  const PreviousStage = () => {\r\n    if (Stage === 1) {\r\n      setStage(0);\r\n      history.push(\"/data_manager\");\r\n    }\r\n    if (Stage === 2) {\r\n      setStage(1);\r\n      history.push(\"/data_manager/maintenance_data\");\r\n    }\r\n    if (Stage === 3) {\r\n      setStage(2);\r\n      history.push(\"/data_manager/parameter_estimation\");\r\n    }\r\n  };\r\n\r\n  const nextModule = (settings) => {\r\n    if (settings.ReliabilityDashboard) {\r\n      props.history.push(\"/rDashboard\");\r\n    }\r\n  };\r\n\r\n  const [locationKeys, setLocationKeys] = useState([]);\r\n  useEffect(() => {\r\n    return history.listen((location) => {\r\n      if (history.action === \"PUSH\") {\r\n        setLocationKeys([location.key]);\r\n      }\r\n\r\n      if (history.action === \"POP\") {\r\n        if (locationKeys[1] === location.key) {\r\n          setLocationKeys(([_, ...keys]) => keys);\r\n          NextStage();\r\n        } else {\r\n          setLocationKeys((keys) => [location.key, ...keys]);\r\n          PreviousStage();\r\n        }\r\n      }\r\n    });\r\n  }, [locationKeys]);\r\n  let marks = [\r\n    {\r\n      value: 20,\r\n      label: \"Operational Data\",\r\n    },\r\n    {\r\n      value: 50,\r\n      label: \"Maintenance Data\",\r\n    },\r\n    {\r\n      value: 90,\r\n      label: \"Parameter Estimation\",\r\n    },\r\n  ];\r\n\r\n  const sData = useSelector((state) => state.userSelection.componentsData);\r\n\r\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\r\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\r\n\r\n  const matchingId = matchingItems[0]?.id;\r\n  const handleOnLoadSystem = () => {\r\n    const payload = {\r\n      system: currentSelection[\"equipmentName\"],\r\n      ship_name: currentSelection[\"shipName\"],\r\n    };\r\n  \r\n    if (matchingId) {\r\n      payload.component_id = matchingId;\r\n    }\r\n    console.log(payload)\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        // alert(\"Hurray\");\r\n        debugger;\r\n        if (location.pathname === \"/data_manager\") {\r\n          history.push(\"/data_manager\");\r\n        } else if (location.pathname === \"/data_manager/maintenance_data\") {\r\n          history.push(\"/data_manager/maintenance_data\");\r\n        } else if (location.pathname === \"/data_manager/parameter_estimation\") {\r\n          history.push(\"/data_manager/parameter_estimation\");\r\n        } else {\r\n          const equipment = d.treeD.filter((x) => x.parentId === null)[0];\r\n          if (equipment.repairType === \"Replaceable\") {\r\n            history.push(\"/data_manager/historical_data\");\r\n          } else {\r\n            // <Redirect to=\"/data_manager/historical_data/repairable_overhaul\"></Redirect>;\r\n            history.push(\"/data_manager/historical_data/repairable_overhaul\");\r\n          }\r\n        }\r\n        // if (\r\n        //   location.pathname !== \"/data_manager\" ||\r\n        //   location.pathname !== \"/data_manager/maintenance_data\" ||\r\n        //   location !== \"/data_manager/parameter_estimation\"\r\n        // ) {\r\n\r\n        // }\r\n        dispatch(treeDataActions.setTreeData({ treeData: d.treeD }));\r\n      });\r\n  };\r\n\r\n\r\n\r\n  const handleSaveSupport = (data) => {\r\n    fetch(\"/save_historical_data\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        data: data,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setSnackBarMessage({\r\n          severity: \"success\",\r\n          message: data.message,\r\n          showSnackBar: true,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setSnackBarMessage({\r\n          severity: \"error\",\r\n          message: \"Some Error Occured. \" + error,\r\n          showSnackBar: true,\r\n        });\r\n      });\r\n  };\r\n\r\n\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const handleSave = () => {\r\n    debugger;\r\n    let data = [];\r\n    if (dataType === \"oem\") {\r\n      data = tableRows.map((x) => {\r\n        const life_estimate1 = Object.keys(x).sort()[1];\r\n        const life_estimate2 = Object.keys(x).sort()[2];\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          life_estimate1,\r\n          life_estimate2,\r\n          life_estimate1_val: x[life_estimate1],\r\n          life_estimate2_val: x[life_estimate2],\r\n        };\r\n      });\r\n    } else if (dataType === \"fdp\") {\r\n      data = tableRows.map((x) => {\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          installationDate: x.installationDate,\r\n          removalDate: x.removalDate,\r\n          actual_failure: x.AFS,\r\n        };\r\n      });\r\n      //End of FDP\r\n    } else if (dataType === \"oemE\") {\r\n      data = tableRows.map((x) => {\r\n        const life_estimate1 = Object.keys(x).sort()[1];\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          life_estimate1,\r\n          maxLife: x.MaxLife,\r\n          minLife: x.MinLife,\r\n          life_estimate1_val: x[life_estimate1],\r\n          mostLikely: x.MostLikely,\r\n          componentFailure: x.componentFailure,\r\n          time_wo_failure: x.time_wo_failure,\r\n        };\r\n      });\r\n    } else if (dataType === \"expert\") {\r\n      data = tableRows.map((x) => {\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          maxLife: x.MaxLife,\r\n          minLife: x.MinLife,\r\n          mostLikely: x.MostLikely,\r\n          componentFailure: x.componentFailure,\r\n          time_wo_failure: x.time_wo_failure,\r\n        };\r\n      });\r\n    } else if (dataType === \"prob\") {\r\n      data = tableRows.map((x) => {\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          failureProb: x.FailureProbability,\r\n          time: x.Time,\r\n        };\r\n      });\r\n    } else if (dataType === \"nprd\") {\r\n      data = tableRows.map((x) => {\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          failureRate: x.FailureRate,\r\n          beta: x.Beta,\r\n        };\r\n      });\r\n    } else if (dataType === \"import_replacable\") {\r\n      data = tableRows.map((x) => {\r\n        if (x.ScaleParameter !== \"\" && x.ShapeParameter !== \"\") {\r\n          return {\r\n            component_id: x.id,\r\n            id: uuid(),\r\n            eta: x.ScaleParameter,\r\n            beta: x.ShapeParameter,\r\n          };\r\n        }\r\n      });\r\n      console.log(\"\");\r\n    } else if (dataType === \"insertOpData\") {\r\n      data = tableRows.map((x) => {\r\n        return {\r\n          id: x.id,\r\n          oid: uuid(),\r\n          Date: x.Date,\r\n          AverageRunning: x.AverageRunning,\r\n        };\r\n      });\r\n      debugger\r\n    } else if (dataType === \"maintData\") {\r\n      data = tableRows;\r\n    } else if (dataType === \"overhauls\") {\r\n      const main_data = tableRows[\"mainTable\"];\r\n      const sub_data = tableRows[\"subTable\"];\r\n      console.log(\"This is from Overhauls\");\r\n      console.log(main_data);\r\n      console.log(sub_data);\r\n      let parent = \"\";\r\n      let subSystem = [];\r\n      try {\r\n        parent = systemConfigurationTreeData.filter(\r\n          (x) => x.parentId === null\r\n        )[0].id;\r\n        subSystem = systemConfigurationTreeData.filter(\r\n          (x) => x.parentId === null || x.parentId === parent\r\n        );\r\n\r\n        const subFinalData = sub_data.map((x) => {\r\n          return {\r\n            id: uuid(),\r\n            overhaulNum: x.overhaulNum,\r\n            runAge: x.runAge,\r\n            numMaint: x.numMaint,\r\n            component_id: parent,\r\n          };\r\n        });\r\n\r\n        const mainFinalData = main_data.map((x) => {\r\n          if (x.subSystem) {\r\n            const subSystemId = subSystem.filter(\r\n              (sS) => sS.name === x.subSystem\r\n            )[0].id;\r\n            return {\r\n              id: uuid(),\r\n              overhaulId: x.overhaulId,\r\n              date: x.Date,\r\n              maintenanceType: x.maintenanceType,\r\n              totalRunAge: x.totalRunAge,\r\n              subSystemId: subSystemId,\r\n            };\r\n          }\r\n        });\r\n        data = [{ mainData: mainFinalData, subData: subFinalData }];\r\n      } catch {\r\n        console.log(\"Error\");\r\n      }\r\n    } else if (dataType === \"interval\") {\r\n      data = tableRows.map((x) => {\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          installationStartDate: x.installationStartDate,\r\n          installationEndDate: x.installationEndDate,\r\n          removalStartDate: x.removalStartDate,\r\n          removalEndDate: x.removalEndDate,\r\n          interval_failure: x.IFS,\r\n        };\r\n      });\r\n    }\r\n    debugger;\r\n    data = data.filter((x) => x !== undefined);\r\n    handleSaveSupport({ data, dataType: dataType });\r\n  };\r\n\r\n  \r\n\r\n  const handleTableUpdatedRows = (allRows, dataType) => {\r\n    setTableRows(allRows);\r\n    \r\n    if(location.pathname == '/data_manager/historical_data/repairable_overhaul'){\r\n      setDataType(dataType);\r\n    }\r\n    else if(location.pathname == '/data_manager/maintenance_data'){\r\n      setDataType(dataType);\r\n    }\r\n    else if(location.pathname == '/data_manager/maintenance_data'){\r\n      setDataType(dataType)\r\n    }\r\n  };\r\n  const handleHistoricalDataDropdownChange = (dataType) => {\r\n    setDataType(dataType);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Navigation />\r\n      <NewModule />\r\n      <StageSlider marks={marks} default={marks[Stage][\"value\"]} />\r\n      <Route\r\n        path={[\r\n          \"/data_manager/maintenance_data\",\r\n          \"/data_manager/\",\r\n          \"/data_manager/parameter_estimation\",\r\n        ]}\r\n      >\r\n        <div className={styles.flex}>\r\n          <UserSelection />\r\n          <div>\r\n            <Route path=\"/data_manager\">\r\n              <Route path={\"/data_manager/\"}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={ManagerClasses.buttons}\r\n                  onClick={handleOnLoadSystem}\r\n                >\r\n                  Load Equipment\r\n                </Button>\r\n              </Route>\r\n              <Route exact path={\"/data_manager/parameter_estimation\"}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={ManagerClasses.buttons}\r\n                >\r\n                  Update List\r\n                </Button>\r\n              </Route>\r\n              <Route\r\n                exact\r\n                path={[\r\n                  \"/data_manager/maintenance_data\",\r\n                  \"/data_manager\",\r\n                  \"/data_manager/parameter_estimation\",\r\n                ]}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={ManagerClasses.buttons}\r\n                  onClick={() => PreviousStage()}\r\n                >\r\n                  Back\r\n                </Button>\r\n              </Route>\r\n              <Route\r\n                exact\r\n                path={[\r\n                  \"/data_manager/historical_data\",\r\n                  \"/data_manager/historical_data/failure_datapoint\",\r\n                  \"/data_manager/historical_data/oem\",\r\n                  \"/data_manager/historical_data/oem_expert\",\r\n                  \"/data_manager/historical_data/expert_judgement\",\r\n                  \"/data_manager/historical_data/probability_failure\",\r\n                  \"/data_manager/historical_data/nprd\",\r\n                  \"/data_manager/historical_data/import_data\",\r\n                  \"/data_manager/historical_data/repairable_overhaul\",\r\n                ]}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={ManagerClasses.buttons}\r\n                  component={Link}\r\n                  to=\"/data_manager/parameter_estimation\"\r\n                >\r\n                  Back to Parameter Estimation\r\n                </Button>\r\n              </Route>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={ManagerClasses.buttons}\r\n                onClick={handleSave}\r\n              >\r\n                Save\r\n              </Button>\r\n              <Route\r\n                exact\r\n                path={[\r\n                  \"/data_manager\",\r\n                  \"/data_manager/maintenance_data\",\r\n                  \"/data_manager/import_data\",\r\n                  \"/data_manager/historical_data/nprd\",\r\n                ]}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={ManagerClasses.buttons}\r\n                  onClick={() => NextStage()}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </Route>\r\n              <Route exact path=\"/data_manager/parameter_estimation\">\r\n                <Button\r\n                  onClick={() => nextModule(props.settings)}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={ManagerClasses.buttons}\r\n                >\r\n                  Next Module\r\n                </Button>\r\n              </Route>\r\n            </Route>\r\n          </div>\r\n        </div>\r\n      </Route>\r\n\r\n      <Switch>\r\n        <Route path=\"/data_manager\" exact={true}>\r\n          <div className={styles.managerTable}>\r\n            <OperationalData tableUpdate={handleTableUpdatedRows} />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/data_manager/maintenance_data\" exact={true}>\r\n          <div className={styles.managerTable}>\r\n            <MaintenanceData tableUpdate={handleTableUpdatedRows} />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/data_manager/historical_data/:subRoute*\" exact={true}>\r\n          <div className={styles.historicalTable}>\r\n            <HistoricalData\r\n              tableUpdate={handleTableUpdatedRows}\r\n              handleDropdown={handleHistoricalDataDropdownChange}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/data_manager/parameter_estimation\" exact={true}>\r\n          <div className={styles.managerTable}>\r\n            <ParameterEstimation\r\n              list={systemConfigurationTreeData.filter((x) => x.lmu === 1 || x.parent_id == null)}\r\n              rope={true}\r\n            />\r\n          </div>\r\n        </Route>\r\n        {/* <Route\r\n          path=\"/data_manager/historical_data/repairable_overhaul\"\r\n          exact={true}\r\n        >\r\n          <div className={styles.managerTable}>\r\n            <RepairableOverhaul />\r\n          </div>\r\n        </Route> */}\r\n      </Switch>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default DataManager;\r\n"]},"metadata":{},"sourceType":"module"}