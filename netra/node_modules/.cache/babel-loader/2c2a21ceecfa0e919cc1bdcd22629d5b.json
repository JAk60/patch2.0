{"ast":null,"code":"var _jsxFileName = \"E:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\Data Manager\\\\historicalData\\\\IntervalData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Table from \"../../../ui/Table/DataManagerTable\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport { Button } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport styles from \"../DataManager.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst IntervalDataPoint = props => {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const rows = props.childList.map(x => {\n    return {\n      name: x.name,\n      id: x.id\n    };\n  });\n  const [rowState, setRows] = useState([{\n    id: rows[0].id,\n    ComponentName: rows[0].name,\n    installationStartDate: \"\",\n    installationEndDate: \"\",\n    removalStartDate: \"\",\n    removalEndDate: \"\",\n    IFS: \"Suspension\"\n  }]);\n  const DPColumns = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"ComponentName\",\n    headerName: \"Component Name\",\n    editable: true,\n    minWidth: 100,\n    checkboxSelection: true,\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: rows.map(x => x.name)\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    headerName: \"Interval Data\",\n    children: [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n      headerName: \"Installation Interval\",\n      children: [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"installationStartDate\",\n        headerName: \"Interval Start Date\",\n        cellEditor: \"datePicker\",\n        editable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"installationEndDate\",\n        headerName: \"Interval End Date\",\n        cellEditor: \"datePicker\",\n        editable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n      headerName: \"Removal Interval\",\n      children: [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"removalStartDate\",\n        headerName: \"Interval Start Date\",\n        cellEditor: \"datePicker\",\n        editable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n        field: \"removalEndDate\",\n        headerName: \"Interval End Date\",\n        cellEditor: \"datePicker\",\n        editable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n      field: \"IFS\",\n      headerName: \"Failure/Suspension\",\n      editable: true // width={150}\n      ,\n      cellEditor: \"agSelectCellEditor\",\n      cellEditorParams: {\n        values: [\"Failure\", \"Suspension\"]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this)]; //End\n\n  const updateFinalRowData = allRows => {\n    props.tableUpdate(allRows, \"interval\");\n  };\n\n  const AddRow = () => {\n    const defaultRow = [{\n      id: rows[0].id,\n      ComponentName: rows[0].name,\n      installationStartDate: \"\",\n      installationEndDate: \"\",\n      removalStartDate: \"\",\n      removalEndDate: \"\",\n      IFS: \"Suspension\"\n    }];\n    gridApi.applyTransaction({\n      add: defaultRow\n    });\n    const allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    updateFinalRowData(allRowData);\n  };\n\n  const deleteRows = () => {\n    const selectedRows = gridApi.getSelectedRows();\n    gridApi.applyTransaction({\n      remove: selectedRows\n    });\n    console.log(selectedRows);\n    const allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    updateFinalRowData(allRowData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      columnDefs: DPColumns,\n      setGrid: setGridApi,\n      gridApi: gridApi,\n      rowData: rowState,\n      tableUpdate: updateFinalRowData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.tableFooter,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 22\n        }, this),\n        color: \"secondary\",\n        onClick: () => AddRow(),\n        children: \"Add Row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 22\n        }, this),\n        color: \"secondary\",\n        onClick: () => deleteRows(),\n        children: \"Delete Rows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(IntervalDataPoint, \"XQM5iRgCEZZ32WWD/LQSlWqEKAo=\");\n\n_c = IntervalDataPoint;\nexport default IntervalDataPoint;\n\nvar _c;\n\n$RefreshReg$(_c, \"IntervalDataPoint\");","map":{"version":3,"sources":["E:/NetraB/netra/src/pages/Data Manager/historicalData/IntervalData.js"],"names":["React","useState","Table","AgGridColumn","Button","AddIcon","DeleteIcon","styles","IntervalDataPoint","props","gridApi","setGridApi","rows","childList","map","x","name","id","rowState","setRows","ComponentName","installationStartDate","installationEndDate","removalStartDate","removalEndDate","IFS","DPColumns","values","updateFinalRowData","allRows","tableUpdate","AddRow","defaultRow","applyTransaction","add","allRowData","forEachNode","node","push","data","deleteRows","selectedRows","getSelectedRows","remove","console","log","tableFooter"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\nconst IntervalDataPoint = (props) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const rows = props.childList.map((x) => {\r\n    return { name: x.name, id: x.id };\r\n  });\r\n  const [rowState, setRows] = useState([\r\n    {\r\n      id: rows[0].id,\r\n      ComponentName: rows[0].name,\r\n      installationStartDate: \"\",\r\n      installationEndDate: \"\",\r\n      removalStartDate: \"\",\r\n      removalEndDate: \"\",\r\n      IFS: \"Suspension\",\r\n    },\r\n  ]);\r\n\r\n  const DPColumns = [\r\n    <AgGridColumn\r\n      field=\"ComponentName\"\r\n      headerName=\"Component Name\"\r\n      editable={true}\r\n      minWidth={100}\r\n      checkboxSelection={true}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: rows.map((x) => x.name),\r\n      }}\r\n    />,\r\n    <AgGridColumn headerName=\"Interval Data\">\r\n      <AgGridColumn headerName=\"Installation Interval\">\r\n        <AgGridColumn\r\n          field=\"installationStartDate\"\r\n          headerName=\"Interval Start Date\"\r\n          cellEditor=\"datePicker\"\r\n          editable={true}\r\n        ></AgGridColumn>\r\n        <AgGridColumn\r\n          field=\"installationEndDate\"\r\n          headerName=\"Interval End Date\"\r\n          cellEditor=\"datePicker\"\r\n          editable={true}\r\n        ></AgGridColumn>\r\n      </AgGridColumn>\r\n\r\n      <AgGridColumn headerName=\"Removal Interval\">\r\n        <AgGridColumn\r\n          field=\"removalStartDate\"\r\n          headerName=\"Interval Start Date\"\r\n          cellEditor=\"datePicker\"\r\n          editable={true}\r\n        ></AgGridColumn>\r\n        <AgGridColumn\r\n          field=\"removalEndDate\"\r\n          headerName=\"Interval End Date\"\r\n          cellEditor=\"datePicker\"\r\n          editable={true}\r\n        ></AgGridColumn>\r\n      </AgGridColumn>\r\n\r\n      <AgGridColumn\r\n        field=\"IFS\"\r\n        headerName=\"Failure/Suspension\"\r\n        editable={true}\r\n        // width={150}\r\n        cellEditor=\"agSelectCellEditor\"\r\n        cellEditorParams={{\r\n          values: [\"Failure\", \"Suspension\"],\r\n        }}\r\n      ></AgGridColumn>\r\n    </AgGridColumn>,\r\n  ];\r\n  //End\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows, \"interval\");\r\n  };\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: rows[0].id,\r\n        ComponentName: rows[0].name,\r\n        installationStartDate: \"\",\r\n        installationEndDate: \"\",\r\n        removalStartDate: \"\",\r\n        removalEndDate: \"\",\r\n        IFS: \"Suspension\",\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    console.log(selectedRows);\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  return (\r\n    <div>\r\n      <Table\r\n        columnDefs={DPColumns}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        rowData={rowState}\r\n        tableUpdate={updateFinalRowData}\r\n      ></Table>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IntervalDataPoint;\r\n"]},"metadata":{},"sourceType":"module"}