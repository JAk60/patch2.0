{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\systen_configuration\\\\failureMode\\\\failureMode.js\",\n    _s = $RefreshSig$();\n\nimport { Button } from \"@material-ui/core\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport CustomSelect from \"../../../ui/Form/CustomSelect\"; // import Table from \"../../../ui/Table/Table\";\n\nimport Table from \"../../../ui/Table/DataManagerTable\";\nimport styles from \"../SystemConfiguration.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 as uuid } from \"uuid\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { useEffect, useState } from \"react\";\nimport RenderParallelComponent from \"../redundancy/RenderParallelComponent\";\nimport EquipmentName from \"./EquipmentName\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FailureMode = props => {\n  _s();\n\n  const systemData = useSelector(state => state.treeData.treeData);\n  const failureModesData = useSelector(state => state.treeData.failureModes);\n  const [gridApi, setGridApi] = useState(null); // const equipments = systemData.map(\n  //   (eqpt) => eqpt.name + \"-\" + eqpt.parentName\n  // );\n\n  let selectedOptionId = \"\"; // const\n\n  const setIdToDropdownOption = id => {\n    selectedOptionId = id;\n  };\n\n  const rowData = [];\n  const FMcolumnDefs = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"EquipmentName\",\n    headerName: \"Equipment Name\",\n    headerTooltip: \"Equipment Name\",\n    cellEditorFramework: EquipmentName,\n    minWidth: 100,\n    editable: true // keyCreator={{ values: systemData.map((x) => x.id) }}\n    ,\n    cellEditorParams: {\n      setId: setIdToDropdownOption\n    } // cellEditorParams={{ values: systemData.map((x) => x.name) }}\n    ,\n    checkboxSelection: true // cellEditor=\"agSelectCellEditor\"\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"fixFailureMode\",\n    headerName: \"Failure Mode\",\n    headerTooltip: \"Failure Mode\",\n    width: 300,\n    editable: true,\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: failureModesData\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this)];\n\n  const AddRow = () => {\n    const defaultRow = [{\n      EquipmentName: \"\",\n      id: uuid(),\n      eqId: \"\",\n      fixFailureMode: \"\"\n    }];\n    gridApi.applyTransaction({\n      add: defaultRow\n    });\n  };\n\n  const deleteRows = () => {\n    const selectedRows = gridApi.getSelectedRows();\n    gridApi.applyTransaction({\n      remove: selectedRows\n    }); // console.log(selectedRows);\n  };\n\n  const updateFinalRowData = (allRows, rowId) => {\n    debugger;\n    props.tableUpdate(allRows);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.systemTable,\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      columnDefs: FMcolumnDefs,\n      rowData: rowData,\n      tableUpdate: updateFinalRowData,\n      setGrid: setGridApi,\n      gridApi: gridApi\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.tableFooter,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 26\n        }, this),\n        color: \"secondary\",\n        onClick: () => AddRow(),\n        children: \"Add Row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          marginLeft: 10\n        },\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 26\n        }, this),\n        color: \"secondary\",\n        onClick: () => deleteRows(),\n        children: \"Delete Rows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FailureMode, \"dzlK/hlUfr9NEL9YmxUfAqKdgTU=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = FailureMode;\nexport default FailureMode;\n\nvar _c;\n\n$RefreshReg$(_c, \"FailureMode\");","map":{"version":3,"sources":["D:/NetraB/netra/src/pages/systen_configuration/failureMode/failureMode.js"],"names":["Button","AgGridColumn","CustomSelect","Table","styles","useDispatch","useSelector","v4","uuid","AddIcon","DeleteIcon","useEffect","useState","RenderParallelComponent","EquipmentName","FailureMode","props","systemData","state","treeData","failureModesData","failureModes","gridApi","setGridApi","selectedOptionId","setIdToDropdownOption","id","rowData","FMcolumnDefs","setId","values","AddRow","defaultRow","eqId","fixFailureMode","applyTransaction","add","deleteRows","selectedRows","getSelectedRows","remove","updateFinalRowData","allRows","rowId","tableUpdate","systemTable","tableFooter","marginLeft"],"mappings":"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","sourcesContent":["import { Button } from \"@material-ui/core\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport CustomSelect from \"../../../ui/Form/CustomSelect\";\r\n// import Table from \"../../../ui/Table/Table\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\"\r\nimport styles from \"../SystemConfiguration.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useEffect, useState } from \"react\";\r\nimport RenderParallelComponent from \"../redundancy/RenderParallelComponent\";\r\nimport EquipmentName from \"./EquipmentName\";\r\nconst FailureMode = (props) => {\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const failureModesData = useSelector((state) => state.treeData.failureModes);\r\n  const [gridApi, setGridApi] = useState(null);\r\n  // const equipments = systemData.map(\r\n  //   (eqpt) => eqpt.name + \"-\" + eqpt.parentName\r\n  // );\r\n  let selectedOptionId = \"\";\r\n  // const\r\n  const setIdToDropdownOption = (id) => {\r\n    selectedOptionId = id;\r\n  };\r\n  const rowData = []\r\n  const FMcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"EquipmentName\"\r\n      headerName=\"Equipment Name\"\r\n      headerTooltip=\"Equipment Name\"\r\n      cellEditorFramework={EquipmentName}\r\n      minWidth={100}\r\n      editable={true}\r\n      // keyCreator={{ values: systemData.map((x) => x.id) }}\r\n      cellEditorParams={{ setId: setIdToDropdownOption }}\r\n      // cellEditorParams={{ values: systemData.map((x) => x.name) }}\r\n      checkboxSelection={true}\r\n      // cellEditor=\"agSelectCellEditor\"\r\n    />,\r\n    <AgGridColumn\r\n      field=\"fixFailureMode\"\r\n      headerName=\"Failure Mode\"\r\n      headerTooltip=\"Failure Mode\"\r\n      width={300}\r\n      editable={true}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: failureModesData,\r\n      }}\r\n    />\r\n  ];\r\n\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        EquipmentName: \"\",\r\n      id: uuid(),\r\n      eqId: \"\",\r\n      fixFailureMode: \"\",\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    // console.log(selectedRows);\r\n  };\r\n  const updateFinalRowData = (allRows, rowId) => {\r\n    debugger;\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <div className={styles.systemTable}>\r\n      <Table\r\n        columnDefs={FMcolumnDefs}\r\n        rowData={rowData}\r\n        tableUpdate={updateFinalRowData}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n      />\r\n      <div className={styles.tableFooter}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => AddRow()}\r\n            >\r\n              Add Row\r\n            </Button>\r\n            <Button\r\n              style={{ marginLeft: 10 }}\r\n              variant=\"contained\"\r\n              startIcon={<DeleteIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => deleteRows()}\r\n            >\r\n              Delete Rows\r\n            </Button>\r\n          </div>\r\n    </div>\r\n  );\r\n};\r\nexport default FailureMode;\r\n"]},"metadata":{},"sourceType":"module"}