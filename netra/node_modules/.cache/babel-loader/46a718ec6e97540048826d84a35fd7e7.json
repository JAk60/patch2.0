{"ast":null,"code":"var _jsxFileName = \"D:\\\\NETRA -P\\\\Netra\\\\netra\\\\src\\\\ui\\\\Table\\\\Table2.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport \"./Table.css\";\nimport ReactDom from \"react-dom\";\nimport { TextField } from \"@material-ui/core\"; // function getDatePicker() {\n//   function Datepicker() {}\n//   Datepicker.prototype.init = function (params) {\n//     this.eInput = document.createElement(\"input\");\n//     this.eInput.value = params.value;\n//     this.eInput.classList.add(\"ag-input\");\n//     this.eInput.style.height = \"100%\";\n//     $(this.eInput).datepicker({ dateFormat: \"dd/mm/yy\" });\n//     console.log(params);\n//   };\n//   Datepicker.prototype.getGui = function () {\n//     return this.eInput;\n//   };\n//   Datepicker.prototype.afterGuiAttached = function () {\n//     this.eInput.focus();\n//     this.eInput.select();\n//   };\n//   Datepicker.prototype.getValue = function () {\n//     return this.eInput.value;\n//   };\n//   Datepicker.prototype.destroy = function () {};\n//   Datepicker.prototype.isPopup = function () {\n//     return false;\n//   };\n//   return Datepicker;\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getDatePicker = () => {\n  const fillZeros = a => {\n    return Number(a) < 10 ? \"0\" + a : a;\n  };\n\n  const getFormattedDateOutput = dateString => {\n    const dateParse = new Date(dateString);\n    const dd = dateParse.getDate();\n    const mm = dateParse.getMonth() + 1; //January is 0!\n\n    const yyyy = dateParse.getFullYear(); // console.log(dateString, dateParse);\n\n    return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\n  };\n\n  function Datepicker() {}\n\n  Datepicker.prototype.init = function (params) {\n    this.textInput = /*#__PURE__*/React.createRef();\n\n    const getFormattedDateMaterial = dateString => {\n      const dateParse = new Date(dateString.split(\"/\")[2] + \"-\" + dateString.split(\"/\")[1] + \"-\" + dateString.split(\"/\")[0]);\n      const dd = dateParse.getDate();\n      const mm = dateParse.getMonth() + 1; //January is 0!\n\n      const yyyy = dateParse.getFullYear();\n      console.log(dateString, dateParse);\n      return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\n    };\n\n    const eInput = /*#__PURE__*/React.createElement(TextField, {\n      type: \"datetime-local\",\n      defaultValue: getFormattedDateMaterial(params.value),\n      ref: this.textInput,\n      style: {\n        width: \"95%\"\n      }\n    });\n    this.div = document.createElement(\"div\");\n    this.div.className = \"ag-cell-parent-append\";\n    ReactDom.render(eInput, this.div);\n  };\n\n  Datepicker.prototype.getGui = function () {\n    return this.div;\n  };\n\n  Datepicker.prototype.afterGuiAttached = function () {\n    this.textInput.current.focus();\n  };\n\n  Datepicker.prototype.getValue = function () {\n    return getFormattedDateOutput(this.textInput.current.querySelector(\"input\").value);\n  };\n\n  Datepicker.prototype.destroy = function () {};\n\n  Datepicker.prototype.isPopup = function () {\n    return false;\n  };\n\n  return Datepicker;\n};\n\nconst Table2 = props => {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const location = useLocation();\n  console.log(location);\n\n  const onGridReady = params => {\n    setGridApi(params.api);\n    setGridColumnApi(params.columnApi);\n    params.api.sizeColumnsToFit();\n  };\n\n  const onFirstDataRendered = params => {\n    params.api.sizeColumnsToFit();\n  };\n\n  const onGridSizeChanged = params => {\n    params.api.sizeColumnsToFit();\n  };\n\n  const saveModifiedRows = () => {\n    const allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    console.log(allRowData); // add API call to save modified rows\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ag-theme-alpine\",\n    style: {\n      height: 400,\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n      defaultColDef: {\n        flex: 1,\n        resizable: true,\n        filter: true,\n        sortable: true\n      },\n      rowData: props.rowData,\n      columnDefs: props.columnDefs,\n      onGridReady: onGridReady,\n      onFirstDataRendered: onFirstDataRendered,\n      onGridSizeChanged: onGridSizeChanged,\n      onCellValueChanged: saveModifiedRows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Table2, \"9Hko2JnWw2umJ8xT2J+qetHmduQ=\", false, function () {\n  return [useLocation];\n});\n\n_c = Table2;\nexport default Table2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table2\");","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/src/ui/Table/Table2.js"],"names":["React","useState","useLocation","AgGridReact","ReactDom","TextField","getDatePicker","fillZeros","a","Number","getFormattedDateOutput","dateString","dateParse","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","Datepicker","prototype","init","params","textInput","createRef","getFormattedDateMaterial","split","console","log","eInput","createElement","type","defaultValue","value","ref","style","width","div","document","className","render","getGui","afterGuiAttached","current","focus","getValue","querySelector","destroy","isPopup","Table2","props","gridApi","setGridApi","gridColumnApi","setGridColumnApi","location","onGridReady","api","columnApi","sizeColumnsToFit","onFirstDataRendered","onGridSizeChanged","saveModifiedRows","allRowData","forEachNode","node","push","data","height","flex","resizable","filter","sortable","rowData","columnDefs"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport \"./Table.css\";\r\nimport ReactDom from \"react-dom\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\n// function getDatePicker() {\r\n//   function Datepicker() {}\r\n//   Datepicker.prototype.init = function (params) {\r\n//     this.eInput = document.createElement(\"input\");\r\n//     this.eInput.value = params.value;\r\n//     this.eInput.classList.add(\"ag-input\");\r\n//     this.eInput.style.height = \"100%\";\r\n//     $(this.eInput).datepicker({ dateFormat: \"dd/mm/yy\" });\r\n//     console.log(params);\r\n//   };\r\n//   Datepicker.prototype.getGui = function () {\r\n//     return this.eInput;\r\n//   };\r\n//   Datepicker.prototype.afterGuiAttached = function () {\r\n//     this.eInput.focus();\r\n//     this.eInput.select();\r\n//   };\r\n//   Datepicker.prototype.getValue = function () {\r\n//     return this.eInput.value;\r\n//   };\r\n//   Datepicker.prototype.destroy = function () {};\r\n//   Datepicker.prototype.isPopup = function () {\r\n//     return false;\r\n//   };\r\n//   return Datepicker;\r\n// }\r\n\r\nconst getDatePicker = () => {\r\n  const fillZeros = (a) => {\r\n    return Number(a) < 10 ? \"0\" + a : a;\r\n  };\r\n  const getFormattedDateOutput = (dateString) => {\r\n    const dateParse = new Date(dateString);\r\n    const dd = dateParse.getDate();\r\n    const mm = dateParse.getMonth() + 1; //January is 0!\r\n    const yyyy = dateParse.getFullYear();\r\n    // console.log(dateString, dateParse);\r\n    return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n  };\r\n  function Datepicker() {}\r\n  Datepicker.prototype.init = function (params) {\r\n    this.textInput = React.createRef();\r\n    const getFormattedDateMaterial = (dateString) => {\r\n      const dateParse = new Date(\r\n        dateString.split(\"/\")[2] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[1] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[0]\r\n      );\r\n      const dd = dateParse.getDate();\r\n      const mm = dateParse.getMonth() + 1; //January is 0!\r\n      const yyyy = dateParse.getFullYear();\r\n      console.log(dateString, dateParse);\r\n      return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n    };\r\n    const eInput = React.createElement(TextField, {\r\n      type: \"datetime-local\",\r\n      defaultValue: getFormattedDateMaterial(params.value),\r\n      ref: this.textInput,\r\n      style: { width: \"95%\" },\r\n    });\r\n    this.div = document.createElement(\"div\");\r\n    this.div.className = \"ag-cell-parent-append\";\r\n    ReactDom.render(eInput, this.div);\r\n  };\r\n  Datepicker.prototype.getGui = function () {\r\n    return this.div;\r\n  };\r\n  Datepicker.prototype.afterGuiAttached = function () {\r\n    this.textInput.current.focus();\r\n  };\r\n  Datepicker.prototype.getValue = function () {\r\n    return getFormattedDateOutput(\r\n      this.textInput.current.querySelector(\"input\").value\r\n    );\r\n  };\r\n  Datepicker.prototype.destroy = function () {};\r\n  Datepicker.prototype.isPopup = function () {\r\n    return false;\r\n  };\r\n  return Datepicker;\r\n};\r\n\r\nconst Table2 = (props) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  const location = useLocation();\r\n  console.log(location);\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n\r\n  const onFirstDataRendered = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n  const onGridSizeChanged = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n\r\n  const saveModifiedRows = () => {\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    console.log(allRowData);\r\n    // add API call to save modified rows\r\n  };\r\n\r\n  return (\r\n    <div className=\"ag-theme-alpine\" style={{ height: 400, width: \"100%\" }}>\r\n      <AgGridReact\r\n        defaultColDef={{\r\n          flex: 1,\r\n          resizable: true,\r\n          filter: true,\r\n          sortable: true,\r\n        }}\r\n        rowData={props.rowData}\r\n        columnDefs={props.columnDefs}\r\n        onGridReady={onGridReady}\r\n        onFirstDataRendered={onFirstDataRendered}\r\n        onGridSizeChanged={onGridSizeChanged}\r\n        onCellValueChanged={saveModifiedRows}\r\n      >\r\n        {/* {props.columnDefs} */}\r\n      </AgGridReact>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table2;\r\n"]},"metadata":{},"sourceType":"module"}