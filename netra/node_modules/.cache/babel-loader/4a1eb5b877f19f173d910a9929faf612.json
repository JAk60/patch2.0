{"ast":null,"code":"var _jsxFileName = \"E:\\\\NetraB\\\\netra\\\\src\\\\ui\\\\Form\\\\SelectWithLimit.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { makeStyles, Chip, TextField } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InputStyles = makeStyles({\n  root: {\n    paddingRight: 10,\n    paddingLeft: 10,\n    background: \"#fff\",\n    border: \"1px solid #0263a1\",\n    borderRadius: \"5px\",\n    minHeight: 40,\n    boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\"\n  }\n});\nexport const SelectWithLimit = ({\n  disabled = false,\n  limit,\n  options,\n  getSelectedValues,\n  selectType = null\n}) => {\n  _s();\n\n  const [disableInput, setDisableInput] = useState(false);\n  const Inputclasses = InputStyles();\n  debugger;\n\n  if (selectType === \"equipmentName\") {\n    return /*#__PURE__*/_jsxDEV(Autocomplete, {\n      classes: Inputclasses,\n      label: \"lol\",\n      disabled: disabled || disableInput,\n      multiple: true,\n      options: options,\n      groupBy: option => option.parent,\n      getOptionLabel: option => option.name,\n      renderTags: (tagValue, getTagProps) => tagValue.map((option, index) => /*#__PURE__*/_jsxDEV(Chip, {\n        label: option.name,\n        style: {\n          width: \"fit-content\"\n        },\n        ...getTagProps({\n          index\n        }),\n        // Set disable explicitly after getTagProps\n        disabled: disabled\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)),\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        InputProps: { ...params.InputProps,\n          disableUnderline: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this),\n      onChange: (event, newValue) => {\n        // do something else\n        // set the disable input\n        getSelectedValues(newValue, selectType);\n        setDisableInput(newValue.length >= limit);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Autocomplete, {\n      classes: Inputclasses,\n      label: \"lol\",\n      disabled: disabled || disableInput,\n      multiple: true,\n      options: options // value={value}\n      ,\n      renderTags: (tagValue, getTagProps) => tagValue.map((option, index) => /*#__PURE__*/_jsxDEV(Chip, {\n        label: option,\n        style: {\n          width: \"fit-content\"\n        },\n        ...getTagProps({\n          index\n        }),\n        // Set disable explicitly after getTagProps\n        disabled: disabled\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)),\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        InputProps: { ...params.InputProps,\n          disableUnderline: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this),\n      onChange: (event, newValue) => {\n        // do something else\n        // set the disable input\n        getSelectedValues(newValue, selectType);\n        setDisableInput(newValue.length >= limit);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(SelectWithLimit, \"bJMCIC2kxT916EZQVqxvYaWWJcY=\");\n\n_c = SelectWithLimit;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectWithLimit\");","map":{"version":3,"sources":["E:/NetraB/netra/src/ui/Form/SelectWithLimit.js"],"names":["React","useState","Autocomplete","makeStyles","Chip","TextField","InputStyles","root","paddingRight","paddingLeft","background","border","borderRadius","minHeight","boxShadow","SelectWithLimit","disabled","limit","options","getSelectedValues","selectType","disableInput","setDisableInput","Inputclasses","option","parent","name","tagValue","getTagProps","map","index","width","params","InputProps","disableUnderline","event","newValue","length"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { makeStyles, Chip, TextField } from \"@material-ui/core\";\r\n\r\nconst InputStyles = makeStyles({\r\n  root: {\r\n    paddingRight: 10,\r\n    paddingLeft: 10,\r\n    background: \"#fff\",\r\n    border: \"1px solid #0263a1\",\r\n    borderRadius: \"5px\",\r\n    minHeight: 40,\r\n    boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n});\r\n\r\nexport const SelectWithLimit = ({\r\n  disabled = false,\r\n  limit,\r\n  options,\r\n  getSelectedValues,\r\n  selectType = null,\r\n}) => {\r\n  const [disableInput, setDisableInput] = useState(false);\r\n\r\n  const Inputclasses = InputStyles();\r\n  debugger;\r\n  if (selectType === \"equipmentName\") {\r\n    return (\r\n      <Autocomplete\r\n        classes={Inputclasses}\r\n        label=\"lol\"\r\n        disabled={disabled || disableInput}\r\n        multiple\r\n        options={options}\r\n        groupBy={(option) => option.parent}\r\n        getOptionLabel={(option) => option.name}\r\n        renderTags={(tagValue, getTagProps) =>\r\n          tagValue.map((option, index) => (\r\n            <Chip\r\n              key={index}\r\n              label={option.name}\r\n              style={{ width: \"fit-content\" }}\r\n              {...getTagProps({ index })}\r\n              // Set disable explicitly after getTagProps\r\n              disabled={disabled}\r\n            />\r\n          ))\r\n        }\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            InputProps={{ ...params.InputProps, disableUnderline: true }}\r\n          />\r\n        )}\r\n        onChange={(event, newValue) => {\r\n          // do something else\r\n          // set the disable input\r\n          getSelectedValues(newValue, selectType);\r\n          setDisableInput(newValue.length >= limit);\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    return (\r\n      <Autocomplete\r\n        classes={Inputclasses}\r\n        label=\"lol\"\r\n        disabled={disabled || disableInput}\r\n        multiple\r\n        options={options}\r\n        // value={value}\r\n        renderTags={(tagValue, getTagProps) =>\r\n          tagValue.map((option, index) => (\r\n            <Chip\r\n              key={index}\r\n              label={option}\r\n              style={{ width: \"fit-content\" }}\r\n              {...getTagProps({ index })}\r\n              // Set disable explicitly after getTagProps\r\n              disabled={disabled}\r\n            />\r\n          ))\r\n        }\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            InputProps={{ ...params.InputProps, disableUnderline: true }}\r\n          />\r\n        )}\r\n        onChange={(event, newValue) => {\r\n          // do something else\r\n          // set the disable input\r\n          getSelectedValues(newValue, selectType);\r\n          setDisableInput(newValue.length >= limit);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}