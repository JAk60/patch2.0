{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\PM OPTIM\\\\OptiQ.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { TextField, Button } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OptiQ = ({\n  questions,\n  name\n}) => {\n  _s();\n\n  const [answers, setAnswers] = useState({});\n  const [tval, setTval] = useState(0);\n\n  const handleSubmit = event => {\n    event.preventDefault(); // Include the method value in the answers object\n\n    const answersWithMethod = { ...answers,\n      method: name\n    }; // Send the answers to the Flask backend\n\n    fetch('/optimize', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(answersWithMethod)\n    }).then(response => response.json()).then(data => {\n      // Handle the response from the backend\n      console.log(data);\n      setTval(data.t);\n    }).catch(error => {\n      // Handle any errors\n      console.error(error);\n    });\n  };\n\n  const handleAnswerChange = (event, questionId) => {\n    const {\n      value\n    } = event.target;\n    setAnswers(prevAnswers => ({ ...prevAnswers,\n      [questionId]: parseInt(value)\n    }));\n    setAnswers(prevAnswers => ({ ...prevAnswers,\n      method: name\n    }));\n  };\n\n  console.log(answers);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [name, \" Questions\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [questions === null || questions === void 0 ? void 0 : questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: question.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), question.type === 'text' && /*#__PURE__*/_jsxDEV(TextField, {\n          value: answers[question.id] || '',\n          onChange: event => handleAnswerChange(event, question.id),\n          required: question.required\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)]\n      }, question.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), tval]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OptiQ, \"qtQNKl+Bwf4BgMLJCJWax0phY7E=\");\n\n_c = OptiQ;\nexport default OptiQ;\n\nvar _c;\n\n$RefreshReg$(_c, \"OptiQ\");","map":{"version":3,"sources":["D:/NetraB/netra/src/pages/PM OPTIM/OptiQ.js"],"names":["React","useState","TextField","Button","OptiQ","questions","name","answers","setAnswers","tval","setTval","handleSubmit","event","preventDefault","answersWithMethod","method","fetch","headers","body","JSON","stringify","then","response","json","data","console","log","t","catch","error","handleAnswerChange","questionId","value","target","prevAnswers","parseInt","map","question","text","type","id","required"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { TextField, Button } from '@material-ui/core';\r\n\r\nconst OptiQ = ({ questions, name }) => {\r\n  const [answers, setAnswers] = useState({});\r\n  const [tval, setTval] = useState(0)\r\n\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n  \r\n    // Include the method value in the answers object\r\n    const answersWithMethod = { ...answers, method: name };\r\n  \r\n    // Send the answers to the Flask backend\r\n    fetch('/optimize', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(answersWithMethod),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Handle the response from the backend\r\n        console.log(data);\r\n        setTval(data.t)\r\n      })\r\n      .catch((error) => {\r\n        // Handle any errors\r\n        console.error(error);\r\n      });\r\n  };\r\n  \r\n\r\n  const handleAnswerChange = (event, questionId) => {\r\n    const { value } = event.target;\r\n    setAnswers((prevAnswers) => ({ ...prevAnswers, [questionId]: parseInt(value) }));\r\n    setAnswers((prevAnswers) => ({...prevAnswers, method: name}));\r\n  };\r\n  console.log(answers);\r\n\r\n  return (\r\n    <div>\r\n      <h3>{name} Questions</h3>\r\n      <form onSubmit={handleSubmit}>\r\n        {questions?.map((question) => (\r\n          <div key={question.id}>\r\n            <label>{question.text}</label>\r\n            {question.type === 'text' && (\r\n              <TextField\r\n                value={answers[question.id] || ''}\r\n                onChange={(event) => handleAnswerChange(event, question.id)}\r\n                required={question.required}\r\n              />\r\n            )}\r\n            {/* Add other input types (e.g., select, radio, checkbox) based on the question type */}\r\n          </div>\r\n        ))}\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" onClick={handleSubmit}>\r\n          Submit\r\n        </Button>\r\n      </form>\r\n      {tval}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OptiQ;\r\n"]},"metadata":{},"sourceType":"module"}