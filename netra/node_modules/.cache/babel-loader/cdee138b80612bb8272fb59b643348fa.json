{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\systen_configuration\\\\failureMode\\\\EquipmentName.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useImperativeHandle, useRef, forwardRef } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport SystemConfiguration from \"../../systen_configuration/SystemConfiguration\";\nimport { useLocation } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EquipmentName = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [value, setValue] = useState([]);\n  const refInput = useRef(null);\n  const systemData = useSelector(state => state.treeData.treeData);\n  const location = useLocation();\n\n  const handleChange = (event, newValue) => {\n    debugger; // alert(newValue);\n\n    setValue(newValue);\n  }; // useEffect(() => {\n  //     // focus on the input\n  //     //setTimeout(() => refInput.current.focus());\n  //     console.log(systemData)\n  // }, []);\n\n  /* Component Editor Lifecycle methods */\n\n\n  useImperativeHandle(ref, () => {\n    return {\n      // the final value to send to the grid, on completion of editing\n      getValue() {\n        //console.log(value);\n        const path = location.pathname;\n\n        if (path === \"/data_manager/maintenance_data\") {\n          props.setId(value.id);\n        }\n\n        return value.name;\n      },\n\n      isPopup() {\n        return true;\n      },\n\n      // Gets called once before editing starts, to give editor a chance to\n      // cancel the editing before it even starts.\n      isCancelBeforeStart() {\n        return false;\n      } // Gets called once when editing is finished (eg if Enter is pressed).\n      // If you return true, then the result of the edit will be ignored.\n      // isCancelAfterEnd() {\n      //     // our editor will reject any value greater than 1000\n      //     return value > 1000;\n      // }\n\n\n    };\n  });\n  return (\n    /*#__PURE__*/\n    // <input type=\"number\"\n    //        ref={refInput}\n    //        value={value}\n    //        onChange={event => setValue(event.target.value)}\n    //        style={{width: \"100%\"}}\n    // />\n    _jsxDEV(Autocomplete, {\n      options: systemData //value={value}\n      ,\n      onChange: handleChange,\n      groupBy: option => option.parentName,\n      getOptionLabel: option => option.name,\n      style: {\n        width: 300\n      },\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        ref: refInput,\n        label: \"Select Equipment\",\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this)\n  );\n}, \"UcfQiOHZZseYzPyaYMQqKV72XCc=\", false, function () {\n  return [useSelector, useLocation, useImperativeHandle];\n}));\n_c2 = EquipmentName;\nexport default EquipmentName;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EquipmentName$forwardRef\");\n$RefreshReg$(_c2, \"EquipmentName\");","map":{"version":3,"sources":["D:/NetraB/netra/src/pages/systen_configuration/failureMode/EquipmentName.js"],"names":["React","useEffect","useState","useImperativeHandle","useRef","forwardRef","Autocomplete","TextField","useDispatch","useSelector","SystemConfiguration","useLocation","EquipmentName","props","ref","value","setValue","refInput","systemData","state","treeData","location","handleChange","event","newValue","getValue","path","pathname","setId","id","name","isPopup","isCancelBeforeStart","option","parentName","width","params"],"mappings":";;;AAAA,OAAOA,KAAP,IACEC,SADF,EAEEC,QAFF,EAGEC,mBAHF,EAIEC,MAJF,EAKEC,UALF,QAMO,OANP;AAOA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,mBAAP,MAAgC,gDAAhC;AACA,SAASC,WAAT,QAA4B,cAA5B;;AAEA,MAAMC,aAAa,gBAAGP,UAAU,SAAC,CAACQ,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AAC/C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMe,QAAQ,GAAGb,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMc,UAAU,GAAGT,WAAW,CAAEU,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeA,QAA3B,CAA9B;AACA,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;;AACA,QAAMW,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC,aADwC,CAExC;;AACAR,IAAAA,QAAQ,CAACQ,QAAD,CAAR;AACD,GAJD,CAL+C,CAW/C;AACA;AACA;AACA;AACA;;AAEA;;;AACArB,EAAAA,mBAAmB,CAACW,GAAD,EAAM,MAAM;AAC7B,WAAO;AACL;AACAW,MAAAA,QAAQ,GAAG;AACT;AACA,cAAMC,IAAI,GAAGL,QAAQ,CAACM,QAAtB;;AACA,YAAID,IAAI,KAAK,gCAAb,EAA+C;AAC7Cb,UAAAA,KAAK,CAACe,KAAN,CAAYb,KAAK,CAACc,EAAlB;AACD;;AACD,eAAOd,KAAK,CAACe,IAAb;AACD,OATI;;AAULC,MAAAA,OAAO,GAAG;AACR,eAAO,IAAP;AACD,OAZI;;AAaL;AACA;AACAC,MAAAA,mBAAmB,GAAG;AACpB,eAAO,KAAP;AACD,OAjBI,CAmBL;AACA;AACA;AACA;AACA;AACA;;;AAxBK,KAAP;AA0BD,GA3BkB,CAAnB;AA6BA;AAAA;AACE;AACA;AACA;AACA;AACA;AACA;AACA,YAAC,YAAD;AACE,MAAA,OAAO,EAAEd,UADX,CAEE;AAFF;AAGE,MAAA,QAAQ,EAAEI,YAHZ;AAIE,MAAA,OAAO,EAAGW,MAAD,IAAYA,MAAM,CAACC,UAJ9B;AAKE,MAAA,cAAc,EAAGD,MAAD,IAAYA,MAAM,CAACH,IALrC;AAME,MAAA,KAAK,EAAE;AAAEK,QAAAA,KAAK,EAAE;AAAT,OANT;AAOE,MAAA,WAAW,EAAGC,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,QAAA,GAAG,EAAEnB,QAFP;AAGE,QAAA,KAAK,EAAC,kBAHR;AAIE,QAAA,OAAO,EAAC;AAJV;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA;AAPF;AAwBD,CAvE+B;AAAA,UAGXR,WAHW,EAIbE,WAJa,EAkB9BR,mBAlB8B;AAAA,GAAhC;MAAMS,a;AAwEN,eAAeA,aAAf","sourcesContent":["import React, {\r\n  useEffect,\r\n  useState,\r\n  useImperativeHandle,\r\n  useRef,\r\n  forwardRef,\r\n} from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport SystemConfiguration from \"../../systen_configuration/SystemConfiguration\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nconst EquipmentName = forwardRef((props, ref) => {\r\n  const [value, setValue] = useState([]);\r\n  const refInput = useRef(null);\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const location = useLocation();\r\n  const handleChange = (event, newValue) => {\r\n    debugger;\r\n    // alert(newValue);\r\n    setValue(newValue);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //     // focus on the input\r\n  //     //setTimeout(() => refInput.current.focus());\r\n  //     console.log(systemData)\r\n  // }, []);\r\n\r\n  /* Component Editor Lifecycle methods */\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      // the final value to send to the grid, on completion of editing\r\n      getValue() {\r\n        //console.log(value);\r\n        const path = location.pathname;\r\n        if (path === \"/data_manager/maintenance_data\") {\r\n          props.setId(value.id);\r\n        }\r\n        return value.name;\r\n      },\r\n      isPopup() {\r\n        return true;\r\n      },\r\n      // Gets called once before editing starts, to give editor a chance to\r\n      // cancel the editing before it even starts.\r\n      isCancelBeforeStart() {\r\n        return false;\r\n      },\r\n\r\n      // Gets called once when editing is finished (eg if Enter is pressed).\r\n      // If you return true, then the result of the edit will be ignored.\r\n      // isCancelAfterEnd() {\r\n      //     // our editor will reject any value greater than 1000\r\n      //     return value > 1000;\r\n      // }\r\n    };\r\n  });\r\n\r\n  return (\r\n    // <input type=\"number\"\r\n    //        ref={refInput}\r\n    //        value={value}\r\n    //        onChange={event => setValue(event.target.value)}\r\n    //        style={{width: \"100%\"}}\r\n    // />\r\n    <Autocomplete\r\n      options={systemData}\r\n      //value={value}\r\n      onChange={handleChange}\r\n      groupBy={(option) => option.parentName}\r\n      getOptionLabel={(option) => option.name}\r\n      style={{ width: 300 }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          ref={refInput}\r\n          label=\"Select Equipment\"\r\n          variant=\"outlined\"\r\n        />\r\n      )}\r\n    />\r\n  );\r\n});\r\nexport default EquipmentName;\r\n"]},"metadata":{},"sourceType":"module"}