{"ast":null,"code":"var _jsxFileName = \"D:\\\\NETRA -P\\\\Netra\\\\netra\\\\src\\\\pages\\\\TaskDashboard\\\\PaperTable.js\";\nimport React from 'react';\nimport { Paper, Typography, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PreferredEquipmentsTable = ({\n  response\n}) => {\n  // Assuming response is an object with a \"res\" array property\n  const resArray = (response === null || response === void 0 ? void 0 : response.res) || []; // Extracting total reliability from the last element\n\n  const totalReliability = resArray[resArray.length - 1] || ''; // Extracting preferred equipment details (excluding the last element)\n\n  const preferredEquipments = resArray.slice(0, resArray.length - 1); // Parse the preferred equipment data into an array of objects\n\n  const parsedData = preferredEquipments.map(item => {\n    // Extract phase and preferred equipment from each item\n    const matches = item.match(/For (phase \\d+) and group \\d+, preferred equipments are (\\[.*?\\])/);\n\n    if (matches && matches.length === 3) {\n      const phase = matches[1];\n      const preferredEquipment = JSON.parse(matches[2].replace(/'/g, '\"'));\n      return {\n        phase,\n        preferredEquipment\n      };\n    }\n\n    return null;\n  }).filter(Boolean); // Group preferred equipment by phase\n\n  const groupedData = parsedData.reduce((acc, item) => {\n    if (!acc[item.phase]) {\n      acc[item.phase] = [];\n    }\n\n    acc[item.phase] = acc[item.phase].concat(item.preferredEquipment);\n    return acc;\n  }, {});\n  console.log(groupedData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      style: {\n        padding: '20px',\n        margin: '80px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Preferred Equipments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                style: {\n                  backgroundColor: '#56bcec',\n                  color: 'white'\n                },\n                children: \"Phase\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                style: {\n                  backgroundColor: '#56bcec',\n                  color: 'white'\n                },\n                children: \"Preferred Equipment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: Object.entries(groupedData).map(([phase, preferredEquipment], index) => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: phase\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: preferredEquipment.join(', ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: totalReliability\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 7\n  }, this);\n};\n\n_c = PreferredEquipmentsTable;\nexport default PreferredEquipmentsTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PreferredEquipmentsTable\");","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/src/pages/TaskDashboard/PaperTable.js"],"names":["React","Paper","Typography","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","PreferredEquipmentsTable","response","resArray","res","totalReliability","length","preferredEquipments","slice","parsedData","map","item","matches","match","phase","preferredEquipment","JSON","parse","replace","filter","Boolean","groupedData","reduce","acc","concat","console","log","padding","margin","backgroundColor","color","Object","entries","index","join"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAcC,UAAd,EAAyBC,KAAzB,EAA+BC,SAA/B,EAAyCC,SAAzC,EAAmDC,cAAnD,EAAkEC,SAAlE,EAA4EC,QAA5E,QAA2F,mBAA3F;;;AAEA,MAAMC,wBAAwB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC/C;AACA,QAAMC,QAAQ,GAAG,CAAAD,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEE,GAAV,KAAiB,EAAlC,CAF+C,CAI/C;;AACA,QAAMC,gBAAgB,GAAGF,QAAQ,CAACA,QAAQ,CAACG,MAAT,GAAkB,CAAnB,CAAR,IAAiC,EAA1D,CAL+C,CAO/C;;AACA,QAAMC,mBAAmB,GAAGJ,QAAQ,CAACK,KAAT,CAAe,CAAf,EAAkBL,QAAQ,CAACG,MAAT,GAAkB,CAApC,CAA5B,CAR+C,CAU/C;;AACA,QAAMG,UAAU,GAAGF,mBAAmB,CAACG,GAApB,CAAwBC,IAAI,IAAI;AACjD;AACA,UAAMC,OAAO,GAAGD,IAAI,CAACE,KAAL,CAAW,mEAAX,CAAhB;;AACA,QAAID,OAAO,IAAIA,OAAO,CAACN,MAAR,KAAmB,CAAlC,EAAqC;AACnC,YAAMQ,KAAK,GAAGF,OAAO,CAAC,CAAD,CAArB;AACA,YAAMG,kBAAkB,GAAGC,IAAI,CAACC,KAAL,CAAWL,OAAO,CAAC,CAAD,CAAP,CAAWM,OAAX,CAAmB,IAAnB,EAAyB,GAAzB,CAAX,CAA3B;AACA,aAAO;AAAEJ,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAP;AACD;;AACD,WAAO,IAAP;AACD,GATkB,EAShBI,MATgB,CASTC,OATS,CAAnB,CAX+C,CAsB/C;;AACA,QAAMC,WAAW,GAAGZ,UAAU,CAACa,MAAX,CAAkB,CAACC,GAAD,EAAMZ,IAAN,KAAe;AACnD,QAAI,CAACY,GAAG,CAACZ,IAAI,CAACG,KAAN,CAAR,EAAsB;AACpBS,MAAAA,GAAG,CAACZ,IAAI,CAACG,KAAN,CAAH,GAAkB,EAAlB;AACD;;AACDS,IAAAA,GAAG,CAACZ,IAAI,CAACG,KAAN,CAAH,GAAkBS,GAAG,CAACZ,IAAI,CAACG,KAAN,CAAH,CAAgBU,MAAhB,CAAuBb,IAAI,CAACI,kBAA5B,CAAlB;AACA,WAAOQ,GAAP;AACD,GANmB,EAMjB,EANiB,CAApB;AAQAE,EAAAA,OAAO,CAACC,GAAR,CAAYL,WAAZ;AACA,sBACE;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAE,CAAlB;AAAqB,MAAA,KAAK,EAAE;AAAEM,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,MAAM,EAAE;AAA3B,OAA5B;AAAA,8BACE,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,cAAD;AAAA,+BACE,QAAC,KAAD;AAAA,kCACE,QAAC,SAAD;AAAA,mCACE,QAAC,QAAD;AAAA,sCACE,QAAC,SAAD;AAAW,gBAAA,KAAK,EAAE;AAAEC,kBAAAA,eAAe,EAAE,SAAnB;AAA8BC,kBAAAA,KAAK,EAAE;AAArC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,SAAD;AAAW,gBAAA,KAAK,EAAE;AAAED,kBAAAA,eAAe,EAAE,SAAnB;AAA8BC,kBAAAA,KAAK,EAAE;AAArC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE,QAAC,SAAD;AAAA,sBACGC,MAAM,CAACC,OAAP,CAAeX,WAAf,EAA4BX,GAA5B,CAAgC,CAAC,CAACI,KAAD,EAAQC,kBAAR,CAAD,EAA8BkB,KAA9B,kBAC/B,QAAC,QAAD;AAAA,sCACE,QAAC,SAAD;AAAA,0BAAYnB;AAAZ;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,SAAD;AAAA,0BAAYC,kBAAkB,CAACmB,IAAnB,CAAwB,IAAxB;AAAZ;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA,eAAeD,KAAf;AAAA;AAAA;AAAA;AAAA,oBADD;AADH;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eAqBE,QAAC,UAAD;AAAA,kBAAa5B;AAAb;AAAA;AAAA;AAAA;AAAA,cArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CA3DH;;KAAMJ,wB;AA6DJ,eAAeA,wBAAf","sourcesContent":["import React from 'react';\r\nimport {Paper,Typography,Table,TableBody,TableCell,TableContainer,TableHead,TableRow} from '@material-ui/core';\r\n\r\nconst PreferredEquipmentsTable = ({ response }) => {\r\n    // Assuming response is an object with a \"res\" array property\r\n    const resArray = response?.res || [];\r\n  \r\n    // Extracting total reliability from the last element\r\n    const totalReliability = resArray[resArray.length - 1] || '';\r\n  \r\n    // Extracting preferred equipment details (excluding the last element)\r\n    const preferredEquipments = resArray.slice(0, resArray.length - 1);\r\n  \r\n    // Parse the preferred equipment data into an array of objects\r\n    const parsedData = preferredEquipments.map(item => {\r\n      // Extract phase and preferred equipment from each item\r\n      const matches = item.match(/For (phase \\d+) and group \\d+, preferred equipments are (\\[.*?\\])/);\r\n      if (matches && matches.length === 3) {\r\n        const phase = matches[1];\r\n        const preferredEquipment = JSON.parse(matches[2].replace(/'/g, '\"'));\r\n        return { phase, preferredEquipment };\r\n      }\r\n      return null;\r\n    }).filter(Boolean);\r\n  \r\n    // Group preferred equipment by phase\r\n    const groupedData = parsedData.reduce((acc, item) => {\r\n      if (!acc[item.phase]) {\r\n        acc[item.phase] = [];\r\n      }\r\n      acc[item.phase] = acc[item.phase].concat(item.preferredEquipment);\r\n      return acc;\r\n    }, {});\r\n\r\n    console.log(groupedData)\r\n    return (\r\n      <div>\r\n        <Paper elevation={3} style={{ padding: '20px', margin: '80px' }}>\r\n          <Typography variant=\"h6\">Preferred Equipments</Typography>\r\n          <TableContainer>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell style={{ backgroundColor: '#56bcec', color: 'white' }}>Phase</TableCell>\r\n                  <TableCell style={{ backgroundColor: '#56bcec', color: 'white' }}>Preferred Equipment</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {Object.entries(groupedData).map(([phase, preferredEquipment], index) => (\r\n                  <TableRow key={index}>\r\n                    <TableCell>{phase}</TableCell>\r\n                    <TableCell>{preferredEquipment.join(', ')}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          {/* Display total reliability */}\r\n          <Typography>{totalReliability}</Typography>\r\n        </Paper>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default PreferredEquipmentsTable;  \r\n  \r\n  \r\n  \r\n  \r\n  "]},"metadata":{},"sourceType":"module"}