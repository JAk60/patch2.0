{"ast":null,"code":"var _jsxFileName = \"D:\\\\NETRA -P\\\\Netra\\\\netra\\\\src\\\\pages\\\\Mission Profile\\\\MissionProfile.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport NewModule from \"../../components/module/NewModule\";\nimport Navigation from \"../../components/navigation/Navigation\";\nimport UserSelection from \"../../ui/userSelection/userSelection\";\nimport styles from \"./MissionProfile.module.css\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport Table from \"../../ui/Table/DataManagerTable\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SystemStyles = makeStyles({\n  formControl: {\n    margin: \"2rem\",\n    minWidth: 200\n  },\n  Submit: {\n    margin: \"2rem\"\n  },\n  buttons: {\n    minWidth: 150,\n    marginLeft: 10,\n    marginTop: 15,\n    float: \"right\"\n  }\n});\n\nconst MissionProfile = props => {\n  _s();\n\n  const SystemClasses = SystemStyles();\n  const [gridApi, setGridApi] = useState(null);\n  const [SnackBarMessage, setSnackBarMessage] = useState({\n    severity: \"error\",\n    message: \"This is awesome\",\n    showSnackBar: false\n  });\n\n  const onHandleSnackClose = () => {\n    setSnackBarMessage({\n      severity: \"error\",\n      message: \"Close\",\n      showSnackBar: false\n    });\n  };\n\n  const [missionData, setMissionData] = useState([]); // let finalTableData = [];\n\n  const setFinalTableData = d => {\n    setMissionData(d);\n  };\n\n  useEffect(() => {\n    fetch(\"/mission_data\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      const mData = data; // const rowD = data.map((x) => () => {\n      //   return {\n      //     id: x[\"id\"],\n      //     missionName: x[\"missionName\"],\n      //     Harbour: x[\"Harbour\"],\n      //     elh: x[\"elh\"],\n      //     cruise: x[\"cruise\"],\n      //     ds: x[\"ds\"],\n      //     as: x[\"ask\"],\n      //   };\n      // });\n\n      setRows(mData);\n      setMissionData(mData);\n    });\n  }, []);\n  const [rowState, setRows] = useState([]);\n  const MProfileColumns = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"missionName\",\n    headerName: \"Mission Name\",\n    headerTooltip: \"Mission Name\",\n    width: 250,\n    checkboxSelection: true,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"Harbour\",\n    headerName: \"Harbour\",\n    headerTooltip: \"Harbour\",\n    width: 250,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"elh\",\n    headerName: \"Entry Leaving Harbour\",\n    headerTooltip: \"Entry Leaving Harbour\",\n    width: 250,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"cruise\",\n    headerName: \"Cruise\",\n    headerTooltip: \"Cruise\",\n    width: 250,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"ds\",\n    headerName: \"Defense Station\",\n    headerTooltip: \"Defense Station\",\n    width: 250,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"as\",\n    headerName: \"Action Station\",\n    headerTooltip: \"Action Station\",\n    width: 250,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"tar_rel\",\n    headerName: \"Target Reliability\",\n    headerTooltip: \"Target Reliability\",\n    width: 250,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this)];\n\n  const AddRow = () => {\n    const defaultRow = [{\n      id: uuidv4(),\n      missionName: \"Please Enter Mission Name\",\n      Harbour: 0,\n      elh: 0,\n      cruise: 0,\n      ds: 0,\n      as: 0,\n      tar_rel: 0\n    }];\n    gridApi.applyTransaction({\n      add: defaultRow\n    });\n  };\n\n  const deleteRows = () => {\n    const selectedRows = gridApi.getSelectedRows();\n    gridApi.applyTransaction({\n      remove: selectedRows\n    });\n    let allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    setMissionData(allRowData); // console.log(selectedRows);\n  }; //Save Button Handler\n\n\n  const onSaveButtonClickHandler = () => {\n    debugger;\n\n    if (missionData.length > 0) {\n      fetch(\"/mission_data\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          mission_data: missionData,\n          dtype: \"insertMission\"\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      }).then(res => {\n        return res.json();\n      }).then(data => {\n        setSnackBarMessage({\n          severity: \"success\",\n          message: data.message,\n          showSnackBar: true\n        });\n      }).catch(error => {\n        setSnackBarMessage({\n          severity: \"error\",\n          message: \"Some Error Occured. \" + error,\n          showSnackBar: true\n        });\n      });\n    } else {\n      setSnackBarMessage(prevState => {\n        const data = { ...prevState,\n          message: \"This is error\",\n          showSnackBar: true\n        };\n        return data;\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.body,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.module,\n        children: /*#__PURE__*/_jsxDEV(NewModule, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.user,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: SystemClasses.buttons,\n          onClick: onSaveButtonClickHandler,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.table,\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          rowData: rowState,\n          columnDefs: MProfileColumns,\n          tableUpdate: setFinalTableData,\n          setGrid: setGridApi,\n          gridApi: gridApi\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.tableFooter,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 26\n            }, this),\n            color: \"secondary\",\n            onClick: () => AddRow(),\n            children: \"Add Row\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              marginLeft: 10\n            },\n            variant: \"contained\",\n            startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 26\n            }, this),\n            color: \"secondary\",\n            onClick: () => deleteRows(),\n            children: \"Delete Rows\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), SnackBarMessage.showSnackBar && /*#__PURE__*/_jsxDEV(CustomizedSnackbars, {\n      message: SnackBarMessage,\n      onHandleClose: onHandleSnackClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MissionProfile, \"otZfZoyqjgf5hpUyPt703oWEEVs=\");\n\n_c = MissionProfile;\nexport default MissionProfile;\n\nvar _c;\n\n$RefreshReg$(_c, \"MissionProfile\");","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/src/pages/Mission Profile/MissionProfile.js"],"names":["React","useEffect","useState","NewModule","Navigation","UserSelection","styles","AgGridColumn","Table","Button","makeStyles","AddIcon","v4","uuidv4","DeleteIcon","CustomizedSnackbars","SystemStyles","formControl","margin","minWidth","Submit","buttons","marginLeft","marginTop","float","MissionProfile","props","SystemClasses","gridApi","setGridApi","SnackBarMessage","setSnackBarMessage","severity","message","showSnackBar","onHandleSnackClose","missionData","setMissionData","setFinalTableData","d","fetch","method","headers","Accept","then","res","json","data","mData","setRows","rowState","MProfileColumns","AddRow","defaultRow","id","missionName","Harbour","elh","cruise","ds","as","tar_rel","applyTransaction","add","deleteRows","selectedRows","getSelectedRows","remove","allRowData","forEachNode","node","push","onSaveButtonClickHandler","length","body","JSON","stringify","mission_data","dtype","catch","error","prevState","module","user","table","tableFooter"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport NewModule from \"../../components/module/NewModule\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport styles from \"./MissionProfile.module.css\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport Table from \"../../ui/Table/DataManagerTable\";\r\nimport { Button, makeStyles } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\n\r\nconst SystemStyles = makeStyles({\r\n  formControl: {\r\n    margin: \"2rem\",\r\n    minWidth: 200,\r\n  },\r\n  Submit: {\r\n    margin: \"2rem\",\r\n  },\r\n  buttons: {\r\n    minWidth: 150,\r\n    marginLeft: 10,\r\n    marginTop: 15,\r\n    float: \"right\",\r\n  },\r\n});\r\nconst MissionProfile = (props) => {\r\n  const SystemClasses = SystemStyles();\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Close\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const [missionData, setMissionData] = useState([]);\r\n  // let finalTableData = [];\r\n  const setFinalTableData = (d) => {\r\n    setMissionData(d);\r\n  };\r\n  useEffect(() => {\r\n    fetch(\"/mission_data\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const mData = data;\r\n        // const rowD = data.map((x) => () => {\r\n        //   return {\r\n        //     id: x[\"id\"],\r\n        //     missionName: x[\"missionName\"],\r\n        //     Harbour: x[\"Harbour\"],\r\n        //     elh: x[\"elh\"],\r\n        //     cruise: x[\"cruise\"],\r\n        //     ds: x[\"ds\"],\r\n        //     as: x[\"ask\"],\r\n        //   };\r\n        // });\r\n        setRows(mData);\r\n        setMissionData(mData);\r\n      });\r\n  }, []);\r\n  const [rowState, setRows] = useState([]);\r\n  const MProfileColumns = [\r\n    <AgGridColumn\r\n      field=\"missionName\"\r\n      headerName=\"Mission Name\"\r\n      headerTooltip=\"Mission Name\"\r\n      width={250}\r\n      checkboxSelection={true}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Harbour\"\r\n      headerName=\"Harbour\"\r\n      headerTooltip=\"Harbour\"\r\n      width={250}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"elh\"\r\n      headerName=\"Entry Leaving Harbour\"\r\n      headerTooltip=\"Entry Leaving Harbour\"\r\n      width={250}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"cruise\"\r\n      headerName=\"Cruise\"\r\n      headerTooltip=\"Cruise\"\r\n      width={250}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"ds\"\r\n      headerName=\"Defense Station\"\r\n      headerTooltip=\"Defense Station\"\r\n      width={250}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"as\"\r\n      headerName=\"Action Station\"\r\n      headerTooltip=\"Action Station\"\r\n      width={250}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"tar_rel\"\r\n      headerName=\"Target Reliability\"\r\n      headerTooltip=\"Target Reliability\"\r\n      width={250}\r\n      editable={true}\r\n    />,\r\n  ];\r\n\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: uuidv4(),\r\n        missionName: \"Please Enter Mission Name\",\r\n        Harbour: 0,\r\n        elh: 0,\r\n        cruise: 0,\r\n        ds: 0,\r\n        as: 0,\r\n        tar_rel: 0,\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    let allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    setMissionData(allRowData)\r\n    // console.log(selectedRows);\r\n  };\r\n\r\n  //Save Button Handler\r\n  const onSaveButtonClickHandler = () => {\r\n    debugger;\r\n    if (missionData.length > 0) {\r\n      fetch(\"/mission_data\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          mission_data: missionData,\r\n          dtype: \"insertMission\",\r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          setSnackBarMessage({\r\n            severity: \"success\",\r\n            message: data.message,\r\n            showSnackBar: true,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setSnackBarMessage({\r\n            severity: \"error\",\r\n            message: \"Some Error Occured. \" + error,\r\n            showSnackBar: true,\r\n          });\r\n        });\r\n    } else {\r\n      setSnackBarMessage((prevState) => {\r\n        const data = {\r\n          ...prevState,\r\n          message: \"This is error\",\r\n          showSnackBar: true,\r\n        };\r\n        return data;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        <div className={styles.module}>\r\n          <NewModule />\r\n        </div>\r\n        <div className={styles.user}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={SystemClasses.buttons}\r\n            onClick={onSaveButtonClickHandler}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n        {/* <div className={styles.user}><UserSelection /></div> */}\r\n        <div className={styles.table}>\r\n          <Table\r\n            rowData={rowState}\r\n            columnDefs={MProfileColumns}\r\n            tableUpdate={setFinalTableData}\r\n            setGrid={setGridApi}\r\n            gridApi={gridApi}\r\n          />\r\n          <div className={styles.tableFooter}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => AddRow()}\r\n            >\r\n              Add Row\r\n            </Button>\r\n            <Button\r\n              style={{ marginLeft: 10 }}\r\n              variant=\"contained\"\r\n              startIcon={<DeleteIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => deleteRows()}\r\n            >\r\n              Delete Rows\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MissionProfile;\r\n"]},"metadata":{},"sourceType":"module"}