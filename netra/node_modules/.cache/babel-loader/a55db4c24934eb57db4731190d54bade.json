{"ast":null,"code":"var _jsxFileName = \"D:\\\\Netraaaa\\\\Netra\\\\netra\\\\src\\\\pages\\\\Phase_Manager\\\\LifeMultiplier\\\\LifeMultiplier.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment } from \"react\";\nimport CustomSelect from \"../../../ui/Form/CustomSelect\";\nimport Table from \"../../../ui/Table/Table\";\nimport styles from \"../Phasemanager.module.css\";\nimport LensIcon from \"@material-ui/icons/Lens\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { LMrowData, components } from \"../PhasetableData\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { v4 as uuid } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PhaseStyles = makeStyles({\n  formControl: {\n    minWidth: \"20%\"\n  },\n  Submit: {\n    height: 40\n  },\n  Pbuttons: {\n    marginLeft: 10\n  }\n});\n\nconst LifeMultiplier = props => {\n  _s();\n\n  const PhaseClasses = PhaseStyles();\n  const phase = useSelector(state => state.phase.phase);\n  const systemData = useSelector(state => state.treeData.treeData);\n  let distinctPhaseName = phase.map((element, index) => {\n    return element.PhaseName;\n  });\n  distinctPhaseName = [...new Set(distinctPhaseName)];\n  let childColHeaders = [];\n  const phaseArr = distinctPhaseName.map((ele, index) => {\n    const childArr = phase.filter(x => x.PhaseName === ele);\n    const childAgGrid = childArr.map((ele1, index1) => {\n      childColHeaders.push(ele1.PhaseRange + \" \" + ele1.id);\n\n      if (ele1.MeasurementType === \"Quantitative\") {\n        return /*#__PURE__*/_jsxDEV(AgGridColumn, {\n          field: ele1.PhaseRange + \" \" + ele1.id,\n          headerName: ele1.PhaseRange,\n          index: ele1.id,\n          editable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(AgGridColumn, {\n          field: ele1.Status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 16\n        }, this);\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(AgGridColumn, {\n      field: ele,\n      headerName: ele,\n      children: childAgGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  });\n  const LMcolumnDefs = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"Component\",\n    headerName: \"Component\",\n    minWidth: 140,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this), ...phaseArr];\n  const rowData = systemData.map((element, index) => {\n    let d = {};\n    const phaseD = childColHeaders.map((ele, index) => {\n      d[ele] = 1;\n      return null;\n    });\n    debugger;\n    return {\n      Component: element.name,\n      component_id: element.id,\n      ...d\n    };\n  });\n\n  const updateFinalRowData = allRows => {\n    props.tableUpdate(allRows);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.LMphaseTable,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        columnDefs: LMcolumnDefs,\n        rowData: rowData,\n        tableUpdate: updateFinalRowData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LifeMultiplier, \"TUCwHZfd2KqB8bICX+HAKlTTlZw=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = LifeMultiplier;\nexport default LifeMultiplier;\n\nvar _c;\n\n$RefreshReg$(_c, \"LifeMultiplier\");","map":{"version":3,"sources":["D:/Netraaaa/Netra/netra/src/pages/Phase_Manager/LifeMultiplier/LifeMultiplier.js"],"names":["Fragment","CustomSelect","Table","styles","LensIcon","makeStyles","LMrowData","components","AgGridColumn","useSelector","useDispatch","v4","uuid","PhaseStyles","formControl","minWidth","Submit","height","Pbuttons","marginLeft","LifeMultiplier","props","PhaseClasses","phase","state","systemData","treeData","distinctPhaseName","map","element","index","PhaseName","Set","childColHeaders","phaseArr","ele","childArr","filter","x","childAgGrid","ele1","index1","push","PhaseRange","id","MeasurementType","Status","LMcolumnDefs","rowData","d","phaseD","Component","name","component_id","updateFinalRowData","allRows","tableUpdate","LMphaseTable"],"mappings":"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","sourcesContent":["import { Fragment } from \"react\";\r\nimport CustomSelect from \"../../../ui/Form/CustomSelect\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport styles from \"../Phasemanager.module.css\";\r\nimport LensIcon from \"@material-ui/icons/Lens\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { LMrowData, components } from \"../PhasetableData\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst PhaseStyles = makeStyles({\r\n  formControl: {\r\n    minWidth: \"20%\",\r\n  },\r\n  Submit: {\r\n    height: 40,\r\n  },\r\n  Pbuttons: {\r\n    marginLeft: 10,\r\n  },\r\n});\r\nconst LifeMultiplier = (props) => {\r\n  const PhaseClasses = PhaseStyles();\r\n  const phase = useSelector((state) => state.phase.phase);\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  let distinctPhaseName = phase.map((element, index) => {\r\n    return element.PhaseName;\r\n  });\r\n  distinctPhaseName = [...new Set(distinctPhaseName)];\r\n  let childColHeaders = [];\r\n  const phaseArr = distinctPhaseName.map((ele, index) => {\r\n    const childArr = phase.filter((x) => x.PhaseName === ele);\r\n    const childAgGrid = childArr.map((ele1, index1) => {\r\n      childColHeaders.push(ele1.PhaseRange + \" \" + ele1.id);\r\n      if (ele1.MeasurementType === \"Quantitative\") {\r\n        return (\r\n          <AgGridColumn\r\n            field={ele1.PhaseRange + \" \" + ele1.id}\r\n            headerName={ele1.PhaseRange}\r\n            index={ele1.id}\r\n            editable={true}\r\n          />\r\n        );\r\n      } else {\r\n        return <AgGridColumn field={ele1.Status} />;\r\n      }\r\n    });\r\n    return (\r\n      <AgGridColumn field={ele} headerName={ele}>\r\n        {childAgGrid}\r\n      </AgGridColumn>\r\n    );\r\n  });\r\n  const LMcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"Component\"\r\n      headerName=\"Component\"\r\n      minWidth={140}\r\n      editable={true}\r\n    />,\r\n    ...phaseArr,\r\n  ];\r\n  const rowData = systemData.map((element, index) => {\r\n    let d = {};\r\n    const phaseD = childColHeaders.map((ele, index) => {\r\n      d[ele] = 1;\r\n      return null;\r\n    });\r\n    debugger;\r\n    return {\r\n      Component: element.name,\r\n      component_id: element.id,\r\n      ...d,\r\n    };\r\n  });\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {/* <div className={styles.flex2}>\r\n        <CustomSelect\r\n          style={{ minWidth: \"45%\" }}\r\n          className={PhaseClasses.formControl}\r\n          id=\"parent-component\"\r\n          label=\"Parent Component\"\r\n          fields={components}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={PhaseClasses.Submit}\r\n        >\r\n          Submit\r\n        </Button>\r\n        <span style={{ fontSize: \"0.7rem\" }}>\r\n          <LensIcon style={{ color: \"#d8f0f4\" }} />\r\n          LMU-Lowest Maintainable Unit\r\n        </span>\r\n      </div> */}\r\n      <div className={styles.LMphaseTable}>\r\n        <Table\r\n          columnDefs={LMcolumnDefs}\r\n          rowData={rowData}\r\n          tableUpdate={updateFinalRowData}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default LifeMultiplier;\r\n"]},"metadata":{},"sourceType":"module"}