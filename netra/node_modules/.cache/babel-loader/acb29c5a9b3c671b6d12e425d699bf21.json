{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\TaskDashboard\\\\TaskRenderMultipleComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useImperativeHandle, useRef, forwardRef } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RenderMultipleComponent = /*#__PURE__*/forwardRef(_c = _s((props, ref, isMultiple = true) => {\n  _s();\n\n  debugger;\n  const [value, setValue] = useState([]);\n  const refInput = useRef(null);\n  const location = useLocation(); //   alert(location.pathname);\n\n  let potentialParallelComponents = [];\n  const systemData = useSelector(state => state.treeData.treeData);\n  const taskData = useSelector(state => state.taskData.taskData);\n  const currentShip = useSelector(state => state.taskData.currentShip);\n  const currentTaskName = useSelector(state => state.taskData.currentTaskName);\n  const filteredData = taskData.tasks_data.filter(x => x.ship_name === currentShip && x.task_name === currentTaskName);\n  console.log(taskData);\n  debugger;\n  const userSelection = useSelector(state => state.userSelection.userSelection);\n  const currentSelection = useSelector(state => state.userSelection.currentSelection);\n  const componentsData = useSelector(state => state.userSelection.componentsData);\n  const selectedEquipment = props.data.EquipmentName;\n  const selectedEquipmentId = props.data.eqId;\n  potentialParallelComponents = systemData.filter(x => x.name !== selectedEquipment);\n\n  const handleChange = (event, newValue) => {\n    debugger;\n    setValue(newValue);\n  }; // useEffect(() => {\n  //   // focus on the input\n  //   //setTimeout(() => refInput.current.focus());\n  //   console.log(potentialParallelComponents);\n  // }, []);\n\n  /* Component Editor Lifecycle methods */\n\n\n  useImperativeHandle(ref, () => {\n    return {\n      // the final value to send to the grid, on completion of editing\n      getValue() {\n        debugger; //console.log(value);\n\n        let valueStr = [];\n        let ids = []; // if (location.pathname === \"/system_config/additional_info\") {\n        //   value.forEach((element) => {\n        //     valueStr = [...valueStr, element.name];\n        //   });\n        // } else\n\n        if (location.pathname === \"/system_config/failure_mode\") {\n          ids = [value.id];\n          valueStr = [value.name];\n          props.data[\"rEquipmentId\"] = ids[0];\n        } else {\n          value.forEach(element => {\n            ids = [...ids, element.id];\n            valueStr = [...valueStr, element.name];\n          });\n          props.setParallelIds(ids);\n        }\n\n        return valueStr.toString();\n      },\n\n      isPopup() {\n        return true;\n      },\n\n      // Gets called once before editing starts, to give editor a chance to\n      // cancel the editing before it even starts.\n      isCancelBeforeStart() {\n        return false;\n      } // Gets called once when editing is finished (eg if Enter is pressed).\n      // If you return true, then the result of the edit will be ignored.\n      // isCancelAfterEnd() {\n      //     // our editor will reject any value greater than 1000\n      //     return value > 1000;\n      // }\n\n\n    };\n  });\n  return (\n    /*#__PURE__*/\n    // <input type=\"number\"\n    //        ref={refInput}\n    //        value={value}\n    //        onChange={event => setValue(event.target.value)}\n    //        style={{width: \"100%\"}}\n    // />\n    _jsxDEV(Autocomplete, {\n      id: selectedEquipmentId,\n      options: potentialParallelComponents //value={value}\n      ,\n      multiple: props.isMultiple,\n      onChange: handleChange // groupBy={(option) => option.parentName}\n      ,\n      getOptionLabel: option => option.name,\n      style: {\n        width: 300\n      },\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        ref: refInput,\n        label: props.label,\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  );\n}, \"v85KihBWebwroMJyxaffYVL5Bb0=\", false, function () {\n  return [useLocation, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useImperativeHandle];\n}));\n_c2 = RenderMultipleComponent;\nexport default RenderMultipleComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RenderMultipleComponent$forwardRef\");\n$RefreshReg$(_c2, \"RenderMultipleComponent\");","map":{"version":3,"sources":["D:/NetraB/netra/src/pages/TaskDashboard/TaskRenderMultipleComponent.js"],"names":["React","useEffect","useState","useImperativeHandle","useRef","forwardRef","Autocomplete","TextField","useDispatch","useSelector","useLocation","RenderMultipleComponent","props","ref","isMultiple","value","setValue","refInput","location","potentialParallelComponents","systemData","state","treeData","taskData","currentShip","currentTaskName","filteredData","tasks_data","filter","x","ship_name","task_name","console","log","userSelection","currentSelection","componentsData","selectedEquipment","data","EquipmentName","selectedEquipmentId","eqId","name","handleChange","event","newValue","getValue","valueStr","ids","pathname","id","forEach","element","setParallelIds","toString","isPopup","isCancelBeforeStart","option","width","params","label"],"mappings":"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","sourcesContent":["import React, {\r\n    useEffect,\r\n    useState,\r\n    useImperativeHandle,\r\n    useRef,\r\n    forwardRef,\r\n  } from \"react\";\r\n  import Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n  import TextField from \"@material-ui/core/TextField\";\r\n  import { useDispatch, useSelector } from \"react-redux\";\r\n  import { useLocation } from \"react-router\";\r\n  \r\n  const RenderMultipleComponent = forwardRef((props, ref, isMultiple = true) => {\r\n    debugger;\r\n    const [value, setValue] = useState([]);\r\n    const refInput = useRef(null);\r\n    const location = useLocation();\r\n    //   alert(location.pathname);\r\n    let potentialParallelComponents = [];\r\n    const systemData = useSelector((state) => state.treeData.treeData);\r\n    const taskData = useSelector((state) => state.taskData.taskData);\r\n    const currentShip = useSelector((state) => state.taskData.currentShip);\r\n    const currentTaskName = useSelector((state) => state.taskData.currentTaskName);\r\n    const filteredData = taskData.tasks_data.filter(x => x.ship_name === currentShip && x.task_name === currentTaskName)\r\n    console.log(taskData)\r\n    debugger;\r\n    const userSelection = useSelector(\r\n      (state) => state.userSelection.userSelection\r\n    );\r\n    const currentSelection = useSelector(\r\n      (state) => state.userSelection.currentSelection\r\n    );\r\n    const componentsData = useSelector(\r\n      (state) => state.userSelection.componentsData\r\n    );\r\n    const selectedEquipment = props.data.EquipmentName;\r\n    const selectedEquipmentId = props.data.eqId;\r\n    \r\n    potentialParallelComponents = systemData.filter(\r\n      (x) => x.name !== selectedEquipment\r\n    );\r\n  \r\n    const handleChange = (event, newValue) => {\r\n      debugger;\r\n      setValue(newValue);\r\n    };\r\n  \r\n    // useEffect(() => {\r\n    //   // focus on the input\r\n    //   //setTimeout(() => refInput.current.focus());\r\n    //   console.log(potentialParallelComponents);\r\n    // }, []);\r\n  \r\n    /* Component Editor Lifecycle methods */\r\n    useImperativeHandle(ref, () => {\r\n      return {\r\n        // the final value to send to the grid, on completion of editing\r\n        getValue() {\r\n          debugger;\r\n          //console.log(value);\r\n          let valueStr = [];\r\n          let ids = [];\r\n          // if (location.pathname === \"/system_config/additional_info\") {\r\n          //   value.forEach((element) => {\r\n          //     valueStr = [...valueStr, element.name];\r\n          //   });\r\n          // } else\r\n          if (location.pathname === \"/system_config/failure_mode\") {\r\n            ids = [value.id];\r\n            valueStr = [value.name];\r\n            props.data[\"rEquipmentId\"] = ids[0];\r\n          } else {\r\n            value.forEach((element) => {\r\n              ids = [...ids, element.id];\r\n              valueStr = [...valueStr, element.name];\r\n            });\r\n            props.setParallelIds(ids);\r\n          }\r\n          return valueStr.toString();\r\n        },\r\n        isPopup() {\r\n          return true;\r\n        },\r\n        // Gets called once before editing starts, to give editor a chance to\r\n        // cancel the editing before it even starts.\r\n        isCancelBeforeStart() {\r\n          return false;\r\n        },\r\n  \r\n        // Gets called once when editing is finished (eg if Enter is pressed).\r\n        // If you return true, then the result of the edit will be ignored.\r\n        // isCancelAfterEnd() {\r\n        //     // our editor will reject any value greater than 1000\r\n        //     return value > 1000;\r\n        // }\r\n      };\r\n    });\r\n  \r\n    return (\r\n      // <input type=\"number\"\r\n      //        ref={refInput}\r\n      //        value={value}\r\n      //        onChange={event => setValue(event.target.value)}\r\n      //        style={{width: \"100%\"}}\r\n      // />\r\n      <Autocomplete\r\n        id={selectedEquipmentId}\r\n        options={potentialParallelComponents}\r\n        //value={value}\r\n        multiple={props.isMultiple}\r\n        onChange={handleChange}\r\n        // groupBy={(option) => option.parentName}\r\n        getOptionLabel={(option) => option.name}\r\n        style={{ width: 300 }}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            ref={refInput}\r\n            label={props.label}\r\n            variant=\"outlined\"\r\n          />\r\n        )}\r\n      />\r\n    );\r\n  });\r\n  export default RenderMultipleComponent;\r\n  "]},"metadata":{},"sourceType":"module"}