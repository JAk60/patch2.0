{"ast":null,"code":"var _jsxFileName = \"D:\\\\NETRA -P\\\\Netra\\\\netra\\\\src\\\\pages\\\\Data Manager\\\\parameterEstimation\\\\parameterEstimation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Table from \"../../../ui/Table/Table\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport SelectEquipment from \"../selectEquipment/selectEquipment\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParameterStyles = makeStyles({\n  dropdown: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    marginBottom: \"10px\"\n  }\n});\n\nfunction ParameterEstimation(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  debugger;\n  const [gridApi, setGridApi] = useState(null);\n  const [selectedEquipmentList, setSelectedEquipmentList] = useState([]);\n  const ParameterClasses = ParameterStyles();\n  const [rowState, setRows] = useState([]);\n  let systemRepairTypeBool = false;\n  const systemConfigurationTreeData = useSelector(state => state.treeData.treeData);\n\n  if (systemConfigurationTreeData.length > 0) {\n    const equipment = selectedEquipmentList.map(e => e.repairType)[0];\n    console.log(equipment);\n    systemRepairTypeBool = equipment === \"Replaceable\" ? true : false;\n  }\n\n  let ParameterColumns = [];\n\n  if (!systemRepairTypeBool) {\n    // Repairable Data\n    ParameterColumns = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n      colId: \"EquipmentName\",\n      field: \"EquipmentName\",\n      headerName: \"Equipment Name\",\n      minWidth: 200,\n      editable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n      colId: \"alpha\",\n      field: \"alpha\",\n      headerName: \"alpha\",\n      minWidth: 200,\n      type: \"number\",\n      editable: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n      colId: \"beta\",\n      field: \"beta\",\n      headerName: \"\\u03B2\",\n      minWidth: 200,\n      type: \"number\",\n      editable: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)];\n  } else {\n    ParameterColumns = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n      colId: \"EquipmentName\",\n      field: \"EquipmentName\",\n      headerName: \"Equipment Name\",\n      minWidth: 200,\n      editable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n      colId: \"eta\",\n      field: \"eta\",\n      headerName: \"\\u03B7-Scale Parameter\",\n      minWidth: 200,\n      type: \"number\",\n      editable: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n      colId: \"beta\",\n      field: \"beta\",\n      headerName: \"\\u03B2-Shape Parameter\",\n      minWidth: 200,\n      type: \"number\",\n      editable: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)];\n  }\n\n  const onHandleSubmitClick = () => {\n    const rowD = selectedEquipmentList.map(ele => {\n      if (!systemRepairTypeBool) {\n        return {\n          id: ele.id,\n          EquipmentName: ele.name,\n          eta: \"-\",\n          beta: \"-\"\n        };\n      } else {\n        return {\n          id: ele.id,\n          EquipmentName: ele.name,\n          alpha: \"-\",\n          beta: \"-\"\n        };\n      }\n    });\n    debugger;\n    setRows(rowD);\n    dispatch(treeDataActions.setP(selectedEquipmentList));\n    console.log(rowD);\n  };\n\n  const onUpdateSelectedEquipmentList = d => {\n    setSelectedEquipmentList(d);\n  };\n\n  console.log(selectedEquipmentList);\n\n  const updateFinalRowData = allRows => {\n    console.log(\"This\");\n    console.log(allRows);\n  };\n\n  const onHandleUpdateEtaBetaDB = () => {\n    fetch(\"/update_parameters\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        data: rowState,\n        isReplacable: systemRepairTypeBool\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setRows(data);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: ParameterClasses.dropdown,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SelectEquipment, {\n          list: props.list,\n          onUpdateSelectedEquipmentList: onUpdateSelectedEquipmentList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          style: {\n            marginLeft: \"20px\"\n          },\n          onClick: onHandleSubmitClick,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          style: {\n            marginLeft: \"20px\"\n          },\n          onClick: onHandleUpdateEtaBetaDB,\n          children: \"Restimate Parameters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        columnDefs: ParameterColumns,\n        setGrid: setGridApi,\n        gridApi: gridApi,\n        rowData: rowState,\n        tableUpdate: updateFinalRowData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          style: {\n            float: \"right\"\n          },\n          variant: \"contained\",\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 24\n          }, this),\n          component: Link,\n          to: \"/data_manager/historical_data\",\n          children: \"Add Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ParameterEstimation, \"hyQWBkiAujiCTpDCUk/+0/nvHjQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ParameterEstimation;\nexport default ParameterEstimation;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParameterEstimation\");","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/src/pages/Data Manager/parameterEstimation/parameterEstimation.js"],"names":["React","useState","Table","AgGridColumn","Link","Button","AddIcon","makeStyles","IconButton","DeleteIcon","SelectEquipment","useSelector","useDispatch","treeDataActions","ParameterStyles","dropdown","display","alignItems","flexDirection","marginBottom","ParameterEstimation","props","dispatch","gridApi","setGridApi","selectedEquipmentList","setSelectedEquipmentList","ParameterClasses","rowState","setRows","systemRepairTypeBool","systemConfigurationTreeData","state","treeData","length","equipment","map","e","repairType","console","log","ParameterColumns","onHandleSubmitClick","rowD","ele","id","EquipmentName","name","eta","beta","alpha","setP","onUpdateSelectedEquipmentList","d","updateFinalRowData","allRows","onHandleUpdateEtaBetaDB","fetch","method","body","JSON","stringify","data","isReplacable","headers","Accept","then","res","json","list","marginLeft","float"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,eAAT,QAAgC,8BAAhC;;AAEA,MAAMC,eAAe,GAAGP,UAAU,CAAC;AACjCQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,MADD;AAERC,IAAAA,UAAU,EAAE,QAFJ;AAGRC,IAAAA,aAAa,EAAE,KAHP;AAIRC,IAAAA,YAAY,EAAE;AAJN;AADuB,CAAD,CAAlC;;AAQA,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAAA;;AAClC,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACwB,qBAAD,EAAwBC,wBAAxB,IAAoDzB,QAAQ,CAAC,EAAD,CAAlE;AACA,QAAM0B,gBAAgB,GAAGb,eAAe,EAAxC;AACA,QAAM,CAACc,QAAD,EAAWC,OAAX,IAAsB5B,QAAQ,CAAC,EAAD,CAApC;AACA,MAAI6B,oBAAoB,GAAG,KAA3B;AACA,QAAMC,2BAA2B,GAAGpB,WAAW,CAC5CqB,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeA,QADmB,CAA/C;;AAGA,MAAIF,2BAA2B,CAACG,MAA5B,GAAqC,CAAzC,EAA4C;AAC1C,UAAMC,SAAS,GAAGV,qBAAqB,CAACW,GAAtB,CAA2BC,CAAD,IAAOA,CAAC,CAACC,UAAnC,EAA+C,CAA/C,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACAL,IAAAA,oBAAoB,GAClBK,SAAS,KAAK,aAAd,GAA8B,IAA9B,GAAqC,KADvC;AAED;;AACD,MAAIM,gBAAgB,GAAG,EAAvB;;AACA,MAAI,CAACX,oBAAL,EAA2B;AACzB;AACAW,IAAAA,gBAAgB,GAAG,cACjB,QAAC,YAAD;AACE,MAAA,KAAK,EAAC,eADR;AAEE,MAAA,KAAK,EAAC,eAFR;AAGE,MAAA,UAAU,EAAC,gBAHb;AAIE,MAAA,QAAQ,EAAE,GAJZ;AAKE,MAAA,QAAQ,EAAE;AALZ;AAAA;AAAA;AAAA;AAAA,YADiB,eAQjB,QAAC,YAAD;AACE,MAAA,KAAK,EAAC,OADR;AAEE,MAAA,KAAK,EAAC,OAFR;AAGE,MAAA,UAAU,EAAC,OAHb;AAIE,MAAA,QAAQ,EAAE,GAJZ;AAKE,MAAA,IAAI,EAAC,QALP;AAME,MAAA,QAAQ,EAAE;AANZ;AAAA;AAAA;AAAA;AAAA,YARiB,eAgBjB,QAAC,YAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,KAAK,EAAC,MAFR;AAGE,MAAA,UAAU,EAAC,QAHb;AAIE,MAAA,QAAQ,EAAE,GAJZ;AAKE,MAAA,IAAI,EAAC,QALP;AAME,MAAA,QAAQ,EAAE;AANZ;AAAA;AAAA;AAAA;AAAA,YAhBiB,CAAnB;AAyBD,GA3BD,MA2BO;AACLA,IAAAA,gBAAgB,GAAG,cACjB,QAAC,YAAD;AACE,MAAA,KAAK,EAAC,eADR;AAEE,MAAA,KAAK,EAAC,eAFR;AAGE,MAAA,UAAU,EAAC,gBAHb;AAIE,MAAA,QAAQ,EAAE,GAJZ;AAKE,MAAA,QAAQ,EAAE;AALZ;AAAA;AAAA;AAAA;AAAA,YADiB,eAQjB,QAAC,YAAD;AACE,MAAA,KAAK,EAAC,KADR;AAEE,MAAA,KAAK,EAAC,KAFR;AAGE,MAAA,UAAU,EAAC,wBAHb;AAIE,MAAA,QAAQ,EAAE,GAJZ;AAKE,MAAA,IAAI,EAAC,QALP;AAME,MAAA,QAAQ,EAAE;AANZ;AAAA;AAAA;AAAA;AAAA,YARiB,eAgBjB,QAAC,YAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,KAAK,EAAC,MAFR;AAGE,MAAA,UAAU,EAAC,wBAHb;AAIE,MAAA,QAAQ,EAAE,GAJZ;AAKE,MAAA,IAAI,EAAC,QALP;AAME,MAAA,QAAQ,EAAE;AANZ;AAAA;AAAA;AAAA;AAAA,YAhBiB,CAAnB;AAyBD;;AAGD,QAAMC,mBAAmB,GAAG,MAAM;AAChC,UAAMC,IAAI,GAAGlB,qBAAqB,CAACW,GAAtB,CAA2BQ,GAAD,IAAS;AAC9C,UAAI,CAACd,oBAAL,EAA2B;AACzB,eAAO;AACLe,UAAAA,EAAE,EAAED,GAAG,CAACC,EADH;AAELC,UAAAA,aAAa,EAAEF,GAAG,CAACG,IAFd;AAGLC,UAAAA,GAAG,EAAE,GAHA;AAILC,UAAAA,IAAI,EAAE;AAJD,SAAP;AAMD,OAPD,MAOO;AACL,eAAO;AACLJ,UAAAA,EAAE,EAAED,GAAG,CAACC,EADH;AAELC,UAAAA,aAAa,EAAEF,GAAG,CAACG,IAFd;AAGLG,UAAAA,KAAK,EAAE,GAHF;AAILD,UAAAA,IAAI,EAAE;AAJD,SAAP;AAMD;AACF,KAhBY,CAAb;AAiBA;AACApB,IAAAA,OAAO,CAACc,IAAD,CAAP;AACArB,IAAAA,QAAQ,CACNT,eAAe,CAACsC,IAAhB,CAAqB1B,qBAArB,CADM,CAAR;AAGAc,IAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACD,GAxBD;;AA2BA,QAAMS,6BAA6B,GAAIC,CAAD,IAAO;AAC3C3B,IAAAA,wBAAwB,CAAC2B,CAAD,CAAxB;AACD,GAFD;;AAGAd,EAAAA,OAAO,CAACC,GAAR,CAAYf,qBAAZ;;AAEA,QAAM6B,kBAAkB,GAAIC,OAAD,IAAa;AACtChB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYe,OAAZ;AACD,GAHD;;AAIA,QAAMC,uBAAuB,GAAG,MAAM;AACpCC,IAAAA,KAAK,CAAC,oBAAD,EAAuB;AAC1BC,MAAAA,MAAM,EAAE,MADkB;AAE1BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,QAAAA,IAAI,EAAElC,QADa;AAEnBmC,QAAAA,YAAY,EAAEjC;AAFK,OAAf,CAFoB;AAM1BkC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AANiB,KAAvB,CAAL,CAWGC,IAXH,CAWSC,GAAD,IAAS;AACb,aAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,KAbH,EAcGF,IAdH,CAcSJ,IAAD,IAAU;AACdjC,MAAAA,OAAO,CAACiC,IAAD,CAAP;AACD,KAhBH;AAiBD,GAlBD;;AAoBA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEnC,gBAAgB,CAACZ,QAAjC;AAAA,8BACE;AAAA,+BACE,QAAC,eAAD;AACE,UAAA,IAAI,EAAEM,KAAK,CAACgD,IADd;AAEE,UAAA,6BAA6B,EAAEjB;AAFjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAA,gCACE,QAAC,MAAD;AACE,UAAA,OAAO,EAAC,WADV;AAEE,UAAA,KAAK,EAAC,SAFR;AAGE,UAAA,KAAK,EAAE;AAAEkB,YAAAA,UAAU,EAAE;AAAd,WAHT;AAIE,UAAA,OAAO,EAAE5B,mBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE,QAAC,MAAD;AACE,UAAA,OAAO,EAAC,WADV;AAEE,UAAA,KAAK,EAAC,SAFR;AAGE,UAAA,KAAK,EAAE;AAAE4B,YAAAA,UAAU,EAAE;AAAd,WAHT;AAIE,UAAA,OAAO,EAAEd,uBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAqCE;AAAA,8BACE,QAAC,KAAD;AACE,QAAA,UAAU,EAAEf,gBADd;AAEE,QAAA,OAAO,EAAEjB,UAFX;AAGE,QAAA,OAAO,EAAED,OAHX;AAIE,QAAA,OAAO,EAAEK,QAJX;AAKE,QAAA,WAAW,EAAE0B;AALf;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AAAA,+BACE,QAAC,MAAD;AACE,UAAA,KAAK,EAAE;AAAEiB,YAAAA,KAAK,EAAE;AAAT,WADT;AAEE,UAAA,OAAO,EAAC,WAFV;AAGE,UAAA,KAAK,EAAC,SAHR;AAIE,UAAA,SAAS,eAAE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,kBAJb;AAKE,UAAA,SAAS,EAAEnE,IALb;AAME,UAAA,EAAE,EAAC,+BANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA,YArCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsED;;GAxMQgB,mB;UACUR,W,EAOmBD,W;;;KAR7BS,mB;AA0MT,eAAeA,mBAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport SelectEquipment from \"../selectEquipment/selectEquipment\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\n\r\nconst ParameterStyles = makeStyles({\r\n  dropdown: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    marginBottom: \"10px\",\r\n  },\r\n});\r\nfunction ParameterEstimation(props) {\r\n  const dispatch = useDispatch();\r\n  debugger;\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [selectedEquipmentList, setSelectedEquipmentList] = useState([]);\r\n  const ParameterClasses = ParameterStyles();\r\n  const [rowState, setRows] = useState([]);\r\n  let systemRepairTypeBool = false;\r\n  const systemConfigurationTreeData = useSelector(\r\n    (state) => state.treeData.treeData\r\n  );\r\n  if (systemConfigurationTreeData.length > 0) {\r\n    const equipment = selectedEquipmentList.map((e) => e.repairType)[0]\r\n    console.log(equipment);\r\n    systemRepairTypeBool =\r\n      equipment === \"Replaceable\" ? true : false;\r\n  }\r\n  let ParameterColumns = [];\r\n  if (!systemRepairTypeBool) {\r\n    // Repairable Data\r\n    ParameterColumns = [\r\n      <AgGridColumn\r\n        colId=\"EquipmentName\"\r\n        field=\"EquipmentName\"\r\n        headerName=\"Equipment Name\"\r\n        minWidth={200}\r\n        editable={true}\r\n      />,\r\n      <AgGridColumn\r\n        colId=\"alpha\"\r\n        field=\"alpha\"\r\n        headerName=\"alpha\"\r\n        minWidth={200}\r\n        type=\"number\"\r\n        editable={false}\r\n      />,\r\n      <AgGridColumn\r\n        colId=\"beta\"\r\n        field=\"beta\"\r\n        headerName=\"β\"\r\n        minWidth={200}\r\n        type=\"number\"\r\n        editable={false}\r\n      />,\r\n    ];\r\n  } else {\r\n    ParameterColumns = [\r\n      <AgGridColumn\r\n        colId=\"EquipmentName\"\r\n        field=\"EquipmentName\"\r\n        headerName=\"Equipment Name\"\r\n        minWidth={200}\r\n        editable={true}\r\n      />,\r\n      <AgGridColumn\r\n        colId=\"eta\"\r\n        field=\"eta\"\r\n        headerName=\"η-Scale Parameter\"\r\n        minWidth={200}\r\n        type=\"number\"\r\n        editable={false}\r\n      />,\r\n      <AgGridColumn\r\n        colId=\"beta\"\r\n        field=\"beta\"\r\n        headerName=\"β-Shape Parameter\"\r\n        minWidth={200}\r\n        type=\"number\"\r\n        editable={false}\r\n      />,\r\n    ];\r\n  }\r\n\r\n\r\n  const onHandleSubmitClick = () => {\r\n    const rowD = selectedEquipmentList.map((ele) => {\r\n      if (!systemRepairTypeBool) {\r\n        return {\r\n          id: ele.id,\r\n          EquipmentName: ele.name,\r\n          eta: \"-\",\r\n          beta: \"-\",\r\n        };\r\n      } else {\r\n        return {\r\n          id: ele.id,\r\n          EquipmentName: ele.name,\r\n          alpha: \"-\",\r\n          beta: \"-\",\r\n        };\r\n      }\r\n    });\r\n    debugger\r\n    setRows(rowD);\r\n    dispatch(\r\n      treeDataActions.setP(selectedEquipmentList)\r\n    )\r\n    console.log(rowD)\r\n  };\r\n\r\n\r\n  const onUpdateSelectedEquipmentList = (d) => {\r\n    setSelectedEquipmentList(d);\r\n  };\r\n  console.log(selectedEquipmentList)\r\n\r\n  const updateFinalRowData = (allRows) => {\r\n    console.log(\"This\");\r\n    console.log(allRows);\r\n  };\r\n  const onHandleUpdateEtaBetaDB = () => {\r\n    fetch(\"/update_parameters\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        data: rowState,\r\n        isReplacable: systemRepairTypeBool,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setRows(data);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={ParameterClasses.dropdown}>\r\n        <div>\r\n          <SelectEquipment\r\n            list={props.list}\r\n            onUpdateSelectedEquipmentList={onUpdateSelectedEquipmentList}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ marginLeft: \"20px\" }}\r\n            onClick={onHandleSubmitClick}\r\n          >\r\n            Submit\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ marginLeft: \"20px\" }}\r\n            onClick={onHandleUpdateEtaBetaDB}\r\n          >\r\n            Restimate Parameters\r\n          </Button>\r\n\r\n          {/* <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ marginLeft: \"20px\" }}\r\n            onClick={onHandleUpdateEtaBetaDB}\r\n          >\r\n            Update Parameters from Database\r\n          </Button> */}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <Table\r\n          columnDefs={ParameterColumns}\r\n          setGrid={setGridApi}\r\n          gridApi={gridApi}\r\n          rowData={rowState}\r\n          tableUpdate={updateFinalRowData}\r\n        ></Table>\r\n        <div>\r\n          <Button\r\n            style={{ float: \"right\" }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            component={Link}\r\n            to=\"/data_manager/historical_data\"\r\n          >\r\n            Add Data\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      {/* <Button\r\n        variant='contained'\r\n        startIcon={<AddIcon />}\r\n        color=\"secondary\"\r\n        onClick={()=>AddRow()}\r\n        >Add Row</Button>\r\n        <IconButton>\r\n        <DeleteIcon />\r\n        </IconButton> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ParameterEstimation;\r\n"]},"metadata":{},"sourceType":"module"}