{"ast":null,"code":"var _jsxFileName = \"D:\\\\Netraaaa\\\\Netra\\\\netra\\\\src\\\\pages\\\\Data Manager\\\\operationalData\\\\operationalData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Table from \"../../../ui/Table/DataManagerTable\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport { Button } from \"@material-ui/core\";\nimport { AgGridReact } from \"ag-grid-react/lib/agGridReact\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport styles from \"../DataManager.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { v4 as uuid } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst OperationalData = props => {\n  _s();\n\n  const systemData = useSelector(state => state.treeData.treeData); //const phaseData = useSelector((state) => state.phase.phase);\n  //const phaseNames = [...new Set(phaseData.map((x) => x.PhaseName))];\n  //const phaseHeader = [];\n\n  debugger; // phaseNames.map((p_e, p_i) => {\n  //   const phase_ranges = phaseData.filter((x) => x.PhaseName === p_e);\n  //   let values = [];\n  //   if (phase_ranges[0].MeasurementType === \"Quantitative\") {\n  //     values = phase_ranges.map((x) => x.PhaseRange);\n  //   } else {\n  //     values = phase_ranges.map((x) => x.Status);\n  //   }\n  //   const header = (\n  //     <AgGridColumn\n  //       field={p_e}\n  //       headerName={p_e}\n  //       cellEditor=\"agSelectCellEditor\"\n  //       cellEditorParams={{ values: values }}\n  //       width={200}\n  //       editable={true}\n  //     />\n  //   );\n  //   phaseHeader.push(header);\n  // });\n\n  const [gridApi, setGridApi] = useState(null);\n  const components = systemData.filter(x => x.parentId == null);\n  const rows = components.map((element, index) => {\n    return {\n      id: element.id,\n      Date: \"August/2021\",\n      AverageRunning: \"0\"\n    };\n  });\n  const [rowData, setRows] = useState(rows);\n  gridApi.forEachNode(rowNode => {\n    setRows(rowNode.data); // Access data of each row\n  });\n  const OperationalColumns = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"Date\",\n    headerName: \"Date\",\n    width: 200,\n    cellEditor: \"monthPicker\",\n    editable: true,\n    checkboxSelection: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"AverageRunning\",\n    headerName: \"Monthly Utilization\",\n    headerTooltip: \"Monthly Utilization\",\n    width: 200,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this)];\n\n  const updateFinalRowData = allRows => {\n    props.tableUpdate(allRows, \"insertOpData\");\n  };\n\n  const AddRow = () => {\n    let newRowData = components.map((element, index) => {\n      return {\n        id: element.id,\n        Date: \"\",\n        AverageRunning: \"0\"\n      };\n    });\n    gridApi.applyTransaction({\n      add: newRowData\n    });\n  };\n\n  console.log(\"FLAGGROWWWWWW\", rowData);\n\n  const deleteRows = () => {\n    const selectedRows = gridApi.getSelectedRows();\n    gridApi.applyTransaction({\n      remove: selectedRows\n    });\n    console.log(selectedRows);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      columnDefs: OperationalColumns,\n      rowData: rowData,\n      setGrid: setGridApi,\n      gridApi: gridApi,\n      onCellClicked: e => {\n        console.log(\"onCellClicked\", e);\n      },\n      tableUpdate: updateFinalRowData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.tableFooter,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 22\n        }, this),\n        color: \"secondary\",\n        onClick: () => AddRow(),\n        children: \"Add Row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 22\n        }, this),\n        color: \"secondary\",\n        onClick: () => deleteRows(),\n        children: \"Delete Rows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OperationalData, \"x7B3mHPEVY3Al7MqmlRdL6R/SY8=\", false, function () {\n  return [useSelector];\n});\n\n_c = OperationalData;\nexport default OperationalData;\n\nvar _c;\n\n$RefreshReg$(_c, \"OperationalData\");","map":{"version":3,"sources":["D:/Netraaaa/Netra/netra/src/pages/Data Manager/operationalData/operationalData.js"],"names":["React","useState","Table","AgGridColumn","Button","AgGridReact","AddIcon","IconButton","DeleteIcon","styles","useSelector","useDispatch","v4","uuid","OperationalData","props","systemData","state","treeData","gridApi","setGridApi","components","filter","x","parentId","rows","map","element","index","id","Date","AverageRunning","rowData","setRows","forEachNode","rowNode","data","OperationalColumns","updateFinalRowData","allRows","tableUpdate","AddRow","newRowData","applyTransaction","add","console","log","deleteRows","selectedRows","getSelectedRows","remove","e","tableFooter"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { AgGridReact } from \"ag-grid-react/lib/agGridReact\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { v4 as uuid} from \"uuid\";\r\nconst OperationalData = (props) => {\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  //const phaseData = useSelector((state) => state.phase.phase);\r\n  //const phaseNames = [...new Set(phaseData.map((x) => x.PhaseName))];\r\n  //const phaseHeader = [];\r\n  debugger;\r\n  // phaseNames.map((p_e, p_i) => {\r\n  //   const phase_ranges = phaseData.filter((x) => x.PhaseName === p_e);\r\n  //   let values = [];\r\n  //   if (phase_ranges[0].MeasurementType === \"Quantitative\") {\r\n  //     values = phase_ranges.map((x) => x.PhaseRange);\r\n  //   } else {\r\n  //     values = phase_ranges.map((x) => x.Status);\r\n  //   }\r\n  //   const header = (\r\n  //     <AgGridColumn\r\n  //       field={p_e}\r\n  //       headerName={p_e}\r\n  //       cellEditor=\"agSelectCellEditor\"\r\n  //       cellEditorParams={{ values: values }}\r\n  //       width={200}\r\n  //       editable={true}\r\n  //     />\r\n  //   );\r\n  //   phaseHeader.push(header);\r\n  // });\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const components=systemData.filter(x=>x.parentId==null)\r\n  const rows=components.map((element, index) => {\r\n    return {\r\n      id: element.id,\r\n      Date: \"August/2021\",\r\n      AverageRunning: \"0\",\r\n    };\r\n  })\r\n  \r\n  const [rowData,setRows]=useState(rows)\r\n  gridApi.forEachNode((rowNode) => {\r\n    setRows(rowNode.data) // Access data of each row\r\n  });\r\n  const OperationalColumns = [\r\n    <AgGridColumn\r\n      field=\"Date\"\r\n      headerName=\"Date\"\r\n      width={200}\r\n      cellEditor=\"monthPicker\"\r\n      editable={true}\r\n      checkboxSelection={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"AverageRunning\"\r\n      headerName=\"Monthly Utilization\"\r\n      headerTooltip=\"Monthly Utilization\"\r\n      width={200}\r\n      editable={true}\r\n    />\r\n  ];\r\n\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows, \"insertOpData\");\r\n\r\n  };\r\n  const AddRow = () => {\r\n    let newRowData = components.map((element, index) => {\r\n      return {\r\n        id: element.id,\r\n        Date: \"\",\r\n        AverageRunning: \"0\",\r\n      };\r\n    });\r\n    \r\n    \r\n    gridApi.applyTransaction({\r\n      add: newRowData,\r\n    });\r\n    \r\n  };\r\n  console.log(\"FLAGGROWWWWWW\",rowData)\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    console.log(selectedRows);\r\n  };\r\n  return (\r\n    <div>\r\n      <Table\r\n        columnDefs={OperationalColumns}\r\n        rowData={rowData}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        onCellClicked={(e) => {\r\n          console.log(\"onCellClicked\", e);\r\n        }}\r\n        tableUpdate={updateFinalRowData}\r\n      ></Table>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OperationalData;\r\n"]},"metadata":{},"sourceType":"module"}