{"ast":null,"code":"var _jsxFileName = \"D:\\\\Netraaaa\\\\Netra\\\\netra\\\\src\\\\ui\\\\Table\\\\OverhaulTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\";\nimport styles from \"./OverHaulTable.module.css\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router\";\nimport ReactDom from \"react-dom\";\nimport { v4 as uuid } from \"uuid\"; // import { getDatePicker } from \"./DatePicker\";\n// import styles2 from \"../../pages/\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const getDatePicker = () => {\n  debugger;\n\n  const fillZeros = a => {\n    return Number(a) < 10 ? \"0\" + a : a;\n  };\n\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n  const getFormattedDateOutput = dateString => {\n    const dateParse = new Date(dateString);\n    const dd = dateParse.getDate();\n    const mm = dateParse.getMonth() + 1; //January is 0!\n\n    const yyyy = dateParse.getFullYear(); // console.log(dateString, dateParse);\n\n    return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\n  };\n\n  function Datepicker() {}\n\n  Datepicker.prototype.init = function (params) {\n    this.textInput = /*#__PURE__*/React.createRef();\n\n    const getFormattedDateMaterial = dateString => {\n      const dateParse = new Date(dateString.split(\"/\")[2] + \"-\" + dateString.split(\"/\")[1] + \"-\" + dateString.split(\"/\")[0]);\n      const dd = dateParse.getDate();\n      const mm = dateParse.getMonth() + 1; //January is 0!\n\n      const yyyy = dateParse.getFullYear();\n      console.log(dateString, dateParse);\n      return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\n    };\n\n    const eInput = /*#__PURE__*/React.createElement(TextField, {\n      type: \"date\",\n      defaultValue: getFormattedDateMaterial(params.value),\n      ref: this.textInput,\n      style: {\n        width: \"95%\"\n      }\n    });\n    this.div = document.createElement(\"div\");\n    this.div.className = \"ag-cell-parent-append\";\n    ReactDom.render(eInput, this.div);\n  };\n\n  Datepicker.prototype.getGui = function () {\n    return this.div;\n  };\n\n  Datepicker.prototype.afterGuiAttached = function () {\n    this.textInput.current.focus();\n  };\n\n  Datepicker.prototype.getValue = function () {\n    return getFormattedDateOutput(this.textInput.current.querySelector(\"input\").value);\n  };\n\n  Datepicker.prototype.destroy = function () {};\n\n  Datepicker.prototype.isPopup = function () {\n    return false;\n  };\n\n  return Datepicker;\n}; //Date Picker End\n\nconst createData = data => {\n  const finalRows = [];\n  data.forEach((ele, index) => {\n    let overhaulCount = index + 1;\n\n    if (index === 0) {\n      finalRows.push({\n        fullWidth: true,\n        name: \"Initiation to\" + \" Overhaul \" + overhaulCount,\n        overhaulId: ele.id\n      });\n    } else {\n      finalRows.push({\n        fullWidth: true,\n        name: \" Overhaul \" + index + \" to Overhaul \" + overhaulCount,\n        overhaulId: ele.id\n      });\n    }\n\n    let numDps = ele[\"numMaint\"];\n\n    for (let i = 0; i < numDps; i++) {\n      finalRows.push({\n        Date: \"--/--/----\",\n        maintenanceType: \"--Select--\",\n        totalRunAge: 0,\n        subSystem: \"--Select--\",\n        fullWidth: false,\n        overhaulId: ele.id\n      });\n    }\n  });\n  finalRows.push({\n    fullWidth: true,\n    name: \"Overhaul \" + data.length + \" to Present\",\n    overhaulId: uuid()\n  });\n  return finalRows;\n};\n\nconst OverhaulTable = props => {\n  _s();\n\n  const [rowData, setRowData] = useState([]);\n  const [gridApi, setGridApi] = useState(null);\n  const systemConfigurationTreeData = useSelector(state => state.treeData.treeData);\n  useEffect(() => {\n    let d = createData(props.data);\n    setRowData(d);\n  }, [props.data]);\n  let parent = \"\";\n  let subSystem = [];\n\n  try {\n    parent = systemConfigurationTreeData.filter(x => x.parentId === null)[0].id;\n    subSystem = systemConfigurationTreeData.filter(x => x.parentId === null || x.parentId === parent);\n  } catch {\n    /*#__PURE__*/\n    _jsxDEV(Redirect, {\n      to: \"/data_manager/historical_data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }, this);\n  } //   const parent = systemConfigurationTreeData.filter(\n  //     (x) => x.parentId === null\n  //   )[0].id;\n  //   const subSystem = systemConfigurationTreeData.filter(\n  //     (x) => x.parentId === null || x.parentId === parent\n  //   );\n\n\n  const onGridReady = params => {\n    setGridApi(params.api); // props.setGrid(params.api);\n    //   setGridColumnApi(params.columnApi);\n\n    params.api.sizeColumnsToFit();\n  };\n\n  const onFirstDataRendered = params => {\n    params.api.sizeColumnsToFit();\n    const allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    props.tableUpdate({\n      mainTable: allRowData,\n      subTable: props.data\n    });\n  };\n\n  const saveModifiedRows = params => {\n    const allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    props.tableUpdate({\n      mainTable: allRowData,\n      subTable: props.data\n    });\n  };\n\n  const colDefs = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    headerName: \"Date (DD/MM/YYYY)\",\n    field: \"Date\" //   headerTooltip=\"Date\"\n    //   minWidth={250}\n    //   cellEditor=\"datePicker\"\n    ,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    headerName: \"Maintenance Type\",\n    field: \"maintenanceType\",\n    headerTooltip: \"Maintenance Type\",\n    cellEditor: \"agSelectCellEditor\",\n    minWidth: 400,\n    cellEditorParams: {\n      values: [\"Minor Refit\", \"Corrective Maintenance\", \"Major Refit\", \"Over\"]\n    },\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    headerName: \"Total Running Age till this Event\",\n    field: \"totalRunAge\",\n    headerTooltip: \"Total Running Age till this Event\",\n    minWidth: 500,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    headerName: \"Associated Sub-System\",\n    field: \"subSystem\",\n    headerTooltip: \"Associated Sub-System\",\n    minWidth: 500,\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: subSystem.map(x => x.name)\n    },\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this)];\n\n  const fullWidthCellRenderer = params => {\n    debugger;\n    let cssClass;\n    let message;\n    cssClass = styles[\"example-full-width-row\"];\n    message = params.data.name;\n    const eDiv = document.createElement(\"div\");\n    eDiv.innerHTML = '<div class=\"' + cssClass + '\">' + message + \"</div>\";\n    return eDiv.firstChild;\n  };\n\n  const AddRow = () => {\n    let newRowData = [{\n      Date: \"10/10/2021\",\n      maintenanceType: \"\",\n      totalRunAge: \"\",\n      subSystem: \"\",\n      fullWidth: false\n    }];\n    gridApi.applyTransaction({\n      add: newRowData\n    });\n    const allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    props.tableUpdate({\n      mainTable: allRowData,\n      subTable: props.data\n    });\n  };\n\n  const deleteRows = () => {\n    const selectedRows = gridApi.getSelectedRows();\n    gridApi.applyTransaction({\n      remove: selectedRows\n    });\n    const allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    props.tableUpdate({\n      mainTable: allRowData,\n      subTable: props.data\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ag-theme-alpine\",\n    style: {\n      height: 400,\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(AgGridReact, {\n      rowData: rowData,\n      onGridReady: onGridReady,\n      onFirstDataRendered: onFirstDataRendered,\n      onCellValueChanged: saveModifiedRows,\n      isFullWidthCell: rowNode => rowNode.data.fullWidth,\n      fullWidthCellRenderer: fullWidthCellRenderer,\n      components: {\n        datePicker: getDatePicker()\n      },\n      children: colDefs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.tableFooter,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 22\n        }, this),\n        color: \"secondary\",\n        onClick: () => AddRow(),\n        children: \"Add Row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 22\n        }, this),\n        color: \"secondary\",\n        onClick: () => deleteRows(),\n        children: \"Delete Rows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OverhaulTable, \"iFtMO6v52LgwUrFMCx7+F4igxlc=\", false, function () {\n  return [useSelector];\n});\n\n_c = OverhaulTable;\nexport default OverhaulTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"OverhaulTable\");","map":{"version":3,"sources":["D:/Netraaaa/Netra/netra/src/ui/Table/OverhaulTable.js"],"names":["React","useEffect","useState","AgGridColumn","AgGridReact","styles","DeleteIcon","Button","TextField","AddIcon","useSelector","Redirect","ReactDom","v4","uuid","getDatePicker","fillZeros","a","Number","monthNames","getFormattedDateOutput","dateString","dateParse","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","Datepicker","prototype","init","params","textInput","createRef","getFormattedDateMaterial","split","console","log","eInput","createElement","type","defaultValue","value","ref","style","width","div","document","className","render","getGui","afterGuiAttached","current","focus","getValue","querySelector","destroy","isPopup","createData","data","finalRows","forEach","ele","index","overhaulCount","push","fullWidth","name","overhaulId","id","numDps","i","maintenanceType","totalRunAge","subSystem","length","OverhaulTable","props","rowData","setRowData","gridApi","setGridApi","systemConfigurationTreeData","state","treeData","d","parent","filter","x","parentId","onGridReady","api","sizeColumnsToFit","onFirstDataRendered","allRowData","forEachNode","node","tableUpdate","mainTable","subTable","saveModifiedRows","colDefs","values","map","fullWidthCellRenderer","cssClass","message","eDiv","innerHTML","firstChild","AddRow","newRowData","applyTransaction","add","deleteRows","selectedRows","getSelectedRows","remove","height","rowNode","datePicker","tableFooter"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\";\r\nimport styles from \"./OverHaulTable.module.css\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport ReactDom from \"react-dom\";\r\nimport { v4 as uuid } from \"uuid\";\r\n// import { getDatePicker } from \"./DatePicker\";\r\n// import styles2 from \"../../pages/\";\r\n\r\nexport const getDatePicker = () => {\r\n  debugger;\r\n  const fillZeros = (a) => {\r\n    return Number(a) < 10 ? \"0\" + a : a;\r\n  };\r\n  const monthNames = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const getFormattedDateOutput = (dateString) => {\r\n    const dateParse = new Date(dateString);\r\n    const dd = dateParse.getDate();\r\n    const mm = dateParse.getMonth() + 1; //January is 0!\r\n    const yyyy = dateParse.getFullYear();\r\n    // console.log(dateString, dateParse);\r\n    return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n  };\r\n  function Datepicker() {}\r\n  Datepicker.prototype.init = function (params) {\r\n    this.textInput = React.createRef();\r\n    const getFormattedDateMaterial = (dateString) => {\r\n      const dateParse = new Date(\r\n        dateString.split(\"/\")[2] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[1] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[0]\r\n      );\r\n      const dd = dateParse.getDate();\r\n      const mm = dateParse.getMonth() + 1; //January is 0!\r\n      const yyyy = dateParse.getFullYear();\r\n      console.log(dateString, dateParse);\r\n      return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n    };\r\n    const eInput = React.createElement(TextField, {\r\n      type: \"date\",\r\n      defaultValue: getFormattedDateMaterial(params.value),\r\n      ref: this.textInput,\r\n      style: { width: \"95%\" },\r\n    });\r\n    this.div = document.createElement(\"div\");\r\n    this.div.className = \"ag-cell-parent-append\";\r\n    ReactDom.render(eInput, this.div);\r\n  };\r\n  Datepicker.prototype.getGui = function () {\r\n    return this.div;\r\n  };\r\n  Datepicker.prototype.afterGuiAttached = function () {\r\n    this.textInput.current.focus();\r\n  };\r\n  Datepicker.prototype.getValue = function () {\r\n    return getFormattedDateOutput(\r\n      this.textInput.current.querySelector(\"input\").value\r\n    );\r\n  };\r\n  Datepicker.prototype.destroy = function () {};\r\n  Datepicker.prototype.isPopup = function () {\r\n    return false;\r\n  };\r\n  return Datepicker;\r\n};\r\n//Date Picker End\r\nconst createData = (data) => {\r\n  const finalRows = [];\r\n  data.forEach((ele, index) => {\r\n    let overhaulCount = index + 1;\r\n    if (index === 0) {\r\n      finalRows.push({\r\n        fullWidth: true,\r\n        name: \"Initiation to\" + \" Overhaul \" + overhaulCount,\r\n        overhaulId: ele.id,\r\n      });\r\n    } else {\r\n      finalRows.push({\r\n        fullWidth: true,\r\n        name: \" Overhaul \" + index + \" to Overhaul \" + overhaulCount,\r\n        overhaulId: ele.id,\r\n      });\r\n    }\r\n    let numDps = ele[\"numMaint\"];\r\n    for (let i = 0; i < numDps; i++) {\r\n      finalRows.push({\r\n        Date: \"--/--/----\",\r\n        maintenanceType: \"--Select--\",\r\n        totalRunAge: 0,\r\n        subSystem: \"--Select--\",\r\n        fullWidth: false,\r\n        overhaulId: ele.id,\r\n      });\r\n    }\r\n  });\r\n\r\n  finalRows.push({\r\n    fullWidth: true,\r\n    name: \"Overhaul \" + data.length + \" to Present\",\r\n    overhaulId: uuid(),\r\n  });\r\n  return finalRows;\r\n};\r\nconst OverhaulTable = (props) => {\r\n  const [rowData, setRowData] = useState([]);\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const systemConfigurationTreeData = useSelector(\r\n    (state) => state.treeData.treeData\r\n  );\r\n  useEffect(() => {\r\n    let d = createData(props.data);\r\n    setRowData(d);\r\n  }, [props.data]);\r\n  let parent = \"\";\r\n  let subSystem = [];\r\n  try {\r\n    parent = systemConfigurationTreeData.filter((x) => x.parentId === null)[0]\r\n      .id;\r\n    subSystem = systemConfigurationTreeData.filter(\r\n      (x) => x.parentId === null || x.parentId === parent\r\n    );\r\n  } catch {\r\n    <Redirect to=\"/data_manager/historical_data\"></Redirect>;\r\n  }\r\n  //   const parent = systemConfigurationTreeData.filter(\r\n  //     (x) => x.parentId === null\r\n  //   )[0].id;\r\n  //   const subSystem = systemConfigurationTreeData.filter(\r\n  //     (x) => x.parentId === null || x.parentId === parent\r\n  //   );\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n    // props.setGrid(params.api);\r\n    //   setGridColumnApi(params.columnApi);\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n  const onFirstDataRendered = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    props.tableUpdate({ mainTable: allRowData, subTable: props.data });\r\n  };\r\n  const saveModifiedRows = (params) => {\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    props.tableUpdate({ mainTable: allRowData, subTable: props.data });\r\n  };\r\n  const colDefs = [\r\n    <AgGridColumn\r\n      headerName=\"Date (DD/MM/YYYY)\"\r\n      field=\"Date\"\r\n      //   headerTooltip=\"Date\"\r\n      //   minWidth={250}\r\n      //   cellEditor=\"datePicker\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      headerName=\"Maintenance Type\"\r\n      field=\"maintenanceType\"\r\n      headerTooltip=\"Maintenance Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      minWidth={400}\r\n      cellEditorParams={{ values: [\"Minor Refit\", \"Corrective Maintenance\",\"Major Refit\",\"Over\"] }}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      headerName=\"Total Running Age till this Event\"\r\n      field=\"totalRunAge\"\r\n      headerTooltip=\"Total Running Age till this Event\"\r\n      minWidth={500}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      headerName=\"Associated Sub-System\"\r\n      field=\"subSystem\"\r\n      headerTooltip=\"Associated Sub-System\"\r\n      minWidth={500}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: subSystem.map((x) => x.name),\r\n      }}\r\n      editable={true}\r\n    />,\r\n  ];\r\n\r\n  const fullWidthCellRenderer = (params) => {\r\n    debugger;\r\n    let cssClass;\r\n    let message;\r\n    cssClass = styles[\"example-full-width-row\"];\r\n    message = params.data.name;\r\n    const eDiv = document.createElement(\"div\");\r\n    eDiv.innerHTML = '<div class=\"' + cssClass + '\">' + message + \"</div>\";\r\n    return eDiv.firstChild;\r\n  };\r\n  const AddRow = () => {\r\n    let newRowData = [\r\n      {\r\n        Date: \"10/10/2021\",\r\n        maintenanceType: \"\",\r\n        totalRunAge: \"\",\r\n        subSystem: \"\",\r\n        fullWidth: false,\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: newRowData,\r\n    });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    props.tableUpdate({ mainTable: allRowData, subTable: props.data });\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    props.tableUpdate({ mainTable: allRowData, subTable: props.data });\r\n  };\r\n  return (\r\n    <div className=\"ag-theme-alpine\" style={{ height: 400, width: \"100%\" }}>\r\n      <AgGridReact\r\n        rowData={rowData}\r\n        onGridReady={onGridReady}\r\n        onFirstDataRendered={onFirstDataRendered}\r\n        onCellValueChanged={saveModifiedRows}\r\n        isFullWidthCell={(rowNode) => rowNode.data.fullWidth}\r\n        fullWidthCellRenderer={fullWidthCellRenderer}\r\n        components={{\r\n          datePicker: getDatePicker(),\r\n        }}\r\n      >\r\n        {colDefs}\r\n      </AgGridReact>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OverhaulTable;\r\n"]},"metadata":{},"sourceType":"module"}