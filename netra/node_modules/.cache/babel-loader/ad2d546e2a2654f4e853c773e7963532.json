{"ast":null,"code":"var _jsxFileName = \"E:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\Data Manager\\\\selectEquipment\\\\MultiSelect.js\";\n\n/*\r\nReference: https://codesandbox.io/s/thirsty-moon-9egd9?file=/src/MultiSelect/MultiSelect.js\r\n*/\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete, { createFilterOptions } from \"@material-ui/lab/Autocomplete\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport { Checkbox } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MultiSelect = ({\n  items,\n  selectedValues,\n  label,\n  selectAllLabel,\n  noOptionsText,\n  onToggleOption,\n  onClearOptions,\n  onSelectAll,\n  getOptionLabel,\n  onUpdateSelectedEquipmentList\n}) => {\n  const allSelected = items.length === selectedValues.length;\n\n  const handleToggleSelectAll = () => {\n    onSelectAll && onSelectAll(!allSelected);\n  };\n\n  const handleChange = (event, selectedOptions, reason) => {\n    if (reason === \"select-option\" || reason === \"remove-option\") {\n      if (selectedOptions.find(option => option.name === \"Select All\")) {\n        handleToggleSelectAll();\n      } else {\n        onToggleOption && onToggleOption(selectedOptions);\n      }\n    } else if (reason === \"clear\") {\n      onClearOptions && onClearOptions();\n    }\n\n    onUpdateSelectedEquipmentList(selectedOptions);\n  };\n\n  const optionRenderer = (option, {\n    selected\n  }) => {\n    const selectAllProps = option.name === \"Select All\" // To control the state of 'Select All' checkbox\n    ? {\n      checked: allSelected\n    } : {};\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n        color: \"primary\",\n        icon: /*#__PURE__*/_jsxDEV(CheckBoxOutlineBlankIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this),\n        checkedIcon: /*#__PURE__*/_jsxDEV(CheckBoxIcon, {\n          fontSize: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 24\n        }, this),\n        style: {\n          marginRight: 8\n        },\n        checked: selected,\n        ...selectAllProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), getOptionLabel(option)]\n    }, void 0, true);\n  };\n\n  const inputRenderer = params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n    label: label,\n    variant: \"outlined\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n\n  const getOptionSelected = (option, anotherOption) => option.name === anotherOption.name;\n\n  const filter = createFilterOptions();\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    multiple: true,\n    style: {\n      width: 500\n    },\n    options: items,\n    value: selectedValues,\n    groupBy: option => option.parentName,\n    disableCloseOnSelect: true,\n    limitTags: 2,\n    getOptionLabel: getOptionLabel,\n    getOptionSelected: getOptionSelected,\n    noOptionsText: noOptionsText,\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params);\n      return [{\n        label: selectAllLabel,\n        name: \"Select All\"\n      }, ...filtered];\n    },\n    onChange: handleChange,\n    renderOption: optionRenderer,\n    renderInput: inputRenderer\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MultiSelect;\nMultiSelect.defaultProps = {\n  items: [],\n  selectedValues: [],\n  getOptionLabel: name => name\n};\nexport default MultiSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiSelect\");","map":{"version":3,"sources":["E:/NetraB/netra/src/pages/Data Manager/selectEquipment/MultiSelect.js"],"names":["React","TextField","Autocomplete","createFilterOptions","CheckBoxOutlineBlankIcon","CheckBoxIcon","Checkbox","MultiSelect","items","selectedValues","label","selectAllLabel","noOptionsText","onToggleOption","onClearOptions","onSelectAll","getOptionLabel","onUpdateSelectedEquipmentList","allSelected","length","handleToggleSelectAll","handleChange","event","selectedOptions","reason","find","option","name","optionRenderer","selected","selectAllProps","checked","marginRight","inputRenderer","params","getOptionSelected","anotherOption","filter","width","parentName","options","filtered","defaultProps"],"mappings":"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","sourcesContent":["/*\r\nReference: https://codesandbox.io/s/thirsty-moon-9egd9?file=/src/MultiSelect/MultiSelect.js\r\n*/\r\n\r\nimport React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete, {\r\n  createFilterOptions,\r\n} from \"@material-ui/lab/Autocomplete\";\r\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport { Checkbox } from \"@material-ui/core\";\r\n\r\nconst MultiSelect = ({\r\n  items,\r\n  selectedValues,\r\n  label,\r\n  selectAllLabel,\r\n  noOptionsText,\r\n  onToggleOption,\r\n  onClearOptions,\r\n  onSelectAll,\r\n  getOptionLabel,\r\n  onUpdateSelectedEquipmentList,\r\n}) => {\r\n  const allSelected = items.length === selectedValues.length;\r\n  const handleToggleSelectAll = () => {\r\n    onSelectAll && onSelectAll(!allSelected);\r\n  };\r\n\r\n  const handleChange = (event, selectedOptions, reason) => {\r\n    if (reason === \"select-option\" || reason === \"remove-option\") {\r\n      if (selectedOptions.find((option) => option.name === \"Select All\")) {\r\n        handleToggleSelectAll();\r\n      } else {\r\n        onToggleOption && onToggleOption(selectedOptions);\r\n      }\r\n    } else if (reason === \"clear\") {\r\n      onClearOptions && onClearOptions();\r\n    }\r\n    onUpdateSelectedEquipmentList(selectedOptions);\r\n  };\r\n  const optionRenderer = (option, { selected }) => {\r\n    const selectAllProps =\r\n      option.name === \"Select All\" // To control the state of 'Select All' checkbox\r\n        ? { checked: allSelected }\r\n        : {};\r\n    return (\r\n      <>\r\n        <Checkbox\r\n          color=\"primary\"\r\n          icon={<CheckBoxOutlineBlankIcon fontSize=\"small\" />}\r\n          checkedIcon={<CheckBoxIcon fontSize=\"small\" />}\r\n          style={{ marginRight: 8 }}\r\n          checked={selected}\r\n          {...selectAllProps}\r\n        />\r\n        {getOptionLabel(option)}\r\n      </>\r\n    );\r\n  };\r\n  const inputRenderer = (params) => (\r\n    <TextField {...params} label={label} variant=\"outlined\" />\r\n  );\r\n  const getOptionSelected = (option, anotherOption) =>\r\n    option.name === anotherOption.name;\r\n  const filter = createFilterOptions();\r\n  return (\r\n    <Autocomplete\r\n      multiple\r\n      style={{ width: 500 }}\r\n      options={items}\r\n      value={selectedValues}\r\n      groupBy={(option) => option.parentName}\r\n      disableCloseOnSelect\r\n      limitTags={2}\r\n      getOptionLabel={getOptionLabel}\r\n      getOptionSelected={getOptionSelected}\r\n      noOptionsText={noOptionsText}\r\n      filterOptions={(options, params) => {\r\n        const filtered = filter(options, params);\r\n        return [{ label: selectAllLabel, name: \"Select All\" }, ...filtered];\r\n      }}\r\n      onChange={handleChange}\r\n      renderOption={optionRenderer}\r\n      renderInput={inputRenderer}\r\n    />\r\n  );\r\n};\r\n\r\nMultiSelect.defaultProps = {\r\n  items: [],\r\n  selectedValues: [],\r\n  getOptionLabel: (name) => name,\r\n};\r\n\r\nexport default MultiSelect;\r\n"]},"metadata":{},"sourceType":"module"}