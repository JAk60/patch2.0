{"ast":null,"code":"var _jsxFileName = \"E:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\CDashboard\\\\CDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"./CDashboard.module.css\";\nimport { InputLabel, TextField, makeStyles, Button } from \"@material-ui/core\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ReferenceLine } from \"recharts\"; // import { arr,arr2 } from \"./data\";\n\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport MomentUtils from \"@date-io/moment\";\nimport Navigation from \"../../components/navigation/Navigation\";\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { userActions } from \"../../store/ApplicationVariable\";\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CDashboard = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [userSelectionData, setUserSelectionData] = useState([]);\n  const [uniqueEqIds, setUniqueEqIds] = useState([]);\n  const [minMax, setMinMax] = useState([]);\n  const [selectedEqName, setEquipmentName] = useState([]);\n  const [paramOptions, setParamOptions] = useState([]);\n  const [selectedShipName, setShipName] = useState([]);\n  const [selectedParameterName, setParameterName] = useState([]);\n  const [eqDataOption, setEqDataOption] = useState([]);\n  const [paramData, setParamData] = useState([]);\n  const [currMinMax, setCurrMinMax] = useState([]);\n  useEffect(() => {\n    fetch(\"/cm_dashboard\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      const params = data[\"parameters\"];\n      console.log(\"hello:\", params);\n      setMinMax([...params]);\n      const user_selection = data[\"user_selection\"][\"data\"];\n      const eqData = data[\"user_selection\"][\"eqData\"];\n      const eqIds = data[\"user_selection\"][\"uniq_eq_data\"];\n      setUniqueEqIds(eqIds);\n      const shipName = user_selection.map(x => x.shipName);\n      setUserSelectionData(eqData);\n      dispatch(userActions.populateParams({\n        params: params\n      }));\n      dispatch(userActions.onChangeLoad({\n        filteredData: {\n          shipName: shipName\n        }\n      }));\n    });\n  }, []); // ...\n\n  useEffect(() => {\n    const filteredArray = minMax.filter(item => {\n      return selectedEqName.some(selected => item.equipment_id === selected.id);\n    });\n    const filteredNames = filteredArray.map(item => item.name);\n    setParamOptions(filteredNames); // Move this line here\n\n    const CMinMax = ele => {\n      const FminMax = filteredArray.filter(i => i.name === ele);\n      setCurrMinMax(prevMinMax => [...prevMinMax, ...FminMax]);\n    };\n\n    selectedParameterName.forEach(e => CMinMax(e));\n  }, [selectedEqName]);\n  const customSelectData = useSelector(state => state.userSelection.userSelection);\n  const dropDownStyle = makeStyles({\n    root: {\n      paddingLeft: 10,\n      background: \"#fff\",\n      border: \"1px solid #0263a1\",\n      borderRadius: \"5px\",\n      width: \"320px\",\n      minHeight: \"40px\",\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\"\n    },\n    inputRoot: {\n      width: \"100%\"\n    }\n  });\n  const classes = dropDownStyle();\n  let arr = [];\n  let arr2 = [];\n\n  for (let i = 0; i < 50; i++) {\n    // const maxDate = Date.now();\n    // const timestamp = Math.floor(Math.random() * maxDate);\n    arr = [...arr, {\n      name: new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0, 10),\n      uv: Math.floor(Math.random() * (80 - 30 + 1)) + 30\n    }];\n    arr2 = [...arr2, {\n      name: new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0, 10),\n      uv: Math.floor(Math.random() * (75 - 30 + 1)) + 30\n    }];\n  }\n\n  const [showGraph, setShowGraph] = useState(false);\n\n  const onSubmitHandler = () => {\n    fetch(\"/fetch_cmdata\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        EquipmentIds: selectedEqName.map(x => x.id),\n        ParameterNames: selectedParameterName.map(x => x)\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      const sortedParamData = data.map(param => {\n        return { ...param,\n          data: param.data.sort((a, b) => new Date(a.date) - new Date(b.date))\n        };\n      });\n      setSnackBarMessage({\n        severity: \"success\",\n        message: data.message,\n        showSnackBar: true\n      });\n      setParamData(sortedParamData);\n      setShowGraph(true);\n    }).catch(error => {\n      setSnackBarMessage({\n        severity: \"error\",\n        message: \"Some Error Occured. \" + error,\n        showSnackBar: true\n      });\n    });\n  };\n\n  function findMaxValue(dataArray) {\n    if (!Array.isArray(dataArray)) {\n      return null; // Return null if dataArray is not an array\n    }\n\n    let max = Number.MIN_SAFE_INTEGER; // Initialize max to the smallest possible number\n\n    for (const obj of dataArray) {\n      const value = parseInt(obj.value, 10); // Convert the value to a number\n\n      if (!isNaN(value)) {\n        // Check if the value is a valid number\n        max = Math.max(max, value);\n      }\n    }\n\n    return max;\n  } // Snackbar\n\n\n  console.log(paramData);\n  const [SnackBarMessage, setSnackBarMessage] = useState({\n    severity: \"error\",\n    message: \"This is awesome\",\n    showSnackBar: false\n  });\n\n  const onHandleSnackClose = () => {\n    setSnackBarMessage({\n      severity: \"error\",\n      message: \"Please Add Systemss\",\n      showSnackBar: false\n    });\n  };\n\n  const changeShip = e => {\n    var filteredEqData = [];\n    var xx = userSelectionData.filter(x => x.shipName === e.target.value).map(x => {\n      let id = uniqueEqIds.filter(y => y.name === x.equipmentName);\n      return id[0];\n    });\n    filteredEqData = [...filteredEqData, ...xx];\n    setEqDataOption(filteredEqData);\n    setShipName(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n    utils: MomentUtils,\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.body,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.mprofile,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"300px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            style: {\n              fontWeight: \"bold\",\n              color: \"black\",\n              fontSize: \"16px\",\n              marginBottom: \"10px\"\n            },\n            children: \"Ship Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n            fields: customSelectData[\"shipName\"],\n            onChange: changeShip,\n            value: selectedShipName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"300px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            style: {\n              fontWeight: \"bold\",\n              color: \"black\",\n              fontSize: \"16px\",\n              marginBottom: \"10px\"\n            },\n            children: \"Equipment Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            classes: classes,\n            multiple: true,\n            id: \"tags-standard\",\n            options: eqDataOption,\n            getOptionLabel: option => option.name,\n            value: selectedEqName,\n            onChange: (e, value) => setEquipmentName(value),\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              InputProps: { ...params.InputProps,\n                disableUnderline: true\n              },\n              variant: \"standard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"300px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            style: {\n              fontWeight: \"bold\",\n              color: \"black\",\n              fontSize: \"16px\",\n              marginBottom: \"10px\"\n            },\n            children: \"Select Parameter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            classes: classes,\n            multiple: true,\n            id: \"tags-standard\",\n            options: paramOptions // getOptionLabel={(option) => option.name}\n            ,\n            value: selectedParameterName,\n            onChange: (e, value) => setParameterName(value),\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              InputProps: { ...params.InputProps,\n                disableUnderline: true\n              },\n              variant: \"standard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          style: {\n            marginTop: \"2rem\"\n          },\n          onClick: onSubmitHandler,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), showGraph && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.midSection,\n        children: paramData.map(param => {\n          var _param$data$value, _param$data, _param$data$value2, _param$data2, _paramData$;\n\n          if (param.data.length === 0) {\n            return null;\n          }\n\n          const crossingThreshold = ((_param$data$value = (_param$data = param.data[param.data.length - 1]) === null || _param$data === void 0 ? void 0 : _param$data.value) !== null && _param$data$value !== void 0 ? _param$data$value : 0) < param.minThreshold || ((_param$data$value2 = (_param$data2 = param.data[param.data.length - 1]) === null || _param$data2 === void 0 ? void 0 : _param$data2.value) !== null && _param$data$value2 !== void 0 ? _param$data$value2 : 0) > param.maxThreshold;\n          const matchingMinMax = currMinMax === null || currMinMax === void 0 ? void 0 : currMinMax.find(item => item.name === param.parameterName);\n          const minThreshold = parseInt(matchingMinMax === null || matchingMinMax === void 0 ? void 0 : matchingMinMax.min_value);\n          const maxThreshold = parseInt(matchingMinMax === null || matchingMinMax === void 0 ? void 0 : matchingMinMax.max_value);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.rchart,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.content,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [crossingThreshold, param.equipmentName, \" \", param.componentName, param.parameterName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n                width: 550,\n                height: 300,\n                data: param.data,\n                children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                  dataKey: \"date\",\n                  tick: false,\n                  label: {\n                    value: \"Date\",\n                    position: \"insideBottom\",\n                    dy: 10\n                  },\n                  height: 45\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                  domain: [0, findMaxValue((_paramData$ = paramData[0]) === null || _paramData$ === void 0 ? void 0 : _paramData$.data)] // Set the Y-axis domain dynamically\n                  ,\n                  label: {\n                    value: `${param.parameterName} Data`,\n                    angle: -90,\n                    position: \"center\",\n                    paddingRight: \"20px\",\n                    dy: -10\n                  },\n                  width: 80\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n                  horizontal: false,\n                  vertical: false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 371,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Line, {\n                  layout: \"horizontal\",\n                  dataKey: \"value\",\n                  stroke: crossingThreshold ? \"red\" : \"green\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                  y: minThreshold,\n                  stroke: \"gray\",\n                  strokeDasharray: \"6 6\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 379,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                  y: maxThreshold,\n                  stroke: \"gray\",\n                  strokeDasharray: \"6 6\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), SnackBarMessage.showSnackBar && /*#__PURE__*/_jsxDEV(CustomizedSnackbars, {\n      message: SnackBarMessage,\n      onHandleClose: onHandleSnackClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CDashboard, \"tdH4BqRt4L0LXOC0PJwReZaPikI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CDashboard;\nexport default CDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CDashboard\");","map":{"version":3,"sources":["E:/NetraB/netra/src/pages/CDashboard/CDashboard.js"],"names":["React","useEffect","useState","styles","InputLabel","TextField","makeStyles","Button","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ReferenceLine","MuiPickersUtilsProvider","MomentUtils","Navigation","CustomSelect","Autocomplete","useDispatch","useSelector","userActions","CustomizedSnackbars","CDashboard","dispatch","userSelectionData","setUserSelectionData","uniqueEqIds","setUniqueEqIds","minMax","setMinMax","selectedEqName","setEquipmentName","paramOptions","setParamOptions","selectedShipName","setShipName","selectedParameterName","setParameterName","eqDataOption","setEqDataOption","paramData","setParamData","currMinMax","setCurrMinMax","fetch","method","headers","Accept","then","res","json","data","params","console","log","user_selection","eqData","eqIds","shipName","map","x","populateParams","onChangeLoad","filteredData","filteredArray","filter","item","some","selected","equipment_id","id","filteredNames","name","CMinMax","ele","FminMax","i","prevMinMax","forEach","e","customSelectData","state","userSelection","dropDownStyle","root","paddingLeft","background","border","borderRadius","width","minHeight","boxShadow","inputRoot","classes","arr","arr2","Date","getTime","Math","random","toISOString","slice","uv","floor","showGraph","setShowGraph","onSubmitHandler","body","JSON","stringify","EquipmentIds","ParameterNames","sortedParamData","param","sort","a","b","date","setSnackBarMessage","severity","message","showSnackBar","catch","error","findMaxValue","dataArray","Array","isArray","max","Number","MIN_SAFE_INTEGER","obj","value","parseInt","isNaN","SnackBarMessage","onHandleSnackClose","changeShip","filteredEqData","xx","target","y","equipmentName","mprofile","fontWeight","color","fontSize","marginBottom","option","InputProps","disableUnderline","marginTop","midSection","length","crossingThreshold","minThreshold","maxThreshold","matchingMinMax","find","parameterName","min_value","max_value","rchart","content","componentName","position","dy","angle","paddingRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./CDashboard.module.css\";\r\nimport { InputLabel, TextField, makeStyles, Button } from \"@material-ui/core\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ReferenceLine,\r\n} from \"recharts\";\r\n// import { arr,arr2 } from \"./data\";\r\nimport {\r\n  MuiPickersUtilsProvider\r\n} from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\n\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { userActions } from \"../../store/ApplicationVariable\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\n\r\nconst CDashboard = () => {\r\n  const dispatch = useDispatch();\r\n  const [userSelectionData, setUserSelectionData] = useState([]);\r\n  const [uniqueEqIds, setUniqueEqIds] = useState([]);\r\n  const [minMax, setMinMax] = useState([]);\r\n  const [selectedEqName, setEquipmentName] = useState([]);\r\n  const [paramOptions, setParamOptions] = useState([]);\r\n  const [selectedShipName, setShipName] = useState([]);\r\n  const [selectedParameterName, setParameterName] = useState([]);\r\n  const [eqDataOption, setEqDataOption] = useState([]);\r\n  const [paramData, setParamData] = useState([]);\r\n  const [currMinMax, setCurrMinMax] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(\"/cm_dashboard\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const params = data[\"parameters\"];\r\n        console.log(\"hello:\", params);\r\n        setMinMax([...params]);\r\n        const user_selection = data[\"user_selection\"][\"data\"];\r\n        const eqData = data[\"user_selection\"][\"eqData\"];\r\n        const eqIds = data[\"user_selection\"][\"uniq_eq_data\"];\r\n        setUniqueEqIds(eqIds);\r\n        const shipName = user_selection.map((x) => x.shipName);\r\n        setUserSelectionData(eqData);\r\n        dispatch(userActions.populateParams({ params: params }));\r\n        dispatch(\r\n          userActions.onChangeLoad({ filteredData: { shipName: shipName } })\r\n        );\r\n      });\r\n    }, []);\r\n  // ...\r\n  useEffect(() => {\r\n    const filteredArray = minMax.filter((item) => {\r\n      return selectedEqName.some(\r\n        (selected) => item.equipment_id === selected.id\r\n      );\r\n    });\r\n\r\n    const filteredNames = filteredArray.map((item) => item.name);\r\n    setParamOptions(filteredNames); // Move this line here\r\n\r\n    const CMinMax = (ele) => {\r\n      const FminMax = filteredArray.filter((i) => i.name === ele);\r\n      setCurrMinMax((prevMinMax) => [...prevMinMax, ...FminMax]);\r\n    };\r\n\r\n    selectedParameterName.forEach((e) => CMinMax(e));\r\n  }, [selectedEqName]);\r\n\r\n\r\n  const customSelectData = useSelector(\r\n    (state) => state.userSelection.userSelection\r\n  );\r\n\r\n  const dropDownStyle = makeStyles({\r\n    root: {\r\n      paddingLeft: 10,\r\n      background: \"#fff\",\r\n      border: \"1px solid #0263a1\",\r\n      borderRadius: \"5px\",\r\n      width: \"320px\",\r\n      minHeight: \"40px\",\r\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n    },\r\n    inputRoot: {\r\n      width: \"100%\",\r\n    },\r\n  });\r\n  const classes = dropDownStyle();\r\n  let arr = [];\r\n  let arr2 = [];\r\n  for (let i = 0; i < 50; i++) {\r\n    // const maxDate = Date.now();\r\n    // const timestamp = Math.floor(Math.random() * maxDate);\r\n    arr = [\r\n      ...arr,\r\n      {\r\n        name: new Date(\r\n          new Date(2021, 1, 1).getTime() +\r\n            Math.random() *\r\n              (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())\r\n        )\r\n          .toISOString()\r\n          .slice(0, 10),\r\n        uv: Math.floor(Math.random() * (80 - 30 + 1)) + 30,\r\n      },\r\n    ];\r\n\r\n    arr2 = [\r\n      ...arr2,\r\n      {\r\n        name: new Date(\r\n          new Date(2021, 1, 1).getTime() +\r\n            Math.random() *\r\n              (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())\r\n        )\r\n          .toISOString()\r\n          .slice(0, 10),\r\n        uv: Math.floor(Math.random() * (75 - 30 + 1)) + 30,\r\n      },\r\n    ];\r\n  }\r\n  const [showGraph, setShowGraph] = useState(false);\r\n\r\n  const onSubmitHandler = () => {\r\n    fetch(\"/fetch_cmdata\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        EquipmentIds: selectedEqName.map((x) => x.id),\r\n        ParameterNames: selectedParameterName.map((x) => x),\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const sortedParamData = data.map((param) => {\r\n          return {\r\n            ...param,\r\n            data: param.data.sort((a, b) => new Date(a.date) - new Date(b.date)),\r\n          };\r\n        });\r\n        setSnackBarMessage({\r\n          severity: \"success\",\r\n          message: data.message,\r\n          showSnackBar: true,\r\n        });\r\n        setParamData(sortedParamData);\r\n        setShowGraph(true);\r\n      })\r\n      .catch((error) => {\r\n        setSnackBarMessage({\r\n          severity: \"error\",\r\n          message: \"Some Error Occured. \" + error,\r\n          showSnackBar: true,\r\n        });\r\n      });\r\n    };\r\n\r\n\r\n    function findMaxValue(dataArray) {\r\n      if (!Array.isArray(dataArray)) {\r\n        return null; // Return null if dataArray is not an array\r\n      }\r\n    \r\n      let max = Number.MIN_SAFE_INTEGER; // Initialize max to the smallest possible number\r\n    \r\n      for (const obj of dataArray) {\r\n        const value = parseInt(obj.value, 10); // Convert the value to a number\r\n        if (!isNaN(value)) { // Check if the value is a valid number\r\n          max = Math.max(max, value);\r\n        }\r\n      }\r\n    \r\n      return max;\r\n    }\r\n    \r\n  // Snackbar\r\n  console.log(paramData)\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n\r\n  const changeShip = (e) => {\r\n    var filteredEqData = [];\r\n\r\n    var xx = userSelectionData\r\n      .filter((x) => x.shipName === e.target.value)\r\n      .map((x) => {\r\n        let id = uniqueEqIds.filter((y) => y.name === x.equipmentName);\r\n        return id[0];\r\n      });\r\n    filteredEqData = [...filteredEqData, ...xx];\r\n\r\n    setEqDataOption(filteredEqData);\r\n    setShipName(e.target.value);\r\n  };\r\n  return (\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        <div className={styles.mprofile}>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Ship Name\r\n            </InputLabel>\r\n            <CustomSelect\r\n              fields={customSelectData[\"shipName\"]}\r\n              onChange={changeShip}\r\n              value={selectedShipName}\r\n            />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Equipment Name\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n              classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={eqDataOption}\r\n              getOptionLabel={(option) => option.name}\r\n              value={selectedEqName}\r\n              onChange={(e, value) => setEquipmentName(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{ ...params.InputProps, disableUnderline: true }}\r\n                  variant=\"standard\"\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Select Parameter\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n              classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={paramOptions}\r\n              // getOptionLabel={(option) => option.name}\r\n              value={selectedParameterName}\r\n              onChange={(e, value) => setParameterName(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{ ...params.InputProps, disableUnderline: true }}\r\n                  variant=\"standard\"\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              marginTop: \"2rem\",\r\n            }}\r\n            onClick={onSubmitHandler}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n\r\n        {showGraph && (\r\n          <div className={styles.midSection}>\r\n            {paramData.map((param) => {\r\n              if (param.data.length === 0) {\r\n                return null;\r\n              }\r\n\r\n              const crossingThreshold =\r\n                (param.data[param.data.length - 1]?.value ?? 0) <\r\n                  param.minThreshold ||\r\n                (param.data[param.data.length - 1]?.value ?? 0) >\r\n                  param.maxThreshold;\r\n\r\n              const matchingMinMax = currMinMax?.find(\r\n                (item) => item.name === param.parameterName\r\n              )\r\n\r\n              const minThreshold = parseInt(matchingMinMax?.min_value);\r\n              const maxThreshold = parseInt(matchingMinMax?.max_value);\r\n\r\n              return (\r\n                <div className={styles.rchart}>\r\n                  <div className={styles.content}>\r\n                    <div>\r\n                      {crossingThreshold}\r\n                      {param.equipmentName} {param.componentName}\r\n                      {param.parameterName}\r\n                    </div>\r\n                    <LineChart width={550} height={300} data={param.data}>\r\n                      <XAxis\r\n                        dataKey=\"date\"\r\n                        tick={false}\r\n                        label={{\r\n                          value: \"Date\",\r\n                          position: \"insideBottom\",\r\n                          dy: 10,\r\n                        }}\r\n                        height={45}\r\n                      />\r\n                      <YAxis\r\n                        domain={[0, findMaxValue(paramData[0]?.data)]} // Set the Y-axis domain dynamically\r\n                        label={{\r\n                          value: `${param.parameterName} Data`,\r\n                          angle: -90,\r\n                          position: \"center\",\r\n                          paddingRight: \"20px\",\r\n                          dy: -10,\r\n                        }}\r\n                        width={80}\r\n                      />\r\n                      <CartesianGrid horizontal={false} vertical={false} />\r\n\r\n                      <Line\r\n                        layout=\"horizontal\"\r\n                        dataKey=\"value\"\r\n                        stroke={crossingThreshold ? \"red\" : \"green\"}\r\n                      />\r\n\r\n                      <ReferenceLine\r\n                        y={minThreshold}\r\n                        stroke=\"gray\"\r\n                        strokeDasharray=\"6 6\"\r\n                      />\r\n                      <ReferenceLine\r\n                        y={maxThreshold}\r\n                        stroke=\"gray\"\r\n                        strokeDasharray=\"6 6\"\r\n                      />\r\n\r\n                      <Tooltip />\r\n                    </LineChart>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\nexport default CDashboard;\r\n"]},"metadata":{},"sourceType":"module"}