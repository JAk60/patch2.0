{"ast":null,"code":"var _jsxFileName = \"E:\\\\NETRA PROJECT\\\\Netra\\\\netra\\\\src\\\\pages\\\\PM OPTIM\\\\GroupTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport styles from './pm.module.css';\nimport { Button, Dialog, DialogTitle, DialogContent, DialogActions } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GroupTable = ({\n  height,\n  n,\n  tData,\n  columnDefs\n}) => {\n  _s();\n\n  const useStyles = makeStyles(theme => ({\n    dialogContainer: {\n      borderRadius: theme.spacing(2),\n      padding: theme.spacing(2)\n    },\n    dialogTitle: {\n      paddingBottom: theme.spacing(1)\n    },\n    dialogContent: {\n      paddingTop: 0,\n      paddingBottom: theme.spacing(2)\n    }\n  }));\n  const [open, setOpen] = useState(false);\n  const [tval, setTval] = useState(0);\n  const [tval90, setTval90] = useState(0);\n  const [tval110, setTval110] = useState(0);\n  const classes = useStyles();\n\n  const handleClose = () => {\n    setOpen(false); // Close the dialog\n\n    setTableData([]);\n    window.location.reload();\n  }; // Generate row data with 'n' number of rows\n\n\n  const rowData = [];\n\n  for (let i = 1; i <= n; i++) {\n    rowData.push({\n      id: i,\n      component: `Component ${i}`\n    });\n  } // Modify the first column to be of type 'text'\n\n\n  const modifiedColumnDefs = columnDefs.map((col, index) => {\n    if (index === 0) {\n      return { ...col,\n        type: \"text\",\n        editable: true\n      };\n    }\n\n    return col;\n  }); // State to store the table data\n\n  const [tableData, setTableData] = useState(rowData);\n  console.log(tData);\n\n  const handleOnClickSubmit = () => {\n    const jsonData = tableData.reduce((result, row, index) => {\n      const componentKey = `component_${index + 1}`;\n      result[`${componentKey}_eeta`] = parseFloat(row.eeta);\n      result[`${componentKey}_beta`] = parseFloat(row.beta);\n      result[`${componentKey}_c`] = parseFloat(row.c);\n      result[`${componentKey}_rt`] = parseFloat(row.rt);\n      return result;\n    }, {});\n    const combinedData = { ...jsonData,\n      // Spread the jsonData\n      ...tData[0] // Spread the first element of the propData array\n\n    };\n    fetch(\"/optimize\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(combinedData)\n    }).then(response => response.json()).then(data => {\n      // Handle the response from the backend\n      console.log(data);\n      setTval(data.t);\n      setTval90(data.t - 0.1 * data.t);\n      setTval110(data.t + 0.1 * data.t); // Set the tableData state with the row data when the form is submitted\n    }).catch(error => {\n      // Handle any errors\n      console.error(error);\n    });\n    setOpen(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ag-theme-alpine\",\n    style: {\n      height: height,\n      width: \"100%\",\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(AgGridReact, {\n      columnDefs: modifiedColumnDefs,\n      rowData: tableData,\n      onCellValueChanged: params => {\n        // Update the tableData state when a cell value is changed\n        setTableData(prevData => prevData.map(row => row.id === params.data.id ? params.data : row));\n      },\n      defaultColDef: {\n        flex: 1,\n        resizable: true,\n        filter: true,\n        sortable: true,\n        editable: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: styles.btn,\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleOnClickSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: handleClose,\n      maxWidth: \"xs\",\n      fullWidth: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.dialogContainer,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          className: classes.dialogTitle,\n          children: \"Optimization Result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n          className: classes.dialogContent,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"t value: \", tval]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"t value (90%): \", tval90]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"t value (110%): \", tval110]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClose,\n            color: \"primary\",\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GroupTable, \"7/EC4wFBSTab/c683ADSY7O3Dvo=\", true);\n\n_c = GroupTable;\nexport default GroupTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"GroupTable\");","map":{"version":3,"sources":["E:/NETRA PROJECT/Netra/netra/src/pages/PM OPTIM/GroupTable.js"],"names":["React","useState","AgGridReact","makeStyles","styles","Button","Dialog","DialogTitle","DialogContent","DialogActions","GroupTable","height","n","tData","columnDefs","useStyles","theme","dialogContainer","borderRadius","spacing","padding","dialogTitle","paddingBottom","dialogContent","paddingTop","open","setOpen","tval","setTval","tval90","setTval90","tval110","setTval110","classes","handleClose","setTableData","window","location","reload","rowData","i","push","id","component","modifiedColumnDefs","map","col","index","type","editable","tableData","console","log","handleOnClickSubmit","jsonData","reduce","result","row","componentKey","parseFloat","eeta","beta","c","rt","combinedData","fetch","method","headers","body","JSON","stringify","then","response","json","data","t","catch","error","width","position","params","prevData","flex","resizable","filter","sortable","btn"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport styles from './pm.module.css';\r\nimport {  Button, Dialog, DialogTitle, DialogContent, DialogActions } from \"@material-ui/core\";\r\n\r\nconst GroupTable = ({ height, n, tData, columnDefs }) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    dialogContainer: {\r\n      borderRadius: theme.spacing(2),\r\n      padding: theme.spacing(2),\r\n    },\r\n    dialogTitle: {\r\n      paddingBottom: theme.spacing(1),\r\n    },\r\n    dialogContent: {\r\n      paddingTop: 0,\r\n      paddingBottom: theme.spacing(2),\r\n    },\r\n  }));\r\n  const [open, setOpen] = useState(false);\r\n  const [tval, setTval] = useState(0);\r\n  const [tval90, setTval90] = useState(0);\r\n  const [tval110, setTval110] = useState(0);\r\n\r\n  const classes = useStyles();\r\n  const handleClose = () => {\r\n    setOpen(false); // Close the dialog\r\n    setTableData([]);\r\n    window.location.reload();\r\n  };\r\n  // Generate row data with 'n' number of rows\r\n  const rowData = [];\r\n  for (let i = 1; i <= n; i++) {\r\n    rowData.push({ id: i, component: `Component ${i}` });\r\n  }\r\n\r\n  // Modify the first column to be of type 'text'\r\n  const modifiedColumnDefs = columnDefs.map((col, index) => {\r\n    if (index === 0) {\r\n      return { ...col, type: \"text\", editable: true };\r\n    }\r\n    return col;\r\n  });\r\n\r\n  // State to store the table data\r\n  const [tableData, setTableData] = useState(rowData);\r\n  console.log(tData);\r\n\r\n  const handleOnClickSubmit = () => {\r\n    const jsonData = tableData.reduce((result, row, index) => {\r\n      const componentKey = `component_${index + 1}`;\r\n      result[`${componentKey}_eeta`] = parseFloat(row.eeta);\r\n      result[`${componentKey}_beta`] = parseFloat(row.beta);\r\n      result[`${componentKey}_c`] = parseFloat(row.c);\r\n      result[`${componentKey}_rt`] = parseFloat(row.rt);\r\n      return result;\r\n    }, {});\r\n    const combinedData = {\r\n      ...jsonData, // Spread the jsonData\r\n      ...tData[0], // Spread the first element of the propData array\r\n    };\r\n\r\n    fetch(\"/optimize\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(combinedData),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Handle the response from the backend\r\n        console.log(data);\r\n        setTval(data.t);\r\n        setTval90(data.t - 0.1 * data.t);\r\n        setTval110(data.t + 0.1 * data.t);\r\n        // Set the tableData state with the row data when the form is submitted\r\n      })\r\n      .catch((error) => {\r\n        // Handle any errors\r\n        console.error(error);\r\n      });\r\n      setOpen(true);\r\n      \r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"ag-theme-alpine\"\r\n      style={{ height: height, width: \"100%\", position: \"relative\" }}\r\n    >\r\n      <AgGridReact\r\n        columnDefs={modifiedColumnDefs}\r\n        rowData={tableData}\r\n        onCellValueChanged={(params) => {\r\n          // Update the tableData state when a cell value is changed\r\n          setTableData((prevData) =>\r\n            prevData.map((row) =>\r\n              row.id === params.data.id ? params.data : row\r\n            )\r\n          );\r\n        }}\r\n        defaultColDef={{\r\n          flex: 1,\r\n          resizable: true,\r\n          filter: true,\r\n          sortable: true,\r\n          editable: true,\r\n        }}\r\n      ></AgGridReact>\r\n      <Button className={styles.btn} type=\"submit\" variant=\"contained\" color=\"primary\"  onClick={handleOnClickSubmit}>Submit</Button>\r\n      <Dialog open={open} onClose={handleClose} maxWidth=\"xs\" fullWidth>\r\n            <div className={classes.dialogContainer}>\r\n              <DialogTitle className={classes.dialogTitle}>Optimization Result</DialogTitle>\r\n              <DialogContent className={classes.dialogContent}>\r\n                <p>t value: {tval}</p>\r\n                <p>t value (90%): {tval90}</p>\r\n                <p>t value (110%): {tval110}</p>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                  Close\r\n                </Button>\r\n              </DialogActions>\r\n            </div>\r\n          </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupTable;\r\n"]},"metadata":{},"sourceType":"module"}