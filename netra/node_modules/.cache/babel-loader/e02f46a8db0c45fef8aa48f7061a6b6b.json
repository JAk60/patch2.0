{"ast":null,"code":"var _jsxFileName = \"D:\\\\NETRA -P\\\\Netra\\\\netra\\\\src\\\\pages\\\\systen_configuration\\\\redundancy\\\\RenderParallelComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useImperativeHandle, useRef, forwardRef } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useLocation } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RenderParallelComponent = /*#__PURE__*/forwardRef(_c = _s((props, ref, isMultiple = true) => {\n  _s();\n\n  const [value, setValue] = useState([]);\n  const refInput = useRef(null);\n  const location = useLocation(); //   alert(location.pathname);\n\n  let potentialParallelComponents = [];\n  const systemData = useSelector(state => state.treeData.treeData);\n  const userSelection = useSelector(state => state.userSelection.userSelection);\n  const currentSelection = useSelector(state => state.userSelection.currentSelection);\n  const componentsData = useSelector(state => state.userSelection.componentsData);\n  const selectedEquipment = props.data.EquipmentName;\n  const selectedEquipmentId = props.data.eqId;\n\n  if (location.pathname === \"/system_config/additional_info\") {\n    debugger;\n    const currentSelectedPlatform = currentSelection[\"shipName\"];\n    potentialParallelComponents = userSelection[\"equipmentName\"].map(x => {\n      let id = componentsData.filter(c => c.name === x)[0][\"id\"];\n      return {\n        name: x,\n        parentName: currentSelectedPlatform,\n        id: id\n      };\n    });\n  } else {\n    potentialParallelComponents = systemData.filter(x => x.name !== selectedEquipment);\n  }\n\n  const handleChange = (event, newValue) => {\n    debugger;\n    setValue(newValue);\n  }; // useEffect(() => {\n  //   // focus on the input\n  //   //setTimeout(() => refInput.current.focus());\n  //   console.log(potentialParallelComponents);\n  // }, []);\n\n  /* Component Editor Lifecycle methods */\n\n\n  useImperativeHandle(ref, () => {\n    return {\n      // the final value to send to the grid, on completion of editing\n      getValue() {\n        debugger; //console.log(value);\n\n        let valueStr = [];\n        let ids = []; // if (location.pathname === \"/system_config/additional_info\") {\n        //   value.forEach((element) => {\n        //     valueStr = [...valueStr, element.name];\n        //   });\n        // } else\n\n        if (location.pathname === \"/system_config/failure_mode\") {\n          ids = [value.id];\n          valueStr = [value.name];\n          props.data[\"rEquipmentId\"] = ids[0];\n        } else {\n          value.forEach(element => {\n            ids = [...ids, element.id];\n            valueStr = [...valueStr, element.name];\n          });\n          props.setParallelIds(ids);\n        }\n\n        return valueStr.toString();\n      },\n\n      isPopup() {\n        return true;\n      },\n\n      // Gets called once before editing starts, to give editor a chance to\n      // cancel the editing before it even starts.\n      isCancelBeforeStart() {\n        return false;\n      } // Gets called once when editing is finished (eg if Enter is pressed).\n      // If you return true, then the result of the edit will be ignored.\n      // isCancelAfterEnd() {\n      //     // our editor will reject any value greater than 1000\n      //     return value > 1000;\n      // }\n\n\n    };\n  });\n  return (\n    /*#__PURE__*/\n    // <input type=\"number\"\n    //        ref={refInput}\n    //        value={value}\n    //        onChange={event => setValue(event.target.value)}\n    //        style={{width: \"100%\"}}\n    // />\n    _jsxDEV(Autocomplete, {\n      id: selectedEquipmentId,\n      options: potentialParallelComponents //value={value}\n      ,\n      multiple: props.isMultiple,\n      onChange: handleChange,\n      groupBy: option => option.parentName,\n      getOptionLabel: option => option.name,\n      style: {\n        width: 300\n      },\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        ref: refInput,\n        label: props.label,\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }, this)\n  );\n}, \"D2LsdRx8jP50F9zcoRTLoO9ec/A=\", false, function () {\n  return [useLocation, useSelector, useSelector, useSelector, useSelector, useImperativeHandle];\n}));\n_c2 = RenderParallelComponent;\nexport default RenderParallelComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RenderParallelComponent$forwardRef\");\n$RefreshReg$(_c2, \"RenderParallelComponent\");","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/src/pages/systen_configuration/redundancy/RenderParallelComponent.js"],"names":["React","useEffect","useState","useImperativeHandle","useRef","forwardRef","Autocomplete","TextField","useDispatch","useSelector","useLocation","RenderParallelComponent","props","ref","isMultiple","value","setValue","refInput","location","potentialParallelComponents","systemData","state","treeData","userSelection","currentSelection","componentsData","selectedEquipment","data","EquipmentName","selectedEquipmentId","eqId","pathname","currentSelectedPlatform","map","x","id","filter","c","name","parentName","handleChange","event","newValue","getValue","valueStr","ids","forEach","element","setParallelIds","toString","isPopup","isCancelBeforeStart","option","width","params","label"],"mappings":"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","sourcesContent":["import React, {\r\n  useEffect,\r\n  useState,\r\n  useImperativeHandle,\r\n  useRef,\r\n  forwardRef,\r\n} from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nconst RenderParallelComponent = forwardRef((props, ref, isMultiple = true) => {\r\n  const [value, setValue] = useState([]);\r\n  const refInput = useRef(null);\r\n  const location = useLocation();\r\n  //   alert(location.pathname);\r\n  let potentialParallelComponents = [];\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const userSelection = useSelector(\r\n    (state) => state.userSelection.userSelection\r\n  );\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  const componentsData = useSelector(\r\n    (state) => state.userSelection.componentsData\r\n  );\r\n  const selectedEquipment = props.data.EquipmentName;\r\n  const selectedEquipmentId = props.data.eqId;\r\n\r\n  if (location.pathname === \"/system_config/additional_info\") {\r\n    debugger;\r\n    const currentSelectedPlatform = currentSelection[\"shipName\"];\r\n\r\n    potentialParallelComponents = userSelection[\"equipmentName\"].map((x) => {\r\n      let id = componentsData.filter((c) => c.name === x)[0][\"id\"];\r\n      return {\r\n        name: x,\r\n        parentName: currentSelectedPlatform,\r\n        id: id,\r\n      };\r\n    });\r\n  } else {\r\n    potentialParallelComponents = systemData.filter(\r\n      (x) => x.name !== selectedEquipment\r\n    );\r\n  }\r\n\r\n  const handleChange = (event, newValue) => {\r\n    debugger;\r\n    setValue(newValue);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   // focus on the input\r\n  //   //setTimeout(() => refInput.current.focus());\r\n  //   console.log(potentialParallelComponents);\r\n  // }, []);\r\n\r\n  /* Component Editor Lifecycle methods */\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      // the final value to send to the grid, on completion of editing\r\n      getValue() {\r\n        debugger;\r\n        //console.log(value);\r\n        let valueStr = [];\r\n        let ids = [];\r\n        // if (location.pathname === \"/system_config/additional_info\") {\r\n        //   value.forEach((element) => {\r\n        //     valueStr = [...valueStr, element.name];\r\n        //   });\r\n        // } else\r\n        if (location.pathname === \"/system_config/failure_mode\") {\r\n          ids = [value.id];\r\n          valueStr = [value.name];\r\n          props.data[\"rEquipmentId\"] = ids[0];\r\n        } else {\r\n          value.forEach((element) => {\r\n            ids = [...ids, element.id];\r\n            valueStr = [...valueStr, element.name];\r\n          });\r\n          props.setParallelIds(ids);\r\n        }\r\n        return valueStr.toString();\r\n      },\r\n      isPopup() {\r\n        return true;\r\n      },\r\n      // Gets called once before editing starts, to give editor a chance to\r\n      // cancel the editing before it even starts.\r\n      isCancelBeforeStart() {\r\n        return false;\r\n      },\r\n\r\n      // Gets called once when editing is finished (eg if Enter is pressed).\r\n      // If you return true, then the result of the edit will be ignored.\r\n      // isCancelAfterEnd() {\r\n      //     // our editor will reject any value greater than 1000\r\n      //     return value > 1000;\r\n      // }\r\n    };\r\n  });\r\n\r\n  return (\r\n    // <input type=\"number\"\r\n    //        ref={refInput}\r\n    //        value={value}\r\n    //        onChange={event => setValue(event.target.value)}\r\n    //        style={{width: \"100%\"}}\r\n    // />\r\n    <Autocomplete\r\n      id={selectedEquipmentId}\r\n      options={potentialParallelComponents}\r\n      //value={value}\r\n      multiple={props.isMultiple}\r\n      onChange={handleChange}\r\n      groupBy={(option) => option.parentName}\r\n      getOptionLabel={(option) => option.name}\r\n      style={{ width: 300 }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          ref={refInput}\r\n          label={props.label}\r\n          variant=\"outlined\"\r\n        />\r\n      )}\r\n    />\r\n  );\r\n});\r\nexport default RenderParallelComponent;\r\n"]},"metadata":{},"sourceType":"module"}