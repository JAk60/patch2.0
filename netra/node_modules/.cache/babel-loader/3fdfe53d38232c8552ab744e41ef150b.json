{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\Maintenance Allocation\\\\AddData\\\\AddData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport Navigation from '../../../components/navigation/Navigation';\nimport styles from \"./AddData.module.css\";\nimport UserSelection from '../../../ui/userSelection/userSelection';\nimport { Button, RadioGroup, FormControlLabel, Radio, makeStyles } from '@material-ui/core';\nimport TreeComponent from '../../../components/sortableTree/SortableTree';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\nimport AutoSelect from '../../../ui/Form/AutoSelect';\nimport { AgGridColumn } from 'ag-grid-react';\nimport Table from '../../../ui/Table/Table';\nimport { v4 as uuid } from 'uuid';\nimport Loader from \"react-loader-spinner\";\nimport { useDropzone } from 'react-dropzone';\nimport CustomizedSnackbars from '../../../ui/CustomSnackBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst AddData = props => {\n  _s();\n\n  const MuiStyles = makeStyles({\n    buttons: {\n      margin: 5,\n      minWidth: 170,\n      float: \"right\"\n    }\n  });\n  const dispatch = useDispatch();\n  const currentSelection = useSelector(state => state.userSelection.currentSelection);\n  let fData = useSelector(state => state.treeData.treeData);\n\n  const onLoadTreeStructure = () => {\n    fetch(\"/fetch_system\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        system: currentSelection[\"equipmentName\"],\n        ship_name: currentSelection[\"shipName\"]\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => res.json()).then(d => {\n      let treeD = d[\"treeD\"];\n      let failureModes = d[\"failureMode\"];\n      dispatch(treeDataActions.setTreeData({\n        treeData: treeD,\n        failureModes: failureModes\n      }));\n    });\n  };\n\n  const [isloading, setLoading] = useState(false);\n  const [dataRows, setDataRows] = useState([]);\n  const [selectedComponent, setComponent] = useState(null);\n  const [paramData, setParamData] = useState([]);\n\n  const selectOnChange = (e, value) => {\n    setDataRows([]);\n\n    if (value) {\n      setLoading(true); //console.log(value.id);\n\n      fetch(\"/fetch_params\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          ComponentId: value.id\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      }).then(res => res.json()).then(d => {\n        // console.log(d)\n        setParamData(d);\n      });\n      setComponent(value);\n      setLoading(false);\n    }\n  };\n\n  const saveParamData = () => {\n    console.log(dataRows);\n    fetch(\"/save_condition_monitoring\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        flatData: dataRows,\n        dtype: 'insertParamData'\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setSnackBarMessage({\n        severity: \"success\",\n        message: data.message,\n        showSnackBar: true\n      });\n    }).catch(error => {\n      setSnackBarMessage({\n        severity: \"error\",\n        message: \"Some Error Occured. \" + error,\n        showSnackBar: true\n      });\n    });\n  };\n\n  const DataColumnDefs = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"date\",\n    headerName: \"Date\",\n    headerTooltip: \"Date\" //minWidth={100}\n    ,\n    cellEditor: \"datePicker\",\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"parameterName\",\n    headerName: \"Parameter\",\n    headerTooltip: \"Parameter\" //minWidth={100}\n    ,\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: paramData.map(data => data.name)\n    },\n    editable: true,\n    onCellValueChanged: params => {\n      let parameter = paramData.filter(d => d.name === params.data.parameterName);\n      params.data.paramId = parameter[0].id;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"value\",\n    headerName: \"Value\",\n    headerTooltip: \"Value\" //minWidth={100}\n    ,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this)];\n\n  const addRow = () => {\n    let newRow = {\n      componentId: selectedComponent.id,\n      id: uuid(),\n      date: '',\n      parameterName: '',\n      paramId: '',\n      value: ''\n    };\n    setDataRows([...dataRows, newRow]);\n  };\n\n  const onDrop = useCallback(acceptedFiles => {\n    const formData = new FormData();\n    formData.append('File', acceptedFiles[0]);\n    fetch('/add_data', {\n      method: 'POST',\n      body: formData\n    }).then(response => response.json()).then(result => {\n      console.log('Success:', result);\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop\n  }); // Snackbar\n\n  const [SnackBarMessage, setSnackBarMessage] = useState({\n    severity: \"error\",\n    message: \"This is awesome\",\n    showSnackBar: false\n  });\n\n  const onHandleSnackClose = () => {\n    setSnackBarMessage({\n      severity: \"error\",\n      message: \"Please Add Systemss\",\n      showSnackBar: false\n    });\n  };\n\n  const classes = MuiStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.userSelection,\n      children: [/*#__PURE__*/_jsxDEV(UserSelection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          className: classes.buttons,\n          onClick: saveParamData,\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.buttons,\n          onClick: onLoadTreeStructure,\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.tree,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.treeChild,\n          children: /*#__PURE__*/_jsxDEV(TreeComponent, {\n            height: \"600px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.rightSection,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.selectComponent,\n          children: [\"Select Component\", /*#__PURE__*/_jsxDEV(AutoSelect, {\n            fields: fData,\n            onChange: selectOnChange,\n            value: selectedComponent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: classes.buttons,\n            variant: \"contained\",\n            color: \"primary\",\n            sx: {},\n            children: \"Import File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }, this), isloading ? /*#__PURE__*/_jsxDEV(Loader, {\n          type: \"Puff\",\n          color: \"#86a0ff\",\n          height: 300,\n          width: 300,\n          style: {\n            marginTop: 100\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 26\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.table,\n          children: [/*#__PURE__*/_jsxDEV(Table, {\n            columnDefs: DataColumnDefs,\n            rowData: dataRows,\n            tableUpdate: rows => {\n              console.log(rows);\n            },\n            height: 300\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: addRow,\n            children: \"+ Add Row\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }, this), SnackBarMessage.showSnackBar && /*#__PURE__*/_jsxDEV(CustomizedSnackbars, {\n      message: SnackBarMessage,\n      onHandleClose: onHandleSnackClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddData, \"+9W9GJPvDQ7usuYeiHGFT1VWOTw=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useDropzone];\n});\n\n_c = AddData;\nexport default AddData;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddData\");","map":{"version":3,"sources":["D:/NetraB/netra/src/pages/Maintenance Allocation/AddData/AddData.js"],"names":["React","useState","useCallback","Navigation","styles","UserSelection","Button","RadioGroup","FormControlLabel","Radio","makeStyles","TreeComponent","useSelector","useDispatch","treeDataActions","AutoSelect","AgGridColumn","Table","v4","uuid","Loader","useDropzone","CustomizedSnackbars","AddData","props","MuiStyles","buttons","margin","minWidth","float","dispatch","currentSelection","state","userSelection","fData","treeData","onLoadTreeStructure","fetch","method","body","JSON","stringify","system","ship_name","headers","Accept","then","res","json","d","treeD","failureModes","setTreeData","isloading","setLoading","dataRows","setDataRows","selectedComponent","setComponent","paramData","setParamData","selectOnChange","e","value","ComponentId","id","saveParamData","console","log","flatData","dtype","data","setSnackBarMessage","severity","message","showSnackBar","catch","error","DataColumnDefs","values","map","name","params","parameter","filter","parameterName","paramId","addRow","newRow","componentId","date","onDrop","acceptedFiles","formData","FormData","append","response","result","getRootProps","getInputProps","SnackBarMessage","onHandleSnackClose","classes","content","tree","treeChild","rightSection","selectComponent","marginTop","table","rows"],"mappings":"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","sourcesContent":["import React,{useState,useCallback} from 'react'\r\nimport Navigation from '../../../components/navigation/Navigation';\r\nimport styles from \"./AddData.module.css\";\r\nimport UserSelection from '../../../ui/userSelection/userSelection'\r\nimport { Button,RadioGroup,FormControlLabel,Radio, makeStyles } from '@material-ui/core';\r\nimport TreeComponent from '../../../components/sortableTree/SortableTree';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\nimport AutoSelect from '../../../ui/Form/AutoSelect';\r\nimport { AgGridColumn } from 'ag-grid-react';\r\nimport Table from '../../../ui/Table/Table';\r\nimport { v4 as uuid } from 'uuid';\r\nimport Loader from \"react-loader-spinner\";\r\nimport {useDropzone} from 'react-dropzone'\r\nimport CustomizedSnackbars from '../../../ui/CustomSnackBar';\r\n\r\n\r\n\r\nconst AddData=(props)=> {\r\n  const MuiStyles = makeStyles({\r\n    buttons: {\r\n      margin: 5,\r\n      minWidth: 170,\r\n      float: \"right\",\r\n    },\r\n  });\r\n    const dispatch = useDispatch();\r\n    const currentSelection = useSelector(\r\n        (state) => state.userSelection.currentSelection\r\n      );\r\n    let fData = useSelector((state) => state.treeData.treeData);\r\n    const onLoadTreeStructure = () => {\r\n        fetch(\"/fetch_system\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            system: currentSelection[\"equipmentName\"],\r\n            ship_name: currentSelection[\"shipName\"],\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n          },\r\n        })\r\n          .then((res) => res.json())\r\n          .then((d) => {\r\n            let treeD = d[\"treeD\"];\r\n            let failureModes = d[\"failureMode\"];\r\n            dispatch(\r\n              treeDataActions.setTreeData({\r\n                treeData: treeD,\r\n                failureModes: failureModes,\r\n              })\r\n            );\r\n          });\r\n      };\r\n      const[isloading,setLoading]=useState(false)\r\n      const[dataRows,setDataRows]=useState([])\r\n      const[selectedComponent,setComponent]=useState(null)\r\n      const[paramData,setParamData]=useState([])\r\n      const selectOnChange=(e,value)=>{\r\n        setDataRows([])\r\n        if(value){\r\n        setLoading(true)\r\n        //console.log(value.id);\r\n        fetch(\"/fetch_params\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            ComponentId: value.id,\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n          },\r\n        })\r\n          .then((res) => res.json())\r\n          .then((d) => {\r\n            // console.log(d)\r\n            setParamData(d)\r\n          });\r\n        setComponent(value)\r\n        setLoading(false)\r\n        }\r\n      }\r\n\r\n      const saveParamData=()=>{\r\n        console.log(dataRows);\r\n        fetch(\"/save_condition_monitoring\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            flatData: dataRows,\r\n            dtype: 'insertParamData',\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n          },\r\n        })\r\n          .then((res) => {\r\n            return res.json();\r\n          })\r\n          .then((data) => {\r\n            setSnackBarMessage({\r\n              severity: \"success\",\r\n              message: data.message,\r\n              showSnackBar: true,\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setSnackBarMessage({\r\n              severity: \"error\",\r\n              message: \"Some Error Occured. \" + error,\r\n              showSnackBar: true,\r\n            })\r\n          })\r\n      }\r\n      const DataColumnDefs = [  \r\n        <AgGridColumn\r\n          field=\"date\"\r\n          headerName=\"Date\"\r\n          headerTooltip=\"Date\"\r\n          //minWidth={100}\r\n          cellEditor=\"datePicker\"\r\n          editable={true}\r\n        />,\r\n        <AgGridColumn\r\n          field=\"parameterName\"\r\n          headerName=\"Parameter\"\r\n          headerTooltip=\"Parameter\"\r\n          //minWidth={100}\r\n          cellEditor=\"agSelectCellEditor\"\r\n            cellEditorParams={{\r\n                values: paramData.map(data=>data.name),\r\n            }}\r\n          editable={true}\r\n          onCellValueChanged={(params)=>{\r\n            let parameter=paramData.filter(d=>d.name===params.data.parameterName)\r\n            params.data.paramId=parameter[0].id\r\n          }}\r\n        />,\r\n        <AgGridColumn\r\n          field=\"value\"\r\n          headerName=\"Value\"\r\n          headerTooltip=\"Value\"\r\n          //minWidth={100}\r\n          editable={true}\r\n        />,\r\n        \r\n      ];\r\n      const addRow=()=>{\r\n        let newRow={componentId:selectedComponent.id,id:uuid(),date:'',parameterName:'',paramId:'',value:''}\r\n        setDataRows([...dataRows,newRow])\r\n      }\r\n\r\n      const onDrop = useCallback(acceptedFiles => {\r\n        const formData = new FormData();\r\n\r\n\t\tformData.append('File', acceptedFiles[0]);\r\n\r\n\t\tfetch(\r\n\t\t\t'/add_data',\r\n\t\t\t{\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: formData,\r\n\t\t\t}\r\n\t\t)\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((result) => {\r\n\t\t\t\tconsole.log('Success:', result);\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.error('Error:', error);\r\n\t\t\t});\r\n      }, [])\r\n      const {getRootProps, getInputProps} = useDropzone({onDrop})\r\n\r\n      // Snackbar\r\n      const [SnackBarMessage, setSnackBarMessage] = useState({\r\n        severity: \"error\",\r\n        message: \"This is awesome\",\r\n        showSnackBar: false,\r\n      });\r\n      const onHandleSnackClose = () => {\r\n        setSnackBarMessage({\r\n          severity: \"error\",\r\n          message: \"Please Add Systemss\",\r\n          showSnackBar: false,\r\n        });\r\n      };\r\n      const classes=MuiStyles()\r\n    return (\r\n      <>\r\n      <Navigation/>\r\n      <div className={styles.userSelection}>\r\n          <UserSelection/>\r\n          <div>\r\n          {/* <div {...getRootProps()}>\r\n            <input {...getInputProps()} />\r\n            {\r\n              \r\n              <Button className={classes.buttons} variant='contained' color='primary'>Import File</Button>\r\n              \r\n            }\r\n          </div> */}\r\n          <Button className={classes.buttons} onClick={saveParamData} variant='contained' color='primary'>Save</Button>\r\n          <Button className={classes.buttons} onClick={onLoadTreeStructure} variant='contained' color='primary'>Submit</Button>\r\n          </div>\r\n      </div>\r\n          \r\n          <div className={styles.content}>\r\n            <div className={styles.tree}>\r\n              <div className={styles.treeChild}>\r\n                {/* <FullscreenIcon style={{ float: \"right\", marginRight: \"25px\" }} /> */}\r\n                <TreeComponent height='600px'></TreeComponent>\r\n                {/* <div></div> */}\r\n              </div>\r\n            </div>\r\n            <div className={styles.rightSection}>\r\n              <div className={styles.selectComponent}>\r\n                Select Component\r\n                <AutoSelect\r\n                    fields={fData}\r\n                    onChange={selectOnChange}\r\n                    value={selectedComponent}\r\n                  ></AutoSelect>\r\n              \r\n              </div>\r\n              <div {...getRootProps()}>\r\n            <input {...getInputProps()} />\r\n            {\r\n              \r\n              <Button className={classes.buttons} variant='contained' color='primary' sx={{}}>Import File</Button>\r\n              \r\n            }\r\n          </div>\r\n              {isloading?<Loader\r\n              type=\"Puff\"\r\n              color=\"#86a0ff\"\r\n              height={300}\r\n              width={300}\r\n              style={{ marginTop: 100 }}\r\n            />:<div className={styles.table}>\r\n              <Table columnDefs={DataColumnDefs} rowData={dataRows} tableUpdate={(rows)=>{console.log(rows);}} height={300}/>\r\n              <Button variant='contained' color='primary' onClick={addRow}>+ Add Row</Button>\r\n              </div>}\r\n              </div>\r\n              </div>\r\n              {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n      \r\n    </>\r\n    );\r\n  }\r\n  export default AddData;"]},"metadata":{},"sourceType":"module"}