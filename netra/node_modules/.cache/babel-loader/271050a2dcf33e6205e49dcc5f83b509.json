{"ast":null,"code":"var _jsxFileName = \"D:\\\\NETRA -P\\\\Netra\\\\netra\\\\src\\\\pages\\\\TaskDashboard\\\\TaskDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useCallback } from \"react\"; // import styles from \"./TaskDashboard.module.css\";\n\nimport { InputLabel, TextField, makeStyles, Button, Switch, Input, Paper, Typography } from \"@material-ui/core\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Label, ReferenceLine } from 'recharts'; // import { arr,arr2 } from \"./data\";\n\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport MomentUtils from \"@date-io/moment\";\nimport Navigation from \"../../components/navigation/Navigation\";\nimport styles from \"./tDashboard.module.css\";\nimport moment from \"moment\";\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\nimport ReliabilityChart from \"../Reliability Dashboard/ReliabilityChart\";\nimport MissionSlider from \"../Reliability Dashboard/MissionSlider\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport Loader from \"react-loader-spinner\";\nimport EventCalendar from \"../Reliability Dashboard/EventCalendar\";\nimport { data, subSystemLevelData, events, mainData } from \"../Reliability Dashboard/DashboardData\";\nimport ReactCardFlip from \"react-card-flip\";\nimport Table from \"../../ui/Table/DataManagerTable\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\"; // import RenderParallelComponent from \"../systen_configuration/redundancy/RenderParallelComponent\";\n\nimport RenderMultipleComponent from \"./TaskRenderMultipleComponent\";\nimport { taskActions } from \"../../store/taskStore\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AccessControl from \"../Home/AccessControl\";\nimport PaperTable from \"./PaperTable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MissionData = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.missionData,\n    style: props.style,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.target,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        class: \"icon icon-tabler icon-tabler-target\",\n        width: \"14\",\n        height: \"14\",\n        viewBox: \"0 0 24 24\",\n        \"stroke-width\": \"1.5\",\n        stroke: \"#374c93\",\n        fill: \"none\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          stroke: \"none\",\n          d: \"M0 0h24v24H0z\",\n          fill: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"12\",\n          cy: \"12\",\n          r: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"12\",\n          cy: \"12\",\n          r: \"5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"12\",\n          cy: \"12\",\n          r: \"9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), \" \", \"Target: \", props.mission.target, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.actual,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        class: \"icon icon-tabler icon-tabler-shield-check\",\n        width: \"14\",\n        height: \"14\",\n        viewBox: \"0 0 24 24\",\n        \"stroke-width\": \"1.5\",\n        stroke: \"#f8f8f8\",\n        fill: \"none\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          stroke: \"none\",\n          d: \"M0 0h24v24H0z\",\n          fill: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M9 12l2 2l4 -4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M12 3a12 12 0 0 0 8.5 3a12 12 0 0 1 -8.5 15a12 12 0 0 1 -8.5 -15a12 12 0 0 0 8.5 -3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), \"Actual:\", props.mission.actual.map(data => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [data.name, \" \", data.rel.toFixed(2), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)\n        }, void 0, false);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.probabilityHead,\n        children: \"Probability of Achieving\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.probability,\n        children: props.mission.actual.map(data => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [data.name, \" \", data.prob.toFixed(2) == 100 ? \">99%\" : `${data.prob.toFixed(2)}%`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this)\n          }, void 0, false);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MissionData;\n\nconst TaskDashboard = () => {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const [gridCompApi, setGridCompApi] = useState(null);\n  const [gridTaskApi, setGriTaskdApi] = useState(null);\n  const [gridMissionApi, setgridMissionApi] = useState(null);\n  const [missionProfileData, setMissionData] = useState([]);\n  const [rowState, setRows] = useState([]);\n  const [rowCompState, setCompRows] = useState([]);\n  const dispatch = useDispatch();\n  const [phasedata, setPhaseData] = useState([]);\n  const [missionDurations, setMissionDurations] = useState([]);\n  let ParallelIds = [];\n\n  const setParallelIds = d => {\n    console.log(\"This is shit!!\");\n    console.log(d);\n    ParallelIds = d;\n  };\n\n  console.log(rowCompState, \"This is shit!!\");\n  const [shipOption, setshipOption] = useState([]);\n  const [taskOption, settaskOption] = useState([]);\n  const [missionOption, setmissionOption] = useState([]);\n  const [taskShipNameOption, settaskShipNameOption] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [recommedation, setRecommedation] = useState([]);\n  const [totalReliability, setTotalReliability] = useState(null);\n  const [selectedTaskShip, setselectedTaskShip] = useState(\"\");\n  const [selectedTaskName, setselectedTaskName] = useState(\"\");\n  const [selectedShipName, setselectedShipName] = useState(\"\"); // Reliability Dashboard\n\n  const [showSubsystem, setSubSystem] = useState(false);\n  const [startDate, setStartDate] = useState(new Date());\n  const [isCardFlipped, setCardFlipped] = useState(false);\n  const [currentMission, setMission] = useState(0);\n  const [eqDataOption, setEqDataOption] = useState([]);\n  const [taskTableData, settaskTableData] = useState([]);\n  const [taskMissionTableData, settaskMissionTableData] = useState([]);\n  const [SnackBarMessage, setSnackBarMessage] = useState({\n    severity: \"error\",\n    message: \"This is awesome\",\n    showSnackBar: false\n  });\n  const [selectedEqName, setEquipmentName] = useState(null);\n  const [entireData, setentireData] = useState(null); // const [selectedShipName, setShipName] = useState(null);\n\n  const [selectedMissionName, setMissionName] = useState(null);\n  const [graphData, setGraphData] = useState([]);\n  const [missionPhaseGraphData, setMissionPhaseGraphData] = useState([]);\n  const currentShip = useSelector(state => state.taskData.currentShip);\n  const currentTaskName = useSelector(state => state.taskData.currentTaskName);\n  const [subSystemData, setSubSystemData] = useState([]);\n  const [eventInfo, setEventInfo] = useState(null);\n  const [cardData, setCardData] = useState(null);\n  const missionName = useRef();\n  const thReliab = useRef();\n\n  const handleStartDateChange = date => {\n    setStartDate(date);\n  };\n\n  const [endDate, setEndDate] = useState(new Date());\n\n  const handleEndDateChange = date => {\n    setEndDate(date);\n  };\n\n  console.table(phasedata, \"phase data\");\n\n  const onCellValueChanged = params => {\n    if (params.colDef.field === \"duration\") {\n      const updatedDurations = missionDurations.map((duration, index) => index === params.node.rowIndex ? params.newValue : duration);\n      setMissionDurations(updatedDurations);\n    }\n  };\n\n  const ImportColumns = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"missionType\",\n    headerName: \"Phase\",\n    headerTooltip: \"Phase\",\n    cellEditor: \"agSelectCellEditor\",\n    checkboxSelection: true,\n    cellEditorParams: {\n      values: [\"\", \"Harbour\", \"Entry Leaving Harbour\", \"Cruise\", \"Defense Station\", \"Action Station\"]\n    },\n    width: \"220\",\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"duration\",\n    headerName: \"Duration\",\n    headerTooltip: \"Duration\",\n    type: \"number\",\n    width: 100,\n    editable: true,\n    onCellValueChanged: onCellValueChanged\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this)];\n  const compColumns = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"missionType\",\n    headerName: \"Phase\",\n    headerTooltip: \"Phase\",\n    cellEditor: \"agSelectCellEditor\",\n    checkboxSelection: true,\n    cellEditorParams: {\n      values: [\"\", \"Harbour\", \"Entry Leaving Harbour\", \"Cruise\", \"Defense Station\", \"Action Station\"]\n    },\n    width: \"220\",\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"component\",\n    headerName: \"Select Component for Phase\",\n    headerTooltip: \"Select Component for Phase\" // cellEditor=\"agSelectCellEditor\"\n    ,\n    cellEditorFramework: RenderMultipleComponent,\n    cellEditorParams: {\n      setParallelIds: setParallelIds,\n      label: \"Select Component for Phase\",\n      isMultiple: true,\n      currentTask: selectedTaskName\n    } //onCellClicked={onCellChanged}\n    ,\n    width: \"220\",\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this)]; // <AgGridColumn\n  //     field=\"component\"\n  //     headerName=\"Select Component for Mission\"\n  //     headerTooltip=\"Select Component for Mission\"\n  //     // cellEditor=\"agSelectCellEditor\"\n  //     cellEditorFramework={RenderMultipleComponent}\n  //     cellEditorParams={{\n  //       setParallelIds: setParallelIds,\n  //       label: \"Select Component for Mission\",\n  //       isMultiple: true,\n  //       currentTask: selectedTaskName\n  //     }}\n  //     //onCellClicked={onCellChanged}\n  //     width=\"220\"\n  //     editable={true}\n  //   />\n\n  const taskTableColumns = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"shipName\",\n    headerName: \"Ship Name\",\n    headerTooltip: \"Ship Name\",\n    width: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"taskName\",\n    headerName: \"Task Name\",\n    headerTooltip: \"Task Name\",\n    width: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"rel\",\n    headerName: \"User Reliability\",\n    headerTooltip: \"User Reliability\",\n    type: \"number\",\n    width: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"cal_rel\",\n    headerName: \"Reliability (Netra\",\n    headerTooltip: \"Reliability (Netra\",\n    width: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this)];\n  const taskMissionTableColumns = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"shipName\",\n    headerName: \"Ship Name\",\n    headerTooltip: \"Ship Name\",\n    width: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"taskName\",\n    headerName: \"Task Name\",\n    headerTooltip: \"Task Name\",\n    width: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"missionType\",\n    headerName: \"Mission Type\",\n    headerTooltip: \"Mission Type\",\n    width: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 321,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"ComponentMission\",\n    headerName: \"Component/Mission Type\",\n    headerTooltip: \"Component/Mission Type\",\n    width: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"rel\",\n    headerName: \"Reliability\",\n    headerTooltip: \"Reliability\",\n    type: \"number\",\n    width: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this)];\n\n  const AddRow = () => {\n    const defaultRow = [{\n      id: uuidv4(),\n      duration: 0,\n      missionType: \"\"\n    }];\n    setMissionDurations(prevDurations => [...prevDurations, defaultRow.duration]);\n    gridApi.applyTransaction({\n      add: defaultRow\n    });\n  };\n\n  const updateCompTable = () => {\n    console.log(missionDurations);\n    console.log(currentTaskName);\n    const durationNums = missionDurations.map(str => parseFloat(str));\n    fetch('/phase_json', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"duration\": durationNums,\n        \"task_name\": currentTaskName\n      })\n    }).then(response => response.json()).then(data => {\n      // Handle the response data here\n      console.log(data);\n      setRecommedation(data); // const totalReliabilityRegex = /Total Reliability: (\\d+\\.\\d+)/;\n      // const match = data.res[2].match(totalReliabilityRegex);\n      // console.log(match)\n\n      const totalRel = data.res[data.res.length - 1]; // console.log(totalRel)\n\n      const reliabilityValue = totalRel.split(\":\")[1];\n      console.log(reliabilityValue);\n      setTotalReliability(reliabilityValue);\n      setSnackBarMessage({\n        severity: \"Success\",\n        message: `Reliblity Calculated Sucessfully`,\n        showSnackBar: true\n      });\n    }).catch(error => {\n      // Handle errors here\n      console.error('Error:', error);\n    });\n    let allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    let newData = [];\n    allRowData.forEach(d => {\n      newData.push({\n        \"missionType\": d[\"missionType\"],\n        \"component\": \"\",\n        \"id\": d[\"id\"]\n      });\n    });\n    setCompRows(newData); // debugger;\n  };\n\n  console.log(recommedation);\n\n  const saveTaskReset = () => {\n    console.log(totalReliability, \"tOTAL rekl\");\n    debugger;\n    let allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    let allRowCData = [];\n    gridCompApi.forEachNode(node => allRowCData.push(node.data)); //logic for saving it to local data\n\n    let mainData = [];\n    allRowData.forEach((d, index) => {\n      mainData.push({\n        \"id\": allRowData[index][\"id\"],\n        \"missionType\": allRowData[index][\"missionType\"],\n        \"duration\": allRowData[index][\"duration\"],\n        \"components\": allRowCData[index][\"components\"]\n      });\n    });\n    let localData = {\n      'shipName': currentShip,\n      \"taskName\": currentTaskName,\n      \"data\": mainData,\n      \"cal_rel\": totalReliability\n    };\n    console.log(localData, \"local Data\");\n    setPhaseData(mainData);\n    localStorage.setItem(`${currentShip}_${currentTaskName}`, JSON.stringify(localData));\n    gridApi.selectAll();\n    const selectedRows = gridApi.getSelectedRows();\n    gridApi.applyTransaction({\n      remove: selectedRows\n    }); // let allCompRows = []\n\n    gridCompApi.selectAll();\n    const selectedCompRows = gridCompApi.getSelectedRows();\n    gridCompApi.applyTransaction({\n      remove: selectedCompRows\n    });\n    allRowData = []; // gridApi.forEachNode((node) => allRowData.push(node.data));\n\n    setMissionData(allRowData);\n    setRecommedation([]);\n    settaskTableData([]);\n    settaskMissionTableData([]);\n  };\n\n  const deleteRows = () => {\n    debugger;\n    const selectedRows = gridApi.getSelectedRows();\n    gridApi.applyTransaction({\n      remove: selectedRows\n    });\n    let allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    setMissionData(allRowData); // console.log(selectedRows);\n  };\n\n  const resetGrids = () => {\n    // Reset the main grid\n    if (gridApi) {\n      gridApi.setRowData([]); // Clear the row data\n\n      gridApi.refreshCells(); // Refresh the grid to clear any cell changes\n    } // Reset the component grid\n\n\n    if (gridCompApi) {\n      gridCompApi.setRowData([]); // Clear the row data\n\n      gridCompApi.refreshCells(); // Refresh the grid to clear any cell changes\n    } // You can add similar logic for other grids if needed\n\n  };\n\n  const handleEventCheck = () => {\n    let start = moment(startDate).subtract(1, \"day\");\n    let end = moment(endDate).add(1, \"day\");\n    let total = (end - start) / (1000 * 3600 * 24) - 1;\n    console.log(total);\n    let days = {\n      working: 0,\n      down: 0,\n      maintenance: 0,\n      total: total\n    };\n    events.forEach(event => {\n      if (event.start < end && event.end > start) {\n        if (event.start >= start && event.end <= end) {\n          let diff = (moment(event.end) - moment(event.start)) / (1000 * 3600 * 24);\n          console.log(diff);\n          days[event.status] += Math.floor(diff);\n        } else if (event.start >= start && event.end >= end) {\n          let diff = (moment(end) - moment(event.start)) / (1000 * 3600 * 24);\n          console.log(diff);\n          days[event.status] += Math.floor(diff);\n        } else if (event.start <= start && event.end <= end) {\n          let diff = (moment(event.end) - moment(start)) / (1000 * 3600 * 24);\n          console.log(diff);\n          days[event.status] += Math.floor(diff);\n        } else if (event.start <= start && event.end >= end) {\n          let diff = (moment(end) - moment(start)) / (1000 * 3600 * 24);\n          console.log(diff);\n          days[event.status] += Math.floor(diff);\n        }\n      }\n    });\n    setEventInfo(days);\n    setCardFlipped(!isCardFlipped);\n  };\n\n  useEffect(() => {\n    fetch(\"/task_dash_populate\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      const mission_data = data[\"missionData\"];\n      const taskNames = data[\"tasks\"];\n      const taskData = data[\"tasks_data\"];\n      const task_ship_name = data[\"ship_name\"];\n      setmissionOption(mission_data);\n      setentireData(data); // settaskOption(taskNames);      \n\n      settaskShipNameOption(task_ship_name);\n      dispatch(taskActions.onLoad({\n        'taskData': data\n      }));\n    });\n  }, []);\n  const dropDownStyle = makeStyles({\n    root: {\n      paddingLeft: 10,\n      background: \"#fff\",\n      border: \"1px solid #0263a1\",\n      borderRadius: \"5px\",\n      width: \"320px\",\n      minHeight: \"40px\",\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\"\n    },\n    inputRoot: {\n      width: '100%'\n    }\n  });\n  const classes = dropDownStyle();\n  let arr = [];\n  let arr2 = [];\n\n  for (let i = 0; i < 50; i++) {\n    // const maxDate = Date.now();\n    // const timestamp = Math.floor(Math.random() * maxDate);\n    arr = [...arr, {\n      name: new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0, 10),\n      uv: Math.floor(Math.random() * (80 - 30 + 1)) + 30\n    }];\n    arr2 = [...arr2, {\n      name: new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0, 10),\n      uv: Math.floor(Math.random() * (75 - 30 + 1)) + 30\n    }];\n  }\n\n  const [showGraph, setShowGraph] = useState(false);\n\n  const onResetMissionHandler = () => {\n    resetGrids();\n    setRecommedation([]);\n    let storedData = Object.entries(localStorage);\n    storedData.forEach(ele => {\n      let key = ele[0];\n\n      if (key !== \"settings\" && key !== \"login\" && key !== \"userData\") {\n        localStorage.removeItem(key);\n      }\n\n      setSnackBarMessage({\n        severity: \"Success\",\n        message: \"Data Cleared\",\n        showSnackBar: true\n      });\n      settaskTableData([]);\n      settaskMissionTableData([]);\n    });\n  };\n\n  const onSubmitHandler = () => {\n    // setMission(0);\n    let storedData = Object.entries(localStorage);\n    console.log(storedData); // storedData.pop()\n\n    let fData = [];\n    storedData.forEach(ele => {\n      debugger;\n      console.log(ele);\n      let name = ele[0];\n\n      if (name !== \"settings\" && name !== \"login\" && name !== \"userData\") {\n        let elemData = JSON.parse(ele[1]);\n        fData.push(JSON.parse(ele[1]));\n      }\n    });\n    console.log(fData);\n\n    if (fData.length > 0) {\n      // const data = {\n      //   \"taskName\": currentTaskName, \"shipName\": currentShip,\n      //   \"selectedMission\": missionName.current.value, \"missionProfileData\": missionProfileData\n      // }\n      fetch(\"/task_rel\", {\n        method: \"POST\",\n        body: JSON.stringify(fData),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      }).then(res => res.json()).then(d => {\n        debugger;\n        let taskData = [];\n        let taskMissionData = [];\n        d.forEach(tData => {\n          let perMData = tData[\"data\"];\n          perMData.forEach(pTD => {\n            taskMissionData.push({\n              \"shipName\": tData[\"shipName\"],\n              \"taskName\": tData[\"taskName\"],\n              \"rel\": Math.round(pTD[\"rel\"] * 100) / 100,\n              \"missionType\": pTD[\"missionName\"],\n              \"ComponentMission\": pTD[\"missionName\"]\n            });\n            let componentRelData = pTD[\"comp_rel\"];\n            componentRelData.forEach(cTD => {\n              taskMissionData.push({\n                \"shipName\": tData[\"shipName\"],\n                \"taskName\": tData[\"taskName\"],\n                \"rel\": Math.round(cTD[\"rel\"] * 100) / 100,\n                \"missionType\": pTD[\"missionName\"],\n                \"ComponentMission\": cTD[\"compName\"]\n              });\n            });\n          }); // console.log(\"This is tdata\", tData)\n\n          taskData.push({\n            \"shipName\": tData[\"shipName\"],\n            \"taskName\": tData[\"taskName\"],\n            \"rel\": Math.round(tData[\"rel\"] * 100) / 100,\n            \"cal_rel\": tData[\"cal_rel\"]\n          });\n        });\n        console.log(taskData, 'Taks data');\n        settaskTableData(taskData);\n        settaskMissionTableData(taskMissionData);\n      });\n    } else {\n      // alert(\"Please add Mission Definition!!\")\n      setSnackBarMessage({\n        severity: \"error\",\n        message: \"Please Select data and Enter Mission Phase Data!!\",\n        showSnackBar: true\n      });\n    }\n  };\n\n  const onHandleSnackClose = () => {\n    setSnackBarMessage({\n      severity: \"error\",\n      message: \"Please Add Systemss\",\n      showSnackBar: false\n    });\n  };\n\n  const updateFinalRowData = d => {\n    setMissionData(d);\n  };\n\n  const shipNameChange = (event, value) => {\n    debugger;\n    let tt = entireData;\n\n    if (tt && tt[\"task_ship_name\"] && Array.isArray(value) && value.length > 0 && value[0].name) {\n      const selectedShipName = value[0].name;\n      console.log(\"Selected Ship Name:\", selectedShipName);\n\n      if (tt[\"task_ship_name\"].hasOwnProperty(selectedShipName)) {\n        const sNames = tt[\"task_ship_name\"][selectedShipName];\n        const fNames = sNames.map(s => ({\n          name: s\n        }));\n        settaskOption(fNames);\n        dispatch(taskActions.updateCurrentShip({\n          ship: selectedShipName\n        }));\n      } else {\n        console.log(`No task_ship_name data found for ship: ${selectedShipName}`);\n      }\n    } else {\n      console.log(\"Invalid data or value array in shipNameChange function.\");\n    }\n  };\n\n  const TaskNameChange = (event, value) => {\n    if (Array.isArray(value) && value.length > 0) {\n      dispatch(taskActions.updateCurrentTask({\n        'task': value[0].name\n      }));\n    }\n  };\n\n  const minThreshold = 45;\n  const maxThreshold = 60;\n  return /*#__PURE__*/_jsxDEV(AccessControl, {\n    allowedLevels: ['L1', 'L2', 'L3', 'L4', 'L5'],\n    children: /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n      utils: MomentUtils,\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.body,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.mprofile,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"300px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              style: {\n                fontWeight: \"bold\",\n                color: \"black\",\n                fontSize: \"16px\",\n                marginBottom: \"10px\"\n              },\n              children: \"Ship Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 709,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n              classes: classes,\n              multiple: true,\n              id: \"tags-standard\",\n              options: taskShipNameOption,\n              getOptionLabel: option => option.name,\n              onChange: shipNameChange,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                InputProps: { ...params.InputProps,\n                  disableUnderline: true\n                },\n                variant: \"standard\" // label=\"Multiple values\"\n                // placeholder=\"Favorites\"\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 728,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 720,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 708,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"300px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              style: {\n                fontWeight: \"bold\",\n                color: \"black\",\n                fontSize: \"16px\",\n                marginBottom: \"10px\"\n              },\n              children: \"Task Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 740,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n              classes: classes,\n              multiple: true,\n              id: \"tags-standard\",\n              options: taskOption,\n              getOptionLabel: option => option.name,\n              onChange: TaskNameChange,\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                InputProps: { ...params.InputProps,\n                  disableUnderline: true\n                },\n                variant: \"standard\" // label=\"Multiple values\"\n                // placeholder=\"Favorites\"\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 759,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 751,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            style: {\n              marginTop: \"2rem\"\n            },\n            onClick: onResetMissionHandler,\n            children: \"Reset Screen\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.table,\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              columnDefs: ImportColumns,\n              setGrid: setGridApi,\n              gridApi: gridApi,\n              rowData: rowState,\n              tableUpdate: updateFinalRowData,\n              tableSize: 180\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 828,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 827,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.tableFooter,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\" // startIcon={<AddIcon />}\n              ,\n              color: \"secondary\",\n              onClick: () => updateCompTable(),\n              children: \"Recommend Solution\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 838,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                marginLeft: 10\n              },\n              variant: \"contained\",\n              startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 849,\n                columnNumber: 28\n              }, this),\n              color: \"secondary\",\n              onClick: () => AddRow(),\n              children: \"Add Row\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 846,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              style: {\n                marginLeft: 10\n              },\n              variant: \"contained\",\n              startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 858,\n                columnNumber: 28\n              }, this),\n              color: \"secondary\",\n              onClick: () => deleteRows(),\n              children: \"Delete Rows\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 855,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 837,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: recommedation.res ? /*#__PURE__*/_jsxDEV(PaperTable, {\n              response: recommedation\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 866,\n              columnNumber: 36\n            }, this) : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 865,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.table,\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              columnDefs: compColumns,\n              setGrid: setGridCompApi,\n              gridApi: gridCompApi,\n              rowData: rowCompState,\n              tableUpdate: updateFinalRowData,\n              tableSize: 180\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 871,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 870,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.tableFooter,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 883,\n                columnNumber: 28\n              }, this),\n              color: \"secondary\",\n              style: {\n                marginRight: 10\n              },\n              onClick: () => saveTaskReset(),\n              children: \"Add this Task for Comparison\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 881,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"secondary\",\n              style: {\n                marginRight: 10\n              },\n              onClick: onSubmitHandler,\n              children: \"Calculate Reliability\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 891,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 880,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.table,\n          children: taskTableData.length > 0 && /*#__PURE__*/_jsxDEV(Table, {\n            columnDefs: taskTableColumns,\n            setGrid: setGriTaskdApi,\n            gridApi: gridTaskApi,\n            rowData: taskTableData,\n            tableUpdate: () => {},\n            tableSize: 180\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 929,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 927,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.table,\n          children: taskTableData.length > 0 && /*#__PURE__*/_jsxDEV(Table, {\n            columnDefs: taskMissionTableColumns,\n            setGrid: setgridMissionApi,\n            gridApi: gridMissionApi,\n            rowData: taskMissionTableData,\n            tableUpdate: () => {},\n            tableSize: 290\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 940,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 938,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 9\n      }, this), SnackBarMessage.showSnackBar && /*#__PURE__*/_jsxDEV(CustomizedSnackbars, {\n        message: SnackBarMessage,\n        onHandleClose: onHandleSnackClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 950,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 688,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 687,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskDashboard, \"NtXIlRPhCmEKGyIDqrxeALA0pxs=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c2 = TaskDashboard;\nexport default TaskDashboard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MissionData\");\n$RefreshReg$(_c2, \"TaskDashboard\");","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/src/pages/TaskDashboard/TaskDashboard.js"],"names":["React","useState","useEffect","useRef","useCallback","InputLabel","TextField","makeStyles","Button","Switch","Input","Paper","Typography","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Label","ReferenceLine","MuiPickersUtilsProvider","KeyboardDatePicker","AgGridColumn","MomentUtils","Navigation","styles","moment","CustomSelect","ReliabilityChart","MissionSlider","AddCircleOutlineIcon","Autocomplete","Loader","EventCalendar","data","subSystemLevelData","events","mainData","ReactCardFlip","Table","AddIcon","v4","uuidv4","DeleteIcon","CustomizedSnackbars","RenderMultipleComponent","taskActions","useDispatch","useSelector","AccessControl","PaperTable","MissionData","props","missionData","style","target","mission","actual","map","name","rel","toFixed","textAlign","probabilityHead","probability","prob","TaskDashboard","gridApi","setGridApi","gridCompApi","setGridCompApi","gridTaskApi","setGriTaskdApi","gridMissionApi","setgridMissionApi","missionProfileData","setMissionData","rowState","setRows","rowCompState","setCompRows","dispatch","phasedata","setPhaseData","missionDurations","setMissionDurations","ParallelIds","setParallelIds","d","console","log","shipOption","setshipOption","taskOption","settaskOption","missionOption","setmissionOption","taskShipNameOption","settaskShipNameOption","loading","setLoading","recommedation","setRecommedation","totalReliability","setTotalReliability","selectedTaskShip","setselectedTaskShip","selectedTaskName","setselectedTaskName","selectedShipName","setselectedShipName","showSubsystem","setSubSystem","startDate","setStartDate","Date","isCardFlipped","setCardFlipped","currentMission","setMission","eqDataOption","setEqDataOption","taskTableData","settaskTableData","taskMissionTableData","settaskMissionTableData","SnackBarMessage","setSnackBarMessage","severity","message","showSnackBar","selectedEqName","setEquipmentName","entireData","setentireData","selectedMissionName","setMissionName","graphData","setGraphData","missionPhaseGraphData","setMissionPhaseGraphData","currentShip","state","taskData","currentTaskName","subSystemData","setSubSystemData","eventInfo","setEventInfo","cardData","setCardData","missionName","thReliab","handleStartDateChange","date","endDate","setEndDate","handleEndDateChange","table","onCellValueChanged","params","colDef","field","updatedDurations","duration","index","node","rowIndex","newValue","ImportColumns","values","compColumns","label","isMultiple","currentTask","taskTableColumns","taskMissionTableColumns","AddRow","defaultRow","id","missionType","prevDurations","applyTransaction","add","updateCompTable","durationNums","str","parseFloat","fetch","method","headers","body","JSON","stringify","then","response","json","totalRel","res","length","reliabilityValue","split","catch","error","allRowData","forEachNode","push","newData","forEach","saveTaskReset","allRowCData","localData","localStorage","setItem","selectAll","selectedRows","getSelectedRows","remove","selectedCompRows","deleteRows","resetGrids","setRowData","refreshCells","handleEventCheck","start","subtract","end","total","days","working","down","maintenance","event","diff","status","Math","floor","Accept","mission_data","taskNames","task_ship_name","onLoad","dropDownStyle","root","paddingLeft","background","border","borderRadius","width","minHeight","boxShadow","inputRoot","classes","arr","arr2","i","getTime","random","toISOString","slice","uv","showGraph","setShowGraph","onResetMissionHandler","storedData","Object","entries","ele","key","removeItem","onSubmitHandler","fData","elemData","parse","taskMissionData","tData","perMData","pTD","round","componentRelData","cTD","onHandleSnackClose","updateFinalRowData","shipNameChange","value","tt","Array","isArray","hasOwnProperty","sNames","fNames","s","updateCurrentShip","ship","TaskNameChange","updateCurrentTask","minThreshold","maxThreshold","mprofile","fontWeight","color","fontSize","marginBottom","option","InputProps","disableUnderline","marginTop","tableFooter","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\n// import styles from \"./TaskDashboard.module.css\";\r\nimport { InputLabel, TextField, makeStyles, Button, Switch, Input, Paper, Typography } from \"@material-ui/core\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Label, ReferenceLine } from 'recharts';\r\n// import { arr,arr2 } from \"./data\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\n\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport styles from \"./tDashboard.module.css\";\r\nimport moment from \"moment\";\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport ReliabilityChart from \"../Reliability Dashboard/ReliabilityChart\";\r\nimport MissionSlider from \"../Reliability Dashboard/MissionSlider\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport EventCalendar from \"../Reliability Dashboard/EventCalendar\";\r\nimport { data, subSystemLevelData, events, mainData } from \"../Reliability Dashboard/DashboardData\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\nimport Table from \"../../ui/Table/DataManagerTable\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\n// import RenderParallelComponent from \"../systen_configuration/redundancy/RenderParallelComponent\";\r\nimport RenderMultipleComponent from \"./TaskRenderMultipleComponent\";\r\nimport { taskActions } from \"../../store/taskStore\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport AccessControl from \"../Home/AccessControl\";\r\nimport PaperTable from \"./PaperTable\"\r\nconst MissionData = (props) => {\r\n\r\n  return (\r\n\r\n    <div className={styles.missionData} style={props.style}>\r\n      <div className={styles.target}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"icon icon-tabler icon-tabler-target\"\r\n          width=\"14\"\r\n          height=\"14\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke-width=\"1.5\"\r\n          stroke=\"#374c93\"\r\n          fill=\"none\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        >\r\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"1\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"5\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"9\" />\r\n        </svg>{\" \"}\r\n        Target: {props.mission.target}%\r\n      </div>\r\n      <div className={styles.actual}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"icon icon-tabler icon-tabler-shield-check\"\r\n          width=\"14\"\r\n          height=\"14\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke-width=\"1.5\"\r\n          stroke=\"#f8f8f8\"\r\n          fill=\"none\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        >\r\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <path d=\"M9 12l2 2l4 -4\" />\r\n          <path d=\"M12 3a12 12 0 0 0 8.5 3a12 12 0 0 1 -8.5 15a12 12 0 0 1 -8.5 -15a12 12 0 0 0 8.5 -3\" />\r\n        </svg>\r\n        Actual:\r\n        {props.mission.actual.map((data) => {\r\n          return (\r\n            <>\r\n              <div>\r\n                {data.name} {data.rel.toFixed(2)}%\r\n              </div>\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <div className={styles.probabilityHead}>Probability of Achieving</div>\r\n        <div className={styles.probability}>\r\n          {props.mission.actual.map((data) => {\r\n            return (\r\n              <>\r\n                <div>\r\n                  {data.name}{\" \"}\r\n                  {data.prob.toFixed(2) == 100\r\n                    ? \">99%\"\r\n                    : `${data.prob.toFixed(2)}%`}\r\n                </div>\r\n              </>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst TaskDashboard = () => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [gridCompApi, setGridCompApi] = useState(null);\r\n  const [gridTaskApi, setGriTaskdApi] = useState(null);\r\n  const [gridMissionApi, setgridMissionApi] = useState(null);\r\n  const [missionProfileData, setMissionData] = useState([]);\r\n  const [rowState, setRows] = useState([]);\r\n  const [rowCompState, setCompRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const [phasedata, setPhaseData] = useState([]);\r\n  const [missionDurations, setMissionDurations] = useState([]);\r\n  let ParallelIds = [];\r\n  const setParallelIds = (d) => {\r\n    console.log(\"This is shit!!\")\r\n    console.log(d)\r\n    ParallelIds = d;\r\n  };\r\n  console.log(rowCompState, \"This is shit!!\")\r\n  const [shipOption, setshipOption] = useState([]);\r\n  const [taskOption, settaskOption] = useState([]);\r\n  const [missionOption, setmissionOption] = useState([]);\r\n  const [taskShipNameOption, settaskShipNameOption] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [recommedation, setRecommedation] = useState([]);\r\n  const [totalReliability, setTotalReliability] = useState(null);\r\n\r\n\r\n  const [selectedTaskShip, setselectedTaskShip] = useState(\"\");\r\n  const [selectedTaskName, setselectedTaskName] = useState(\"\");\r\n  const [selectedShipName, setselectedShipName] = useState(\"\");\r\n\r\n  // Reliability Dashboard\r\n  const [showSubsystem, setSubSystem] = useState(false);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n\r\n  const [isCardFlipped, setCardFlipped] = useState(false);\r\n\r\n  const [currentMission, setMission] = useState(0);\r\n  const [eqDataOption, setEqDataOption] = useState([]);\r\n\r\n  const [taskTableData, settaskTableData] = useState([]);\r\n  const [taskMissionTableData, settaskMissionTableData] = useState([]);\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const [selectedEqName, setEquipmentName] = useState(null);\r\n  const [entireData, setentireData] = useState(null);\r\n  // const [selectedShipName, setShipName] = useState(null);\r\n  const [selectedMissionName, setMissionName] = useState(null);\r\n\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  const [missionPhaseGraphData, setMissionPhaseGraphData] = useState([]);\r\n  const currentShip = useSelector((state) => state.taskData.currentShip);\r\n  const currentTaskName = useSelector((state) => state.taskData.currentTaskName);\r\n  const [subSystemData, setSubSystemData] = useState([]);\r\n  const [eventInfo, setEventInfo] = useState(null);\r\n  const [cardData, setCardData] = useState(null);\r\n  const missionName = useRef()\r\n  const thReliab = useRef()\r\n  const handleStartDateChange = (date) => {\r\n    setStartDate(date);\r\n  };\r\n  const [endDate, setEndDate] = useState(new Date());\r\n  const handleEndDateChange = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  console.table(phasedata, \"phase data\")\r\n  const onCellValueChanged = (params) => {\r\n    if (params.colDef.field === \"duration\") {\r\n      const updatedDurations = missionDurations.map((duration, index) =>\r\n        index === params.node.rowIndex ? params.newValue : duration\r\n      );\r\n      setMissionDurations(updatedDurations);\r\n    }\r\n  };\r\n  const ImportColumns = [\r\n    <AgGridColumn\r\n      field=\"missionType\"\r\n      headerName=\"Phase\"\r\n      headerTooltip=\"Phase\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      checkboxSelection={true}\r\n      cellEditorParams={{\r\n        values: [\r\n          \"\",\r\n          \"Harbour\",\r\n          \"Entry Leaving Harbour\",\r\n          \"Cruise\",\r\n          \"Defense Station\",\r\n          \"Action Station\",\r\n        ],\r\n      }}\r\n      width=\"220\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"duration\"\r\n      headerName=\"Duration\"\r\n      headerTooltip=\"Duration\"\r\n      type=\"number\"\r\n      width={100}\r\n      editable={true}\r\n      onCellValueChanged={onCellValueChanged}\r\n    />,\r\n  ];\r\n\r\n  const compColumns = [\r\n    <AgGridColumn\r\n      field=\"missionType\"\r\n      headerName=\"Phase\"\r\n      headerTooltip=\"Phase\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      checkboxSelection={true}\r\n      cellEditorParams={{\r\n        values: [\r\n          \"\",\r\n          \"Harbour\",\r\n          \"Entry Leaving Harbour\",\r\n          \"Cruise\",\r\n          \"Defense Station\",\r\n          \"Action Station\",\r\n        ],\r\n      }}\r\n      width=\"220\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"component\"\r\n      headerName=\"Select Component for Phase\"\r\n      headerTooltip=\"Select Component for Phase\"\r\n      // cellEditor=\"agSelectCellEditor\"\r\n      cellEditorFramework={RenderMultipleComponent}\r\n      cellEditorParams={{\r\n        setParallelIds: setParallelIds,\r\n        label: \"Select Component for Phase\",\r\n        isMultiple: true,\r\n        currentTask: selectedTaskName\r\n      }}\r\n      //onCellClicked={onCellChanged}\r\n      width=\"220\"\r\n      editable={true}\r\n    />\r\n  ];\r\n  // <AgGridColumn\r\n  //     field=\"component\"\r\n  //     headerName=\"Select Component for Mission\"\r\n  //     headerTooltip=\"Select Component for Mission\"\r\n  //     // cellEditor=\"agSelectCellEditor\"\r\n  //     cellEditorFramework={RenderMultipleComponent}\r\n  //     cellEditorParams={{\r\n  //       setParallelIds: setParallelIds,\r\n  //       label: \"Select Component for Mission\",\r\n  //       isMultiple: true,\r\n  //       currentTask: selectedTaskName\r\n  //     }}\r\n  //     //onCellClicked={onCellChanged}\r\n  //     width=\"220\"\r\n  //     editable={true}\r\n  //   />\r\n\r\n  const taskTableColumns = [\r\n    <AgGridColumn\r\n      field=\"shipName\"\r\n      headerName=\"Ship Name\"\r\n      headerTooltip=\"Ship Name\"\r\n      width={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"taskName\"\r\n      headerName=\"Task Name\"\r\n      headerTooltip=\"Task Name\"\r\n      width={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"rel\"\r\n      headerName=\"User Reliability\"\r\n      headerTooltip=\"User Reliability\"\r\n      type=\"number\"\r\n      width={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"cal_rel\"\r\n      headerName=\"Reliability (Netra\"\r\n      headerTooltip=\"Reliability (Netra\"\r\n      width={100}\r\n      editable={true}\r\n    />\r\n  ];\r\n  const taskMissionTableColumns = [\r\n    <AgGridColumn\r\n      field=\"shipName\"\r\n      headerName=\"Ship Name\"\r\n      headerTooltip=\"Ship Name\"\r\n      width={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"taskName\"\r\n      headerName=\"Task Name\"\r\n      headerTooltip=\"Task Name\"\r\n      width={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"missionType\"\r\n      headerName=\"Mission Type\"\r\n      headerTooltip=\"Mission Type\"\r\n      width={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"ComponentMission\"\r\n      headerName=\"Component/Mission Type\"\r\n      headerTooltip=\"Component/Mission Type\"\r\n      width={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"rel\"\r\n      headerName=\"Reliability\"\r\n      headerTooltip=\"Reliability\"\r\n      type=\"number\"\r\n      width={100}\r\n      editable={true}\r\n    />\r\n  ];\r\n\r\n\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: uuidv4(),\r\n        duration: 0,\r\n        missionType: \"\",\r\n      },\r\n    ];\r\n    setMissionDurations(prevDurations => [...prevDurations, defaultRow.duration]);\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n  };\r\n  const updateCompTable = () => {\r\n    console.log(missionDurations);\r\n    console.log(currentTaskName)\r\n    const durationNums = missionDurations.map(str => parseFloat(str));\r\n    fetch('/phase_json', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        \"duration\": durationNums,\r\n        \"task_name\": currentTaskName\r\n      })\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // Handle the response data here\r\n        console.log(data);\r\n        setRecommedation(data)\r\n        // const totalReliabilityRegex = /Total Reliability: (\\d+\\.\\d+)/;\r\n        // const match = data.res[2].match(totalReliabilityRegex);\r\n        // console.log(match)\r\n\r\n        const totalRel = data.res[data.res.length -1];\r\n        // console.log(totalRel)\r\n        const reliabilityValue = totalRel.split(\":\")[1];\r\n        console.log(reliabilityValue);\r\n        setTotalReliability(reliabilityValue);\r\n        setSnackBarMessage({\r\n          severity: \"Success\",\r\n          message: `Reliblity Calculated Sucessfully`,\r\n          showSnackBar: true,\r\n        });\r\n      })\r\n      .catch(error => {\r\n        // Handle errors here\r\n        console.error('Error:', error);\r\n      });\r\n\r\n    let allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    let newData = []\r\n    allRowData.forEach((d) => {\r\n      newData.push({ \"missionType\": d[\"missionType\"], \"component\": \"\", \"id\": d[\"id\"] })\r\n    })\r\n    setCompRows(newData)\r\n    // debugger;\r\n  }\r\n  console.log(recommedation);\r\n  const saveTaskReset = () => {\r\n    console.log(totalReliability, \"tOTAL rekl\")\r\n    debugger;\r\n    let allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    let allRowCData = [];\r\n    gridCompApi.forEachNode((node) => allRowCData.push(node.data));\r\n    //logic for saving it to local data\r\n    let mainData = []\r\n    allRowData.forEach((d, index) => {\r\n      mainData.push({\r\n        \"id\": allRowData[index][\"id\"], \"missionType\": allRowData[index][\"missionType\"],\r\n        \"duration\": allRowData[index][\"duration\"], \"components\": allRowCData[index][\"components\"]\r\n      })\r\n    })\r\n    let localData = { 'shipName': currentShip, \"taskName\": currentTaskName, \"data\": mainData, \"cal_rel\": totalReliability }\r\n    console.log(localData, \"local Data\")\r\n    setPhaseData(mainData)\r\n    localStorage.setItem(`${currentShip}_${currentTaskName}`, JSON.stringify(localData));\r\n    gridApi.selectAll();\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n\r\n    // let allCompRows = []\r\n    gridCompApi.selectAll();\r\n    const selectedCompRows = gridCompApi.getSelectedRows();\r\n    gridCompApi.applyTransaction({ remove: selectedCompRows });\r\n    allRowData = [];\r\n    // gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    setMissionData(allRowData)\r\n    setRecommedation([]);\r\n    settaskTableData([]);\r\n    settaskMissionTableData([]);\r\n  }\r\n  const deleteRows = () => {\r\n    debugger;\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    let allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    setMissionData(allRowData)\r\n    // console.log(selectedRows);\r\n  };\r\n\r\n  const resetGrids = () => {\r\n    // Reset the main grid\r\n    if (gridApi) {\r\n      gridApi.setRowData([]); // Clear the row data\r\n      gridApi.refreshCells(); // Refresh the grid to clear any cell changes\r\n    }\r\n\r\n    // Reset the component grid\r\n    if (gridCompApi) {\r\n      gridCompApi.setRowData([]); // Clear the row data\r\n      gridCompApi.refreshCells(); // Refresh the grid to clear any cell changes\r\n    }\r\n\r\n    // You can add similar logic for other grids if needed\r\n  };\r\n\r\n  const handleEventCheck = () => {\r\n    let start = moment(startDate).subtract(1, \"day\");\r\n    let end = moment(endDate).add(1, \"day\");\r\n    let total = (end - start) / (1000 * 3600 * 24) - 1;\r\n    console.log(total);\r\n    let days = { working: 0, down: 0, maintenance: 0, total: total };\r\n    events.forEach((event) => {\r\n      if (event.start < end && event.end > start) {\r\n        if (event.start >= start && event.end <= end) {\r\n          let diff =\r\n            (moment(event.end) - moment(event.start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start >= start && event.end >= end) {\r\n          let diff = (moment(end) - moment(event.start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start <= start && event.end <= end) {\r\n          let diff = (moment(event.end) - moment(start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start <= start && event.end >= end) {\r\n          let diff = (moment(end) - moment(start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        }\r\n      }\r\n    });\r\n    setEventInfo(days);\r\n    setCardFlipped(!isCardFlipped);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(\"/task_dash_populate\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const mission_data = data[\"missionData\"];\r\n        const taskNames = data[\"tasks\"]\r\n        const taskData = data[\"tasks_data\"]\r\n        const task_ship_name = data[\"ship_name\"]\r\n        setmissionOption(mission_data);\r\n        setentireData(data)\r\n        // settaskOption(taskNames);      \r\n        settaskShipNameOption(task_ship_name)\r\n        dispatch(taskActions.onLoad({ 'taskData': data }))\r\n      });\r\n  }, []);\r\n\r\n\r\n  const dropDownStyle = makeStyles({\r\n    root: {\r\n      paddingLeft: 10,\r\n      background: \"#fff\",\r\n      border: \"1px solid #0263a1\",\r\n      borderRadius: \"5px\",\r\n      width: \"320px\",\r\n      minHeight: \"40px\",\r\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n    },\r\n    inputRoot: {\r\n      width: '100%'\r\n    },\r\n  });\r\n  const classes = dropDownStyle();\r\n  let arr = []\r\n  let arr2 = []\r\n  for (let i = 0; i < 50; i++) {\r\n    // const maxDate = Date.now();\r\n    // const timestamp = Math.floor(Math.random() * maxDate);\r\n    arr = [...arr, { name: new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0, 10), uv: Math.floor(Math.random() * (80 - 30 + 1)) + 30 }]\r\n\r\n    arr2 = [...arr2, { name: new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0, 10), uv: Math.floor(Math.random() * (75 - 30 + 1)) + 30 }]\r\n  }\r\n  const [showGraph, setShowGraph] = useState(false);\r\n\r\n  const onResetMissionHandler = () => {\r\n    resetGrids();\r\n    setRecommedation([]);\r\n    let storedData = Object.entries(localStorage)\r\n    storedData.forEach(ele => {\r\n      let key = ele[0];\r\n\r\n      if (key !== \"settings\" && key !== \"login\" && key !== \"userData\") {\r\n        localStorage.removeItem(key)\r\n      }\r\n      setSnackBarMessage({\r\n        severity: \"Success\",\r\n        message: \"Data Cleared\",\r\n        showSnackBar: true,\r\n      });\r\n\r\n      settaskTableData([]);\r\n      settaskMissionTableData([]);\r\n    })\r\n  }\r\n\r\n  const onSubmitHandler = () => {\r\n    // setMission(0);\r\n    let storedData = Object.entries(localStorage)\r\n    console.log(storedData)\r\n    // storedData.pop()\r\n    let fData = []\r\n    storedData.forEach(ele => {\r\n      debugger;\r\n      console.log(ele)\r\n      let name = ele[0]\r\n      if (name !== \"settings\" && name !== \"login\" && name !== \"userData\") {\r\n        let elemData = JSON.parse(ele[1])\r\n        fData.push(JSON.parse(ele[1]))\r\n\r\n      }\r\n    })\r\n    console.log(fData)\r\n    if (fData.length > 0) {\r\n      // const data = {\r\n      //   \"taskName\": currentTaskName, \"shipName\": currentShip,\r\n      //   \"selectedMission\": missionName.current.value, \"missionProfileData\": missionProfileData\r\n      // }\r\n      fetch(\"/task_rel\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(fData),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .then((d) => {\r\n          debugger;\r\n          let taskData = [];\r\n          let taskMissionData = [];\r\n          d.forEach((tData) => {\r\n            let perMData = tData[\"data\"]\r\n            perMData.forEach((pTD) => {\r\n              taskMissionData.push({\r\n                \"shipName\": tData[\"shipName\"], \"taskName\": tData[\"taskName\"],\r\n                \"rel\": Math.round(pTD[\"rel\"] * 100) / 100, \"missionType\": pTD[\"missionName\"], \"ComponentMission\": pTD[\"missionName\"]\r\n              })\r\n              let componentRelData = pTD[\"comp_rel\"]\r\n              componentRelData.forEach((cTD) => {\r\n                taskMissionData.push({\r\n                  \"shipName\": tData[\"shipName\"], \"taskName\": tData[\"taskName\"],\r\n                  \"rel\": Math.round(cTD[\"rel\"] * 100) / 100, \"missionType\": pTD[\"missionName\"], \"ComponentMission\": cTD[\"compName\"]\r\n                })\r\n              })\r\n            })\r\n            // console.log(\"This is tdata\", tData)\r\n            taskData.push({ \"shipName\": tData[\"shipName\"], \"taskName\": tData[\"taskName\"], \"rel\": Math.round(tData[\"rel\"] * 100) / 100 ,  \"cal_rel\": tData[\"cal_rel\"]})\r\n          });\r\n          console.log(taskData, 'Taks data')\r\n          settaskTableData(taskData)\r\n          settaskMissionTableData(taskMissionData)\r\n        });\r\n    } else {\r\n      // alert(\"Please add Mission Definition!!\")\r\n      setSnackBarMessage({\r\n        severity: \"error\",\r\n        message: \"Please Select data and Enter Mission Phase Data!!\",\r\n        showSnackBar: true,\r\n      });\r\n    }\r\n\r\n  };\r\n\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const updateFinalRowData = (d) => {\r\n    setMissionData(d);\r\n  };\r\n\r\n  const shipNameChange = (event, value) => {\r\n    debugger;\r\n    let tt = entireData;\r\n\r\n    if (tt && tt[\"task_ship_name\"] && Array.isArray(value) && value.length > 0 && value[0].name) {\r\n      const selectedShipName = value[0].name;\r\n      console.log(\"Selected Ship Name:\", selectedShipName);\r\n\r\n      if (tt[\"task_ship_name\"].hasOwnProperty(selectedShipName)) {\r\n        const sNames = tt[\"task_ship_name\"][selectedShipName];\r\n        const fNames = sNames.map((s) => ({ name: s }));\r\n        settaskOption(fNames);\r\n\r\n        dispatch(taskActions.updateCurrentShip({ ship: selectedShipName }));\r\n      } else {\r\n        console.log(`No task_ship_name data found for ship: ${selectedShipName}`);\r\n      }\r\n    } else {\r\n      console.log(\"Invalid data or value array in shipNameChange function.\");\r\n    }\r\n  };\r\n\r\n  const TaskNameChange = (event, value) => {\r\n    if (Array.isArray(value) && value.length > 0) {\r\n      dispatch(taskActions.updateCurrentTask({ 'task': value[0].name }));\r\n    }\r\n  }\r\n  const minThreshold = 45\r\n  const maxThreshold = 60\r\n\r\n\r\n  return (\r\n    <AccessControl allowedLevels={['L1', 'L2', 'L3', 'L4', 'L5']}>\r\n      <MuiPickersUtilsProvider utils={MomentUtils}>\r\n        <Navigation />\r\n        <div className={styles.body}>\r\n          <div className={styles.mprofile}>\r\n            {/* <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Ship Name\r\n            </InputLabel>\r\n            <CustomSelect fields={['a','b','c','d','e']}/>\r\n              \r\n           \r\n            \r\n          </div> */}\r\n            <div style={{ width: \"300px\" }}>\r\n              <InputLabel\r\n                style={{\r\n                  fontWeight: \"bold\",\r\n                  color: \"black\",\r\n                  fontSize: \"16px\",\r\n                  marginBottom: \"10px\",\r\n                }}\r\n              >\r\n                Ship Name\r\n              </InputLabel>\r\n\r\n              <Autocomplete\r\n                classes={classes}\r\n                multiple\r\n                id=\"tags-standard\"\r\n                options={taskShipNameOption}\r\n                getOptionLabel={(option) => option.name}\r\n                onChange={shipNameChange}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    InputProps={{ ...params.InputProps, disableUnderline: true }}\r\n                    variant=\"standard\"\r\n                  // label=\"Multiple values\"\r\n                  // placeholder=\"Favorites\"\r\n                  />\r\n                )}\r\n              />\r\n\r\n            </div>\r\n            <div style={{ width: \"300px\" }}>\r\n              <InputLabel\r\n                style={{\r\n                  fontWeight: \"bold\",\r\n                  color: \"black\",\r\n                  fontSize: \"16px\",\r\n                  marginBottom: \"10px\",\r\n                }}\r\n              >\r\n                Task Name\r\n              </InputLabel>\r\n\r\n              <Autocomplete\r\n                classes={classes}\r\n                multiple\r\n                id=\"tags-standard\"\r\n                options={taskOption}\r\n                getOptionLabel={(option) => option.name}\r\n                onChange={TaskNameChange}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    InputProps={{ ...params.InputProps, disableUnderline: true }}\r\n                    variant=\"standard\"\r\n                  // label=\"Multiple values\"\r\n                  // placeholder=\"Favorites\"\r\n                  />\r\n                )}\r\n              />\r\n\r\n            </div>\r\n\r\n\r\n            {/* <div style={{ width: \"300px\" }}>\r\n              <InputLabel\r\n                style={{\r\n                  fontWeight: \"bold\",\r\n                  color: \"black\",\r\n                  fontSize: \"16px\",\r\n                  marginBottom: \"10px\",\r\n                }}\r\n              >\r\n                Mission Name\r\n              </InputLabel>\r\n              <input\r\n                className={styles.missionName}\r\n                ref={missionName}\r\n              // onChange={onHandleChange}\r\n              ></input>\r\n\r\n            </div> */}\r\n\r\n            {/* <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n               Threshold Reliability\r\n            </InputLabel>\r\n            <input\r\n            className={styles.missionName}\r\n                    ref={thReliab}\r\n                  \r\n                  ></input>\r\n            \r\n          </div> */}\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{\r\n                marginTop: \"2rem\",\r\n              }}\r\n              onClick={onResetMissionHandler}\r\n            >\r\n              Reset Screen\r\n            </Button>\r\n\r\n          \r\n\r\n\r\n          </div>\r\n\r\n          <div>\r\n            <div className={styles.table}>\r\n              <Table\r\n                columnDefs={ImportColumns}\r\n                setGrid={setGridApi}\r\n                gridApi={gridApi}\r\n                rowData={rowState}\r\n                tableUpdate={updateFinalRowData}\r\n                tableSize={180}\r\n              />\r\n            </div>\r\n            <div className={styles.tableFooter}>\r\n              <Button\r\n                variant=\"contained\"\r\n                // startIcon={<AddIcon />}\r\n                color=\"secondary\"\r\n                onClick={() => updateCompTable()}\r\n              >\r\n                Recommend Solution\r\n              </Button>\r\n              <Button\r\n                style={{ marginLeft: 10 }}\r\n                variant=\"contained\"\r\n                startIcon={<AddIcon />}\r\n                color=\"secondary\"\r\n                onClick={() => AddRow()}\r\n              >\r\n                Add Row\r\n              </Button>\r\n              <Button\r\n                style={{ marginLeft: 10 }}\r\n                variant=\"contained\"\r\n                startIcon={<DeleteIcon />}\r\n                color=\"secondary\"\r\n                onClick={() => deleteRows()}\r\n              >\r\n                Delete Rows\r\n              </Button>\r\n            </div>\r\n            <div>\r\n              {recommedation.res ? <PaperTable  response={recommedation}/>: \"\"\r\n              }\r\n            </div>\r\n\r\n            <div className={styles.table}>\r\n              <Table\r\n                columnDefs={compColumns}\r\n                setGrid={setGridCompApi}\r\n                gridApi={gridCompApi}\r\n                rowData={rowCompState}\r\n                tableUpdate={updateFinalRowData}\r\n                tableSize={180}\r\n              />\r\n            </div>\r\n            <div className={styles.tableFooter}>\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<AddIcon />}\r\n                color=\"secondary\"\r\n                style={{ marginRight: 10 }}\r\n                onClick={() => saveTaskReset()}\r\n              >\r\n                Add this Task for Comparison\r\n              </Button>\r\n\r\n              <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              style={{ marginRight: 10 }}\r\n              onClick={onSubmitHandler}\r\n            >\r\n              Calculate Reliability\r\n            </Button>\r\n            </div>\r\n            {/* <div style={{ width: \"300px\" }}>\r\n        <TextField id=\"outlined-basic\" label=\"Mission Name\" \r\n        variant=\"outlined\" defaultValue=\"Temp Mission\" />\r\n          </div>\r\n        <div style={{ width: \"300px\" }}>\r\n        <TextField id=\"outlined-basic\" label=\"Harbour Duration\"\r\n         variant=\"outlined\" defaultValue=\"0\" type=\"number\"   />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n          <TextField id=\"outlined-basic\" label=\"Entry Leaving Harbour Duration\"\r\n           variant=\"outlined\" defaultValue=\"0\" type=\"number\" />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n          <TextField id=\"outlined-basic\" label=\"Cruise Duration\"\r\n           variant=\"outlined\" defaultValue=\"0\" type=\"number\" />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n          <TextField id=\"outlined-basic\" label=\"Defence Duration\"\r\n           variant=\"outlined\" defaultValue=\"0\" type=\"number\" />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n          <TextField id=\"outlined-basic\" label=\"Action Duration\" \r\n          variant=\"outlined\" defaultValue=\"0\" type=\"number\" />\r\n          </div> */}\r\n\r\n          </div>\r\n\r\n          <div className={styles.table}>\r\n            {taskTableData.length > 0 &&\r\n              <Table columnDefs={taskTableColumns}\r\n                setGrid={setGriTaskdApi}\r\n                gridApi={gridTaskApi}\r\n                rowData={taskTableData}\r\n                tableUpdate={() => { }}\r\n                tableSize={180}>\r\n              </Table>}\r\n          </div>\r\n\r\n          <div className={styles.table}>\r\n            {taskTableData.length > 0 &&\r\n              <Table columnDefs={taskMissionTableColumns}\r\n                setGrid={setgridMissionApi}\r\n                gridApi={gridMissionApi}\r\n                rowData={taskMissionTableData}\r\n                tableUpdate={() => { }}\r\n                tableSize={290}></Table>}\r\n          </div>\r\n\r\n        </div>\r\n        {SnackBarMessage.showSnackBar && (\r\n          <CustomizedSnackbars\r\n            message={SnackBarMessage}\r\n            onHandleClose={onHandleSnackClose}\r\n          />\r\n        )}\r\n      </MuiPickersUtilsProvider>\r\n    </AccessControl>\r\n  );\r\n};\r\nexport default TaskDashboard;\r\n"]},"metadata":{},"sourceType":"module"}