{"ast":null,"code":"var _jsxFileName = \"E:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\HEP\\\\ComponentLevel\\\\componentLevel.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment } from \"react\";\nimport styles from \"../HEP.module.css\";\nimport Table from \"../../../ui/Table/Table\";\nimport { CLrowData } from \"../HEPData\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { v4 as uuid } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HEPComponentLevel = props => {\n  _s();\n\n  let systemData = useSelector(state => state.treeData.treeData);\n  systemData = systemData.filter(x => x.lmu === 1);\n  const phaseData = useSelector(state => state.phase.phase);\n  const mData = [\"Preventive\", \"Breakdown\"];\n  const rowData = systemData.map((e, i) => {\n    return {\n      ComponentId: e.id,\n      LMU: e.name,\n      psfcomplexity: \"Nominal\",\n      psfergonomics: \"Nominal\",\n      psfprocedure: \"Available\",\n      id: uuid()\n    };\n  });\n  debugger;\n  const CLcolumnDefs = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"LMU\",\n    headerName: \"Lowest Maintainable Unit (LMU)\",\n    minWidth: 80\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"psfcomplexity\",\n    headerName: \"PSF-Complexity\",\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: [\"Nominal\", \"Moderately Complex\", \"Highly Complex\"]\n    },\n    minWidth: 80,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"psfergonomics\",\n    headerName: \"PSF-Ergonomics\",\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: [\"Nominal\", \"Good\", \"Poor\", \"Misleading\"]\n    },\n    minWidth: 80,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"psfprocedure\",\n    headerName: \"PSF-Procedure Available\",\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: [\"Available\", \"Available But Poor\", \"Not Available\"]\n    },\n    minWidth: 80,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this)];\n\n  const updateFinalRowData = allRows => {\n    props.tableUpdate(allRows);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.phaseTable,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        columnDefs: CLcolumnDefs,\n        rowData: rowData,\n        tableUpdate: updateFinalRowData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HEPComponentLevel, \"DyMs1qW8yqnSC2gEnhCDksGXyc8=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = HEPComponentLevel;\nexport default HEPComponentLevel;\n\nvar _c;\n\n$RefreshReg$(_c, \"HEPComponentLevel\");","map":{"version":3,"sources":["E:/NetraB/netra/src/pages/HEP/ComponentLevel/componentLevel.js"],"names":["Fragment","styles","Table","CLrowData","AgGridColumn","useSelector","useDispatch","v4","uuid","HEPComponentLevel","props","systemData","state","treeData","filter","x","lmu","phaseData","phase","mData","rowData","map","e","i","ComponentId","id","LMU","name","psfcomplexity","psfergonomics","psfprocedure","CLcolumnDefs","values","updateFinalRowData","allRows","tableUpdate","phaseTable"],"mappings":"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","sourcesContent":["import { Fragment } from \"react\";\r\nimport styles from \"../HEP.module.css\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport { CLrowData } from \"../HEPData\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst HEPComponentLevel = (props) => {\r\n  let systemData = useSelector((state) => state.treeData.treeData);\r\n  systemData = systemData.filter((x) => x.lmu === 1);\r\n  const phaseData = useSelector((state) => state.phase.phase);\r\n  const mData = [\"Preventive\", \"Breakdown\"];\r\n  const rowData = systemData.map((e, i) => {\r\n    return {\r\n      ComponentId:e.id,\r\n      LMU: e.name,\r\n      psfcomplexity: \"Nominal\",\r\n      psfergonomics: \"Nominal\",\r\n      psfprocedure: \"Available\",\r\n      id:uuid(),\r\n    };\r\n  });\r\n  debugger;\r\n  const CLcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"LMU\"\r\n      headerName=\"Lowest Maintainable Unit (LMU)\"\r\n      minWidth={80}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"psfcomplexity\"\r\n      headerName=\"PSF-Complexity\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"Nominal\", \"Moderately Complex\", \"Highly Complex\"],\r\n      }}\r\n      minWidth={80}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"psfergonomics\"\r\n      headerName=\"PSF-Ergonomics\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"Nominal\", \"Good\", \"Poor\", \"Misleading\"] }}\r\n      minWidth={80}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"psfprocedure\"\r\n      headerName=\"PSF-Procedure Available\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"Available\", \"Available But Poor\", \"Not Available\"],\r\n      }}\r\n      minWidth={80}\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <div className={styles.phaseTable}>\r\n        <Table\r\n          columnDefs={CLcolumnDefs}\r\n          rowData={rowData}\r\n          tableUpdate={updateFinalRowData}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default HEPComponentLevel;\r\n"]},"metadata":{},"sourceType":"module"}