{"ast":null,"code":"var _jsxFileName = \"E:\\\\NetraB\\\\netra\\\\src\\\\components\\\\sortableTree\\\\SortableTree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SortableTree, { getTreeFromFlatData } from \"react-sortable-tree\";\nimport FileExplorerTheme from \"react-sortable-tree-theme-full-node-drag\";\nimport treeDataT from \"./SortableTreeData\";\nimport { treeDataActions } from \"../../store/TreeDataStore\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport 'react-sortable-tree/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TreeComponent = props => {\n  _s();\n\n  debugger;\n  const dispatch = useDispatch();\n  const fData = useSelector(state => state.treeData.treeData);\n  const tData = useSelector(state => state.treeData.sortTreeData);\n  let treeData = getTreeFromFlatData({\n    flatData: fData.map(node => ({ ...node,\n      title: node.name\n    })),\n    getKey: node => node.id,\n    // resolve a node's key\n    getParentKey: node => node.parent,\n    // resolve a node's parent's key\n    rootKey: null // The value of the parent key when there is no parent (i.e., at root level)\n\n  });\n  const [treeDataS, setTreeData] = useState(treeData);\n\n  const onChangeTree = treeD => {\n    dispatch(treeDataActions.setOnChangeTreeData({\n      treeData: treeD\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: props.height\n    },\n    children: /*#__PURE__*/_jsxDEV(SortableTree, {\n      treeData: tData // onChange={(treeDataS) => setTreeData(treeDataS)}\n      ,\n      onChange: tData => onChangeTree(tData),\n      theme: FileExplorerTheme,\n      isVirtualized: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TreeComponent, \"nHYALRkmjTjQsK2bafqRTCQCPtc=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = TreeComponent;\nexport default TreeComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TreeComponent\");","map":{"version":3,"sources":["E:/NetraB/netra/src/components/sortableTree/SortableTree.js"],"names":["React","useState","useEffect","SortableTree","getTreeFromFlatData","FileExplorerTheme","treeDataT","treeDataActions","useSelector","useDispatch","TreeComponent","props","dispatch","fData","state","treeData","tData","sortTreeData","flatData","map","node","title","name","getKey","id","getParentKey","parent","rootKey","treeDataS","setTreeData","onChangeTree","treeD","setOnChangeTreeData","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,YAAP,IAAuBC,mBAAvB,QAAkD,qBAAlD;AACA,OAAOC,iBAAP,MAA8B,0CAA9B;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,+BAAP;;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC/B;AACA,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAMI,KAAK,GAAGL,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeA,QAA3B,CAAzB;AACA,QAAMC,KAAK,GAAGR,WAAW,CAAEM,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeE,YAA3B,CAAzB;AACA,MAAIF,QAAQ,GAAGX,mBAAmB,CAAC;AACjCc,IAAAA,QAAQ,EAAEL,KAAK,CAACM,GAAN,CAAWC,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWC,MAAAA,KAAK,EAAED,IAAI,CAACE;AAAvB,KAAX,CAAV,CADuB;AAEjCC,IAAAA,MAAM,EAAGH,IAAD,IAAUA,IAAI,CAACI,EAFU;AAEN;AAC3BC,IAAAA,YAAY,EAAGL,IAAD,IAAUA,IAAI,CAACM,MAHI;AAGI;AACrCC,IAAAA,OAAO,EAAE,IAJwB,CAIlB;;AAJkB,GAAD,CAAlC;AAMA,QAAM,CAACC,SAAD,EAAYC,WAAZ,IAA2B5B,QAAQ,CAACc,QAAD,CAAzC;;AACA,QAAMe,YAAY,GAAIC,KAAD,IAAW;AAC9BnB,IAAAA,QAAQ,CACNL,eAAe,CAACyB,mBAAhB,CAAoC;AAClCjB,MAAAA,QAAQ,EAAEgB;AADwB,KAApC,CADM,CAAR;AAKD,GAND;;AAOA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAM,EAAEtB,KAAK,CAACsB;AAAhB,KAAZ;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,QAAQ,EAAEjB,KADZ,CAEE;AAFF;AAGE,MAAA,QAAQ,EAAGA,KAAD,IAAWc,YAAY,CAACd,KAAD,CAHnC;AAIE,MAAA,KAAK,EAAEX,iBAJT;AAKE,MAAA,aAAa,EAAE;AALjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA9BD;;GAAMK,a;UAEaD,W,EACHD,W,EACAA,W;;;KAJVE,a;AA+BN,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SortableTree, { getTreeFromFlatData } from \"react-sortable-tree\";\r\nimport FileExplorerTheme from \"react-sortable-tree-theme-full-node-drag\";\r\nimport treeDataT from \"./SortableTreeData\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport 'react-sortable-tree/style.css' \r\n\r\nconst TreeComponent = (props) => {\r\n  debugger;\r\n  const dispatch = useDispatch();\r\n  const fData = useSelector((state) => state.treeData.treeData);\r\n  const tData = useSelector((state) => state.treeData.sortTreeData);\r\n  let treeData = getTreeFromFlatData({\r\n    flatData: fData.map((node) => ({ ...node, title: node.name })),\r\n    getKey: (node) => node.id, // resolve a node's key\r\n    getParentKey: (node) => node.parent, // resolve a node's parent's key\r\n    rootKey: null, // The value of the parent key when there is no parent (i.e., at root level)\r\n  });\r\n  const [treeDataS, setTreeData] = useState(treeData);\r\n  const onChangeTree = (treeD) => {\r\n    dispatch(\r\n      treeDataActions.setOnChangeTreeData({\r\n        treeData: treeD,\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <div style={{ height: props.height }}>\r\n      <SortableTree\r\n        treeData={tData}\r\n        // onChange={(treeDataS) => setTreeData(treeDataS)}\r\n        onChange={(tData) => onChangeTree(tData)}\r\n        theme={FileExplorerTheme}\r\n        isVirtualized={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default TreeComponent;\r\n"]},"metadata":{},"sourceType":"module"}