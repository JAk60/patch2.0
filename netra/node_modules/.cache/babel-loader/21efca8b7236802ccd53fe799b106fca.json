{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\TaskDashboard\\\\TaskDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\"; // import styles from \"./TaskDashboard.module.css\";\n\nimport { InputLabel, TextField, makeStyles, Button, Switch, Input } from \"@material-ui/core\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Label, ReferenceLine } from 'recharts'; // import { arr,arr2 } from \"./data\";\n\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport MomentUtils from \"@date-io/moment\";\nimport Navigation from \"../../components/navigation/Navigation\";\nimport styles from \"./tDashboard.module.css\";\nimport moment from \"moment\";\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\nimport ReliabilityChart from \"../Reliability Dashboard/ReliabilityChart\";\nimport MissionSlider from \"../Reliability Dashboard/MissionSlider\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport Loader from \"react-loader-spinner\";\nimport EventCalendar from \"../Reliability Dashboard/EventCalendar\";\nimport { data, subSystemLevelData, events, mainData } from \"../Reliability Dashboard/DashboardData\";\nimport ReactCardFlip from \"react-card-flip\";\nimport Table from \"../../ui/Table/DataManagerTable\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MissionData = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.missionData,\n    style: props.style,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.target,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        class: \"icon icon-tabler icon-tabler-target\",\n        width: \"14\",\n        height: \"14\",\n        viewBox: \"0 0 24 24\",\n        \"stroke-width\": \"1.5\",\n        stroke: \"#374c93\",\n        fill: \"none\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          stroke: \"none\",\n          d: \"M0 0h24v24H0z\",\n          fill: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"12\",\n          cy: \"12\",\n          r: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"12\",\n          cy: \"12\",\n          r: \"5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"12\",\n          cy: \"12\",\n          r: \"9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), \" \", \"Target: \", props.mission.target, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.actual,\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        class: \"icon icon-tabler icon-tabler-shield-check\",\n        width: \"14\",\n        height: \"14\",\n        viewBox: \"0 0 24 24\",\n        \"stroke-width\": \"1.5\",\n        stroke: \"#f8f8f8\",\n        fill: \"none\",\n        \"stroke-linecap\": \"round\",\n        \"stroke-linejoin\": \"round\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          stroke: \"none\",\n          d: \"M0 0h24v24H0z\",\n          fill: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M9 12l2 2l4 -4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M12 3a12 12 0 0 0 8.5 3a12 12 0 0 1 -8.5 15a12 12 0 0 1 -8.5 -15a12 12 0 0 0 8.5 -3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), \"Actual:\", props.mission.actual.map(data => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [data.name, \" \", data.rel.toFixed(2), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, void 0, false);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.probabilityHead,\n        children: \"Probability of Achieving\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.probability,\n        children: props.mission.actual.map(data => {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [data.name, \" \", data.prob.toFixed(2) == 100 ? \">99%\" : `${data.prob.toFixed(2)}%`]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this)\n          }, void 0, false);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MissionData;\n\nconst TaskDashboard = () => {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const [missionProfileData, setMissionData] = useState([]);\n  const [rowState, setRows] = useState([]);\n  const ImportColumns = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"missionType\",\n    headerName: \"Mission Type\",\n    headerTooltip: \"Mission Type\",\n    cellEditor: \"agSelectCellEditor\",\n    checkboxSelection: true,\n    cellEditorParams: {\n      values: [\"\", \"Harbour\", \"Entry Leaving Harbour\", \"Cruise\", \"Defense Station\", \"Action Station\"]\n    },\n    width: \"220\",\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"duration\",\n    headerName: \"Duration\",\n    headerTooltip: \"Duration\",\n    type: \"number\",\n    width: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this)];\n  const [shipOption, setshipOption] = useState([]);\n  const [taskOption, settaskOption] = useState([]);\n  const [missionOption, setmissionOption] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedTask, setSelectedTask] = useState(\"\");\n  const [selectedMission, setSelectedMission] = useState(\"\"); // Reliability Dashboard\n\n  const [showSubsystem, setSubSystem] = useState(false);\n  const [startDate, setStartDate] = useState(new Date());\n  const [isCardFlipped, setCardFlipped] = useState(false);\n  const [currentMission, setMission] = useState(0);\n  const [eqDataOption, setEqDataOption] = useState([]);\n  const [SnackBarMessage, setSnackBarMessage] = useState({\n    severity: \"error\",\n    message: \"This is awesome\",\n    showSnackBar: false\n  });\n  const [selectedEqName, setEquipmentName] = useState(null);\n  const [selectedShipName, setShipName] = useState(null);\n  const [selectedMissionName, setMissionName] = useState(null);\n  const [graphData, setGraphData] = useState([]);\n  const [missionPhaseGraphData, setMissionPhaseGraphData] = useState([]);\n  const [subSystemData, setSubSystemData] = useState([]);\n  const [eventInfo, setEventInfo] = useState(null);\n  const [cardData, setCardData] = useState(null);\n  const missionName = useRef();\n  const thReliab = useRef();\n\n  const handleStartDateChange = date => {\n    setStartDate(date);\n  };\n\n  const [endDate, setEndDate] = useState(new Date());\n\n  const handleEndDateChange = date => {\n    setEndDate(date);\n  };\n\n  const AddRow = () => {\n    const defaultRow = [{\n      id: uuidv4(),\n      duration: 0,\n      missionType: \"\"\n    }];\n    gridApi.applyTransaction({\n      add: defaultRow\n    });\n  };\n\n  const deleteRows = () => {\n    debugger;\n    const selectedRows = gridApi.getSelectedRows();\n    gridApi.applyTransaction({\n      remove: selectedRows\n    });\n    let allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    setMissionData(allRowData); // console.log(selectedRows);\n  };\n\n  const handleEventCheck = () => {\n    let start = moment(startDate).subtract(1, \"day\");\n    let end = moment(endDate).add(1, \"day\");\n    let total = (end - start) / (1000 * 3600 * 24) - 1;\n    console.log(total);\n    let days = {\n      working: 0,\n      down: 0,\n      maintenance: 0,\n      total: total\n    };\n    events.forEach(event => {\n      if (event.start < end && event.end > start) {\n        if (event.start >= start && event.end <= end) {\n          let diff = (moment(event.end) - moment(event.start)) / (1000 * 3600 * 24);\n          console.log(diff);\n          days[event.status] += Math.floor(diff);\n        } else if (event.start >= start && event.end >= end) {\n          let diff = (moment(end) - moment(event.start)) / (1000 * 3600 * 24);\n          console.log(diff);\n          days[event.status] += Math.floor(diff);\n        } else if (event.start <= start && event.end <= end) {\n          let diff = (moment(event.end) - moment(start)) / (1000 * 3600 * 24);\n          console.log(diff);\n          days[event.status] += Math.floor(diff);\n        } else if (event.start <= start && event.end >= end) {\n          let diff = (moment(end) - moment(start)) / (1000 * 3600 * 24);\n          console.log(diff);\n          days[event.status] += Math.floor(diff);\n        }\n      }\n    });\n    setEventInfo(days);\n    setCardFlipped(!isCardFlipped);\n  };\n\n  useEffect(() => {\n    fetch(\"/task_dash_populate\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      debugger;\n      const mission_data = data[\"missionData\"];\n      const taskNames = data[\"tasks\"];\n      setmissionOption(mission_data);\n      settaskOption(taskNames);\n    });\n  }, []);\n  const dropDownStyle = makeStyles({\n    root: {\n      paddingLeft: 10,\n      background: \"#fff\",\n      border: \"1px solid #0263a1\",\n      borderRadius: \"5px\",\n      width: \"320px\",\n      minHeight: \"40px\",\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\"\n    },\n    inputRoot: {\n      width: '100%'\n    }\n  });\n  const classes = dropDownStyle();\n  let arr = [];\n  let arr2 = [];\n\n  for (let i = 0; i < 50; i++) {\n    // const maxDate = Date.now();\n    // const timestamp = Math.floor(Math.random() * maxDate);\n    arr = [...arr, {\n      name: new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0, 10),\n      uv: Math.floor(Math.random() * (80 - 30 + 1)) + 30\n    }];\n    arr2 = [...arr2, {\n      name: new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0, 10),\n      uv: Math.floor(Math.random() * (75 - 30 + 1)) + 30\n    }];\n  }\n\n  const [showGraph, setShowGraph] = useState(false);\n\n  const onSubmitHandler = () => {\n    // setMission(0);\n    if (missionProfileData.length > 0) {\n      const data = {\n        \"taskName\": selectedTask,\n        \"selectedMission\": missionName.current.value,\n        \"missionProfileData\": missionProfileData\n      };\n      fetch(\"/task_rel\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      }).then(res => res.json()).then(d => {\n        debugger;\n        let phase_data = d[\"phase_data\"];\n        d = d[\"main_data\"];\n        console.log(d);\n\n        if (d.length > 0) {\n          let newGraphData = [];\n          let newSubSystem = [];\n          let newCardData = [];\n          console.log(d);\n          let mid = 0;\n          let missionData = d[mid][data[\"selectedMission\"]];\n          newGraphData = [...newGraphData, {\n            name: \"Target Reliability\",\n            Reliability: thReliab.current.value\n          }];\n          newCardData[mid] = { ...newCardData[mid],\n            name: data[\"selectedMission\"],\n            target: thReliab.current.value\n          }; // missionOption.forEach((element) => {\n          //   debugger;\n          //   if (element.missionName === data[\"selectedMission\"]) {\n          //     newCardData[mid] = {\n          //       ...newCardData[mid],\n          //       name: data[\"selectedMission\"],\n          //       target: element.tar_rel,\n          //     };\n          //   }\n          // })//missionOption\n\n          data.taskName.forEach(taskN => {\n            debugger;\n            let shipData = missionData[taskN.name]; //console.log(shipData);\n\n            let actual = [];\n            actual[0] = {\n              name: taskN.name,\n              rel: Math.round(100 * shipData[0].rel, 2),\n              prob: Math.round(100 * shipData[0].prob_ac, 2)\n            };\n            newCardData[mid].actual = actual;\n            newGraphData = [...newGraphData, {\n              name: `${taskN.name}`,\n              Reliability: Math.round(100 * shipData[0].rel, 2)\n            }];\n            let eqptData = shipData[0];\n            eqptData.child.forEach((child, cid) => {\n              newSubSystem[cid] = { ...newSubSystem[cid],\n                name: child.name,\n                [taskN.name]: Math.round(100 * child.rel, 2)\n              };\n            });\n          }); // More arrays populate\n          // data.selectedMission.forEach((mission,mid) => {\n          //   debugger;\n          // })\n\n          debugger;\n          let phaseGraphData = []; // let keys = Object.keys(phase_data);\n\n          phase_data.forEach((item, cid) => {\n            phaseGraphData.push({\n              name: item[\"missionTypeName\"],\n              Reliability: item[\"rel\"]\n            });\n          });\n          setGraphData(newGraphData);\n          setMissionPhaseGraphData(phaseGraphData);\n          setSubSystemData(newSubSystem);\n          setCardData(newCardData);\n          setLoading(false);\n        }\n      });\n    } else {\n      alert(\"Please add Mission Definition!!\");\n    }\n  };\n\n  const updateFinalRowData = d => {\n    setMissionData(d);\n  };\n\n  const minThreshold = 45;\n  const maxThreshold = 60;\n  return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n    utils: MomentUtils,\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.body,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.mprofile,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"300px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            style: {\n              fontWeight: \"bold\",\n              color: \"black\",\n              fontSize: \"16px\",\n              marginBottom: \"10px\"\n            },\n            children: \"Task Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            classes: classes,\n            multiple: true,\n            id: \"tags-standard\",\n            options: taskOption,\n            getOptionLabel: option => option.name,\n            onChange: (event, value) => setSelectedTask(value),\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              InputProps: { ...params.InputProps,\n                disableUnderline: true\n              },\n              variant: \"standard\" // label=\"Multiple values\"\n              // placeholder=\"Favorites\"\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"300px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            style: {\n              fontWeight: \"bold\",\n              color: \"black\",\n              fontSize: \"16px\",\n              marginBottom: \"10px\"\n            },\n            children: \"Mission Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: styles.missionName,\n            ref: missionName // onChange={onHandleChange}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 484,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"300px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            style: {\n              fontWeight: \"bold\",\n              color: \"black\",\n              fontSize: \"16px\",\n              marginBottom: \"10px\"\n            },\n            children: \"Threshold Reliability\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: styles.missionName,\n            ref: thReliab // onChange={onHandleChange}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 505,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          style: {\n            marginTop: \"2rem\"\n          },\n          onClick: onSubmitHandler,\n          children: [console.log(arr[arr.length - 1][\"uv\"] + \"hello2\"), \"Submit\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.table,\n        children: [/*#__PURE__*/_jsxDEV(Table, {\n          columnDefs: ImportColumns,\n          setGrid: setGridApi,\n          gridApi: gridApi,\n          rowData: rowState,\n          tableUpdate: updateFinalRowData,\n          tableSize: 290\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.tableFooter,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 26\n            }, this),\n            color: \"secondary\",\n            onClick: () => AddRow(),\n            children: \"Add Row\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            style: {\n              marginLeft: 10\n            },\n            variant: \"contained\",\n            startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 26\n            }, this),\n            color: \"secondary\",\n            onClick: () => deleteRows(),\n            children: \"Delete Rows\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.midSection,\n        children: /*#__PURE__*/_jsxDEV(Loader, {\n          type: \"Puff\",\n          color: \"#86a0ff\",\n          height: 300,\n          width: 300,\n          style: {\n            marginTop: 100\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 11\n      }, this), graphData.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.midSection,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.rchart,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.content,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.relChart,\n                children: graphData && /*#__PURE__*/_jsxDEV(ReliabilityChart, {\n                  data: graphData\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 687,\n                  columnNumber: 35\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 686,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.compareMission,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    display: \"flex\",\n                    alignItems: \"center\"\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(AddCircleOutlineIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 691,\n                    columnNumber: 23\n                  }, this), \" Compare with other missions\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 690,\n                  columnNumber: 21\n                }, this), cardData ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.missionbox,\n                  children: [/*#__PURE__*/_jsxDEV(MissionSlider, {\n                    missions: cardData,\n                    currentMission: currentMission,\n                    setMission: setMission\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 696,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(MissionData, {\n                    mission: cardData[currentMission]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 701,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: styles.showSubsystem,\n                    children: [\"Show Subsytem Level\", \" \", /*#__PURE__*/_jsxDEV(Switch, {\n                      checked: showSubsystem,\n                      disabled: !subSystemData.length,\n                      onChange: () => {\n                        setSubSystem(!showSubsystem);\n                      }\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 704,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 702,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 694,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.missionbox,\n                  children: \"Select Missions to compare\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 714,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 689,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.rchart,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.content,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.relChart,\n                children: missionPhaseGraphData && /*#__PURE__*/_jsxDEV(ReliabilityChart, {\n                  data: missionPhaseGraphData\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 726,\n                  columnNumber: 47\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 725,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.compareMission,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    display: \"flex\",\n                    alignItems: \"center\"\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(AddCircleOutlineIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 730,\n                    columnNumber: 23\n                  }, this), \" Compare with other missions\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 729,\n                  columnNumber: 21\n                }, this), cardData ? /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.missionbox,\n                  children: [/*#__PURE__*/_jsxDEV(MissionSlider, {\n                    missions: cardData,\n                    currentMission: currentMission,\n                    setMission: setMission\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 735,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(MissionData, {\n                    mission: cardData[currentMission]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 740,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 733,\n                  columnNumber: 23\n                }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.missionbox,\n                  children: \"Select Missions to compare\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 743,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 728,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 724,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 13\n        }, this)\n      }, void 0, false) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 387,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskDashboard, \"R8bCQboqmmOsxLQOSPmCDmn1ckE=\");\n\n_c2 = TaskDashboard;\nexport default TaskDashboard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MissionData\");\n$RefreshReg$(_c2, \"TaskDashboard\");","map":{"version":3,"sources":["D:/NetraB/netra/src/pages/TaskDashboard/TaskDashboard.js"],"names":["React","useState","useEffect","useRef","InputLabel","TextField","makeStyles","Button","Switch","Input","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Label","ReferenceLine","MuiPickersUtilsProvider","KeyboardDatePicker","AgGridColumn","MomentUtils","Navigation","styles","moment","CustomSelect","ReliabilityChart","MissionSlider","AddCircleOutlineIcon","Autocomplete","Loader","EventCalendar","data","subSystemLevelData","events","mainData","ReactCardFlip","Table","AddIcon","v4","uuidv4","DeleteIcon","CustomizedSnackbars","MissionData","props","missionData","style","target","mission","actual","map","name","rel","toFixed","textAlign","probabilityHead","probability","prob","TaskDashboard","gridApi","setGridApi","missionProfileData","setMissionData","rowState","setRows","ImportColumns","values","shipOption","setshipOption","taskOption","settaskOption","missionOption","setmissionOption","loading","setLoading","selectedTask","setSelectedTask","selectedMission","setSelectedMission","showSubsystem","setSubSystem","startDate","setStartDate","Date","isCardFlipped","setCardFlipped","currentMission","setMission","eqDataOption","setEqDataOption","SnackBarMessage","setSnackBarMessage","severity","message","showSnackBar","selectedEqName","setEquipmentName","selectedShipName","setShipName","selectedMissionName","setMissionName","graphData","setGraphData","missionPhaseGraphData","setMissionPhaseGraphData","subSystemData","setSubSystemData","eventInfo","setEventInfo","cardData","setCardData","missionName","thReliab","handleStartDateChange","date","endDate","setEndDate","handleEndDateChange","AddRow","defaultRow","id","duration","missionType","applyTransaction","add","deleteRows","selectedRows","getSelectedRows","remove","allRowData","forEachNode","node","push","handleEventCheck","start","subtract","end","total","console","log","days","working","down","maintenance","forEach","event","diff","status","Math","floor","fetch","method","headers","Accept","then","res","json","mission_data","taskNames","dropDownStyle","root","paddingLeft","background","border","borderRadius","width","minHeight","boxShadow","inputRoot","classes","arr","arr2","i","getTime","random","toISOString","slice","uv","showGraph","setShowGraph","onSubmitHandler","length","current","value","body","JSON","stringify","d","phase_data","newGraphData","newSubSystem","newCardData","mid","Reliability","taskName","taskN","shipData","round","prob_ac","eqptData","child","cid","phaseGraphData","item","alert","updateFinalRowData","minThreshold","maxThreshold","mprofile","fontWeight","color","fontSize","marginBottom","option","params","InputProps","disableUnderline","marginTop","table","tableFooter","marginLeft","midSection","rchart","content","relChart","compareMission","display","alignItems","missionbox"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n// import styles from \"./TaskDashboard.module.css\";\r\nimport {  InputLabel, TextField,makeStyles,Button, Switch, Input} from \"@material-ui/core\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip,Label,ReferenceLine } from 'recharts';\r\n// import { arr,arr2 } from \"./data\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport styles from \"./tDashboard.module.css\";\r\nimport moment from \"moment\";\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport ReliabilityChart from \"../Reliability Dashboard/ReliabilityChart\";\r\nimport MissionSlider from \"../Reliability Dashboard/MissionSlider\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport EventCalendar from \"../Reliability Dashboard/EventCalendar\";\r\nimport { data, subSystemLevelData, events, mainData } from \"../Reliability Dashboard/DashboardData\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\nimport Table from \"../../ui/Table/DataManagerTable\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\n\r\nconst MissionData = (props) => {\r\n  \r\n  return (\r\n    <div className={styles.missionData} style={props.style}>\r\n      <div className={styles.target}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"icon icon-tabler icon-tabler-target\"\r\n          width=\"14\"\r\n          height=\"14\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke-width=\"1.5\"\r\n          stroke=\"#374c93\"\r\n          fill=\"none\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        >\r\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"1\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"5\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"9\" />\r\n        </svg>{\" \"}\r\n        Target: {props.mission.target}%\r\n      </div>\r\n      <div className={styles.actual}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"icon icon-tabler icon-tabler-shield-check\"\r\n          width=\"14\"\r\n          height=\"14\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke-width=\"1.5\"\r\n          stroke=\"#f8f8f8\"\r\n          fill=\"none\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        >\r\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <path d=\"M9 12l2 2l4 -4\" />\r\n          <path d=\"M12 3a12 12 0 0 0 8.5 3a12 12 0 0 1 -8.5 15a12 12 0 0 1 -8.5 -15a12 12 0 0 0 8.5 -3\" />\r\n        </svg>\r\n        Actual:\r\n        {props.mission.actual.map((data) => {\r\n          return (\r\n            <>\r\n              <div>\r\n                {data.name} {data.rel.toFixed(2)}%\r\n              </div>\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <div className={styles.probabilityHead}>Probability of Achieving</div>\r\n        <div className={styles.probability}>\r\n          {props.mission.actual.map((data) => {\r\n            return (\r\n              <>\r\n                <div>\r\n                  {data.name}{\" \"}\r\n                  {data.prob.toFixed(2) == 100\r\n                    ? \">99%\"\r\n                    : `${data.prob.toFixed(2)}%`}\r\n                </div>\r\n              </>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst TaskDashboard = () => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [missionProfileData, setMissionData] = useState([]);\r\n  const [rowState, setRows] = useState([]);\r\n  \r\n  const ImportColumns = [\r\n    <AgGridColumn\r\n      field=\"missionType\"\r\n      headerName=\"Mission Type\"\r\n      headerTooltip=\"Mission Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      checkboxSelection={true}\r\n      cellEditorParams={{\r\n        values: [\r\n          \"\",\r\n          \"Harbour\",\r\n          \"Entry Leaving Harbour\",\r\n          \"Cruise\",\r\n          \"Defense Station\",\r\n          \"Action Station\",\r\n        ],\r\n      }}\r\n      width=\"220\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n    field=\"duration\"\r\n    headerName=\"Duration\"\r\n    headerTooltip=\"Duration\"\r\n    type=\"number\"\r\n    width={100}\r\n    editable={true}\r\n  />\r\n  ];\r\n  const [shipOption, setshipOption] = useState([]);\r\n  const [taskOption, settaskOption] = useState([]);\r\n  const [missionOption, setmissionOption] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [selectedTask, setSelectedTask] = useState(\"\");\r\n  const [selectedMission, setSelectedMission] = useState(\"\");\r\n\r\n  // Reliability Dashboard\r\n  const [showSubsystem, setSubSystem] = useState(false);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n\r\n  const [isCardFlipped, setCardFlipped] = useState(false);\r\n\r\n  const [currentMission, setMission] = useState(0);\r\n  const [eqDataOption, setEqDataOption] = useState([]);\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const [selectedEqName, setEquipmentName] = useState(null);\r\n  const [selectedShipName, setShipName] = useState(null);\r\n  const [selectedMissionName, setMissionName] = useState(null);\r\n\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  const [missionPhaseGraphData, setMissionPhaseGraphData] = useState([]);\r\n\r\n  const [subSystemData, setSubSystemData] = useState([]);\r\n  const [eventInfo, setEventInfo] = useState(null);\r\n  const [cardData, setCardData] = useState(null);\r\n  const missionName = useRef()\r\n  const thReliab = useRef()\r\n  const handleStartDateChange = (date) => {\r\n    setStartDate(date);\r\n  };\r\n  const [endDate, setEndDate] = useState(new Date());\r\n  const handleEndDateChange = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: uuidv4(),\r\n        duration: 0,\r\n        missionType: \"\"\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n  };\r\n  const deleteRows = () => {\r\n    debugger;\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    let allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    setMissionData(allRowData)\r\n    // console.log(selectedRows);\r\n  };\r\n\r\n  const handleEventCheck = () => {\r\n    let start = moment(startDate).subtract(1, \"day\");\r\n    let end = moment(endDate).add(1, \"day\");\r\n    let total = (end - start) / (1000 * 3600 * 24) - 1;\r\n    console.log(total);\r\n    let days = { working: 0, down: 0, maintenance: 0, total: total };\r\n    events.forEach((event) => {\r\n      if (event.start < end && event.end > start) {\r\n        if (event.start >= start && event.end <= end) {\r\n          let diff =\r\n            (moment(event.end) - moment(event.start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start >= start && event.end >= end) {\r\n          let diff = (moment(end) - moment(event.start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start <= start && event.end <= end) {\r\n          let diff = (moment(event.end) - moment(start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start <= start && event.end >= end) {\r\n          let diff = (moment(end) - moment(start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        }\r\n      }\r\n    });\r\n    setEventInfo(days);\r\n    setCardFlipped(!isCardFlipped);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(\"/task_dash_populate\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        debugger;\r\n        const mission_data = data[\"missionData\"];\r\n        const taskNames = data[\"tasks\"]\r\n        setmissionOption(mission_data);\r\n        settaskOption(taskNames);      \r\n      });\r\n  }, []);\r\n\r\n\r\n  const dropDownStyle = makeStyles({\r\n    root: {\r\n      paddingLeft: 10,\r\n      background: \"#fff\",\r\n      border: \"1px solid #0263a1\",\r\n      borderRadius: \"5px\",\r\n      width: \"320px\",\r\n      minHeight: \"40px\",\r\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n    },\r\n    inputRoot:{\r\n      width: '100%'\r\n    },\r\n  });\r\n  const classes=dropDownStyle();\r\n  let arr=[]\r\n  let arr2=[]\r\n  for(let i=0;i<50;i++){\r\n    // const maxDate = Date.now();\r\n    // const timestamp = Math.floor(Math.random() * maxDate);\r\n    arr=[...arr,{name:new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0,10),uv:Math.floor(Math.random() * (80 - 30 + 1)) + 30}]\r\n\r\n    arr2=[...arr2,{name:new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0,10),uv:Math.floor(Math.random() * (75 - 30 + 1)) + 30}]\r\n  }\r\n  const [showGraph,setShowGraph]=useState(false);\r\n\r\n  const onSubmitHandler = () => { \r\n    // setMission(0);\r\n    if(missionProfileData.length > 0){\r\n      const data = {\"taskName\": selectedTask, \"selectedMission\": missionName.current.value, \"missionProfileData\": missionProfileData}\r\n      fetch(\"/task_rel\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(data),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .then((d) => {\r\n          debugger;\r\n          let phase_data = d[\"phase_data\"]\r\n          d = d[\"main_data\"]\r\n          console.log(d);\r\n          if(d.length > 0){\r\n            let newGraphData = [];\r\n            let newSubSystem = [];\r\n            let newCardData = [];\r\n            console.log(d);\r\n            let mid = 0\r\n            let missionData = d[mid][data[\"selectedMission\"]];\r\n            newGraphData = [\r\n              ...newGraphData,\r\n              {\r\n                name: \"Target Reliability\",\r\n                Reliability: thReliab.current.value,\r\n              },\r\n            ];\r\n            newCardData[mid] = {\r\n              ...newCardData[mid],\r\n              name: data[\"selectedMission\"],\r\n              target: thReliab.current.value,\r\n            };\r\n              // missionOption.forEach((element) => {\r\n              //   debugger;\r\n              //   if (element.missionName === data[\"selectedMission\"]) {\r\n              //     newCardData[mid] = {\r\n              //       ...newCardData[mid],\r\n              //       name: data[\"selectedMission\"],\r\n              //       target: element.tar_rel,\r\n              //     };\r\n                  \r\n              //   }\r\n              // })//missionOption\r\n              data.taskName.forEach((taskN) => {\r\n                debugger;\r\n                let shipData = missionData[taskN.name];\r\n                //console.log(shipData);\r\n                let actual = []; \r\n                actual[0] = {\r\n                  name: taskN.name,\r\n                  rel: Math.round(100 * shipData[0].rel, 2) ,\r\n                  prob: Math.round(100 * shipData[0].prob_ac, 2),\r\n                };\r\n                newCardData[mid].actual = actual;\r\n                newGraphData = [\r\n                  ...newGraphData,\r\n                  { name: `${taskN.name}`, Reliability: Math.round(100 * shipData[0].rel, 2) },\r\n                ];\r\n  \r\n                let eqptData = shipData[0];\r\n                eqptData.child.forEach((child, cid) => {\r\n                    newSubSystem[cid] = {\r\n                      ...newSubSystem[cid],\r\n                      name: child.name,\r\n                      [taskN.name]: Math.round(100 * child.rel, 2),\r\n                    };\r\n                  });\r\n              });// More arrays populate\r\n            // data.selectedMission.forEach((mission,mid) => {\r\n            //   debugger;\r\n            // })\r\n            debugger;\r\n            let phaseGraphData = []\r\n            // let keys = Object.keys(phase_data);\r\n            phase_data.forEach((item, cid) => {\r\n              phaseGraphData.push({name: item[\"missionTypeName\"], Reliability: item[\"rel\"]})\r\n            })\r\n            setGraphData(newGraphData);\r\n            setMissionPhaseGraphData(phaseGraphData);\r\n                setSubSystemData(newSubSystem);\r\n                setCardData(newCardData);\r\n                setLoading(false);\r\n  \r\n          }\r\n        });\r\n    }else{\r\n      alert(\"Please add Mission Definition!!\")\r\n    }\r\n    \r\n  };\r\n\r\n  const updateFinalRowData = (d) => {\r\n    setMissionData(d);\r\n  };\r\n  const minThreshold=45\r\n  const maxThreshold=60\r\n  return (\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        <div className={styles.mprofile}>\r\n          {/* <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Ship Name\r\n            </InputLabel>\r\n            <CustomSelect fields={['a','b','c','d','e']}/>\r\n              \r\n           \r\n            \r\n          </div> */}\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Task Name\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n            classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={taskOption}\r\n              getOptionLabel={(option) => option.name}\r\n              onChange = {(event, value) => setSelectedTask(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{...params.InputProps, disableUnderline: true}}\r\n                  variant=\"standard\"\r\n                  // label=\"Multiple values\"\r\n                  // placeholder=\"Favorites\"\r\n                />\r\n              )}\r\n            />\r\n            \r\n          </div>\r\n          \r\n          {/* <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Select Mission\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n            classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={missionOption}\r\n              getOptionLabel={(option) => option.missionName}\r\n              onChange={(event, value) => setSelectedMission(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{...params.InputProps, disableUnderline: true}}\r\n                  variant=\"standard\"\r\n                  // label=\"Multiple values\"\r\n                  // placeholder=\"Favorites\"\r\n                />\r\n              )}\r\n            />\r\n            \r\n          </div> */}\r\n\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n               Mission Name\r\n            </InputLabel>\r\n\r\n            {/* <TextField ref={missionName}   id=\"outlined-basic\" variant=\"outlined\" /> */}\r\n            <input\r\n            className={styles.missionName}\r\n                    ref={missionName}\r\n                    // onChange={onHandleChange}\r\n                  ></input>\r\n            \r\n          </div>\r\n\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n               Threshold Reliability\r\n            </InputLabel>\r\n\r\n            {/* <TextField ref={missionName}   id=\"outlined-basic\" variant=\"outlined\" /> */}\r\n            <input\r\n            className={styles.missionName}\r\n                    ref={thReliab}\r\n                    // onChange={onHandleChange}\r\n                  ></input>\r\n            \r\n          </div>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              marginTop: \"2rem\",\r\n            }}\r\n            onClick={onSubmitHandler} \r\n          >{console.log(arr[arr.length-1][\"uv\"]+\"hello2\")}\r\n            Submit\r\n          </Button>\r\n         \r\n          \r\n        </div>\r\n        \r\n        <div className={styles.table}>\r\n        <Table\r\n        columnDefs={ImportColumns}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        rowData={rowState}\r\n        tableUpdate={updateFinalRowData}\r\n        tableSize= {290}\r\n      />\r\n      <div className={styles.tableFooter}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => AddRow()}\r\n            >\r\n              Add Row\r\n            </Button>\r\n            <Button\r\n              style={{ marginLeft: 10 }}\r\n              variant=\"contained\"\r\n              startIcon={<DeleteIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => deleteRows()}\r\n            >\r\n              Delete Rows\r\n            </Button>\r\n          </div>\r\n        {/* <div style={{ width: \"300px\" }}>\r\n        <TextField id=\"outlined-basic\" label=\"Mission Name\" \r\n        variant=\"outlined\" defaultValue=\"Temp Mission\" />\r\n          </div>\r\n        <div style={{ width: \"300px\" }}>\r\n        <TextField id=\"outlined-basic\" label=\"Harbour Duration\"\r\n         variant=\"outlined\" defaultValue=\"0\" type=\"number\"   />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n          <TextField id=\"outlined-basic\" label=\"Entry Leaving Harbour Duration\"\r\n           variant=\"outlined\" defaultValue=\"0\" type=\"number\" />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n          <TextField id=\"outlined-basic\" label=\"Cruise Duration\"\r\n           variant=\"outlined\" defaultValue=\"0\" type=\"number\" />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n          <TextField id=\"outlined-basic\" label=\"Defence Duration\"\r\n           variant=\"outlined\" defaultValue=\"0\" type=\"number\" />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n          <TextField id=\"outlined-basic\" label=\"Action Duration\" \r\n          variant=\"outlined\" defaultValue=\"0\" type=\"number\" />\r\n          </div> */}\r\n        \r\n        </div>\r\n        \r\n            {/* {showGraph?<div className={styles.midSection}>\r\n\r\n            <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                <div>Parameter 1</div>\r\n                <LineChart width={550} height={300} data={arr2}>\r\n                  <XAxis dataKey=\"name\" tick={false} label={{ value: \"Date\", position: \"insideBottom\", dy: 10}} height={45} />\r\n                  <YAxis domain={[30,75]} label={{ value: 'Vibration Data', angle: -90, position: 'center' ,paddingRight:'20px', dy: -10}} width={80}/>\r\n                  <ReferenceLine y={45} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <ReferenceLine y={60} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <Tooltip />\r\n                  <CartesianGrid horizontal={false} vertical={false}/>\r\n                  \r\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke={maxThreshold>=arr2[arr2.length-1][\"uv\"] && arr2[arr2.length-1][\"uv\"]>=minThreshold?\"green\":\"red\"} />\r\n                 \r\n                </LineChart>\r\n                </div>\r\n              </div>\r\n\r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                <div>Parameter 2</div>\r\n                <LineChart width={550} height={300} data={arr2}>\r\n                  <XAxis dataKey=\"name\" tick={false} label={{ value: \"Date\", position: \"insideBottom\", dy: 10}} height={45} />\r\n                  <YAxis domain={[30,75]} label={{ value: 'Vibration Data', angle: -90, position: 'center' ,paddingRight:'20px', dy: -10}} width={80}/>\r\n                  <ReferenceLine y={45} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <ReferenceLine y={60} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <Tooltip />\r\n                  <CartesianGrid horizontal={false} vertical={false}/>\r\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke={maxThreshold>=arr2[arr2.length-1][\"uv\"] && arr2[arr2.length-1][\"uv\"]>=minThreshold?\"green\":\"red\"} />\r\n                  \r\n                </LineChart>\r\n\r\n\r\n    \r\n                 \r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                <div>Parameter 3</div>\r\n                <LineChart width={550} height={300} data={arr}>\r\n                  <XAxis dataKey=\"name\" tick={false} label={{ value: \"Date\", position: \"insideBottom\", dy: 10}} height={45} />\r\n                  <YAxis domain={[30,80]} label={{ value: 'Vibration Data', angle: -90, position: 'center' ,paddingRight:'20px', dy: -10}} width={80}/>\r\n                  <ReferenceLine y={45} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <ReferenceLine y={60} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <Tooltip />\r\n                  <CartesianGrid horizontal={false} vertical={false}/>\r\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\r\n                  <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n\r\n\r\n    \r\n                 \r\n                </div>\r\n              </div>\r\n            \r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                <div>Parameter 4</div>\r\n                <LineChart width={500} height={300} data={arr}>\r\n                \r\n                <XAxis dataKey=\"name\" label={{ value: \"Date\", position: \"insideBottom\", dy: 10}} height={45} tick={false} />\r\n                 \r\n                  <YAxis domain={[30,80]} label={{ value: 'Vibration Data', angle: -90, position: 'center' ,paddingRight:'20px', dy: -10}} width={80}/>\r\n\r\n                  \r\n                  <ReferenceLine y={40} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <ReferenceLine y={60} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <Tooltip />\r\n                  <CartesianGrid horizontal={false} vertical={false}/>\r\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\r\n                  <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n\r\n                \r\n    \r\n                 `\r\n                </div>\r\n              </div>\r\n\r\n              \r\n             \r\n            </div>:null} */}\r\n            \r\n            {loading && (\r\n          <div className={styles.midSection}>\r\n            <Loader\r\n              type=\"Puff\"\r\n              color=\"#86a0ff\"\r\n              height={300}\r\n              width={300}\r\n              style={{ marginTop: 100 }}\r\n            />\r\n          </div>\r\n        )}\r\n        {graphData.length ? (\r\n          <>\r\n            <div className={styles.midSection}>\r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                  <div className={styles.relChart}>\r\n                    {graphData && <ReliabilityChart data={graphData} />}\r\n                  </div>\r\n                  <div className={styles.compareMission}>\r\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                      <AddCircleOutlineIcon /> Compare with other missions\r\n                    </div>\r\n                    {cardData ? (\r\n                      <div className={styles.missionbox}>\r\n                        {/* <div className={styles.missionName}>Mission B</div> */}\r\n                        <MissionSlider\r\n                          missions={cardData}\r\n                          currentMission={currentMission}\r\n                          setMission={setMission}\r\n                        />\r\n                        <MissionData mission={cardData[currentMission]} />\r\n                        <div className={styles.showSubsystem}>\r\n                          Show Subsytem Level{\" \"}\r\n                          <Switch\r\n                            checked={showSubsystem}\r\n                            disabled={!subSystemData.length}\r\n                            onChange={() => {\r\n                              setSubSystem(!showSubsystem);\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <div className={styles.missionbox}>\r\n                        Select Missions to compare\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              {/* This is for another graph */}\r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                  <div className={styles.relChart}>\r\n                    {missionPhaseGraphData && <ReliabilityChart data={missionPhaseGraphData} />}\r\n                  </div>\r\n                  <div className={styles.compareMission}>\r\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                      <AddCircleOutlineIcon /> Compare with other missions\r\n                    </div>\r\n                    {cardData ? (\r\n                      <div className={styles.missionbox}>\r\n                        {/* <div className={styles.missionName}>Mission B</div> */}\r\n                        <MissionSlider\r\n                          missions={cardData}\r\n                          currentMission={currentMission}\r\n                          setMission={setMission}\r\n                        />\r\n                        <MissionData mission={cardData[currentMission]} />\r\n                      </div>\r\n                    ) : (\r\n                      <div className={styles.missionbox}>\r\n                        Select Missions to compare\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* <div className={styles.subSystemLevel}>\r\n              {showSubsystem && (\r\n                <div className={styles.subSystemContent}>\r\n                  <div className={styles.subSystemLevelChart}>\r\n                    <div>\r\n                      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          class=\"icon icon-tabler icon-tabler-adjustments\"\r\n                          width=\"32\"\r\n                          height=\"32\"\r\n                          viewBox=\"0 0 24 24\"\r\n                          stroke-width=\"1.5\"\r\n                          stroke=\"#0d1a45\"\r\n                          fill=\"none\"\r\n                          stroke-linecap=\"round\"\r\n                          stroke-linejoin=\"round\"\r\n                        >\r\n                          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n                          <circle cx=\"6\" cy=\"10\" r=\"2\" />\r\n                          <line x1=\"6\" y1=\"4\" x2=\"6\" y2=\"8\" />\r\n                          <line x1=\"6\" y1=\"12\" x2=\"6\" y2=\"20\" />\r\n                          <circle cx=\"12\" cy=\"16\" r=\"2\" />\r\n                          <line x1=\"12\" y1=\"4\" x2=\"12\" y2=\"14\" />\r\n                          <line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"20\" />\r\n                          <circle cx=\"18\" cy=\"7\" r=\"2\" />\r\n                          <line x1=\"18\" y1=\"4\" x2=\"18\" y2=\"5\" />\r\n                          <line x1=\"18\" y1=\"9\" x2=\"18\" y2=\"20\" />\r\n                        </svg>\r\n                        Sub System Level Indicator\r\n                      </div>\r\n                    </div>\r\n                    <BarGraph data={subSystemData} />\r\n                  </div>\r\n                  <div style={{ width: \"20%\" }}>\r\n                    <MissionData\r\n                      mission={cardData[currentMission]}\r\n                      style={{ height: 200 }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div> */}\r\n          </>\r\n        ) : null}\r\n\r\n        \r\n      </div>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\nexport default TaskDashboard;\r\n"]},"metadata":{},"sourceType":"module"}