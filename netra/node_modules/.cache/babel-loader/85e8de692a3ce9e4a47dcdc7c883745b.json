{"ast":null,"code":"var _jsxFileName = \"D:\\\\NETRA -P\\\\Netra\\\\netra\\\\src\\\\pages\\\\CDashboard\\\\CDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { InputLabel, TextField, makeStyles, Button } from \"@material-ui/core\";\nimport styles from \"./CDashboard.module.css\"; // import { arr,arr2 } from \"./data\";\n\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport MomentUtils from \"@date-io/moment\";\nimport Navigation from \"../../components/navigation/Navigation\";\nimport AccessControl from \"../Home/AccessControl\";\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { userActions } from \"../../store/ApplicationVariable\";\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\nimport CGraph from \"./CGraph\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CDashboard = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [userSelectionData, setUserSelectionData] = useState([]);\n  const [uniqueEqIds, setUniqueEqIds] = useState([]);\n  const [minMax, setMinMax] = useState([]);\n  const [selectedEqName, setEquipmentName] = useState([]);\n  const [paramOptions, setParamOptions] = useState([]);\n  const [selectedShipName, setShipName] = useState([]);\n  const [selectedParameterName, setParameterName] = useState([]);\n  const [eqDataOption, setEqDataOption] = useState([]);\n  const [graphData, setGraphData] = useState([]);\n  const [currMinMax, setCurrMinMax] = useState([]);\n  const PData = useSelector(state => state.userSelection.userSelection.params);\n  console.log(PData);\n  useEffect(() => {\n    fetch(\"/cm_dashboard\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      const params = data[\"parameters\"];\n      console.log(\"hello:\", params);\n      setMinMax([...params]);\n      const user_selection = data[\"user_selection\"][\"data\"];\n      const eqData = data[\"user_selection\"][\"eqData\"];\n      const eqIds = data[\"user_selection\"][\"uniq_eq_data\"];\n      setUniqueEqIds(eqIds);\n      const shipName = user_selection.map(x => x.shipName);\n      setUserSelectionData(eqData);\n      dispatch(userActions.populateParams({\n        params: params\n      }));\n      dispatch(userActions.onChangeLoad({\n        filteredData: {\n          shipName: shipName\n        }\n      }));\n    });\n  }, []); // ...\n\n  useEffect(() => {\n    const filteredArray = minMax.filter(item => {\n      return selectedEqName.some(selected => item.equipment_id === selected.id);\n    });\n    const filteredNames = filteredArray.map(item => item.name);\n    setParamOptions(filteredNames); // Move this line here\n\n    const CMinMax = ele => {\n      const FminMax = filteredArray.filter(i => i.name === ele);\n      setCurrMinMax(prevMinMax => [...prevMinMax, ...FminMax]);\n    };\n\n    selectedParameterName.forEach(e => CMinMax(e));\n  }, [selectedEqName]);\n  const customSelectData = useSelector(state => state.userSelection.userSelection);\n  const dropDownStyle = makeStyles({\n    root: {\n      paddingLeft: 10,\n      background: \"#fff\",\n      border: \"1px solid #0263a1\",\n      borderRadius: \"5px\",\n      width: \"320px\",\n      minHeight: \"40px\",\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\"\n    },\n    inputRoot: {\n      width: \"100%\"\n    }\n  });\n  const classes = dropDownStyle();\n  const [showGraph, setShowGraph] = useState(false); // const onSubmitHandler = () => {\n  //   fetch(\"/fetch_cmdata\", {\n  //     method: \"POST\",\n  //     body: JSON.stringify({\n  //       EquipmentIds: selectedEqName.map((x) => x.id),\n  //       ParameterNames: selectedParameterName.map((x) => x),\n  //     }),\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       Accept: \"application/json\",\n  //     },\n  //   })\n  //     .then((res) => {\n  //       return res.json();\n  //     })\n  //     .then((data) => {\n  //       const sortedParamData = data.map((param) => {\n  //         return {\n  //           ...param,\n  //           data: param.data.sort((a, b) => new Date(a.date) - new Date(b.date)),\n  //         };\n  //       });\n  //       setSnackBarMessage({\n  //         severity: \"success\",\n  //         message: data.message,\n  //         showSnackBar: true,\n  //       });\n  //       setParamData(sortedParamData);\n  //       setShowGraph(true);\n  //     })\n  //     .catch((error) => {\n  //       setSnackBarMessage({\n  //         severity: \"error\",\n  //         message: \"Some Error Occured. \" + error,\n  //         showSnackBar: true,\n  //       });\n  //     });\n  //   };\n\n  const onSubmitHandler = () => {\n    fetch(\"/cgraph\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        EquipmentIds: selectedEqName.map(x => x.id)\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      console.log(data);\n      setSnackBarMessage({\n        severity: \"success\",\n        message: data.message,\n        showSnackBar: true\n      });\n      setGraphData(data['graphData']);\n      setShowGraph(true);\n    }).catch(error => {\n      setSnackBarMessage({\n        severity: \"error\",\n        message: \"Some Error Occured. \" + error,\n        showSnackBar: true\n      });\n    });\n  }; // Snackbar\n\n\n  console.log(\"graphData\", graphData);\n  const [SnackBarMessage, setSnackBarMessage] = useState({\n    severity: \"error\",\n    message: \"This is awesome\",\n    showSnackBar: false\n  });\n\n  const onHandleSnackClose = () => {\n    setSnackBarMessage({\n      severity: \"error\",\n      message: \"Please Add Systemss\",\n      showSnackBar: false\n    });\n  };\n\n  const changeShip = e => {\n    var filteredEqData = [];\n    var xx = userSelectionData.filter(x => x.shipName === e.target.value).map(x => {\n      let id = uniqueEqIds.filter(y => y.name === x.equipmentName);\n      return id[0];\n    });\n    filteredEqData = [...filteredEqData, ...xx];\n    setEqDataOption(filteredEqData);\n    setShipName(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AccessControl, {\n    allowedLevels: ['L2', 'L5'],\n    children: /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n      utils: MomentUtils,\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.body,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.mprofile,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"300px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              style: {\n                fontWeight: \"bold\",\n                color: \"black\",\n                fontSize: \"16px\",\n                marginBottom: \"10px\"\n              },\n              children: \"Ship Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n              fields: customSelectData[\"shipName\"],\n              onChange: changeShip,\n              value: selectedShipName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"300px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              style: {\n                fontWeight: \"bold\",\n                color: \"black\",\n                fontSize: \"16px\",\n                marginBottom: \"10px\"\n              },\n              children: \"Equipment Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n              classes: classes,\n              multiple: true,\n              id: \"tags-standard\",\n              options: eqDataOption,\n              getOptionLabel: option => option.name,\n              value: selectedEqName,\n              onChange: (e, value) => setEquipmentName(value),\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                InputProps: { ...params.InputProps,\n                  disableUnderline: true\n                },\n                variant: \"standard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: \"300px\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              style: {\n                fontWeight: \"bold\",\n                color: \"black\",\n                fontSize: \"16px\",\n                marginBottom: \"10px\"\n              },\n              children: \"Select Parameter\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n              classes: classes,\n              multiple: true,\n              id: \"tags-standard\",\n              options: paramOptions // getOptionLabel={(option) => option.name}\n              ,\n              value: selectedParameterName,\n              onChange: (e, value) => setParameterName(value),\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                InputProps: { ...params.InputProps,\n                  disableUnderline: true\n                },\n                variant: \"standard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            style: {\n              marginTop: \"2rem\"\n            },\n            onClick: onSubmitHandler,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }, this), showGraph && /*#__PURE__*/_jsxDEV(CGraph, {\n          graphData: graphData,\n          selectedParameterNames: selectedParameterName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }, this), SnackBarMessage.showSnackBar && /*#__PURE__*/_jsxDEV(CustomizedSnackbars, {\n        message: SnackBarMessage,\n        onHandleClose: onHandleSnackClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CDashboard, \"qWMDt1uo3yyZI5OPzwJzWEJ/ERI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = CDashboard;\nexport default CDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CDashboard\");","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/src/pages/CDashboard/CDashboard.js"],"names":["React","useEffect","useState","InputLabel","TextField","makeStyles","Button","styles","MuiPickersUtilsProvider","MomentUtils","Navigation","AccessControl","CustomSelect","Autocomplete","useDispatch","useSelector","userActions","CustomizedSnackbars","CGraph","CDashboard","dispatch","userSelectionData","setUserSelectionData","uniqueEqIds","setUniqueEqIds","minMax","setMinMax","selectedEqName","setEquipmentName","paramOptions","setParamOptions","selectedShipName","setShipName","selectedParameterName","setParameterName","eqDataOption","setEqDataOption","graphData","setGraphData","currMinMax","setCurrMinMax","PData","state","userSelection","params","console","log","fetch","method","headers","Accept","then","res","json","data","user_selection","eqData","eqIds","shipName","map","x","populateParams","onChangeLoad","filteredData","filteredArray","filter","item","some","selected","equipment_id","id","filteredNames","name","CMinMax","ele","FminMax","i","prevMinMax","forEach","e","customSelectData","dropDownStyle","root","paddingLeft","background","border","borderRadius","width","minHeight","boxShadow","inputRoot","classes","showGraph","setShowGraph","onSubmitHandler","body","JSON","stringify","EquipmentIds","setSnackBarMessage","severity","message","showSnackBar","catch","error","SnackBarMessage","onHandleSnackClose","changeShip","filteredEqData","xx","target","value","y","equipmentName","mprofile","fontWeight","color","fontSize","marginBottom","option","InputProps","disableUnderline","marginTop"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport { InputLabel, TextField, makeStyles, Button } from \"@material-ui/core\";\r\nimport styles from \"./CDashboard.module.css\";\r\n// import { arr,arr2 } from \"./data\";\r\nimport {\r\n  MuiPickersUtilsProvider\r\n} from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport AccessControl from \"../Home/AccessControl\";\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { userActions } from \"../../store/ApplicationVariable\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\nimport CGraph from \"./CGraph\";\r\n\r\nconst CDashboard = () => {\r\n  const dispatch = useDispatch();\r\n  const [userSelectionData, setUserSelectionData] = useState([]);\r\n  const [uniqueEqIds, setUniqueEqIds] = useState([]);\r\n  const [minMax, setMinMax] = useState([]);\r\n  const [selectedEqName, setEquipmentName] = useState([]);\r\n  const [paramOptions, setParamOptions] = useState([]);\r\n  const [selectedShipName, setShipName] = useState([]);\r\n  const [selectedParameterName, setParameterName] = useState([]);\r\n  const [eqDataOption, setEqDataOption] = useState([]);\r\n  const [graphData, setGraphData] = useState([]);\r\n  const [currMinMax, setCurrMinMax] = useState([]);\r\n const PData=useSelector((state)=>state.userSelection.userSelection.params)\r\nconsole.log(PData)\r\n  useEffect(() => {\r\n    fetch(\"/cm_dashboard\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const params = data[\"parameters\"];\r\n        console.log(\"hello:\", params);\r\n        setMinMax([...params]);\r\n        const user_selection = data[\"user_selection\"][\"data\"];\r\n        const eqData = data[\"user_selection\"][\"eqData\"];\r\n        const eqIds = data[\"user_selection\"][\"uniq_eq_data\"];\r\n        setUniqueEqIds(eqIds);\r\n        const shipName = user_selection.map((x) => x.shipName);\r\n        setUserSelectionData(eqData);\r\n        dispatch(userActions.populateParams({ params: params }));\r\n        dispatch(\r\n          userActions.onChangeLoad({ filteredData: { shipName: shipName } })\r\n        );\r\n      });\r\n    }, []);\r\n  // ...\r\n\r\n  useEffect(() => {\r\n    const filteredArray = minMax.filter((item) => {\r\n      return selectedEqName.some(\r\n        (selected) => item.equipment_id === selected.id\r\n      );\r\n    });\r\n\r\n    const filteredNames = filteredArray.map((item) => item.name);\r\n    setParamOptions(filteredNames); // Move this line here\r\n\r\n    const CMinMax = (ele) => {\r\n      const FminMax = filteredArray.filter((i) => i.name === ele);\r\n      setCurrMinMax((prevMinMax) => [...prevMinMax, ...FminMax]);\r\n    };\r\n\r\n    selectedParameterName.forEach((e) => CMinMax(e));\r\n  }, [selectedEqName]);\r\n\r\n\r\n  const customSelectData = useSelector(\r\n    (state) => state.userSelection.userSelection\r\n  );\r\n\r\n  const dropDownStyle = makeStyles({\r\n    root: {\r\n      paddingLeft: 10,\r\n      background: \"#fff\",\r\n      border: \"1px solid #0263a1\",\r\n      borderRadius: \"5px\",\r\n      width: \"320px\",\r\n      minHeight: \"40px\",\r\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n    },\r\n    inputRoot: {\r\n      width: \"100%\",\r\n    },\r\n  });\r\n  const classes = dropDownStyle();\r\n  const [showGraph, setShowGraph] = useState(false);\r\n\r\n  // const onSubmitHandler = () => {\r\n  //   fetch(\"/fetch_cmdata\", {\r\n  //     method: \"POST\",\r\n  //     body: JSON.stringify({\r\n  //       EquipmentIds: selectedEqName.map((x) => x.id),\r\n  //       ParameterNames: selectedParameterName.map((x) => x),\r\n  //     }),\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //       Accept: \"application/json\",\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((data) => {\r\n  //       const sortedParamData = data.map((param) => {\r\n  //         return {\r\n  //           ...param,\r\n  //           data: param.data.sort((a, b) => new Date(a.date) - new Date(b.date)),\r\n  //         };\r\n  //       });\r\n  //       setSnackBarMessage({\r\n  //         severity: \"success\",\r\n  //         message: data.message,\r\n  //         showSnackBar: true,\r\n  //       });\r\n  //       setParamData(sortedParamData);\r\n  //       setShowGraph(true);\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       setSnackBarMessage({\r\n  //         severity: \"error\",\r\n  //         message: \"Some Error Occured. \" + error,\r\n  //         showSnackBar: true,\r\n  //       });\r\n  //     });\r\n  //   };\r\n\r\n    const onSubmitHandler = () => {\r\n      fetch(\"/cgraph\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          EquipmentIds: selectedEqName.map((x) => x.id),\r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          console.log(data)\r\n          setSnackBarMessage({\r\n            severity: \"success\",\r\n            message: data.message,\r\n            showSnackBar: true,\r\n          });\r\n          setGraphData(data['graphData']);\r\n          setShowGraph(true);\r\n        })\r\n        .catch((error) => {\r\n          setSnackBarMessage({\r\n            severity: \"error\",\r\n            message: \"Some Error Occured. \" + error,\r\n            showSnackBar: true,\r\n          });\r\n        });\r\n    };\r\n    \r\n\r\n\r\n \r\n    \r\n  // Snackbar\r\n  console.log(\"graphData\",graphData)\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n\r\n  const changeShip = (e) => {\r\n    var filteredEqData = [];\r\n\r\n    var xx = userSelectionData\r\n      .filter((x) => x.shipName === e.target.value)\r\n      .map((x) => {\r\n        let id = uniqueEqIds.filter((y) => y.name === x.equipmentName);\r\n        return id[0];\r\n      });\r\n    filteredEqData = [...filteredEqData, ...xx];\r\n\r\n    setEqDataOption(filteredEqData);\r\n    setShipName(e.target.value);\r\n  };\r\n  return (\r\n    <AccessControl allowedLevels={['L2', 'L5']}>\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        <div className={styles.mprofile}>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Ship Name\r\n            </InputLabel>\r\n            <CustomSelect\r\n              fields={customSelectData[\"shipName\"]}\r\n              onChange={changeShip}\r\n              value={selectedShipName}\r\n            />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Equipment Name\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n              classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={eqDataOption}\r\n              getOptionLabel={(option) => option.name}\r\n              value={selectedEqName}\r\n              onChange={(e, value) => setEquipmentName(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{ ...params.InputProps, disableUnderline: true }}\r\n                  variant=\"standard\"\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Select Parameter\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n              classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={paramOptions}\r\n              // getOptionLabel={(option) => option.name}\r\n              value={selectedParameterName}\r\n              onChange={(e, value) => setParameterName(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{ ...params.InputProps, disableUnderline: true }}\r\n                  variant=\"standard\"\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              marginTop: \"2rem\",\r\n            }}\r\n            onClick={onSubmitHandler}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n\r\n        {showGraph && (\r\n          <CGraph graphData={graphData} \r\n          selectedParameterNames={selectedParameterName}\r\n         />\r\n        )}\r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </MuiPickersUtilsProvider>\r\n    </AccessControl>\r\n  );\r\n};\r\nexport default CDashboard;\r\n"]},"metadata":{},"sourceType":"module"}