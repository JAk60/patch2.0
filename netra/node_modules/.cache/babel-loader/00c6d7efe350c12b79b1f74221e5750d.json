{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  userSelection: {\n    shipName: [],\n    shipCategory: [],\n    shipClass: [],\n    command: [],\n    department: [\"Insma\", \"WRSTG\"],\n    equipmentName: [],\n    equipmentCode: [],\n    params: []\n  },\n  currentSelection: {\n    shipName: \"\",\n    shipCategory: \"\",\n    shipClass: \"\",\n    command: \"\",\n    department: \"\",\n    equipmentName: \"\",\n    equipmentCode: \"\"\n  },\n  overhaulSecond: [],\n  overhaulMain: [],\n  componentsData: []\n};\nconst userSelection = createSlice({\n  name: \"userSelection\",\n  initialState: initialState,\n  reducers: {\n    populateParams(state, action) {\n      const params = action.payload.params; // Update the Redux state with the new params data\n\n      state.userSelection.params = params;\n    },\n\n    onChangeLoad(state, action) {\n      const data = action.payload.filteredData;\n      const sName = action.payload.currentShipName;\n      state.userSelection = { ...state.userSelection,\n        ...data\n      };\n      state.currentSelection = { ...state.currentSelection,\n        ...sName\n      };\n    },\n\n    onChangeCurrentSelection(state, action) {\n      const data = action.payload.selectedData;\n      state.currentSelection = { ...state.currentSelection,\n        ...data\n      };\n    },\n\n    onReset(state, action) {\n      state.currentSelection = {\n        shipName: \"\",\n        shipCategory: \"\",\n        shipClass: \"\",\n        command: \"\",\n        department: \"\",\n        equipmentName: \"\",\n        equipmentCode: \"\"\n      };\n    },\n\n    onAddingEquipmentName(state, action) {\n      const data = action.payload.filteredData;\n      const selectedData = action.payload.selectedData;\n      state.userSelection = { ...state.userSelection,\n        ...data\n      };\n      state.currentSelection = { ...state.currentSelection,\n        ...selectedData\n      };\n    },\n\n    populateEqName(state, action) {\n      const data = action.payload.filteredData;\n      state.userSelection = { ...state.userSelection,\n        ...data\n      };\n    },\n\n    onUpdatingOverhauls(state, action) {\n      const overhauls = action.payload.overHauls;\n      state.overhaulSecond = [...overhauls];\n    },\n\n    onFirstLoad(state, action) {\n      const data = action.payload.filteredData;\n      state.userSelection = { ...state.userSelection,\n        ...data\n      };\n      const componentsData = action.payload.componentsData;\n      state.componentsData = [...componentsData];\n    } // end of reducers\n\n\n  }\n});\nexport default userSelection;\nexport const userActions = userSelection.actions;","map":{"version":3,"sources":["D:/Netraaaa/Netra/netra/src/store/ApplicationVariable.js"],"names":["createSlice","initialState","userSelection","shipName","shipCategory","shipClass","command","department","equipmentName","equipmentCode","params","currentSelection","overhaulSecond","overhaulMain","componentsData","name","reducers","populateParams","state","action","payload","onChangeLoad","data","filteredData","sName","currentShipName","onChangeCurrentSelection","selectedData","onReset","onAddingEquipmentName","populateEqName","onUpdatingOverhauls","overhauls","overHauls","onFirstLoad","userActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  userSelection: {\r\n    shipName: [],\r\n    shipCategory: [],\r\n    shipClass: [],\r\n    command: [],\r\n    department: [\"Insma\", \"WRSTG\"],\r\n    equipmentName: [],\r\n    equipmentCode: [],\r\n    params: []\r\n  },\r\n  currentSelection: {\r\n    shipName: \"\",\r\n    shipCategory: \"\",\r\n    shipClass: \"\",\r\n    command: \"\",\r\n    department: \"\",\r\n    equipmentName: \"\",\r\n    equipmentCode: \"\",\r\n  },\r\n  overhaulSecond: [],\r\n  overhaulMain: [],\r\n  componentsData: [],\r\n};\r\n\r\nconst userSelection = createSlice({\r\n  name: \"userSelection\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    populateParams(state, action) {\r\n      const params = action.payload.params;\r\n      // Update the Redux state with the new params data\r\n      state.userSelection.params = params;\r\n    },\r\n    onChangeLoad(state, action) {\r\n      const data = action.payload.filteredData;\r\n      const sName = action.payload.currentShipName;\r\n      state.userSelection = {\r\n        ...state.userSelection,\r\n        ...data,\r\n      };\r\n      state.currentSelection = { ...state.currentSelection, ...sName };\r\n    },\r\n    onChangeCurrentSelection(state, action) {\r\n      const data = action.payload.selectedData;\r\n      state.currentSelection = { ...state.currentSelection, ...data };\r\n    },\r\n    onReset(state,action){\r\n      state.currentSelection={\r\n        shipName: \"\",\r\n        shipCategory: \"\",\r\n        shipClass: \"\",\r\n        command: \"\",\r\n        department: \"\",\r\n        equipmentName: \"\",\r\n        equipmentCode: \"\",\r\n      }\r\n    },\r\n    onAddingEquipmentName(state, action) {\r\n      const data = action.payload.filteredData;\r\n      const selectedData = action.payload.selectedData;\r\n      state.userSelection = { ...state.userSelection, ...data };\r\n      state.currentSelection = { ...state.currentSelection, ...selectedData };\r\n    },\r\n    populateEqName(state, action) {\r\n      const data = action.payload.filteredData;\r\n      state.userSelection = { ...state.userSelection, ...data };\r\n    },\r\n    onUpdatingOverhauls(state, action) {\r\n      const overhauls = action.payload.overHauls;\r\n      state.overhaulSecond = [...overhauls];\r\n    },\r\n    onFirstLoad(state, action) {\r\n      const data = action.payload.filteredData;\r\n      state.userSelection = {\r\n        ...state.userSelection,\r\n        ...data,\r\n      };\r\n      const componentsData = action.payload.componentsData;\r\n      state.componentsData = [...componentsData];\r\n    },\r\n    // end of reducers\r\n  },\r\n});\r\n\r\nexport default userSelection;\r\nexport const userActions = userSelection.actions;\r\n"]},"metadata":{},"sourceType":"module"}