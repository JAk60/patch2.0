{"ast":null,"code":"var _jsxFileName = \"D:\\\\Netraaaa\\\\Netra\\\\netra\\\\src\\\\pages\\\\Phase_Manager\\\\DCMultiplier\\\\dcMultiplier.js\",\n    _s = $RefreshSig$();\n\nimport Table from \"../../../ui/Table/Table\";\nimport styles from \"../Phasemanager.module.css\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { v4 as uuid } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DCMultiplier = props => {\n  _s();\n\n  const phase = useSelector(state => state.phase.phase);\n\n  if (phase.length === 0) {\n    alert(\"Please add Phases first\");\n  }\n\n  const systemData = useSelector(state => state.treeData.treeData);\n  const rootSystemData = systemData.filter(x => x.parent === null);\n  let distinctPhaseName = phase.map((element, index) => {\n    return element.PhaseName;\n  });\n  distinctPhaseName = [...new Set(distinctPhaseName)];\n  let childColHeaders = [];\n  const phaseArr = distinctPhaseName.map((ele, index) => {\n    const childArr = phase.filter(x => x.PhaseName === ele);\n    const childAgGrid = childArr.map((ele1, index1) => {\n      childColHeaders.push(ele1.PhaseRange + \" \" + ele1.id);\n\n      if (ele1.MeasurementType === \"Quantitative\") {\n        return /*#__PURE__*/_jsxDEV(AgGridColumn, {\n          field: ele1.PhaseRange + \" \" + ele1.id,\n          headerName: ele1.PhaseRange,\n          editable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(AgGridColumn, {\n          field: ele1.Status,\n          editable: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 16\n        }, this);\n      }\n    });\n    return /*#__PURE__*/_jsxDEV(AgGridColumn, {\n      field: ele,\n      headerName: ele,\n      children: childAgGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }); // childColHeaders = [...new Set(childColHeaders)];\n\n  const DCMcolumnDefs = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"Component\",\n    headerName: \"Component\",\n    minWidth: 140,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this), ...phaseArr];\n  const rowData = systemData.filter(x => x.parentId === null).map((element, index) => {\n    let d = {};\n    const phaseD = childColHeaders.map((ele, index) => {\n      d[ele] = 1;\n      return null;\n    });\n    return {\n      Component: element.name,\n      component_id: element.id,\n      ...d\n    };\n  });\n  debugger;\n\n  const updateFinalRowData = allRows => {\n    props.tableUpdate(allRows);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.phaseTable,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      columnDefs: DCMcolumnDefs,\n      rowData: rowData,\n      tableUpdate: updateFinalRowData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DCMultiplier, \"TUCwHZfd2KqB8bICX+HAKlTTlZw=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = DCMultiplier;\nexport default DCMultiplier;\n\nvar _c;\n\n$RefreshReg$(_c, \"DCMultiplier\");","map":{"version":3,"sources":["D:/Netraaaa/Netra/netra/src/pages/Phase_Manager/DCMultiplier/dcMultiplier.js"],"names":["Table","styles","AgGridColumn","useSelector","useDispatch","v4","uuid","DCMultiplier","props","phase","state","length","alert","systemData","treeData","rootSystemData","filter","x","parent","distinctPhaseName","map","element","index","PhaseName","Set","childColHeaders","phaseArr","ele","childArr","childAgGrid","ele1","index1","push","PhaseRange","id","MeasurementType","Status","DCMcolumnDefs","rowData","parentId","d","phaseD","Component","name","component_id","updateFinalRowData","allRows","tableUpdate","phaseTable"],"mappings":"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","sourcesContent":["import Table from \"../../../ui/Table/Table\";\r\nimport styles from \"../Phasemanager.module.css\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst DCMultiplier = (props) => {\r\n  const phase = useSelector((state) => state.phase.phase);\r\n  if (phase.length === 0) {\r\n    alert(\"Please add Phases first\");\r\n  }\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const rootSystemData = systemData.filter((x) => x.parent === null);\r\n  let distinctPhaseName = phase.map((element, index) => {\r\n    return element.PhaseName;\r\n  });\r\n  distinctPhaseName = [...new Set(distinctPhaseName)];\r\n  let childColHeaders = [];\r\n  const phaseArr = distinctPhaseName.map((ele, index) => {\r\n    const childArr = phase.filter((x) => x.PhaseName === ele);\r\n    const childAgGrid = childArr.map((ele1, index1) => {\r\n      childColHeaders.push(ele1.PhaseRange + \" \" + ele1.id);\r\n      if (ele1.MeasurementType === \"Quantitative\") {\r\n        return (\r\n          <AgGridColumn\r\n            field={ele1.PhaseRange + \" \" + ele1.id}\r\n            headerName={ele1.PhaseRange}\r\n            editable={true}\r\n          />\r\n        );\r\n      } else {\r\n        return <AgGridColumn field={ele1.Status} editable={true} />;\r\n      }\r\n    });\r\n    return (\r\n      <AgGridColumn field={ele} headerName={ele}>\r\n        {childAgGrid}\r\n      </AgGridColumn>\r\n    );\r\n  });\r\n  // childColHeaders = [...new Set(childColHeaders)];\r\n  const DCMcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"Component\"\r\n      headerName=\"Component\"\r\n      minWidth={140}\r\n      editable={true}\r\n    />,\r\n    ...phaseArr,\r\n  ];\r\n  const rowData = systemData\r\n    .filter((x) => x.parentId === null)\r\n    .map((element, index) => {\r\n      let d = {};\r\n      const phaseD = childColHeaders.map((ele, index) => {\r\n        d[ele] = 1;\r\n        return null;\r\n      });\r\n      return {\r\n        Component: element.name,\r\n        component_id: element.id,\r\n        ...d,\r\n      };\r\n    });\r\n  debugger;\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <div className={styles.phaseTable}>\r\n      <Table\r\n        columnDefs={DCMcolumnDefs}\r\n        rowData={rowData}\r\n        tableUpdate={updateFinalRowData}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DCMultiplier;\r\n"]},"metadata":{},"sourceType":"module"}