{"ast":null,"code":"var _jsxFileName = \"E:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\Data Manager\\\\historicalData\\\\nprd.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Table from \"../../../ui/Table/DataManagerTable\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport styles from \"../DataManager.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      marginTop: theme.spacing(0),\n      // width:\n      width: \"50%\",\n      height: theme.spacing(5),\n      // background: \"#048ee7\",\n      color: \"black\",\n      display: \"flex\",\n      alignItems: \"center\" // justifyContent: \"center\",\n\n    }\n  }\n}));\n\nconst NPRD = props => {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const classes = useStyles();\n  const rows = props.childList.map(x => {\n    return {\n      name: x.name,\n      id: x.id\n    };\n  });\n  const [rowState, setRows] = useState([{\n    id: rows[0].id,\n    ComponentName: rows[0].name,\n    FailureRate: \"2\",\n    Beta: \"2\"\n  }]);\n  const NPRDColumns = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"ComponentName\",\n    headerName: \"Component Name\",\n    editable: true,\n    minWidth: 100,\n    checkboxSelection: true,\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: rows.map(x => x.name)\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"FailureRate\",\n    headerName: \"Failure Rate\",\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"Beta\",\n    headerName: \"\\u03B2 - Shape Parameter\",\n    type: \"nmber\",\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this)];\n\n  const updateFinalRowData = allRows => {\n    props.tableUpdate(allRows, \"nprd\");\n  };\n\n  const AddRow = () => {\n    const defaultRow = [{\n      id: rows[0].id,\n      ComponentName: rows[0].name,\n      FailureRate: \"2\",\n      Beta: \"2\"\n    }];\n    gridApi.applyTransaction({\n      add: defaultRow\n    });\n    const allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    updateFinalRowData(allRowData);\n  };\n\n  const deleteRows = () => {\n    const selectedRows = gridApi.getSelectedRows();\n    gridApi.applyTransaction({\n      remove: selectedRows\n    });\n    const allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    updateFinalRowData(allRowData);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"*If the beta of the component is not known, use the following information: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 24\n        }, this), \"1. If Failure of the component is observed in narrow time window use beta(\\u03B2) = 2.5 \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), \"2. If Failure of the component is observed in scattered time window use beta(\\u03B2) = 1.5\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      columnDefs: NPRDColumns,\n      rowData: rowState,\n      setGrid: setGridApi,\n      gridApi: gridApi,\n      tableUpdate: updateFinalRowData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.tableFooter,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 22\n        }, this),\n        color: \"secondary\",\n        onClick: () => AddRow(),\n        children: \"Add Row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 22\n        }, this),\n        color: \"secondary\",\n        onClick: () => deleteRows(),\n        children: \"Delete Rows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NPRD, \"Fz+d15GCzrrAhDtiGzNRMijo0nA=\", false, function () {\n  return [useStyles];\n});\n\n_c = NPRD;\nexport default NPRD;\n\nvar _c;\n\n$RefreshReg$(_c, \"NPRD\");","map":{"version":3,"sources":["E:/NetraB/netra/src/pages/Data Manager/historicalData/nprd.js"],"names":["React","useState","Table","AgGridColumn","Paper","makeStyles","Button","AddIcon","IconButton","DeleteIcon","styles","useStyles","theme","root","display","flexWrap","marginTop","spacing","width","height","color","alignItems","NPRD","props","gridApi","setGridApi","classes","rows","childList","map","x","name","id","rowState","setRows","ComponentName","FailureRate","Beta","NPRDColumns","values","updateFinalRowData","allRows","tableUpdate","AddRow","defaultRow","applyTransaction","add","allRowData","forEachNode","node","push","data","deleteRows","selectedRows","getSelectedRows","remove","tableFooter"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    \"& > *\": {\r\n      marginTop: theme.spacing(0),\r\n      // width:\r\n      width: \"50%\",\r\n      height: theme.spacing(5),\r\n      // background: \"#048ee7\",\r\n      color: \"black\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      // justifyContent: \"center\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst NPRD = (props) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const classes = useStyles();\r\n  const rows = props.childList.map((x) => {\r\n    return { name: x.name, id: x.id };\r\n  });\r\n  const [rowState, setRows] = useState([\r\n    {\r\n      id: rows[0].id,\r\n      ComponentName: rows[0].name,\r\n      FailureRate: \"2\",\r\n      Beta: \"2\",\r\n    },\r\n  ]);\r\n\r\n  const NPRDColumns = [\r\n    <AgGridColumn\r\n      field=\"ComponentName\"\r\n      headerName=\"Component Name\"\r\n      editable={true}\r\n      minWidth={100}\r\n      checkboxSelection={true}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: rows.map((x) => x.name),\r\n      }}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"FailureRate\"\r\n      headerName=\"Failure Rate\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Beta\"\r\n      headerName=\"β - Shape Parameter\"\r\n      type=\"nmber\"\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows, \"nprd\");\r\n  };\r\n\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: rows[0].id,\r\n        ComponentName: rows[0].name,\r\n        FailureRate: \"2\",\r\n        Beta: \"2\",\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <h5>\r\n          *If the beta of the component is not known, use the following\r\n          information: <br />\r\n          1. If Failure of the component is observed in narrow time window use\r\n          beta(β) = 2.5 <br />\r\n          2. If Failure of the component is observed in scattered time window\r\n          use beta(β) = 1.5\r\n        </h5>\r\n      </div>\r\n      <Table\r\n        columnDefs={NPRDColumns}\r\n        rowData={rowState}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        tableUpdate={updateFinalRowData}\r\n      ></Table>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NPRD;\r\n"]},"metadata":{},"sourceType":"module"}