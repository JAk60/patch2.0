{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\Maintenance Allocation\\\\AddData\\\\AddData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from \"react\";\nimport Navigation from \"../../../components/navigation/Navigation\";\nimport styles from \"./AddData.module.css\";\nimport UserSelection from \"../../../ui/userSelection/userSelection\";\nimport { Button, makeStyles } from \"@material-ui/core\";\nimport TreeComponent from \"../../../components/sortableTree/SortableTree\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\nimport AutoSelect from \"../../../ui/Form/AutoSelect\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport Table from \"../../../ui/Table/Table\";\nimport { v4 as uuid } from \"uuid\";\nimport Loader from \"react-loader-spinner\";\nimport { useDropzone } from \"react-dropzone\";\nimport CustomizedSnackbars from \"../../../ui/CustomSnackBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  buttons: {\n    margin: 5,\n    minWidth: 170,\n    float: \"right\"\n  }\n});\n\nconst AddData = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const currentSelection = useSelector(state => state.userSelection.currentSelection);\n  let fData = useSelector(state => state.treeData.treeData);\n\n  const onLoadTreeStructure = () => {\n    fetch(\"/fetch_system\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        system: currentSelection[\"equipmentName\"],\n        ship_name: currentSelection[\"shipName\"]\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => res.json()).then(d => {\n      let treeD = d[\"treeD\"];\n      let failureModes = d[\"failureMode\"];\n      dispatch(treeDataActions.setTreeData({\n        treeData: treeD,\n        failureModes: failureModes\n      }));\n    });\n  };\n\n  const [isloading, setLoading] = useState(false);\n  const [dataRows, setDataRows] = useState([]);\n  const [selectedComponent, setComponent] = useState(null);\n  const [paramData, setParamData] = useState([]);\n\n  const selectOnChange = (e, value) => {\n    setDataRows([]);\n\n    if (value) {\n      setLoading(true);\n      fetch(\"/fetch_params\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          ComponentId: value.id\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      }).then(res => res.json()).then(d => {\n        setParamData(d);\n      });\n      setComponent(value);\n      setLoading(false);\n    }\n  };\n\n  const saveParamData = () => {\n    fetch(\"/save_condition_monitoring\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        flatData: dataRows,\n        dtype: \"insertParamData\"\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => res.json()).then(data => {\n      setSnackBarMessage({\n        severity: \"success\",\n        message: data.message,\n        showSnackBar: true\n      });\n    }).catch(error => {\n      setSnackBarMessage({\n        severity: \"error\",\n        message: \"Some Error Occured. \" + error,\n        showSnackBar: true\n      });\n    });\n  };\n\n  const DataColumnDefs = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"date\",\n    headerName: \"Date\",\n    headerTooltip: \"Date\",\n    cellEditor: \"datePicker\",\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"parameterName\",\n    headerName: \"Parameter\",\n    headerTooltip: \"Parameter\",\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: paramData.map(data => data.name)\n    },\n    editable: true,\n    onCellValueChanged: params => {\n      let parameter = paramData.filter(d => d.name === params.data.parameterName);\n      params.data.paramId = parameter[0].id;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"value\",\n    headerName: \"Value\",\n    headerTooltip: \"Value\",\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this)];\n\n  const addRow = () => {\n    let newRow = {\n      componentId: selectedComponent.id,\n      id: uuid(),\n      date: \"\",\n      parameterName: \"\",\n      paramId: \"\",\n      value: \"\"\n    };\n    setDataRows([...dataRows, newRow]);\n  };\n\n  const onDrop = useCallback(acceptedFiles => {\n    const formData = new FormData();\n    formData.append(\"File\", acceptedFiles[0]);\n    fetch(\"/add_data\", {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.json()).then(result => {\n      console.log(\"Success:\", result);\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop\n  }); // Snackbar\n\n  const [SnackBarMessage, setSnackBarMessage] = useState({\n    severity: \"error\",\n    message: \"This is awesome\",\n    showSnackBar: false\n  });\n\n  const onHandleSnackClose = () => {\n    setSnackBarMessage({\n      severity: \"error\",\n      message: \"Please Add Systemss\",\n      showSnackBar: false\n    });\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.userSelection,\n      children: [/*#__PURE__*/_jsxDEV(UserSelection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: classes.buttons,\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"Import File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.buttons,\n          onClick: saveParamData,\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.buttons,\n          onClick: onLoadTreeStructure,\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.tree,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.treeChild,\n          children: /*#__PURE__*/_jsxDEV(TreeComponent, {\n            height: \"600px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.rightSection,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.userSelection,\n          sx: {\n            display: \"flex\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.selectComponent,\n            children: [\"Select Component\", /*#__PURE__*/_jsxDEV(AutoSelect, {\n              fields: fData,\n              onChange: selectOnChange,\n              value: selectedComponent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              className: classes.buttons,\n              variant: \"contained\",\n              color: \"primary\",\n              children: \"Import File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n              children: /*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), isloading ? /*#__PURE__*/_jsxDEV(Loader, {\n          type: \"Puff\",\n          color: \"#86a0ff\",\n          height: 300,\n          width: 300,\n          style: {\n            marginTop: 100\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.table,\n          children: [/*#__PURE__*/_jsxDEV(Table, {\n            columnDefs: DataColumnDefs,\n            rowData: dataRows,\n            tableUpdate: rows => {\n              console.log(rows);\n            },\n            height: 300\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: addRow,\n            children: \"+ Add Row\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), SnackBarMessage.showSnackBar && /*#__PURE__*/_jsxDEV(CustomizedSnackbars, {\n      message: SnackBarMessage,\n      onHandleClose: onHandleSnackClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddData, \"YpsVHe3+kcYZpVdtdMMcrOGKJm8=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useDropzone, useStyles];\n});\n\n_c = AddData;\nexport default AddData;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddData\");","map":{"version":3,"sources":["D:/NetraB/netra/src/pages/Maintenance Allocation/AddData/AddData.js"],"names":["React","useState","useCallback","Navigation","styles","UserSelection","Button","makeStyles","TreeComponent","useSelector","useDispatch","treeDataActions","AutoSelect","AgGridColumn","Table","v4","uuid","Loader","useDropzone","CustomizedSnackbars","useStyles","buttons","margin","minWidth","float","AddData","props","dispatch","currentSelection","state","userSelection","fData","treeData","onLoadTreeStructure","fetch","method","body","JSON","stringify","system","ship_name","headers","Accept","then","res","json","d","treeD","failureModes","setTreeData","isloading","setLoading","dataRows","setDataRows","selectedComponent","setComponent","paramData","setParamData","selectOnChange","e","value","ComponentId","id","saveParamData","flatData","dtype","data","setSnackBarMessage","severity","message","showSnackBar","catch","error","DataColumnDefs","values","map","name","params","parameter","filter","parameterName","paramId","addRow","newRow","componentId","date","onDrop","acceptedFiles","formData","FormData","append","response","result","console","log","getRootProps","getInputProps","SnackBarMessage","onHandleSnackClose","classes","content","tree","treeChild","rightSection","display","selectComponent","marginTop","table","rows"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport Navigation from \"../../../components/navigation/Navigation\";\r\nimport styles from \"./AddData.module.css\";\r\nimport UserSelection from \"../../../ui/userSelection/userSelection\";\r\nimport { Button, makeStyles } from \"@material-ui/core\";\r\nimport TreeComponent from \"../../../components/sortableTree/SortableTree\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\nimport AutoSelect from \"../../../ui/Form/AutoSelect\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport CustomizedSnackbars from \"../../../ui/CustomSnackBar\";\r\n\r\nconst useStyles = makeStyles({\r\n  buttons: {\r\n    margin: 5,\r\n    minWidth: 170,\r\n    float: \"right\",\r\n  },\r\n});\r\n\r\nconst AddData = (props) => {\r\n  const dispatch = useDispatch();\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  let fData = useSelector((state) => state.treeData.treeData);\r\n\r\n  const onLoadTreeStructure = () => {\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        system: currentSelection[\"equipmentName\"],\r\n        ship_name: currentSelection[\"shipName\"],\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        let treeD = d[\"treeD\"];\r\n        let failureModes = d[\"failureMode\"];\r\n        dispatch(\r\n          treeDataActions.setTreeData({\r\n            treeData: treeD,\r\n            failureModes: failureModes,\r\n          })\r\n        );\r\n      });\r\n  };\r\n\r\n  const [isloading, setLoading] = useState(false);\r\n  const [dataRows, setDataRows] = useState([]);\r\n  const [selectedComponent, setComponent] = useState(null);\r\n  const [paramData, setParamData] = useState([]);\r\n\r\n  const selectOnChange = (e, value) => {\r\n    setDataRows([]);\r\n    if (value) {\r\n      setLoading(true);\r\n      fetch(\"/fetch_params\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          ComponentId: value.id,\r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .then((d) => {\r\n          setParamData(d);\r\n        });\r\n      setComponent(value);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const saveParamData = () => {\r\n    fetch(\"/save_condition_monitoring\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        flatData: dataRows,\r\n        dtype: \"insertParamData\",\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setSnackBarMessage({\r\n          severity: \"success\",\r\n          message: data.message,\r\n          showSnackBar: true,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setSnackBarMessage({\r\n          severity: \"error\",\r\n          message: \"Some Error Occured. \" + error,\r\n          showSnackBar: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  const DataColumnDefs = [\r\n    <AgGridColumn\r\n      field=\"date\"\r\n      headerName=\"Date\"\r\n      headerTooltip=\"Date\"\r\n      cellEditor=\"datePicker\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"parameterName\"\r\n      headerName=\"Parameter\"\r\n      headerTooltip=\"Parameter\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: paramData.map((data) => data.name),\r\n      }}\r\n      editable={true}\r\n      onCellValueChanged={(params) => {\r\n        let parameter = paramData.filter(\r\n          (d) => d.name === params.data.parameterName\r\n        );\r\n        params.data.paramId = parameter[0].id;\r\n      }}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"value\"\r\n      headerName=\"Value\"\r\n      headerTooltip=\"Value\"\r\n      editable={true}\r\n    />,\r\n  ];\r\n\r\n  const addRow = () => {\r\n    let newRow = {\r\n      componentId: selectedComponent.id,\r\n      id: uuid(),\r\n      date: \"\",\r\n      parameterName: \"\",\r\n      paramId: \"\",\r\n      value: \"\",\r\n    };\r\n    setDataRows([...dataRows, newRow]);\r\n  };\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    const formData = new FormData();\r\n    formData.append(\"File\", acceptedFiles[0]);\r\n    fetch(\"/add_data\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    })\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        console.log(\"Success:\", result);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error:\", error);\r\n      });\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({ onDrop });\r\n\r\n  // Snackbar\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <div className={styles.userSelection}>\r\n        <UserSelection />\r\n        <div>\r\n          <div {...getRootProps()}>\r\n            <input {...getInputProps()} />\r\n            <Button\r\n              className={classes.buttons}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Import File\r\n            </Button>\r\n          </div>\r\n          <Button\r\n            className={classes.buttons}\r\n            onClick={saveParamData}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Save\r\n          </Button>\r\n          <Button\r\n            className={classes.buttons}\r\n            onClick={onLoadTreeStructure}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.content}>\r\n        <div className={styles.tree}>\r\n          <div className={styles.treeChild}>\r\n            <TreeComponent height=\"600px\"></TreeComponent>\r\n          </div>\r\n        </div>\r\n        <div className={styles.rightSection}>\r\n          \r\n          <div className={styles.userSelection} sx={{display: \"flex\"}}>\r\n          <div className={styles.selectComponent}>\r\n            Select Component\r\n            <AutoSelect\r\n              fields={fData}\r\n              onChange={selectOnChange}\r\n              value={selectedComponent}\r\n            ></AutoSelect>\r\n          </div>\r\n            <div>\r\n              <Button\r\n                className={classes.buttons}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n              >\r\n                Import File\r\n              </Button>\r\n              <div {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {isloading ? (\r\n            <Loader\r\n              type=\"Puff\"\r\n              color=\"#86a0ff\"\r\n              height={300}\r\n              width={300}\r\n              style={{ marginTop: 100 }}\r\n            />\r\n          ) : (\r\n            <div className={styles.table}>\r\n              <Table\r\n                columnDefs={DataColumnDefs}\r\n                rowData={dataRows}\r\n                tableUpdate={(rows) => {\r\n                  console.log(rows);\r\n                }}\r\n                height={300}\r\n              />\r\n              <Button variant=\"contained\" color=\"primary\" onClick={addRow}>\r\n                + Add Row\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddData;\r\n"]},"metadata":{},"sourceType":"module"}