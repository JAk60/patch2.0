{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\PM OPTIM\\\\OptiQ.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { TextField, Button, Dialog, DialogTitle, DialogContent, DialogActions } from \"@material-ui/core\";\nimport styles from './pm.module.css';\nimport OptTable from './OptTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst OptiQ = ({\n  questions,\n  name,\n  currQ\n}) => {\n  _s();\n\n  var _currQ$columns;\n\n  const [answers, setAnswers] = useState({});\n  const [n, setN] = useState(1); // State variable to hold the value of 'n'\n\n  const [tableData, setTableData] = useState([{}]); // Initial row data with a single empty object\n\n  const handleAnswerChange = (event, questionId) => {\n    const {\n      value\n    } = event.target;\n    setAnswers(prevAnswers => ({ ...prevAnswers,\n      [questionId]: parseFloat(value)\n    }));\n  };\n\n  const handleAddRow = e => {\n    e.preventDefault();\n    setN(prevN => prevN + 1); // Increment the value of 'n' when the Add Row button is clicked\n\n    setTableData(prevTableData => [...prevTableData, {}]); // Add a new empty object to the table data\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.mainOp,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.userSele,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [name, \" Questions\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [questions === null || questions === void 0 ? void 0 : questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: question.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 17\n            }, this), question.type === \"text\" && /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"number\",\n              value: answers[question.id] || \"\",\n              onChange: event => handleAnswerChange(event, question.id),\n              required: question.required\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 19\n            }, this)]\n          }, question.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handleAddRow,\n            children: \"Add Row\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.OptTable,\n        children: /*#__PURE__*/_jsxDEV(OptTable, {\n          columnDefs: (_currQ$columns = currQ.columns) === null || _currQ$columns === void 0 ? void 0 : _currQ$columns.map(column => ({\n            headerName: column,\n            field: column\n          })),\n          rowData: tableData.slice(0, n) // Use only the first 'n' rows from the tableData\n          ,\n          height: 200,\n          answers: answers,\n          name: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(OptiQ, \"3515ozEsc0tN4y6ZGm6/M7W3V5M=\");\n\n_c = OptiQ;\nexport default OptiQ;\n\nvar _c;\n\n$RefreshReg$(_c, \"OptiQ\");","map":{"version":3,"sources":["D:/NetraB/netra/src/pages/PM OPTIM/OptiQ.js"],"names":["React","useState","TextField","Button","Dialog","DialogTitle","DialogContent","DialogActions","styles","OptTable","OptiQ","questions","name","currQ","answers","setAnswers","n","setN","tableData","setTableData","handleAnswerChange","event","questionId","value","target","prevAnswers","parseFloat","handleAddRow","e","preventDefault","prevN","prevTableData","mainOp","userSele","map","question","text","type","id","required","columns","column","headerName","field","slice"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { TextField, Button, Dialog, DialogTitle, DialogContent, DialogActions } from \"@material-ui/core\";\r\nimport styles from './pm.module.css';\r\nimport OptTable from './OptTable';\r\n\r\nconst OptiQ = ({ questions, name, currQ }) => {\r\n  const [answers, setAnswers] = useState({});\r\n  const [n, setN] = useState(1); // State variable to hold the value of 'n'\r\n  const [tableData, setTableData] = useState([{}]); // Initial row data with a single empty object\r\n\r\n  const handleAnswerChange = (event, questionId) => {\r\n    const { value } = event.target;\r\n    setAnswers((prevAnswers) => ({\r\n      ...prevAnswers,\r\n      [questionId]: parseFloat(value),\r\n    }));\r\n  };\r\n\r\n  const handleAddRow = (e) => {\r\n    e.preventDefault();\r\n    setN((prevN) => prevN + 1); // Increment the value of 'n' when the Add Row button is clicked\r\n    setTableData((prevTableData) => [...prevTableData, {}]); // Add a new empty object to the table data\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.mainOp}>\r\n        <div className={styles.userSele}>\r\n          <h3>{name} Questions</h3>\r\n          <form>\r\n            {questions?.map((question) => (\r\n              <div key={question.id}>\r\n                <label>{question.text}</label>\r\n                {question.type === \"text\" && (\r\n                  <TextField\r\n                    type=\"number\"\r\n                    value={answers[question.id] || \"\"}\r\n                    onChange={(event) => handleAnswerChange(event, question.id)}\r\n                    required={question.required}\r\n                  />\r\n                )}\r\n                {/* Add other input types (e.g., select, radio, checkbox) based on the question type */}\r\n              </div>\r\n            ))}\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\" onClick={handleAddRow}>\r\n              Add Row\r\n            </Button>\r\n          </form>\r\n        </div>\r\n        <div className={styles.OptTable}>\r\n          <OptTable\r\n            columnDefs={currQ.columns?.map((column) => ({ headerName: column, field: column }))}\r\n            rowData={tableData.slice(0, n)} // Use only the first 'n' rows from the tableData\r\n            height={200}\r\n            answers={answers}\r\n            name={name}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OptiQ;\r\n"]},"metadata":{},"sourceType":"module"}