{"ast":null,"code":"var _jsxFileName = \"E:\\\\NETRA PROJECT\\\\Netra\\\\netra\\\\src\\\\ui\\\\Table\\\\Table.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport \"./Table.css\";\nimport { getDatePicker } from \"./DataManagerTable\";\nimport ReactDom from \"react-dom\";\nimport { TextField } from \"@material-ui/core\"; // function getDatePicker() {\n//   function Datepicker() {}\n//   Datepicker.prototype.init = function (params) {\n//     this.eInput = document.createElement(\"input\");\n//     this.eInput.value = params.value;\n//     this.eInput.classList.add(\"ag-input\");\n//     this.eInput.style.height = \"100%\";\n//     $(this.eInput).datepicker({ dateFormat: \"dd/mm/yy\" });\n//     console.log(params);\n//   };\n//   Datepicker.prototype.getGui = function () {\n//     return this.eInput;\n//   };\n//   Datepicker.prototype.afterGuiAttached = function () {\n//     this.eInput.focus();\n//     this.eInput.select();\n//   };\n//   Datepicker.prototype.getValue = function () {\n//     return this.eInput.value;\n//   };\n//   Datepicker.prototype.destroy = function () {};\n//   Datepicker.prototype.isPopup = function () {\n//     return false;\n//   };\n//   return Datepicker;\n// }\n// const getDatePicker = () => {\n//   const fillZeros = (a) => {\n//     return Number(a) < 10 ? \"0\" + a : a;\n//   };\n//   const getFormattedDateOutput = (dateString) => {\n//     const dateParse = new Date(dateString);\n//     const dd = dateParse.getDate();\n//     const mm = dateParse.getMonth() + 1; //January is 0!\n//     const yyyy = dateParse.getFullYear();\n//     // console.log(dateString, dateParse);\n//     return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\n//   };\n//   function Datepicker() {}\n//   Datepicker.prototype.init = function (params) {\n//     this.textInput = React.createRef();\n//     const getFormattedDateMaterial = (dateString) => {\n//       const dateParse = new Date(\n//         dateString.split(\"/\")[2] +\n//           \"-\" +\n//           dateString.split(\"/\")[1] +\n//           \"-\" +\n//           dateString.split(\"/\")[0]\n//       );\n//       const dd = dateParse.getDate();\n//       const mm = dateParse.getMonth() + 1; //January is 0!\n//       const yyyy = dateParse.getFullYear();\n//       console.log(dateString, dateParse);\n//       return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\n//     };\n//     const eInput = React.createElement(TextField, {\n//       type: \"datetime-local\",\n//       defaultValue: getFormattedDateMaterial(params.value),\n//       ref: this.textInput,\n//       style: { width: \"95%\" },\n//     });\n//     this.div = document.createElement(\"div\");\n//     this.div.className = \"ag-cell-parent-append\";\n//     ReactDom.render(eInput, this.div);\n//   };\n//   Datepicker.prototype.getGui = function () {\n//     return this.div;\n//   };\n//   Datepicker.prototype.afterGuiAttached = function () {\n//     this.textInput.current.focus();\n//   };\n//   Datepicker.prototype.getValue = function () {\n//     return getFormattedDateOutput(\n//       this.textInput.current.querySelector(\"input\").value\n//     );\n//   };\n//   Datepicker.prototype.destroy = function () {};\n//   Datepicker.prototype.isPopup = function () {\n//     return false;\n//   };\n//   return Datepicker;\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Table = ({\n  tableUpdate,\n  rowData,\n  columnDefs,\n  height = 400,\n  getRowStyle\n}) => {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n  const location = useLocation();\n\n  const onGridReady = params => {\n    setGridApi(params.api); // props.setGrid(params.api);\n\n    setGridColumnApi(params.columnApi);\n    params.api.sizeColumnsToFit();\n  }; // useEffect(()=>{\n  //   gridApi.setColumnDefs(columnDefs)\n  // },[columnDefs])\n\n\n  const onFirstDataRendered = params => {\n    params.api.sizeColumnsToFit();\n    const allRowData = [];\n    params.api.forEachNode(node => allRowData.push(node.data));\n    debugger;\n    tableUpdate(allRowData);\n  };\n\n  const onGridSizeChanged = params => {\n    params.api.sizeColumnsToFit();\n  };\n\n  console.log(rowData);\n\n  const saveModifiedRows = params => {\n    debugger;\n    let currentlocation = location.pathname;\n    const allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n\n    if (currentlocation === \"/system_config/redundancy_info\" || currentlocation === \"/system_config/failure_mode\" || currentlocation === \"/system_config/additional_info\") {\n      tableUpdate(allRowData, params.data.id);\n    } else {\n      tableUpdate(allRowData);\n    }\n\n    console.log(allRowData); // add API call to save modified rows\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ag-theme-alpine\",\n    style: {\n      height: height,\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n      defaultColDef: {\n        flex: 1,\n        resizable: true,\n        filter: true,\n        sortable: true\n      },\n      rowData: rowData // columnDefs={props.columnDefs}\n      ,\n      onGridReady: onGridReady,\n      onFirstDataRendered: onFirstDataRendered,\n      onGridSizeChanged: onGridSizeChanged,\n      onCellValueChanged: saveModifiedRows,\n      tooltipShowDelay: \"0\",\n      components: {\n        datePicker: getDatePicker()\n      },\n      getRowStyle: getRowStyle,\n      children: columnDefs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Table, \"9Hko2JnWw2umJ8xT2J+qetHmduQ=\", false, function () {\n  return [useLocation];\n});\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["E:/NETRA PROJECT/Netra/netra/src/ui/Table/Table.js"],"names":["React","useEffect","useState","useLocation","AgGridReact","getDatePicker","ReactDom","TextField","Table","tableUpdate","rowData","columnDefs","height","getRowStyle","gridApi","setGridApi","gridColumnApi","setGridColumnApi","location","onGridReady","params","api","columnApi","sizeColumnsToFit","onFirstDataRendered","allRowData","forEachNode","node","push","data","onGridSizeChanged","console","log","saveModifiedRows","currentlocation","pathname","id","width","flex","resizable","filter","sortable","datePicker"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport \"./Table.css\";\r\nimport { getDatePicker } from \"./DataManagerTable\";\r\nimport ReactDom from \"react-dom\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\n// function getDatePicker() {\r\n//   function Datepicker() {}\r\n//   Datepicker.prototype.init = function (params) {\r\n//     this.eInput = document.createElement(\"input\");\r\n//     this.eInput.value = params.value;\r\n//     this.eInput.classList.add(\"ag-input\");\r\n//     this.eInput.style.height = \"100%\";\r\n//     $(this.eInput).datepicker({ dateFormat: \"dd/mm/yy\" });\r\n//     console.log(params);\r\n//   };\r\n//   Datepicker.prototype.getGui = function () {\r\n//     return this.eInput;\r\n//   };\r\n//   Datepicker.prototype.afterGuiAttached = function () {\r\n//     this.eInput.focus();\r\n//     this.eInput.select();\r\n//   };\r\n//   Datepicker.prototype.getValue = function () {\r\n//     return this.eInput.value;\r\n//   };\r\n//   Datepicker.prototype.destroy = function () {};\r\n//   Datepicker.prototype.isPopup = function () {\r\n//     return false;\r\n//   };\r\n//   return Datepicker;\r\n// }\r\n\r\n// const getDatePicker = () => {\r\n//   const fillZeros = (a) => {\r\n//     return Number(a) < 10 ? \"0\" + a : a;\r\n//   };\r\n//   const getFormattedDateOutput = (dateString) => {\r\n//     const dateParse = new Date(dateString);\r\n//     const dd = dateParse.getDate();\r\n//     const mm = dateParse.getMonth() + 1; //January is 0!\r\n//     const yyyy = dateParse.getFullYear();\r\n//     // console.log(dateString, dateParse);\r\n//     return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n//   };\r\n//   function Datepicker() {}\r\n//   Datepicker.prototype.init = function (params) {\r\n//     this.textInput = React.createRef();\r\n//     const getFormattedDateMaterial = (dateString) => {\r\n//       const dateParse = new Date(\r\n//         dateString.split(\"/\")[2] +\r\n//           \"-\" +\r\n//           dateString.split(\"/\")[1] +\r\n//           \"-\" +\r\n//           dateString.split(\"/\")[0]\r\n//       );\r\n//       const dd = dateParse.getDate();\r\n//       const mm = dateParse.getMonth() + 1; //January is 0!\r\n//       const yyyy = dateParse.getFullYear();\r\n//       console.log(dateString, dateParse);\r\n//       return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n//     };\r\n//     const eInput = React.createElement(TextField, {\r\n//       type: \"datetime-local\",\r\n//       defaultValue: getFormattedDateMaterial(params.value),\r\n//       ref: this.textInput,\r\n//       style: { width: \"95%\" },\r\n//     });\r\n//     this.div = document.createElement(\"div\");\r\n//     this.div.className = \"ag-cell-parent-append\";\r\n//     ReactDom.render(eInput, this.div);\r\n//   };\r\n//   Datepicker.prototype.getGui = function () {\r\n//     return this.div;\r\n//   };\r\n//   Datepicker.prototype.afterGuiAttached = function () {\r\n//     this.textInput.current.focus();\r\n//   };\r\n//   Datepicker.prototype.getValue = function () {\r\n//     return getFormattedDateOutput(\r\n//       this.textInput.current.querySelector(\"input\").value\r\n//     );\r\n//   };\r\n//   Datepicker.prototype.destroy = function () {};\r\n//   Datepicker.prototype.isPopup = function () {\r\n//     return false;\r\n//   };\r\n//   return Datepicker;\r\n// };\r\n\r\nconst Table = ({tableUpdate,rowData,columnDefs,height=400,getRowStyle}) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  const location = useLocation();\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n    // props.setGrid(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n  // useEffect(()=>{\r\n  //   gridApi.setColumnDefs(columnDefs)\r\n  // },[columnDefs])\r\n\r\n  const onFirstDataRendered = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n    const allRowData = [];\r\n    params.api.forEachNode((node) => allRowData.push(node.data));\r\n    debugger;\r\n    tableUpdate(allRowData);\r\n  };\r\n  const onGridSizeChanged = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n  };\r\nconsole.log(rowData)\r\n  const saveModifiedRows = (params) => {\r\n    debugger;\r\n    let currentlocation = location.pathname;\r\n\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    if (\r\n      currentlocation === \"/system_config/redundancy_info\" ||\r\n      currentlocation === \"/system_config/failure_mode\" ||\r\n      currentlocation === \"/system_config/additional_info\"\r\n    ) {\r\n      tableUpdate(allRowData, params.data.id);\r\n    } else {\r\n      tableUpdate(allRowData);\r\n    }\r\n    console.log(allRowData);\r\n    // add API call to save modified rows\r\n  };\r\n\r\n  return (\r\n    <div className=\"ag-theme-alpine\" style={{ height: height, width: \"100%\" }}>\r\n      <AgGridReact\r\n        defaultColDef={{\r\n          flex: 1,\r\n          resizable: true,\r\n          filter: true,\r\n          sortable: true,\r\n        }}\r\n        rowData={rowData}\r\n        // columnDefs={props.columnDefs}\r\n        onGridReady={onGridReady}\r\n        onFirstDataRendered={onFirstDataRendered}\r\n        onGridSizeChanged={onGridSizeChanged}\r\n        onCellValueChanged={saveModifiedRows}\r\n        tooltipShowDelay=\"0\"\r\n        components={{\r\n          datePicker: getDatePicker(),\r\n        }}\r\n        getRowStyle={getRowStyle}\r\n      >\r\n        {columnDefs}\r\n      </AgGridReact>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"]},"metadata":{},"sourceType":"module"}