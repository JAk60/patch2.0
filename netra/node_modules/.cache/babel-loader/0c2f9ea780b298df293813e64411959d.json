{"ast":null,"code":"var _jsxFileName = \"D:\\\\Netraaaa\\\\Netra\\\\netra\\\\src\\\\pages\\\\Data Manager\\\\selectEquipment\\\\selectEquipment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\nimport MultiSelect from \"./MultiSelect\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst icon = /*#__PURE__*/_jsxDEV(CheckBoxOutlineBlankIcon, {\n  fontSize: \"small\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 14\n}, this);\n\nconst checkedIcon = /*#__PURE__*/_jsxDEV(CheckBoxIcon, {\n  fontSize: \"small\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 21\n}, this);\n\nfunction SelectEquipment(props) {\n  _s();\n\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const list = props.list;\n\n  const handleClearOptions = () => setSelectedOptions([]);\n\n  return /*#__PURE__*/_jsxDEV(MultiSelect, {\n    items: list,\n    getOptionLabel: option => `${option.name}` // getOptionDisabled={option => option.name === \"foo\"}\n    ,\n    selectedValues: selectedOptions,\n    label: \"Select Equipment\" // selectAllLabel=\"Select all\"\n    ,\n    onUpdateSelectedEquipmentList: props.onUpdateSelectedEquipmentList,\n    onToggleOption: selectedOptions => setSelectedOptions(selectedOptions),\n    onClearOptions: handleClearOptions // onSelectAll={(isSelected) => {\n    //   if (isSelected) {\n    //     setSelectedOptions(list);\n    //     props.onUpdateSelectedEquipmentList(list);\n    //   } else {\n    //     handleClearOptions();\n    //     props.onUpdateSelectedEquipmentList([]);\n    //   }\n    // }}\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SelectEquipment, \"S24nRharoliKpDmkOrz7zqRL0rI=\");\n\n_c = SelectEquipment;\nexport default SelectEquipment;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectEquipment\");","map":{"version":3,"sources":["D:/Netraaaa/Netra/netra/src/pages/Data Manager/selectEquipment/selectEquipment.js"],"names":["React","useEffect","useState","CheckBoxOutlineBlankIcon","CheckBoxIcon","MultiSelect","icon","checkedIcon","SelectEquipment","props","selectedOptions","setSelectedOptions","list","handleClearOptions","option","name","onUpdateSelectedEquipmentList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,wBAAP,MAAqC,yCAArC;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,IAAI,gBAAG,QAAC,wBAAD;AAA0B,EAAA,QAAQ,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,QAAb;;AACA,MAAMC,WAAW,gBAAG,QAAC,YAAD;AAAc,EAAA,QAAQ,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,QAApB;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC9B,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAMU,IAAI,GAAGH,KAAK,CAACG,IAAnB;;AAEA,QAAMC,kBAAkB,GAAG,MAAMF,kBAAkB,CAAC,EAAD,CAAnD;;AACA,sBACE,QAAC,WAAD;AACE,IAAA,KAAK,EAAEC,IADT;AAEE,IAAA,cAAc,EAAGE,MAAD,IAAa,GAAEA,MAAM,CAACC,IAAK,EAF7C,CAGE;AAHF;AAIE,IAAA,cAAc,EAAEL,eAJlB;AAKE,IAAA,KAAK,EAAC,kBALR,CAME;AANF;AAOE,IAAA,6BAA6B,EAAED,KAAK,CAACO,6BAPvC;AAQE,IAAA,cAAc,EAAGN,eAAD,IAAqBC,kBAAkB,CAACD,eAAD,CARzD;AASE,IAAA,cAAc,EAAEG,kBATlB,CAUE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAlBF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GA3BQL,e;;KAAAA,e;AA6BT,eAAeA,eAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport MultiSelect from \"./MultiSelect\";\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nfunction SelectEquipment(props) {\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const list = props.list;\r\n\r\n  const handleClearOptions = () => setSelectedOptions([]);\r\n  return (\r\n    <MultiSelect\r\n      items={list}\r\n      getOptionLabel={(option) => `${option.name}`}\r\n      // getOptionDisabled={option => option.name === \"foo\"}\r\n      selectedValues={selectedOptions}\r\n      label=\"Select Equipment\"\r\n      // selectAllLabel=\"Select all\"\r\n      onUpdateSelectedEquipmentList={props.onUpdateSelectedEquipmentList}\r\n      onToggleOption={(selectedOptions) => setSelectedOptions(selectedOptions)}\r\n      onClearOptions={handleClearOptions}\r\n      // onSelectAll={(isSelected) => {\r\n      //   if (isSelected) {\r\n      //     setSelectedOptions(list);\r\n      //     props.onUpdateSelectedEquipmentList(list);\r\n      //   } else {\r\n      //     handleClearOptions();\r\n      //     props.onUpdateSelectedEquipmentList([]);\r\n      //   }\r\n      // }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default SelectEquipment;\r\n"]},"metadata":{},"sourceType":"module"}