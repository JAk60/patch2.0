{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\RUL\\\\RULPredictor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { TextField, Button, Dialog, DialogTitle, DialogContent, Grid } from \"@material-ui/core\";\nimport { Container } from \"@material-ui/core\";\nimport styles from \"./rul.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RULPredictor = ({\n  prevRul\n}) => {\n  _s();\n\n  const [sensorValue, setSensorValue] = useState(\"\");\n  const [prediction, setPrediction] = useState(\"\");\n  const [openDialog, setOpenDialog] = useState(false); // New state variables\n\n  const [p, setP] = useState(\"\");\n  const [F, setF] = useState(\"\");\n  const [T0, setT0] = useState(\"\");\n  const [confidenceLevel, setConfidenceLevel] = useState(\"\");\n\n  const handlePredict = async () => {\n    const {\n      operating_hours\n    } = prevRul;\n    const requestData = {\n      vc: parseFloat(sensorValue),\n      t0: parseFloat(T0),\n      tp: parseFloat(operating_hours),\n      p: parseFloat(p),\n      f: parseFloat(F),\n      confidence: parseFloat(confidenceLevel)\n    };\n\n    try {\n      const response = await fetch(\"/rul\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify(requestData)\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to get RUL prediction.\");\n      }\n\n      const data = await response.json();\n      setPrediction(data.remaining_life);\n      setOpenDialog(true);\n    } catch (error) {\n      console.error(\"Error fetching RUL prediction:\", error); // Handle the error state here if needed\n    }\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: styles.userSelection,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Remaining Useful Life (RUL)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"number\",\n              step: \"any\",\n              label: \"Sensor data\",\n              value: sensorValue,\n              onChange: e => setSensorValue(e.target.value),\n              required: true,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"number\",\n              step: \"any\",\n              label: \"P\",\n              value: p,\n              onChange: e => setP(e.target.value),\n              required: true,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"number\",\n              step: \"any\",\n              label: \"F\",\n              value: F,\n              onChange: e => setF(e.target.value),\n              required: true,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"number\",\n              step: \"any\",\n              label: \"T0\",\n              value: T0,\n              onChange: e => setT0(e.target.value),\n              required: true,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"number\",\n              step: \"any\",\n              label: \"Confidence Level\",\n              value: confidenceLevel,\n              onChange: e => setConfidenceLevel(e.target.value),\n              required: true,\n              fullWidth: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: handlePredict,\n            fullWidth: true,\n            style: {\n              marginTop: \"20px\"\n            },\n            children: \"Predict\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n            open: openDialog,\n            onClose: handleCloseDialog,\n            children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n              children: \"Predicted Remaining Useful Life\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n              children: prediction\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RULPredictor, \"Y2wzGNSldaa64ayQYj87xwx7g7c=\");\n\n_c = RULPredictor;\nexport default RULPredictor;\n\nvar _c;\n\n$RefreshReg$(_c, \"RULPredictor\");","map":{"version":3,"sources":["D:/NetraB/netra/src/pages/RUL/RULPredictor.js"],"names":["React","useState","TextField","Button","Dialog","DialogTitle","DialogContent","Grid","Container","styles","RULPredictor","prevRul","sensorValue","setSensorValue","prediction","setPrediction","openDialog","setOpenDialog","p","setP","F","setF","T0","setT0","confidenceLevel","setConfidenceLevel","handlePredict","operating_hours","requestData","vc","parseFloat","t0","tp","f","confidence","response","fetch","method","headers","Accept","body","JSON","stringify","ok","Error","data","json","remaining_life","error","console","handleCloseDialog","userSelection","e","target","value","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\nimport styles from \"./rul.module.css\";\r\n\r\nconst RULPredictor = ({ prevRul }) => {\r\n  const [sensorValue, setSensorValue] = useState(\"\");\r\n  const [prediction, setPrediction] = useState(\"\");\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  // New state variables\r\n  const [p, setP] = useState(\"\");\r\n  const [F, setF] = useState(\"\");\r\n  const [T0, setT0] = useState(\"\");\r\n  const [confidenceLevel, setConfidenceLevel] = useState(\"\");\r\n\r\n  const handlePredict = async () => {\r\n    const { operating_hours } = prevRul;\r\n    const requestData = {\r\n      vc: parseFloat(sensorValue),\r\n      t0: parseFloat(T0),\r\n      tp: parseFloat(operating_hours),\r\n      p: parseFloat(p),\r\n      f: parseFloat(F),\r\n      confidence: parseFloat(confidenceLevel),\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\"/rul\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n        body: JSON.stringify(requestData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Failed to get RUL prediction.\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      setPrediction(data.remaining_life);\r\n      setOpenDialog(true);\r\n    } catch (error) {\r\n      console.error(\"Error fetching RUL prediction:\", error);\r\n      // Handle the error state here if needed\r\n    }\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n  };\r\n\r\n  return (\r\n    <Container className={styles.userSelection}>\r\n      <Box >\r\n            <h1>Remaining Useful Life (RUL)</h1>\r\n        <Grid item xs={12} sm={6} md={4}>\r\n          <div>\r\n            <div>\r\n              <TextField\r\n                type=\"number\"\r\n                step=\"any\"\r\n                label=\"Sensor data\"\r\n                value={sensorValue}\r\n                onChange={(e) => setSensorValue(e.target.value)}\r\n                required\r\n                fullWidth\r\n              />\r\n            </div>\r\n            <div>\r\n              <TextField\r\n                type=\"number\"\r\n                step=\"any\"\r\n                label=\"P\"\r\n                value={p}\r\n                onChange={(e) => setP(e.target.value)}\r\n                required\r\n                fullWidth\r\n              />\r\n            </div>\r\n            <div>\r\n              <TextField\r\n                type=\"number\"\r\n                step=\"any\"\r\n                label=\"F\"\r\n                value={F}\r\n                onChange={(e) => setF(e.target.value)}\r\n                required\r\n                fullWidth\r\n              />\r\n            </div>\r\n            <div>\r\n              <TextField\r\n                type=\"number\"\r\n                step=\"any\"\r\n                label=\"T0\"\r\n                value={T0}\r\n                onChange={(e) => setT0(e.target.value)}\r\n                required\r\n                fullWidth\r\n              />\r\n            </div>\r\n            <div>\r\n              <TextField\r\n                type=\"number\"\r\n                step=\"any\"\r\n                label=\"Confidence Level\"\r\n                value={confidenceLevel}\r\n                onChange={(e) => setConfidenceLevel(e.target.value)}\r\n                required\r\n                fullWidth\r\n              />\r\n            </div>\r\n            {/* End of new input fields */}\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handlePredict}\r\n              fullWidth\r\n              style={{marginTop: \"20px\"}}\r\n            >\r\n              Predict\r\n            </Button>\r\n            <Dialog open={openDialog} onClose={handleCloseDialog}>\r\n              <DialogTitle>Predicted Remaining Useful Life</DialogTitle>\r\n              <DialogContent>{prediction}</DialogContent>\r\n            </Dialog>\r\n          </div>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default RULPredictor;\r\n"]},"metadata":{},"sourceType":"module"}