{"ast":null,"code":"var _jsxFileName = \"D:\\\\NETRA -P\\\\Netra\\\\netra\\\\src\\\\pages\\\\dragNdrop\\\\Layout\\\\layout.js\",\n    _s = $RefreshSig$();\n\nimport ComponentDetails from \"../ComponentDetails/ComponentDetails\";\nimport Flow from \"../Flow/flow\";\nimport classes from \"./layout.module.css\";\nimport Sidebar from \"../SideBar/Sidebar\";\nimport { elementActions } from \"../../../store/elements\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport UserSelection from \"../../../ui/userSelection/userSelection\";\nimport { useEffect, useRef, useState } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete/Autocomplete\";\nimport { TextField, Button, Select } from \"@material-ui/core\";\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\nimport { v4 as uuid } from \"uuid\";\nimport { useHistory } from \"react-router\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CustomizedSnackbars from \"../../../ui/CustomSnackBar\";\nimport { filter } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Layout = props => {\n  _s();\n\n  const [isNodeAddedMap, setIsNodeAddedMap] = useState({});\n  useEffect(() => {\n    fetch(\"/fetch_tasks\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setTaskNames(data['tasks']);\n      console.log(data['tasks']);\n    });\n  }, []);\n  const [taskNames, setTaskNames] = useState([]); // Snackbar\n\n  const [SnackBarMessage, setSnackBarMessage] = useState({\n    severity: \"error\",\n    message: \"This is awesome\",\n    showSnackBar: false\n  });\n\n  const onHandleSnackClose = () => {\n    setSnackBarMessage({\n      severity: \"error\",\n      message: \"Please Add Systemss\",\n      showSnackBar: false\n    });\n  };\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const allElements = useSelector(state => state.elements);\n  const components = useSelector(state => state.userSelection.componentsData);\n  const currentSelection = useSelector(state => state.userSelection.currentSelection); // console.log(components);\n\n  const onSaveHandler = () => {\n    // const stringObject = JSON.stringify(allElements);\n    // localStorage.setItem(\"flow\", stringObject);\n    // console.log(prompt(\"Enter Task Name\"))\n    //SAVE TO DB LOGIC - NOW USING SAVE TO FILE\n    // let edges=allElements.elements.filter(data=>data.dtype==='edge')\n    // let finalData=allElements.elements.filter(data=>data.dtype==='node').map(\n    //   node=>{\n    //     if(node.type==='component'){\n    //       let edge=edges.filter(edge=>edge.target===node.id)[0]\n    //       let newnode={...node,parentId:edge.source,equipmentId:components.filter(x=>x.name===node.data.label)[0].id}\n    //       return newnode\n    //     }\n    //     else if(node.type==='systemNode'){\n    //       let newnode={...node,data:{label:taskName}}\n    //       return newnode\n    //     }\n    //   }\n    // )\n    // console.log(finalData);\n    //SAVING TO FILE DIRECTLY\n    debugger;\n    fetch(\"/save_task_configuration\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        taskData: allElements['elements'],\n        taskName: taskName\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      if (data.error) {\n        setSnackBarMessage({\n          severity: \"warning\",\n          message: data.error.message,\n          // Access the error message here\n          showSnackBar: true\n        });\n      } else {\n        setSnackBarMessage({\n          severity: \"success\",\n          message: data.message,\n          showSnackBar: true\n        });\n      }\n    }).catch(error => {\n      setSnackBarMessage({\n        severity: \"error\",\n        message: error.message,\n        // Update this line to access the error message\n        showSnackBar: true\n      });\n    });\n    setOpen(false);\n  };\n\n  const onLoadHandler = () => {\n    console.log(loadname); // const ele = JSON.parse(localStorage.getItem(\"flow\"));\n\n    fetch(\"/load_task_configuration\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        taskName: loadname\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      dispatch(elementActions.onRestoreHandler({\n        elements: data\n      }));\n      setSnackBarMessage({\n        severity: \"success\",\n        message: \"Data loaded successfully\",\n        showSnackBar: true\n      });\n    }).catch(error => {\n      setSnackBarMessage({\n        severity: \"error\",\n        message: \"Some Error Occured. \" + error,\n        showSnackBar: true\n      });\n    });\n    handleLoadClose();\n  };\n\n  const [value, setValue] = useState([]);\n  const systemData = useSelector(state => state.treeData.treeData);\n\n  const handleChange = (event, newValue) => {\n    console.log(newValue); // alert(newValue);\n\n    setValue(newValue);\n  };\n\n  console.log(value);\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n  const [taskName, setTaskName] = useState(\"\");\n  const customSelectData = useSelector(state => state.userSelection.userSelection); // const currentSelection = useSelector(\n  //   (state) => state.userSelection.currentSelection\n  // );\n\n  const options = customSelectData[\"equipmentName\"];\n  const ship_name = currentSelection[\"shipName\"]; // console.log(currentSelection)\n\n  const AddNodes = () => {\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect(); // Check if \"Task Name\" node has already been added\n\n    const isTaskNameAdded = isNodeAddedMap[\"Task Name\"];\n\n    if (!isTaskNameAdded) {\n      // Create the \"Task Name\" node\n      const newNodeTaskName = {\n        id: uuid(),\n        type: \"systemNode\",\n        position: reactFlowInstance.project({\n          x: reactFlowBounds.left + 600,\n          y: reactFlowBounds.top + 600\n        }),\n        data: {\n          label: \"Task Name\"\n        },\n        dtype: \"node\",\n        shipName: ship_name\n      };\n      dispatch(elementActions.addElement({\n        ele: newNodeTaskName\n      }));\n      setIsNodeAddedMap(prevMap => ({ ...prevMap,\n        \"Task Name\": true\n      }));\n    }\n\n    let i = 50; // Initialize i for positioning equipment nodes\n\n    value.forEach(equipment => {\n      if (!isNodeAddedMap[equipment]) {\n        // Create equipment nodes\n        const style = {\n          border: \"1px solid black\",\n          borderRadius: \"5px\",\n          background: \"#DCFFC0\",\n          borderColor: \"black\",\n          padding: \"20px\"\n        };\n        const position = reactFlowInstance.project({\n          x: reactFlowBounds.left + i,\n          y: reactFlowBounds.top + i\n        });\n        const newNodeEquipment = {\n          id: uuid(),\n          type: \"component\",\n          position,\n          data: {\n            label: equipment\n          },\n          dtype: \"node\",\n          style: style,\n          shipName: ship_name,\n          metaData: currentSelection\n        };\n        dispatch(elementActions.addElement({\n          ele: newNodeEquipment\n        }));\n        setIsNodeAddedMap(prevMap => ({ ...prevMap,\n          [equipment]: true\n        }));\n      }\n\n      i += 50; // Increment the positioning index for the next node\n    });\n  };\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickOpen = () => setOpen(true);\n\n  const handleClose = () => setOpen(false);\n\n  const [loadopen, setLoadOpen] = useState(false);\n\n  const handleLoadClickOpen = () => setLoadOpen(true);\n\n  const handleLoadClose = () => setLoadOpen(false);\n\n  const [loadname, setLoadName] = useState('');\n  const [showDetails, setShowDetails] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.parent,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.flow_div,\n      children: /*#__PURE__*/_jsxDEV(Flow, {\n        reactFlowInstance: reactFlowInstance,\n        reactFlowWrapper: reactFlowWrapper,\n        setReactFlowInstance: setReactFlowInstance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.sidebar,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.buttonDiv,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => history.push(\"/\"),\n          className: classes.savebtn,\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleClickOpen,\n          className: classes.restorebtn,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleLoadClickOpen,\n          className: classes.restorebtn,\n          children: \"Load\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), showDetails ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setShowDetails(false);\n          },\n          className: classes.restorebtn,\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setShowDetails(true);\n          },\n          className: classes.restorebtn,\n          children: \"Component Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          maxWidth: \"sm\",\n          fullWidth: true,\n          open: open,\n          onClose: handleClose,\n          \"aria-labelledby\": \"form-dialog-title\",\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            id: \"form-dialog-title\",\n            children: \"Enter task name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: /*#__PURE__*/_jsxDEV(TextField, {\n              autoFocus: true,\n              margin: \"dense\",\n              id: \"name\",\n              label: \"Task name\",\n              type: \"text\",\n              fullWidth: true,\n              value: taskName,\n              onChange: e => setTaskName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleClose,\n              color: \"primary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onSaveHandler,\n              color: \"primary\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          maxWidth: \"sm\",\n          fullWidth: true,\n          open: loadopen,\n          onClose: handleLoadClose,\n          \"aria-labelledby\": \"form-dialog-title\",\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            id: \"form-dialog-title\",\n            children: \"Select Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            dividers: true,\n            children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n              value: loadname,\n              options: taskNames,\n              onChange: (value, newValue) => setLoadName(newValue),\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                variant: \"standard\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: handleLoadClose,\n              color: \"primary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onLoadHandler,\n              color: \"primary\",\n              children: \"Load\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 7\n      }, this), showDetails ? /*#__PURE__*/_jsxDEV(ComponentDetails, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(UserSelection, {\n          alignment: \"vertical\",\n          inputWidth: \"250px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 61\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n          multiple: true,\n          options: options //value={value}\n          ,\n          onChange: handleChange // groupBy={(option) => option.parentName}\n          // getOptionLabel={(option) => option.name}\n          ,\n          style: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            label: \"Select Equipments\",\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: () => AddNodes(),\n          children: \"Load Equipments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), SnackBarMessage.showSnackBar && /*#__PURE__*/_jsxDEV(CustomizedSnackbars, {\n      message: SnackBarMessage,\n      onHandleClose: onHandleSnackClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Layout, \"HmvKBGkOCY0SAbzjtfm43GThFIU=\", false, function () {\n  return [useHistory, useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Layout;\nexport default Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/src/pages/dragNdrop/Layout/layout.js"],"names":["ComponentDetails","Flow","classes","Sidebar","elementActions","useDispatch","useSelector","UserSelection","useEffect","useRef","useState","Autocomplete","TextField","Button","Select","treeDataActions","v4","uuid","useHistory","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","CustomizedSnackbars","filter","Layout","props","isNodeAddedMap","setIsNodeAddedMap","fetch","method","headers","Accept","then","res","json","data","setTaskNames","console","log","taskNames","SnackBarMessage","setSnackBarMessage","severity","message","showSnackBar","onHandleSnackClose","history","dispatch","allElements","state","elements","components","userSelection","componentsData","currentSelection","onSaveHandler","body","JSON","stringify","taskData","taskName","error","catch","setOpen","onLoadHandler","loadname","onRestoreHandler","handleLoadClose","value","setValue","systemData","treeData","handleChange","event","newValue","reactFlowWrapper","reactFlowInstance","setReactFlowInstance","setTaskName","customSelectData","options","ship_name","AddNodes","reactFlowBounds","current","getBoundingClientRect","isTaskNameAdded","newNodeTaskName","id","type","position","project","x","left","y","top","label","dtype","shipName","addElement","ele","prevMap","i","forEach","equipment","style","border","borderRadius","background","borderColor","padding","newNodeEquipment","metaData","open","handleClickOpen","handleClose","loadopen","setLoadOpen","handleLoadClickOpen","setLoadName","showDetails","setShowDetails","parent","flow_div","sidebar","buttonDiv","push","savebtn","restorebtn","e","target","params","width"],"mappings":"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","sourcesContent":["import ComponentDetails from \"../ComponentDetails/ComponentDetails\";\r\nimport Flow from \"../Flow/flow\";\r\nimport classes from \"./layout.module.css\";\r\nimport Sidebar from \"../SideBar/Sidebar\";\r\nimport { elementActions } from \"../../../store/elements\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport UserSelection from \"../../../ui/userSelection/userSelection\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete/Autocomplete\";\r\nimport { TextField,Button, Select } from \"@material-ui/core\";\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CustomizedSnackbars from \"../../../ui/CustomSnackBar\";\r\nimport { filter } from \"lodash\";\r\n\r\nconst Layout = (props) => {\r\n  const [isNodeAddedMap, setIsNodeAddedMap] = useState({});\r\n  useEffect(()=>{\r\n    fetch(\"/fetch_tasks\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        \r\n        setTaskNames(data['tasks'])\r\n        console.log(data['tasks'])\r\n      });\r\n  },[])\r\n  const [taskNames,setTaskNames]=useState([])\r\n  // Snackbar\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const history=useHistory()\r\n  const dispatch = useDispatch();\r\n  const allElements = useSelector((state) => state.elements);\r\n  const components = useSelector((state) => state.userSelection.componentsData);\r\n  const currentSelection = useSelector((state) => state.userSelection.currentSelection);\r\n  // console.log(components);\r\n  const onSaveHandler = () => {\r\n    // const stringObject = JSON.stringify(allElements);\r\n    // localStorage.setItem(\"flow\", stringObject);\r\n    // console.log(prompt(\"Enter Task Name\"))\r\n\r\n    //SAVE TO DB LOGIC - NOW USING SAVE TO FILE\r\n    // let edges=allElements.elements.filter(data=>data.dtype==='edge')\r\n    // let finalData=allElements.elements.filter(data=>data.dtype==='node').map(\r\n    //   node=>{\r\n    //     if(node.type==='component'){\r\n    //       let edge=edges.filter(edge=>edge.target===node.id)[0]\r\n    //       let newnode={...node,parentId:edge.source,equipmentId:components.filter(x=>x.name===node.data.label)[0].id}\r\n    //       return newnode\r\n    //     }\r\n    //     else if(node.type==='systemNode'){\r\n    //       let newnode={...node,data:{label:taskName}}\r\n    //       return newnode\r\n    //     }\r\n    //   }\r\n    // )\r\n    // console.log(finalData);\r\n\r\n    //SAVING TO FILE DIRECTLY\r\n    debugger;\r\n    fetch(\"/save_task_configuration\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        taskData: allElements['elements'],\r\n        taskName: taskName\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.error) {\r\n          setSnackBarMessage({\r\n            severity: \"warning\",\r\n            message: data.error.message, // Access the error message here\r\n            showSnackBar: true,\r\n          });\r\n        } else {\r\n          setSnackBarMessage({\r\n            severity: \"success\",\r\n            message: data.message,\r\n            showSnackBar: true,\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setSnackBarMessage({\r\n          severity: \"error\",\r\n          message: error.message, // Update this line to access the error message\r\n          showSnackBar: true,\r\n        });\r\n      });\r\n    setOpen(false);\r\n    }    \r\n  const onLoadHandler = () => {\r\n    console.log(loadname);\r\n    // const ele = JSON.parse(localStorage.getItem(\"flow\"));\r\n\r\n    fetch(\"/load_task_configuration\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        taskName:loadname\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        dispatch(elementActions.onRestoreHandler({ elements: data }));\r\n        setSnackBarMessage({\r\n          severity: \"success\",\r\n          message: \"Data loaded successfully\",\r\n          showSnackBar: true,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setSnackBarMessage({\r\n          severity: \"error\",\r\n          message: \"Some Error Occured. \" + error,\r\n          showSnackBar: true,\r\n        })\r\n      })\r\n      handleLoadClose()\r\n  };\r\n  const [value, setValue] = useState([]);\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const handleChange = (event, newValue) => {\r\n    console.log(newValue);\r\n    // alert(newValue);\r\n    setValue(newValue);\r\n  };\r\n  console.log(value);\r\n  const reactFlowWrapper = useRef(null);\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n  const [taskName,setTaskName] = useState(\"\")\r\n  const customSelectData = useSelector(\r\n    (state) => state.userSelection.userSelection\r\n  );\r\n  // const currentSelection = useSelector(\r\n  //   (state) => state.userSelection.currentSelection\r\n  // );\r\n  const options=customSelectData[\"equipmentName\"]\r\n  const ship_name = currentSelection[\"shipName\"]\r\n  // console.log(currentSelection)\r\n  const AddNodes = () => {\r\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n  \r\n    // Check if \"Task Name\" node has already been added\r\n    const isTaskNameAdded = isNodeAddedMap[\"Task Name\"];\r\n  \r\n    if (!isTaskNameAdded) {\r\n      // Create the \"Task Name\" node\r\n      const newNodeTaskName = {\r\n        id: uuid(),\r\n        type: \"systemNode\",\r\n        position: reactFlowInstance.project({\r\n          x: reactFlowBounds.left + 600,\r\n          y: reactFlowBounds.top + 600,\r\n        }),\r\n        data: { label: \"Task Name\" },\r\n        dtype: \"node\",\r\n        shipName: ship_name,\r\n      };\r\n  \r\n      dispatch(elementActions.addElement({ ele: newNodeTaskName }));\r\n      setIsNodeAddedMap((prevMap) => ({ ...prevMap, \"Task Name\": true }));\r\n    }\r\n  \r\n    let i = 50; // Initialize i for positioning equipment nodes\r\n    value.forEach((equipment) => {\r\n      if (!isNodeAddedMap[equipment]) {\r\n        // Create equipment nodes\r\n        const style = {\r\n          border: \"1px solid black\",\r\n          borderRadius: \"5px\",\r\n          background: \"#DCFFC0\",\r\n          borderColor: \"black\",\r\n          padding: \"20px\",\r\n        };\r\n  \r\n        const position = reactFlowInstance.project({\r\n          x: reactFlowBounds.left + i,\r\n          y: reactFlowBounds.top + i,\r\n        });\r\n  \r\n        const newNodeEquipment = {\r\n          id: uuid(),\r\n          type: \"component\",\r\n          position,\r\n          data: { label: equipment },\r\n          dtype: \"node\",\r\n          style: style,\r\n          shipName: ship_name,\r\n          metaData: currentSelection,\r\n        };\r\n  \r\n        dispatch(elementActions.addElement({ ele: newNodeEquipment }));\r\n        setIsNodeAddedMap((prevMap) => ({ ...prevMap, [equipment]: true }));\r\n      }\r\n  \r\n      i += 50; // Increment the positioning index for the next node\r\n    });\r\n  };\r\n  \r\n\r\n  const [open, setOpen] = useState(false);\r\n  const handleClickOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const [loadopen, setLoadOpen] = useState(false);\r\n  const handleLoadClickOpen = () => setLoadOpen(true);\r\n  const handleLoadClose = () => setLoadOpen(false);\r\n  const [loadname,setLoadName]=useState('')\r\n  const [showDetails,setShowDetails]=useState(false)\r\n\r\n  return (\r\n    <div className={classes.parent}>\r\n        {/* <div className={classes.text_div}>\r\n          <Sidebar></Sidebar>\r\n          <div className={classes.buttonDiv}>\r\n          <button onClick={onSaveHandler} className={classes.savebtn}>\r\n            Save\r\n          </button>\r\n          <button onClick={onRestoreHandler} className={classes.restorebtn}>\r\n            Restore\r\n          </button>\r\n        </div>\r\n        </div> */}\r\n        <div className={classes.flow_div}>\r\n          <Flow reactFlowInstance={reactFlowInstance} reactFlowWrapper={reactFlowWrapper} setReactFlowInstance={setReactFlowInstance}></Flow>\r\n        </div>\r\n      <div className={classes.sidebar}>\r\n      <div className={classes.buttonDiv}>\r\n          <button onClick={()=>history.push(\"/\")} className={classes.savebtn}>\r\n            Home\r\n          </button>\r\n          <button onClick={handleClickOpen} className={classes.restorebtn}>\r\n            Save\r\n          </button>\r\n          <button onClick={handleLoadClickOpen} className={classes.restorebtn}>\r\n            Load\r\n          </button>\r\n          {showDetails?<button onClick={()=>{setShowDetails(false)}} className={classes.restorebtn}>\r\n            Back\r\n          </button>:<button onClick={()=>{setShowDetails(true)}} className={classes.restorebtn}>\r\n            Component Details\r\n          </button>}\r\n          {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Save\r\n      </Button> */}\r\n      <Dialog maxWidth='sm' fullWidth open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Enter task name</DialogTitle>\r\n        <DialogContent>\r\n          \r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Task name\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={taskName}\r\n            onChange={(e)=>setTaskName(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={onSaveHandler} color=\"primary\">\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog maxWidth='sm' fullWidth open={loadopen} onClose={handleLoadClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Select Task</DialogTitle>\r\n        <DialogContent dividers>\r\n          \r\n          <Autocomplete\r\n            value={loadname}\r\n            options={taskNames}\r\n            onChange={(value,newValue)=>setLoadName(newValue)}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"standard\" />\r\n            )}\r\n            />\r\n            \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleLoadClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={onLoadHandler} color=\"primary\">\r\n            Load\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n     \r\n        </div>\r\n        {/* <p>Here the details of each component goes!!</p> */}\r\n       {showDetails?<ComponentDetails></ComponentDetails>:<><UserSelection alignment=\"vertical\" inputWidth=\"250px\"/>\r\n        \r\n        <Autocomplete\r\n        multiple\r\n      options={options}\r\n      //value={value}\r\n      onChange={handleChange}\r\n      // groupBy={(option) => option.parentName}\r\n      // getOptionLabel={(option) => option.name}\r\n      style={{ width: 300 }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Select Equipments\"\r\n          variant=\"outlined\"\r\n        />\r\n        \r\n      )}  \r\n    />\r\n    <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={()=>AddNodes()}\r\n              >\r\n                Load Equipments\r\n              </Button>\r\n    </>}\r\n    \r\n    \r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default Layout;\r\n"]},"metadata":{},"sourceType":"module"}