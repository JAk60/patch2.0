{"ast":null,"code":"var _jsxFileName = \"E:\\\\NETRA PROJECT\\\\Netra\\\\netra\\\\src\\\\pages\\\\Data Manager\\\\maintenanceData\\\\maintenanceData.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Table from \"../../../ui/Table/DataManagerTable\";\nimport { AgGridColumn } from \"ag-grid-react\";\nimport { Button } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport styles from \"../DataManager.module.css\";\nimport EquipmentName from \"./EquipmentName\";\nimport { useSelector } from \"react-redux\";\nimport { v4 as uuid } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MaintenanceData = props => {\n  _s();\n\n  const [gridApi, setGridApi] = useState(null);\n  const systemData = useSelector(state => state.treeData.treeData);\n  let finalDataTableData = [];\n  const [rowState, setRows] = useState([]);\n  let selectedOptionId = \"\"; // const\n\n  const setIdToDropdownOption = id => {\n    selectedOptionId = id;\n  };\n\n  const MaintColumns = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"LMU\",\n    headerName: \"Equipment Name\",\n    headerTooltip: \"Equipment Name\",\n    cellEditorFramework: EquipmentName,\n    minWidth: 100,\n    editable: true // keyCreator={{ values: systemData.map((x) => x.id) }}\n    ,\n    cellEditorParams: {\n      setId: setIdToDropdownOption\n    } // cellEditorParams={{ values: systemData.map((x) => x.name) }}\n    ,\n    checkboxSelection: true // cellEditor=\"agSelectCellEditor\"\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"EventType\",\n    headerName: \"EventType\",\n    headerTooltip: \"EventType\",\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: [\"Preventive\", \"Breakdown\"]\n    },\n    minWidth: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"Date\",\n    headerName: \"Date\",\n    headerTooltip: \"Date\",\n    width: 200,\n    cellEditor: \"datePicker\",\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"MaintenanceType\",\n    headerName: \"Maintenance Type\",\n    headerTooltip: \"Maintenance Type\",\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: [\"Replaced\", \"Repaired\"]\n    },\n    minWidth: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"ReplaceType\",\n    headerName: \"Replace Component Type\",\n    headerTooltip: \"Replace Component Type\",\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: [\"New\", \"Refurbished\", \"Cannibalised\", \"Duplicate\"]\n    },\n    minWidth: 100,\n    editable: params => {\n      return params.data.ReplaceType === \"NA\" ? false : true;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"CannibalisedAge\",\n    headerName: \"Cannibalised Age\",\n    headerTooltip: \"Cannibalised Age\",\n    type: \"number\",\n    minWidth: 100,\n    editable: params => {\n      return params.data.CannibalisedAge === \"NA\" ? false : true;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"MaintenanceDuration\",\n    headerName: \"Maintenance Duration\",\n    headerTooltip: \"Maintenance Duration\",\n    type: \"nmber\",\n    minWidt: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"FM\",\n    headerName: \"Failure Mode\",\n    headerTooltip: \"Failure Mode\",\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: [\"Failure Mode 1\", \"Failure Mode 2\", \"Failure Mode 3\"]\n    },\n    minWidth: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"Remark\",\n    headerName: \"Remark\",\n    headerTooltip: \"Remark\",\n    cellEditor: \"agLargeTextCellEditor\",\n    minWidth: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this)];\n\n  const AddRow = () => {\n    var _systemData$, _systemData$2;\n\n    let newRowData = [{\n      LMU: (_systemData$ = systemData[0]) === null || _systemData$ === void 0 ? void 0 : _systemData$.name,\n      component_id: (_systemData$2 = systemData[0]) === null || _systemData$2 === void 0 ? void 0 : _systemData$2.id,\n      EventType: \"Preventive\",\n      Date: \"10/08/2021\",\n      MaintainanceType: \"Replaced\",\n      ReplaceType: \"New\",\n      CannibalisedAge: \"NA\",\n      MaintenanceDuration: \"0\",\n      FM: \"Failure Mode 1\",\n      Remark: \"Enter remarks here...\",\n      id: uuid()\n    }];\n    gridApi.applyTransaction({\n      add: newRowData\n    });\n    onGridAddDeleteSupport();\n  };\n\n  const deleteRows = () => {\n    const selectedRows = gridApi.getSelectedRows();\n    gridApi.applyTransaction({\n      remove: selectedRows\n    });\n    onGridAddDeleteSupport();\n  };\n\n  const onGridAddDeleteSupport = () => {\n    let allRowData = [];\n    gridApi.forEachNode(node => allRowData.push(node.data));\n    tableUpdate(allRowData, undefined);\n  };\n\n  const tableUpdate = (data, id) => {\n    // alert(id);\n    // alert(selectedOptionId);\n    finalDataTableData = data;\n\n    if (id) {\n      finalDataTableData.filter(x => x.id === id)[0][\"component_id\"] = selectedOptionId;\n    }\n\n    props.tableUpdate(finalDataTableData, \"maintData\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Table, {\n      columnDefs: MaintColumns,\n      setGrid: setGridApi,\n      gridApi: gridApi,\n      rowData: rowState // selectedOptionId={selectedOptionId}\n      ,\n      tableUpdate: tableUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.tableFooter,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 22\n        }, this),\n        color: \"secondary\",\n        onClick: () => AddRow(),\n        children: \"Add Row\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 22\n        }, this),\n        color: \"secondary\",\n        onClick: () => deleteRows(),\n        children: \"Delete Rows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MaintenanceData, \"hmpShrfi4gNqJve3F3BEcU9kefM=\", false, function () {\n  return [useSelector];\n});\n\n_c = MaintenanceData;\nexport default MaintenanceData;\n\nvar _c;\n\n$RefreshReg$(_c, \"MaintenanceData\");","map":{"version":3,"sources":["E:/NETRA PROJECT/Netra/netra/src/pages/Data Manager/maintenanceData/maintenanceData.js"],"names":["React","useState","Table","AgGridColumn","Button","AddIcon","IconButton","DeleteIcon","styles","EquipmentName","useSelector","v4","uuid","MaintenanceData","props","gridApi","setGridApi","systemData","state","treeData","finalDataTableData","rowState","setRows","selectedOptionId","setIdToDropdownOption","id","MaintColumns","setId","values","params","data","ReplaceType","CannibalisedAge","AddRow","newRowData","LMU","name","component_id","EventType","Date","MaintainanceType","MaintenanceDuration","FM","Remark","applyTransaction","add","onGridAddDeleteSupport","deleteRows","selectedRows","getSelectedRows","remove","allRowData","forEachNode","node","push","tableUpdate","undefined","filter","x","tableFooter"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\nimport EquipmentName from \"./EquipmentName\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst MaintenanceData = (props) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  let finalDataTableData = [];\r\n  const [rowState, setRows] = useState([]);\r\n  let selectedOptionId = \"\";\r\n  // const\r\n  const setIdToDropdownOption = (id) => {\r\n    selectedOptionId = id;\r\n  };\r\n  const MaintColumns = [\r\n    <AgGridColumn\r\n      field=\"LMU\"\r\n      headerName=\"Equipment Name\"\r\n      headerTooltip=\"Equipment Name\"\r\n      cellEditorFramework={EquipmentName}\r\n      minWidth={100}\r\n      editable={true}\r\n      // keyCreator={{ values: systemData.map((x) => x.id) }}\r\n      cellEditorParams={{ setId: setIdToDropdownOption }}\r\n      // cellEditorParams={{ values: systemData.map((x) => x.name) }}\r\n      checkboxSelection={true}\r\n      // cellEditor=\"agSelectCellEditor\"\r\n    />,\r\n    <AgGridColumn\r\n      field=\"EventType\"\r\n      headerName=\"EventType\"\r\n      headerTooltip=\"EventType\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"Preventive\", \"Breakdown\"],\r\n      }}\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Date\"\r\n      headerName=\"Date\"\r\n      headerTooltip=\"Date\"\r\n      width={200}\r\n      cellEditor=\"datePicker\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"MaintenanceType\"\r\n      headerName=\"Maintenance Type\"\r\n      headerTooltip=\"Maintenance Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"Replaced\", \"Repaired\"] }}\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"ReplaceType\"\r\n      headerName=\"Replace Component Type\"\r\n      headerTooltip=\"Replace Component Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"New\", \"Refurbished\", \"Cannibalised\", \"Duplicate\"],\r\n      }}\r\n      minWidth={100}\r\n      editable={(params) => {\r\n        return params.data.ReplaceType === \"NA\" ? false : true;\r\n      }}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"CannibalisedAge\"\r\n      headerName=\"Cannibalised Age\"\r\n      headerTooltip=\"Cannibalised Age\"\r\n      type=\"number\"\r\n      minWidth={100}\r\n      editable={(params) => {\r\n        return params.data.CannibalisedAge === \"NA\" ? false : true;\r\n      }}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"MaintenanceDuration\"\r\n      headerName=\"Maintenance Duration\"\r\n      headerTooltip=\"Maintenance Duration\"\r\n      type=\"nmber\"\r\n      minWidt={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"FM\"\r\n      headerName=\"Failure Mode\"\r\n      headerTooltip=\"Failure Mode\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"Failure Mode 1\", \"Failure Mode 2\", \"Failure Mode 3\"],\r\n      }}\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Remark\"\r\n      headerName=\"Remark\"\r\n      headerTooltip=\"Remark\"\r\n      cellEditor=\"agLargeTextCellEditor\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const AddRow = () => {\r\n    let newRowData = [\r\n      {\r\n        LMU: systemData[0]?.name,\r\n        component_id: systemData[0]?.id,\r\n        EventType: \"Preventive\",\r\n        Date: \"10/08/2021\",\r\n        MaintainanceType: \"Replaced\",\r\n        ReplaceType: \"New\",\r\n        CannibalisedAge: \"NA\",\r\n        MaintenanceDuration: \"0\",\r\n        FM: \"Failure Mode 1\",\r\n        Remark: \"Enter remarks here...\",\r\n        id: uuid(),\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: newRowData,\r\n    });\r\n    onGridAddDeleteSupport();\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    onGridAddDeleteSupport();\r\n  };\r\n  const onGridAddDeleteSupport = () => {\r\n    let allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    tableUpdate(allRowData, undefined);\r\n  };\r\n  const tableUpdate = (data, id) => {\r\n    // alert(id);\r\n    // alert(selectedOptionId);\r\n    finalDataTableData = data;\r\n    if (id) {\r\n      finalDataTableData.filter((x) => x.id === id)[0][\"component_id\"] =\r\n        selectedOptionId;\r\n    }\r\n    props.tableUpdate(finalDataTableData, \"maintData\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Table\r\n        columnDefs={MaintColumns}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        rowData={rowState}\r\n        // selectedOptionId={selectedOptionId}\r\n        tableUpdate={tableUpdate}\r\n      ></Table>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaintenanceData;\r\n"]},"metadata":{},"sourceType":"module"}