{"ast":null,"code":"import ScalingCellSizeAndPositionManager from './ScalingCellSizeAndPositionManager.js';\n/**\r\n * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.\r\n * This function also ensures that the scroll ofset isn't past the last column/row of cells.\r\n */\n\nexport default function updateScrollIndexHelper(_ref) {\n  var cellSize = _ref.cellSize,\n      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,\n      previousCellsCount = _ref.previousCellsCount,\n      previousCellSize = _ref.previousCellSize,\n      previousScrollToAlignment = _ref.previousScrollToAlignment,\n      previousScrollToIndex = _ref.previousScrollToIndex,\n      previousSize = _ref.previousSize,\n      scrollOffset = _ref.scrollOffset,\n      scrollToAlignment = _ref.scrollToAlignment,\n      scrollToIndex = _ref.scrollToIndex,\n      size = _ref.size,\n      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,\n      updateScrollIndexCallback = _ref.updateScrollIndexCallback;\n  var cellCount = cellSizeAndPositionManager.getCellCount();\n  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;\n  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize; // If we have a new scroll target OR if height/row-height has changed,\n  // We should ensure that the scroll target is visible.\n\n  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {\n    updateScrollIndexCallback(scrollToIndex); // If we don't have a selected item but list size or number of children have decreased,\n    // Make sure we aren't scrolled too far past the current content.\n  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {\n    // We need to ensure that the current scroll offset is still within the collection's range.\n    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.\n    // Just check to make sure we're still okay.\n    // Only adjust the scroll position if we've scrolled below the last set of rows.\n    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {\n      updateScrollIndexCallback(cellCount - 1);\n    }\n  }\n}\nimport { bpfrpt_proptype_Alignment } from \"../types\";\nimport { bpfrpt_proptype_CellSize } from \"../types\";","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/node_modules/react-virtualized/dist/es/Grid/utils/updateScrollIndexHelper.js"],"names":["ScalingCellSizeAndPositionManager","updateScrollIndexHelper","_ref","cellSize","cellSizeAndPositionManager","previousCellsCount","previousCellSize","previousScrollToAlignment","previousScrollToIndex","previousSize","scrollOffset","scrollToAlignment","scrollToIndex","size","sizeJustIncreasedFromZero","updateScrollIndexCallback","cellCount","getCellCount","hasScrollToIndex","sizeHasChanged","getTotalSize","bpfrpt_proptype_Alignment","bpfrpt_proptype_CellSize"],"mappings":"AAAA,OAAOA,iCAAP,MAA8C,wCAA9C;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,uBAAT,CAAiCC,IAAjC,EAAuC;AACpD,MAAIC,QAAQ,GAAGD,IAAI,CAACC,QAApB;AAAA,MACIC,0BAA0B,GAAGF,IAAI,CAACE,0BADtC;AAAA,MAEIC,kBAAkB,GAAGH,IAAI,CAACG,kBAF9B;AAAA,MAGIC,gBAAgB,GAAGJ,IAAI,CAACI,gBAH5B;AAAA,MAIIC,yBAAyB,GAAGL,IAAI,CAACK,yBAJrC;AAAA,MAKIC,qBAAqB,GAAGN,IAAI,CAACM,qBALjC;AAAA,MAMIC,YAAY,GAAGP,IAAI,CAACO,YANxB;AAAA,MAOIC,YAAY,GAAGR,IAAI,CAACQ,YAPxB;AAAA,MAQIC,iBAAiB,GAAGT,IAAI,CAACS,iBAR7B;AAAA,MASIC,aAAa,GAAGV,IAAI,CAACU,aATzB;AAAA,MAUIC,IAAI,GAAGX,IAAI,CAACW,IAVhB;AAAA,MAWIC,yBAAyB,GAAGZ,IAAI,CAACY,yBAXrC;AAAA,MAYIC,yBAAyB,GAAGb,IAAI,CAACa,yBAZrC;AAaA,MAAIC,SAAS,GAAGZ,0BAA0B,CAACa,YAA3B,EAAhB;AACA,MAAIC,gBAAgB,GAAGN,aAAa,IAAI,CAAjB,IAAsBA,aAAa,GAAGI,SAA7D;AACA,MAAIG,cAAc,GAAGN,IAAI,KAAKJ,YAAT,IAAyBK,yBAAzB,IAAsD,CAACR,gBAAvD,IAA2E,OAAOH,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAKG,gBAA7I,CAhBoD,CAgB2G;AAC/J;;AAEA,MAAIY,gBAAgB,KAAKC,cAAc,IAAIR,iBAAiB,KAAKJ,yBAAxC,IAAqEK,aAAa,KAAKJ,qBAA5F,CAApB,EAAwI;AACtIO,IAAAA,yBAAyB,CAACH,aAAD,CAAzB,CADsI,CAC5F;AAC1C;AACD,GAHD,MAGO,IAAI,CAACM,gBAAD,IAAqBF,SAAS,GAAG,CAAjC,KAAuCH,IAAI,GAAGJ,YAAP,IAAuBO,SAAS,GAAGX,kBAA1E,CAAJ,EAAmG;AACxG;AACA;AACA;AACA;AACA,QAAIK,YAAY,GAAGN,0BAA0B,CAACgB,YAA3B,KAA4CP,IAA/D,EAAqE;AACnEE,MAAAA,yBAAyB,CAACC,SAAS,GAAG,CAAb,CAAzB;AACD;AACF;AACF;AACD,SAASK,yBAAT,QAA0C,UAA1C;AACA,SAASC,wBAAT,QAAyC,UAAzC","sourcesContent":["import ScalingCellSizeAndPositionManager from './ScalingCellSizeAndPositionManager.js';\r\n/**\r\n * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.\r\n * This function also ensures that the scroll ofset isn't past the last column/row of cells.\r\n */\r\n\r\nexport default function updateScrollIndexHelper(_ref) {\r\n  var cellSize = _ref.cellSize,\r\n      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,\r\n      previousCellsCount = _ref.previousCellsCount,\r\n      previousCellSize = _ref.previousCellSize,\r\n      previousScrollToAlignment = _ref.previousScrollToAlignment,\r\n      previousScrollToIndex = _ref.previousScrollToIndex,\r\n      previousSize = _ref.previousSize,\r\n      scrollOffset = _ref.scrollOffset,\r\n      scrollToAlignment = _ref.scrollToAlignment,\r\n      scrollToIndex = _ref.scrollToIndex,\r\n      size = _ref.size,\r\n      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,\r\n      updateScrollIndexCallback = _ref.updateScrollIndexCallback;\r\n  var cellCount = cellSizeAndPositionManager.getCellCount();\r\n  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;\r\n  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize; // If we have a new scroll target OR if height/row-height has changed,\r\n  // We should ensure that the scroll target is visible.\r\n\r\n  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {\r\n    updateScrollIndexCallback(scrollToIndex); // If we don't have a selected item but list size or number of children have decreased,\r\n    // Make sure we aren't scrolled too far past the current content.\r\n  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {\r\n    // We need to ensure that the current scroll offset is still within the collection's range.\r\n    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.\r\n    // Just check to make sure we're still okay.\r\n    // Only adjust the scroll position if we've scrolled below the last set of rows.\r\n    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {\r\n      updateScrollIndexCallback(cellCount - 1);\r\n    }\r\n  }\r\n}\r\nimport { bpfrpt_proptype_Alignment } from \"../types\";\r\nimport { bpfrpt_proptype_CellSize } from \"../types\";"]},"metadata":{},"sourceType":"module"}