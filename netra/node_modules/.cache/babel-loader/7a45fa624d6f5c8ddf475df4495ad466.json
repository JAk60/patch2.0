{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\ui\\\\Table\\\\DataManagerTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport \"./Table.css\";\nimport ReactDom from \"react-dom\";\nimport { Button, makeStyles, Slider, TextField } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport IconButton from \"@material-ui/core/IconButton\"; // function getDatePicker() {\n//   function Datepicker() {}\n//   Datepicker.prototype.init = function (params) {\n//     this.eInput = document.createElement(\"input\");\n//     this.eInput.value = params.value;\n//     this.eInput.classList.add(\"ag-input\");\n//     this.eInput.style.height = \"100%\";\n//     $(this.eInput).datepicker({ dateFormat: \"dd/mm/yy\" });\n//     console.log(params);\n//   };\n//   Datepicker.prototype.getGui = function () {\n//     return this.eInput;\n//   };\n//   Datepicker.prototype.afterGuiAttached = function () {\n//     this.eInput.focus();\n//     this.eInput.select();\n//   };\n//   Datepicker.prototype.getValue = function () {\n//     return this.eInput.value;\n//   };\n//   Datepicker.prototype.destroy = function () {};\n//   Datepicker.prototype.isPopup = function () {\n//     return false;\n//   };\n//   return Datepicker;\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  slider: {\n    padding: \"22px 0px\"\n  },\n  sliderTrack: {\n    height: 5\n  }\n});\nexport const getDatePicker = () => {\n  debugger;\n\n  const fillZeros = a => {\n    return Number(a) < 10 ? \"0\" + a : a;\n  };\n\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n  const getFormattedDateOutput = dateString => {\n    const dateParse = new Date(dateString);\n    const dd = dateParse.getDate();\n    const mm = dateParse.getMonth() + 1; //January is 0!\n\n    const yyyy = dateParse.getFullYear(); // console.log(dateString, dateParse);\n\n    return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\n  };\n\n  function Datepicker() {}\n\n  Datepicker.prototype.init = function (params) {\n    this.textInput = /*#__PURE__*/React.createRef();\n\n    const getFormattedDateMaterial = dateString => {\n      const dateParse = new Date(dateString.split(\"/\")[2] + \"-\" + dateString.split(\"/\")[1] + \"-\" + dateString.split(\"/\")[0]);\n      const dd = dateParse.getDate();\n      const mm = dateParse.getMonth() + 1; //January is 0!\n\n      const yyyy = dateParse.getFullYear();\n      console.log(dateString, dateParse);\n      return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\n    };\n\n    const eInput = /*#__PURE__*/React.createElement(TextField, {\n      type: \"date\",\n      defaultValue: getFormattedDateMaterial(params.value),\n      ref: this.textInput,\n      style: {\n        width: \"95%\"\n      }\n    });\n    this.div = document.createElement(\"div\");\n    this.div.className = \"ag-cell-parent-append\";\n    ReactDom.render(eInput, this.div);\n  };\n\n  Datepicker.prototype.getGui = function () {\n    return this.div;\n  };\n\n  Datepicker.prototype.afterGuiAttached = function () {\n    this.textInput.current.focus();\n  };\n\n  Datepicker.prototype.getValue = function () {\n    return getFormattedDateOutput(this.textInput.current.querySelector(\"input\").value);\n  };\n\n  Datepicker.prototype.destroy = function () {};\n\n  Datepicker.prototype.isPopup = function () {\n    return false;\n  };\n\n  return Datepicker;\n};\n\nconst getMonthPicker = () => {\n  const fillZeros = a => {\n    return Number(a) < 10 ? \"0\" + a : a;\n  };\n\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n  const getFormattedDateOutput = dateString => {\n    const dateParse = new Date(dateString);\n    const dd = dateParse.getDate();\n    const mm = dateParse.getMonth(); //January is 0!\n\n    const yyyy = dateParse.getFullYear(); // console.log(dateString, dateParse);\n\n    return monthNames[mm] + \"/\" + yyyy;\n  };\n\n  function Monthpicker() {}\n\n  Monthpicker.prototype.init = function (params) {\n    this.textInput = /*#__PURE__*/React.createRef();\n\n    const getFormattedDateMaterial = dateString => {\n      const dateParse = new Date(dateString.split(\"/\")[2] + \"-\" + dateString.split(\"/\")[1] + \"-\" + dateString.split(\"/\")[0]);\n      const dd = dateParse.getDate();\n      const mm = dateParse.getMonth() + 1; //January is 0!\n\n      const yyyy = dateParse.getFullYear();\n      console.log(dateString, dateParse);\n      return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\n    };\n\n    const eInput = /*#__PURE__*/React.createElement(TextField, {\n      type: \"month\",\n      defaultValue: getFormattedDateMaterial(params.value),\n      ref: this.textInput,\n      style: {\n        width: \"95%\"\n      }\n    });\n    this.div = document.createElement(\"div\");\n    this.div.className = \"ag-cell-parent-append\";\n    ReactDom.render(eInput, this.div);\n  };\n\n  Monthpicker.prototype.getGui = function () {\n    return this.div;\n  };\n\n  Monthpicker.prototype.afterGuiAttached = function () {\n    this.textInput.current.focus();\n  };\n\n  Monthpicker.prototype.getValue = function () {\n    return getFormattedDateOutput(this.textInput.current.querySelector(\"input\").value);\n  };\n\n  Monthpicker.prototype.destroy = function () {};\n\n  Monthpicker.prototype.isPopup = function () {\n    return false;\n  };\n\n  return Monthpicker;\n};\n\nconst DataManagerTable = props => {\n  _s();\n\n  const location = useLocation(); // const [gridApi, setGridApi] = useState(null);\n\n  const Sliderclasses = useStyles();\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n\n  const onGridReady = params => {\n    props.setGrid(params.api);\n    props.setGrid(params.api);\n    setGridColumnApi(params.columnApi);\n    params.api.sizeColumnsToFit();\n  };\n\n  const onFirstDataRendered = params => {\n    params.api.sizeColumnsToFit();\n\n    try {\n      const allRowData = [];\n      props.gridApi.forEachNode(node => allRowData.push(node.data));\n      props.tableUpdate(allRowData);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onGridSizeChanged = params => {\n    params.api.sizeColumnsToFit();\n  };\n\n  const maintenanceDataCheck = params => {\n    console.log(params);\n    const colId = params.column.getId();\n\n    if (colId === \"MaintenanceType\") {\n      if (params.node.data.MaintenanceType === \"Replaced\") {\n        params.node.setDataValue(\"ReplaceType\", null);\n      } else {\n        params.node.setDataValue(\"ReplaceType\", \"NA\");\n      }\n    }\n\n    if (colId === \"ReplaceType\") {\n      if (params.node.data.ReplaceType === \"Cannibalised\") {\n        params.node.setDataValue(\"CannibalisedAge\", null);\n      } else {\n        params.node.setDataValue(\"CannibalisedAge\", \"NA\");\n      }\n    }\n  };\n\n  const saveModifiedRows = params => {\n    // console.log(params);\n    debugger;\n    maintenanceDataCheck(params);\n    let currentlocation = location.pathname;\n\n    try {\n      let selectedId = \"\";\n\n      if (currentlocation === \"/data_manager/maintenance_data\") {\n        if (params.column.colId === \"LMU\") {\n          debugger;\n          selectedId = params.data.id;\n          const allRowData = [];\n          props.gridApi.forEachNode(node => allRowData.push(node.data));\n          props.tableUpdate(allRowData, selectedId);\n        } else {\n          const allRowData = [];\n          props.gridApi.forEachNode(node => allRowData.push(node.data));\n          props.tableUpdate(allRowData);\n        }\n      } else if (currentlocation === \"/system_config/failure_mode\") {\n        let selectedId = \"\";\n        selectedId = params.data.id;\n        const allRowData = [];\n        props.gridApi.forEachNode(node => allRowData.push(node.data));\n        props.tableUpdate(allRowData, selectedId);\n      }\n\n      const allRowData = [];\n      props.gridApi.forEachNode(node => allRowData.push(node.data));\n      props.tableUpdate(allRowData);\n    } catch (err) {\n      console.log(err);\n    } // add API call to save modified rows\n\n  };\n\n  const deleteButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(IconButton, {\n        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this);\n  };\n\n  const updateButton = props => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: () => props.onClick(),\n        children: [\" \", \"Update Password\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this);\n  };\n\n  const redirectButton = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        style: {\n          marginTop: \"20px\"\n        },\n        children: \"Redirect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this);\n  };\n\n  const slider = () => {\n    const marks = [{\n      value: 15,\n      label: \"Configure New System\"\n    }, {\n      value: 40,\n      label: \"Phase Definition\"\n    }, {\n      value: 65,\n      label: \"Extrinsic Factor Definition \"\n    }, {\n      value: 90,\n      label: \"Data Manager\"\n    }];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Slider, {\n        classes: {\n          container: Sliderclasses.slider,\n          track: Sliderclasses.sliderTrack\n        },\n        style: {\n          marginTop: \"15px\"\n        },\n        defaultValue: 40,\n        marks: marks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this);\n  };\n\n  const buttonClick = e => {\n    // e is getting the current node (Row Node)\n    this.setState({\n      visible: true\n    });\n    let deletedRow = props.node.data;\n    e.gridApi.updateRowData({\n      remove: [deletedRow]\n    }); // It will update the row\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ag-theme-alpine\",\n    style: {\n      height: 400,\n      width: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n      defaultColDef: {\n        flex: 1,\n        resizable: true,\n        filter: true,\n        sortable: true\n      },\n      rowData: props.rowData,\n      tooltipShowDelay: \"0\" // columnDefs={props.columnDefs}\n      ,\n      onGridReady: onGridReady,\n      onFirstDataRendered: onFirstDataRendered,\n      onGridSizeChanged: onGridSizeChanged,\n      onCellValueChanged: saveModifiedRows,\n      rowSelection: \"multiple\",\n      rowMultiSelectWithClick: true,\n      ...(props.rowHeight ? {\n        rowHeight: props.rowHeight\n      } : {}),\n      frameworkComponents: {\n        updateButton: updateButton,\n        redirectButton: redirectButton,\n        slider: slider\n      },\n      components: {\n        datePicker: getDatePicker(),\n        monthPicker: getMonthPicker(),\n        deleteButton: deleteButton()\n      },\n      onCellClicked: props.onCellClicked,\n      children: props.columnDefs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DataManagerTable, \"xdnmNbleaev4z4DZDTAU6zcmjJY=\", false, function () {\n  return [useLocation, useStyles];\n});\n\n_c = DataManagerTable;\nexport default DataManagerTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataManagerTable\");","map":{"version":3,"sources":["D:/NetraB/netra/src/ui/Table/DataManagerTable.js"],"names":["React","useState","useLocation","AgGridReact","ReactDom","Button","makeStyles","Slider","TextField","DeleteIcon","IconButton","useStyles","slider","padding","sliderTrack","height","getDatePicker","fillZeros","a","Number","monthNames","getFormattedDateOutput","dateString","dateParse","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","Datepicker","prototype","init","params","textInput","createRef","getFormattedDateMaterial","split","console","log","eInput","createElement","type","defaultValue","value","ref","style","width","div","document","className","render","getGui","afterGuiAttached","current","focus","getValue","querySelector","destroy","isPopup","getMonthPicker","Monthpicker","DataManagerTable","props","location","Sliderclasses","gridColumnApi","setGridColumnApi","onGridReady","setGrid","api","columnApi","sizeColumnsToFit","onFirstDataRendered","allRowData","gridApi","forEachNode","node","push","data","tableUpdate","err","onGridSizeChanged","maintenanceDataCheck","colId","column","getId","MaintenanceType","setDataValue","ReplaceType","saveModifiedRows","currentlocation","pathname","selectedId","id","deleteButton","updateButton","onClick","redirectButton","marginTop","marks","label","container","track","buttonClick","e","setState","visible","deletedRow","updateRowData","remove","flex","resizable","filter","sortable","rowData","rowHeight","datePicker","monthPicker","onCellClicked","columnDefs"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport \"./Table.css\";\r\nimport ReactDom from \"react-dom\";\r\nimport { Button, makeStyles, Slider, TextField } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\n// function getDatePicker() {\r\n//   function Datepicker() {}\r\n//   Datepicker.prototype.init = function (params) {\r\n//     this.eInput = document.createElement(\"input\");\r\n//     this.eInput.value = params.value;\r\n//     this.eInput.classList.add(\"ag-input\");\r\n//     this.eInput.style.height = \"100%\";\r\n//     $(this.eInput).datepicker({ dateFormat: \"dd/mm/yy\" });\r\n//     console.log(params);\r\n//   };\r\n//   Datepicker.prototype.getGui = function () {\r\n//     return this.eInput;\r\n//   };\r\n//   Datepicker.prototype.afterGuiAttached = function () {\r\n//     this.eInput.focus();\r\n//     this.eInput.select();\r\n//   };\r\n//   Datepicker.prototype.getValue = function () {\r\n//     return this.eInput.value;\r\n//   };\r\n//   Datepicker.prototype.destroy = function () {};\r\n//   Datepicker.prototype.isPopup = function () {\r\n//     return false;\r\n//   };\r\n//   return Datepicker;\r\n// }\r\n\r\nconst useStyles = makeStyles({\r\n  slider: {\r\n    padding: \"22px 0px\",\r\n  },\r\n  sliderTrack: {\r\n    height: 5,\r\n  },\r\n});\r\n\r\nexport const getDatePicker = () => {\r\n  debugger;\r\n  const fillZeros = (a) => {\r\n    return Number(a) < 10 ? \"0\" + a : a;\r\n  };\r\n  const monthNames = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const getFormattedDateOutput = (dateString) => {\r\n    const dateParse = new Date(dateString);\r\n    const dd = dateParse.getDate();\r\n    const mm = dateParse.getMonth() + 1; //January is 0!\r\n    const yyyy = dateParse.getFullYear();\r\n    // console.log(dateString, dateParse);\r\n    return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n  };\r\n  function Datepicker() {}\r\n  Datepicker.prototype.init = function (params) {\r\n    this.textInput = React.createRef();\r\n    const getFormattedDateMaterial = (dateString) => {\r\n      const dateParse = new Date(\r\n        dateString.split(\"/\")[2] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[1] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[0]\r\n      );\r\n      const dd = dateParse.getDate();\r\n      const mm = dateParse.getMonth() + 1; //January is 0!\r\n      const yyyy = dateParse.getFullYear();\r\n      console.log(dateString, dateParse);\r\n      return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n    };\r\n    const eInput = React.createElement(TextField, {\r\n      type: \"date\",\r\n      defaultValue: getFormattedDateMaterial(params.value),\r\n      ref: this.textInput,\r\n      style: { width: \"95%\" },\r\n    });\r\n    this.div = document.createElement(\"div\");\r\n    this.div.className = \"ag-cell-parent-append\";\r\n    ReactDom.render(eInput, this.div);\r\n  };\r\n  Datepicker.prototype.getGui = function () {\r\n    return this.div;\r\n  };\r\n  Datepicker.prototype.afterGuiAttached = function () {\r\n    this.textInput.current.focus();\r\n  };\r\n  Datepicker.prototype.getValue = function () {\r\n    return getFormattedDateOutput(\r\n      this.textInput.current.querySelector(\"input\").value\r\n    );\r\n  };\r\n  Datepicker.prototype.destroy = function () {};\r\n  Datepicker.prototype.isPopup = function () {\r\n    return false;\r\n  };\r\n  return Datepicker;\r\n};\r\n\r\nconst getMonthPicker = () => {\r\n  const fillZeros = (a) => {\r\n    return Number(a) < 10 ? \"0\" + a : a;\r\n  };\r\n  const monthNames = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const getFormattedDateOutput = (dateString) => {\r\n    const dateParse = new Date(dateString);\r\n    const dd = dateParse.getDate();\r\n    const mm = dateParse.getMonth(); //January is 0!\r\n    const yyyy = dateParse.getFullYear();\r\n    // console.log(dateString, dateParse);\r\n    return monthNames[mm] + \"/\" + yyyy;\r\n  };\r\n  function Monthpicker() {}\r\n  Monthpicker.prototype.init = function (params) {\r\n    this.textInput = React.createRef();\r\n    const getFormattedDateMaterial = (dateString) => {\r\n      const dateParse = new Date(\r\n        dateString.split(\"/\")[2] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[1] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[0]\r\n      );\r\n      const dd = dateParse.getDate();\r\n      const mm = dateParse.getMonth() + 1; //January is 0!\r\n      const yyyy = dateParse.getFullYear();\r\n      console.log(dateString, dateParse);\r\n      return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n    };\r\n    const eInput = React.createElement(TextField, {\r\n      type: \"month\",\r\n      defaultValue: getFormattedDateMaterial(params.value),\r\n      ref: this.textInput,\r\n      style: { width: \"95%\" },\r\n    });\r\n    this.div = document.createElement(\"div\");\r\n    this.div.className = \"ag-cell-parent-append\";\r\n    ReactDom.render(eInput, this.div);\r\n  };\r\n  Monthpicker.prototype.getGui = function () {\r\n    return this.div;\r\n  };\r\n  Monthpicker.prototype.afterGuiAttached = function () {\r\n    this.textInput.current.focus();\r\n  };\r\n  Monthpicker.prototype.getValue = function () {\r\n    return getFormattedDateOutput(\r\n      this.textInput.current.querySelector(\"input\").value\r\n    );\r\n  };\r\n  Monthpicker.prototype.destroy = function () {};\r\n  Monthpicker.prototype.isPopup = function () {\r\n    return false;\r\n  };\r\n  return Monthpicker;\r\n};\r\n\r\nconst DataManagerTable = (props) => {\r\n  const location = useLocation();\r\n  // const [gridApi, setGridApi] = useState(null);\r\n  const Sliderclasses = useStyles();\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  const onGridReady = (params) => {\r\n    props.setGrid(params.api);\r\n    props.setGrid(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n\r\n  const onFirstDataRendered = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n    try {\r\n      const allRowData = [];\r\n      props.gridApi.forEachNode((node) => allRowData.push(node.data));\r\n      props.tableUpdate(allRowData);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const onGridSizeChanged = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n\r\n  const maintenanceDataCheck = (params) => {\r\n    console.log(params);\r\n    const colId = params.column.getId();\r\n\r\n    if (colId === \"MaintenanceType\") {\r\n      if (params.node.data.MaintenanceType === \"Replaced\") {\r\n        params.node.setDataValue(\"ReplaceType\", null);\r\n      } else {\r\n        params.node.setDataValue(\"ReplaceType\", \"NA\");\r\n      }\r\n    }\r\n    if (colId === \"ReplaceType\") {\r\n      if (params.node.data.ReplaceType === \"Cannibalised\") {\r\n        params.node.setDataValue(\"CannibalisedAge\", null);\r\n      } else {\r\n        params.node.setDataValue(\"CannibalisedAge\", \"NA\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const saveModifiedRows = (params) => {\r\n    // console.log(params);\r\n    debugger;\r\n    maintenanceDataCheck(params);\r\n    let currentlocation = location.pathname;\r\n    try {\r\n      let selectedId = \"\";\r\n      if (currentlocation === \"/data_manager/maintenance_data\") {\r\n        if (params.column.colId === \"LMU\") {\r\n          debugger;\r\n          selectedId = params.data.id;\r\n          const allRowData = [];\r\n          props.gridApi.forEachNode((node) => allRowData.push(node.data));\r\n          props.tableUpdate(allRowData, selectedId);\r\n        } else {\r\n          const allRowData = [];\r\n          props.gridApi.forEachNode((node) => allRowData.push(node.data));\r\n          props.tableUpdate(allRowData);\r\n        }\r\n      }else if (currentlocation === \"/system_config/failure_mode\"){\r\n        let selectedId = \"\";\r\n        selectedId = params.data.id;\r\n        const allRowData = [];\r\n        props.gridApi.forEachNode((node) => allRowData.push(node.data));\r\n        props.tableUpdate(allRowData, selectedId);\r\n      }\r\n\r\n      const allRowData = [];\r\n      props.gridApi.forEachNode((node) => allRowData.push(node.data));\r\n      props.tableUpdate(allRowData);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    // add API call to save modified rows\r\n  };\r\n\r\n  const deleteButton = () => {\r\n    return (\r\n      <div>\r\n        <IconButton>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </div>\r\n    );\r\n  };\r\n  const updateButton = (props) => {\r\n    return (\r\n      <div>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => props.onClick()}\r\n        >\r\n          {\" \"}\r\n          Update Password\r\n        </Button>{\" \"}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const redirectButton = () => {\r\n    return (\r\n      <div>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ marginTop: \"20px\" }}\r\n        >\r\n          Redirect\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const slider = () => {\r\n    const marks = [\r\n      {\r\n        value: 15,\r\n        label: \"Configure New System\",\r\n      },\r\n      {\r\n        value: 40,\r\n        label: \"Phase Definition\",\r\n      },\r\n      {\r\n        value: 65,\r\n        label: \"Extrinsic Factor Definition \",\r\n      },\r\n      {\r\n        value: 90,\r\n        label: \"Data Manager\",\r\n      },\r\n    ];\r\n    return (\r\n      <div>\r\n        <Slider\r\n          classes={{\r\n            container: Sliderclasses.slider,\r\n            track: Sliderclasses.sliderTrack,\r\n          }}\r\n          style={{ marginTop: \"15px\" }}\r\n          defaultValue={40}\r\n          marks={marks}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  const buttonClick = (e) => {\r\n    // e is getting the current node (Row Node)\r\n\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n    let deletedRow = props.node.data;\r\n    e.gridApi.updateRowData({ remove: [deletedRow] }); // It will update the row\r\n  };\r\n\r\n  return (\r\n    <div className=\"ag-theme-alpine\" style={{ height: 400, width: \"100%\" }}>\r\n      <AgGridReact\r\n        defaultColDef={{\r\n          flex: 1,\r\n          resizable: true,\r\n          filter: true,\r\n          sortable: true,\r\n        }}\r\n        rowData={props.rowData}\r\n        tooltipShowDelay=\"0\"\r\n        // columnDefs={props.columnDefs}\r\n        onGridReady={onGridReady}\r\n        onFirstDataRendered={onFirstDataRendered}\r\n        onGridSizeChanged={onGridSizeChanged}\r\n        onCellValueChanged={saveModifiedRows}\r\n        rowSelection={\"multiple\"}\r\n        rowMultiSelectWithClick={true}\r\n        {...(props.rowHeight ? { rowHeight: props.rowHeight } : {})}\r\n        frameworkComponents={{\r\n          updateButton: updateButton,\r\n          redirectButton: redirectButton,\r\n          slider: slider,\r\n        }}\r\n        components={{\r\n          datePicker: getDatePicker(),\r\n          monthPicker: getMonthPicker(),\r\n          deleteButton: deleteButton(),\r\n        }}\r\n        onCellClicked={props.onCellClicked}\r\n      >\r\n        {props.columnDefs}\r\n      </AgGridReact>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataManagerTable;\r\n"]},"metadata":{},"sourceType":"module"}