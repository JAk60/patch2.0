{"ast":null,"code":"var _jsxFileName = \"D:\\\\NETRA -P\\\\Netra\\\\netra\\\\src\\\\pages\\\\RUL\\\\RulLife.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport Navigation from \"../../components/navigation/Navigation\";\nimport styles from \"./rul.module.css\";\nimport UserSelection from \"../../ui/userSelection/userSelection\";\nimport { Button, makeStyles, TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport TreeComponent from \"../../components/sortableTree/SortableTree\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { treeDataActions } from \"../../store/TreeDataStore\";\nimport AutoSelect from \"../../ui/Form/AutoSelect\";\nimport { useDropzone } from \"react-dropzone\";\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\nimport RULPredictor from \"./RULPredictor\";\nimport AccessControl from \"../Home/AccessControl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  buttons: {\n    margin: 5,\n    minWidth: 170,\n    float: \"right\"\n  },\n  align: {\n    marginBottom: 10\n  }\n});\n\nconst RulLife = () => {\n  _s();\n\n  var _matchingItems$;\n\n  const [paramOptions, setParamOptions] = useState([]);\n  const [selectedParameterName, setParameterName] = useState(\"\");\n  const [selectedEqName, setEquipmentName] = useState([]);\n  const [para, setPara] = useState([]);\n  const [prevrul, setPrevrul] = useState();\n  const [isRulOpen, setRulOpen] = useState(false);\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [P, setP] = useState(0);\n  const [F, setF] = useState(0); // Function to handle file upload\n\n  const handleFileUpload = file => {\n    setUploadedFile(file);\n    console.log(uploadedFile);\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    fetch(\"/csv_upload\", {\n      method: \"POST\",\n      body: formData\n    }).then(response => response.text()).then(data => {\n      console.log(data); // Response from the server\n    }).catch(error => {\n      console.error(\"Fetch Error:\", error);\n    });\n  }; // Dropzone configuration\n\n\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop: acceptedFiles => handleFileUpload(acceptedFiles[0]),\n    accept: \".csv\",\n    // Accept only CSV files, you can modify this to accept other file types\n    multiple: false // Allow only one file to be uploaded at a time\n\n  });\n  const dispatch = useDispatch();\n  const currentSelection = useSelector(state => state.userSelection.currentSelection);\n  let fData = useSelector(state => state.treeData.treeData);\n  console.log(selectedParameterName);\n  const sData = useSelector(state => state.userSelection.componentsData);\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\n  const matchingId = (_matchingItems$ = matchingItems[0]) === null || _matchingItems$ === void 0 ? void 0 : _matchingItems$.id;\n\n  const onLoadTreeStructure = () => {\n    const payload = {\n      system: currentSelection[\"equipmentName\"],\n      ship_name: currentSelection[\"shipName\"]\n    };\n\n    if (matchingId) {\n      payload.component_id = matchingId;\n    }\n\n    console.log(payload);\n    fetch(\"/fetch_system\", {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => res.json()).then(d => {\n      console.log(d);\n      let treeD = d[\"treeD\"];\n      let failureModes = d[\"failureMode\"];\n      console.log(failureModes);\n      dispatch(treeDataActions.setTreeData({\n        treeData: treeD\n      }));\n      dispatch(treeDataActions.setFailureModes(failureModes));\n    });\n  };\n\n  const handlePrevRul = (e, p) => {\n    e.preventDefault();\n    console.log(para);\n    const filteredObjects = para.filter(obj => obj.name === p);\n    let equipmentId = null;\n\n    if (filteredObjects.length > 0) {\n      equipmentId = filteredObjects[0].equipment_id;\n    }\n\n    console.log(matchingItems, \"matching items\");\n    fetch(\"/prev_rul\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        parameter: p,\n        equipment_id: equipmentId\n      })\n    }).then(res => res.json()).then(data => {\n      setPrevrul(data);\n      setRulOpen(true);\n      console.log(\"RUL DATA\", data);\n    }).catch(error => {\n      console.error(\"Fetch Error:\", error);\n      throw error;\n    });\n    fetch(\"/get_pf\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        name: selectedParameterName\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      console.log(data);\n      setP(data[0].P);\n      setF(data[0].F);\n      console.log(P, F);\n    }).catch(error => {// Handle fetch error\n    });\n  };\n\n  console.log(prevrul);\n  useEffect(() => {\n    fetch(\"/cm_dashboard\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      const params = data[\"parameters\"];\n      console.log(\"luck\", params);\n      setPara(params);\n    }).catch(error => {// Handle fetch error\n    });\n  }, [selectedEqName]);\n  useEffect(() => {\n    console.log(\"s\");\n    const selectedEqNameArray = Object.values(selectedEqName).map(equipment => equipment);\n    console.log(selectedEqNameArray);\n    const filteredArray = para.filter(item => selectedEqNameArray.includes(item.equipment_id));\n    console.log(filteredArray, \"nafkja\");\n    const filteredNames = filteredArray.map(item => item.name);\n    setParamOptions(filteredNames);\n  }, [selectedEqName, para]); // Snackbar\n\n  const [SnackBarMessage, setSnackBarMessage] = useState({\n    severity: \"error\",\n    message: \"This is awesome\",\n    showSnackBar: false\n  });\n\n  const onHandleSnackClose = () => {\n    setSnackBarMessage({\n      severity: \"error\",\n      message: \"Please Add Systemss\",\n      showSnackBar: false\n    });\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AccessControl, {\n      allowedLevels: ['L1', 'L5'],\n      children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.userSelection,\n        children: [/*#__PURE__*/_jsxDEV(UserSelection, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: classes.buttons,\n            onClick: onLoadTreeStructure,\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.content,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.tree,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.treeChild,\n            children: /*#__PURE__*/_jsxDEV(TreeComponent, {\n              height: \"600px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.rightSection,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.userSelection,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.selectContainer,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.selectC,\n                children: [\"Select Component\", /*#__PURE__*/_jsxDEV(AutoSelect, {\n                  fields: fData,\n                  onChange: (e, value) => setEquipmentName(value),\n                  value: selectedEqName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 252,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [\"Select Parameter\", /*#__PURE__*/_jsxDEV(Autocomplete, {\n                  className: styles.SelectP,\n                  id: \"tags-standard\",\n                  options: paramOptions // getOptionLabel={(option) => option.name}\n                  ,\n                  value: selectedParameterName,\n                  onChange: (e, value) => setParameterName(value),\n                  renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                    InputProps: { ...params.InputProps,\n                      disableUnderline: true\n                    },\n                    variant: \"standard\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 268,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 260,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n                children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  className: classes.buttons,\n                  variant: \"contained\",\n                  color: \"primary\",\n                  children: \"Upload File\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 281,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.importBtnContainer,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  className: classes.buttons,\n                  variant: \"contained\",\n                  color: \"primary\",\n                  onClick: e => handlePrevRul(e, selectedParameterName),\n                  children: \"Calculate RUL\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 289,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 11\n          }, this), isRulOpen && /*#__PURE__*/_jsxDEV(RULPredictor, {\n            selectedEqName: selectedEqName,\n            prevRul: prevrul,\n            P: P,\n            F: F\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }, this), SnackBarMessage.showSnackBar && /*#__PURE__*/_jsxDEV(CustomizedSnackbars, {\n        message: SnackBarMessage,\n        onHandleClose: onHandleSnackClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(RulLife, \"puHAn3s7isEQ61ff6hRiXCUSX/0=\", false, function () {\n  return [useDropzone, useDispatch, useSelector, useSelector, useSelector, useStyles];\n});\n\n_c = RulLife;\nexport default RulLife;\n\nvar _c;\n\n$RefreshReg$(_c, \"RulLife\");","map":{"version":3,"sources":["D:/NETRA -P/Netra/netra/src/pages/RUL/RulLife.js"],"names":["React","useState","useCallback","useEffect","Navigation","styles","UserSelection","Button","makeStyles","TextField","Autocomplete","TreeComponent","useSelector","useDispatch","treeDataActions","AutoSelect","useDropzone","CustomizedSnackbars","RULPredictor","AccessControl","useStyles","buttons","margin","minWidth","float","align","marginBottom","RulLife","paramOptions","setParamOptions","selectedParameterName","setParameterName","selectedEqName","setEquipmentName","para","setPara","prevrul","setPrevrul","isRulOpen","setRulOpen","uploadedFile","setUploadedFile","P","setP","F","setF","handleFileUpload","file","console","log","formData","FormData","append","fetch","method","body","then","response","text","data","catch","error","getRootProps","getInputProps","onDrop","acceptedFiles","accept","multiple","dispatch","currentSelection","state","userSelection","fData","treeData","sData","componentsData","currentEquipmentName","matchingItems","filter","item","name","matchingId","id","onLoadTreeStructure","payload","system","ship_name","component_id","JSON","stringify","headers","Accept","res","json","d","treeD","failureModes","setTreeData","setFailureModes","handlePrevRul","e","p","preventDefault","filteredObjects","obj","equipmentId","length","equipment_id","parameter","params","selectedEqNameArray","Object","values","map","equipment","filteredArray","includes","filteredNames","SnackBarMessage","setSnackBarMessage","severity","message","showSnackBar","onHandleSnackClose","classes","content","tree","treeChild","rightSection","selectContainer","selectC","value","SelectP","InputProps","disableUnderline","importBtnContainer"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport styles from \"./rul.module.css\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport { Button, makeStyles, TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport TreeComponent from \"../../components/sortableTree/SortableTree\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\nimport AutoSelect from \"../../ui/Form/AutoSelect\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\nimport RULPredictor from \"./RULPredictor\";\r\nimport AccessControl from \"../Home/AccessControl\";\r\n\r\nconst useStyles = makeStyles({\r\n  buttons: {\r\n    margin: 5,\r\n    minWidth: 170,\r\n    float: \"right\",\r\n  },\r\n  align: {\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nconst RulLife = () => {\r\n  const [paramOptions, setParamOptions] = useState([]);\r\n  const [selectedParameterName, setParameterName] = useState(\"\");\r\n  const [selectedEqName, setEquipmentName] = useState([]);\r\n  const [para, setPara] = useState([]);\r\n  const [prevrul, setPrevrul] = useState();\r\n  const [isRulOpen, setRulOpen] = useState(false);\r\n  const [uploadedFile, setUploadedFile] = useState(null);\r\n  const [P, setP] = useState(0);\r\n  const [F, setF] = useState(0);\r\n\r\n  // Function to handle file upload\r\n  const handleFileUpload = (file) => {\r\n    setUploadedFile(file);\r\n    console.log(uploadedFile);\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    fetch(\"/csv_upload\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    })\r\n      .then((response) => response.text())\r\n      .then((data) => {\r\n        console.log(data); // Response from the server\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Fetch Error:\", error);\r\n      });\r\n  };\r\n\r\n  // Dropzone configuration\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop: (acceptedFiles) => handleFileUpload(acceptedFiles[0]),\r\n    accept: \".csv\", // Accept only CSV files, you can modify this to accept other file types\r\n    multiple: false, // Allow only one file to be uploaded at a time\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  let fData = useSelector((state) => state.treeData.treeData);\r\n  console.log(selectedParameterName);\r\n  const sData = useSelector((state) => state.userSelection.componentsData);\r\n\r\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\r\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\r\n\r\n  const matchingId = matchingItems[0]?.id;\r\n  const onLoadTreeStructure = () => {\r\n    const payload = {\r\n      system: currentSelection[\"equipmentName\"],\r\n      ship_name: currentSelection[\"shipName\"],\r\n    };\r\n\r\n    if (matchingId) {\r\n      payload.component_id = matchingId;\r\n    }\r\n    console.log(payload)\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        console.log(d);\r\n        let treeD = d[\"treeD\"];\r\n        let failureModes = d[\"failureMode\"];\r\n        console.log(failureModes)\r\n        dispatch(\r\n          treeDataActions.setTreeData({\r\n            treeData: treeD,\r\n          }),\r\n        );\r\n        dispatch(\r\n          treeDataActions.setFailureModes(failureModes)\r\n        )\r\n      });\r\n  };\r\n\r\n  const handlePrevRul = (e, p) => {\r\n    e.preventDefault();\r\n    console.log(para)\r\n    const filteredObjects = para.filter(obj => obj.name === p);\r\n    let equipmentId = null;\r\n    if (filteredObjects.length > 0) {\r\n      equipmentId = filteredObjects[0].equipment_id;\r\n    }\r\n    console.log(matchingItems, \"matching items\")\r\n    fetch(\"/prev_rul\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        parameter: p,\r\n        equipment_id: equipmentId\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setPrevrul(data);\r\n        setRulOpen(true);\r\n        console.log(\"RUL DATA\",data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Fetch Error:\", error);\r\n        throw error;\r\n      });\r\n\r\n    fetch(\"/get_pf\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        name: selectedParameterName\r\n      }),\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(data)\r\n        setP(data[0].P)\r\n        setF(data[0].F)\r\n        console.log(P, F)\r\n        \r\n      })\r\n      .catch((error) => {\r\n        // Handle fetch error\r\n      });\r\n  };\r\n\r\n  console.log(prevrul);\r\n  useEffect(() => {\r\n    fetch(\"/cm_dashboard\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const params = data[\"parameters\"];\r\n        console.log(\"luck\", params);\r\n        setPara(params);\r\n      })\r\n      .catch((error) => {\r\n        // Handle fetch error\r\n      });\r\n  }, [selectedEqName]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"s\");\r\n    const selectedEqNameArray = Object.values(selectedEqName).map(\r\n      (equipment) => equipment\r\n    );\r\n    console.log(selectedEqNameArray);\r\n\r\n    const filteredArray = para.filter((item) =>\r\n      selectedEqNameArray.includes(item.equipment_id)\r\n    );\r\n\r\n    console.log(filteredArray, \"nafkja\");\r\n\r\n    const filteredNames = filteredArray.map((item) => item.name);\r\n    setParamOptions(filteredNames);\r\n  }, [selectedEqName, para]);\r\n\r\n  // Snackbar\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n    <AccessControl allowedLevels={['L1', 'L5']}>\r\n      <Navigation />\r\n      <div className={styles.userSelection}>\r\n        <UserSelection />\r\n        <div>\r\n          <Button\r\n            className={classes.buttons}\r\n            onClick={onLoadTreeStructure}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.content}>\r\n        <div className={styles.tree}>\r\n          <div className={styles.treeChild}>\r\n            <TreeComponent height=\"600px\"></TreeComponent>\r\n          </div>\r\n        </div>\r\n        <div className={styles.rightSection}>\r\n          <div className={styles.userSelection}>\r\n            <div className={styles.selectContainer}>\r\n              <div className={styles.selectC}>\r\n                Select Component\r\n                <AutoSelect\r\n                  fields={fData}\r\n                  onChange={(e, value) => setEquipmentName(value)}\r\n                  value={selectedEqName}\r\n                ></AutoSelect>\r\n              </div>\r\n              <div>\r\n                Select Parameter\r\n                <Autocomplete\r\n                  className={styles.SelectP}\r\n                  id=\"tags-standard\"\r\n                  options={paramOptions}\r\n                  // getOptionLabel={(option) => option.name}\r\n                  value={selectedParameterName}\r\n                  onChange={(e, value) => setParameterName(value)}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      InputProps={{\r\n                        ...params.InputProps,\r\n                        disableUnderline: true,\r\n                      }}\r\n                      variant=\"standard\"\r\n                    />\r\n                  )}\r\n                />\r\n              </div>\r\n              <div {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                <Button\r\n                  className={classes.buttons}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  Upload File\r\n                </Button>\r\n              </div>\r\n              <div className={styles.importBtnContainer}>\r\n                <Button\r\n                  className={classes.buttons}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={(e) => handlePrevRul(e, selectedParameterName)}\r\n                >\r\n                  Calculate RUL\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {isRulOpen && (\r\n            <RULPredictor selectedEqName={selectedEqName} prevRul={prevrul} P={P} F={F} />\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n      </AccessControl>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RulLife;"]},"metadata":{},"sourceType":"module"}