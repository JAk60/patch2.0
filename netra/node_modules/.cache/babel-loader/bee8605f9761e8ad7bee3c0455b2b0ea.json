{"ast":null,"code":"var _jsxFileName = \"E:\\\\NETRA PROJECT\\\\Netra\\\\netra\\\\src\\\\pages\\\\Maintenance Allocation\\\\ShareMaintenance\\\\ShareMaintenance.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Navigation from '../../../components/navigation/Navigation';\nimport styles from \"./ShareMaintenance.module.css\";\nimport UserSelection from '../../../ui/userSelection/userSelection';\nimport { Button, RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\nimport TreeComponent from '../../../components/sortableTree/SortableTree';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\nimport AutoSelect from '../../../ui/Form/AutoSelect';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ShareMaintenance = props => {\n  _s();\n\n  var _matchingItems$;\n\n  const dispatch = useDispatch();\n  const currentSelection = useSelector(state => state.userSelection.currentSelection);\n  let fData = useSelector(state => state.treeData.treeData);\n  const sData = useSelector(state => state.userSelection.componentsData);\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\n  const matchingId = (_matchingItems$ = matchingItems[0]) === null || _matchingItems$ === void 0 ? void 0 : _matchingItems$.id;\n\n  const onLoadTreeStructure = () => {\n    const payload = {\n      system: currentSelection[\"equipmentName\"],\n      ship_name: currentSelection[\"shipName\"]\n    };\n\n    if (matchingId) {\n      payload.component_id = matchingId;\n    }\n\n    console.log(payload);\n    fetch(\"/fetch_system\", {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => res.json()).then(d => {\n      console.log(d);\n      let treeD = d[\"treeD\"];\n      let failureModes = d[\"failureMode\"];\n      console.log(failureModes);\n      dispatch(treeDataActions.setTreeData({\n        treeData: treeD\n      }));\n      dispatch(treeDataActions.setFailureModes(failureModes));\n    });\n  };\n\n  const [nextOption, setNext] = useState('assignMaintenance');\n  const [selectedComponent, setComponent] = useState(null);\n\n  const selectOnChange = (e, value) => {\n    debugger;\n    setComponent(value);\n  };\n\n  const handleNextChange = e => {\n    setNext(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.userSelection,\n      children: [/*#__PURE__*/_jsxDEV(UserSelection, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: styles.btn,\n        onClick: onLoadTreeStructure,\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.content,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.tree,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.treeChild,\n          children: /*#__PURE__*/_jsxDEV(TreeComponent, {\n            height: \"600px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.rightSection,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.selectComponent,\n          children: [\"Select Component\", /*#__PURE__*/_jsxDEV(AutoSelect, {\n            multiple: true,\n            fields: fData,\n            onChange: selectOnChange,\n            value: selectedComponent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ShareMaintenance, \"9fxQwnVJJgh8750TiWxRAtOmTDE=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = ShareMaintenance;\nexport default ShareMaintenance;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShareMaintenance\");","map":{"version":3,"sources":["E:/NETRA PROJECT/Netra/netra/src/pages/Maintenance Allocation/ShareMaintenance/ShareMaintenance.js"],"names":["React","useState","Navigation","styles","UserSelection","Button","RadioGroup","FormControlLabel","Radio","TreeComponent","useSelector","useDispatch","treeDataActions","AutoSelect","ShareMaintenance","props","dispatch","currentSelection","state","userSelection","fData","treeData","sData","componentsData","currentEquipmentName","matchingItems","filter","item","name","matchingId","id","onLoadTreeStructure","payload","system","ship_name","component_id","console","log","fetch","method","body","JSON","stringify","headers","Accept","then","res","json","d","treeD","failureModes","setTreeData","setFailureModes","nextOption","setNext","selectedComponent","setComponent","selectOnChange","e","value","handleNextChange","target","btn","content","tree","treeChild","rightSection","selectComponent"],"mappings":"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","sourcesContent":["import React,{useState} from 'react'\r\nimport Navigation from '../../../components/navigation/Navigation';\r\nimport styles from \"./ShareMaintenance.module.css\";\r\nimport UserSelection from '../../../ui/userSelection/userSelection'\r\nimport { Button,RadioGroup,FormControlLabel,Radio } from '@material-ui/core';\r\nimport TreeComponent from '../../../components/sortableTree/SortableTree';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\nimport AutoSelect from '../../../ui/Form/AutoSelect';\r\n\r\n\r\n\r\nconst ShareMaintenance=(props)=> {\r\n    const dispatch = useDispatch();\r\n    const currentSelection = useSelector(\r\n        (state) => state.userSelection.currentSelection\r\n      );\r\n    let fData = useSelector((state) => state.treeData.treeData);\r\n    const sData = useSelector((state) => state.userSelection.componentsData);\r\n\r\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\r\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\r\n\r\n  const matchingId = matchingItems[0]?.id;\r\n  const onLoadTreeStructure = () => {\r\n    const payload = {\r\n      system: currentSelection[\"equipmentName\"],\r\n      ship_name: currentSelection[\"shipName\"],\r\n    };\r\n  \r\n    if (matchingId) {\r\n      payload.component_id = matchingId;\r\n    }\r\n    console.log(payload)\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        console.log(d);\r\n        let treeD = d[\"treeD\"];\r\n        let failureModes = d[\"failureMode\"];\r\n        console.log(failureModes)\r\n        dispatch(\r\n          treeDataActions.setTreeData({\r\n            treeData: treeD,\r\n          }),\r\n        );\r\n        dispatch(\r\n          treeDataActions.setFailureModes(failureModes)\r\n        )\r\n      });\r\n  };\r\n\r\n      const[nextOption,setNext]=useState('assignMaintenance')\r\n      const[selectedComponent,setComponent]=useState(null)\r\n      const selectOnChange=(e,value)=>{\r\n        debugger\r\n        setComponent(value)\r\n      }\r\n      const handleNextChange=(e)=>{\r\n        setNext(e.target.value)\r\n      }\r\n    return (\r\n      <>\r\n      <Navigation/>\r\n      <div className={styles.userSelection}>\r\n          <UserSelection/>\r\n          <Button className={styles.btn} onClick={onLoadTreeStructure} variant='contained' color='primary'>Submit</Button>\r\n      </div>\r\n          \r\n          <div className={styles.content}>\r\n            <div className={styles.tree}>\r\n              <div className={styles.treeChild}>\r\n                {/* <FullscreenIcon style={{ float: \"right\", marginRight: \"25px\" }} /> */}\r\n                <TreeComponent height='600px'></TreeComponent>\r\n                {/* <div></div> */}\r\n              </div>\r\n            </div>\r\n            <div className={styles.rightSection}>\r\n              <div className={styles.selectComponent}>\r\n                Select Component\r\n                <AutoSelect\r\n                    multiple={true}\r\n                    fields={fData}\r\n                    onChange={selectOnChange}\r\n                    value={selectedComponent}\r\n                  ></AutoSelect>\r\n              </div>\r\n              </div>\r\n              </div>\r\n      \r\n    </>\r\n    );\r\n  }\r\n  export default ShareMaintenance;"]},"metadata":{},"sourceType":"module"}