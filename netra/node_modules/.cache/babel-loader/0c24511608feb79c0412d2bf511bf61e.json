{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  elements: [],\n  node: {\n    id: \"\",\n    type: \"\",\n    data: {\n      label: \"\"\n    },\n    position: {\n      x: 50,\n      y: 50\n    },\n    style: {\n      background: \"green\",\n      color: \"white\"\n    }\n  },\n  selectedNodeParent: \"\",\n  selectedNodeParentName: \"\",\n  selectedNodeSiblings: []\n};\nconst elements = createSlice({\n  name: \"elements\",\n  initialState: initialState,\n  reducers: {\n    addElement(state, action) {\n      debugger;\n      let ele = action.payload.ele;\n      state.elements.push(ele);\n    },\n\n    removeElement(state, action) {\n      let ele = action.payload;\n      state.elements = ele;\n    },\n\n    onConnect(state, action) {\n      let ele = action.payload;\n      state.elements = ele;\n    },\n\n    onHandleNameChange(state, action) {\n      console.log(state.elements);\n      let nodeName = action.payload.nodeName;\n      let node = action.payload.node;\n      state.elements.filter(x => x.id === node.id)[0].data.label = nodeName;\n      state.node.data.label = nodeName;\n    },\n\n    layoutChange(state, action) {\n      let elements = action.payload.elements;\n      state.elements = elements;\n    },\n\n    setNodeDetail(state, action) {\n      let node = action.payload;\n      state.node = node;\n      const edgeSource = state.elements.filter(x => x.dtype === \"edge\" && x.target === state.node.id);\n\n      if (edgeSource.length > 0) {\n        state.selectedNodeParent = edgeSource[0].source;\n        const filteredParent = state.elements.filter(x => x.id === edgeSource[0].source);\n        state.selectedNodeParentName = filteredParent[0].data.label;\n        const filteredSiblingsids = state.elements.filter(x => x.dtype === \"edge\" && x.source === edgeSource[0].source && x.target !== state.node.id);\n        state.selectedNodeSiblings = filteredSiblingsids.map((item, index) => {\n          const filteredItem = state.elements.filter(x => x.id === item.target);\n\n          if (filteredItem.length > 0) {\n            return filteredItem[0];\n          }\n        });\n      } else {\n        state.selectedNodeParentName = \"\";\n      }\n    },\n\n    updateParallelComponent(state, action) {\n      debugger; // let repair_type = action.payload.repair_type;\n\n      let parallel_comp = action.payload.parallel_comp;\n      let color = action.payload.color;\n      let data = { ...state.node.data,\n        k: Number(action.payload.k),\n        n: parallel_comp.length + 1,\n        parallel_comp: parallel_comp\n      };\n      let style = {\n        background: color,\n        border: \"1px solid black\",\n        borderRadius: \"5px\",\n        borderColor: \"black\",\n        padding: '20px'\n      };\n      let edgeStyle = {\n        stroke: color\n      }; //CHANGE COLOR OF SELECTED NODE\n\n      let selectedNodeIndex = state.elements.findIndex(data => data.id === state.node.id);\n      state.elements[selectedNodeIndex] = { ...state.elements[selectedNodeIndex],\n        data,\n        style\n      }; //OLD LOGIC - ADDS DUPLICATE NODES\n      // const ele = state.elements.map((item, index) => {\n      //   if (item.id === state.node.id) {\n      //     return {\n      //       ...item,\n      //       data,\n      //       style,\n      //     };\n      //   }\n      //   return item;\n      // });\n      //CHANGE COLOR OF PARALLEL NODES AND UPDATE PARALLEL COMPS\n\n      const ele2 = parallel_comp.map((item, index) => {\n        const p_ele_index = state.elements.findIndex(x => x.id === item.value);\n        state.elements[p_ele_index] = { ...state.elements[p_ele_index],\n          style,\n          data: { ...state.elements[p_ele_index].data,\n            k: Number(action.payload.k),\n            n: parallel_comp.length + 1,\n            parallel_comp: [...parallel_comp.filter(pc => pc.value !== item.value), {\n              value: state.node.id,\n              label: data.label\n            }]\n          }\n        };\n      }); //CHANGE EDGE COLORS\n\n      const ele3 = parallel_comp.map((item, index) => {\n        const edgeId = state.elements.findIndex(x => x.target === item.value && x.source === state.selectedNodeParent);\n        state.elements[edgeId] = { ...state.elements[edgeId],\n          style: edgeStyle,\n          type: \"smoothstep\",\n          animated: false\n        };\n      }); //Changing color of edge to clicked node\n\n      let clickedNodeEdgeIndex = state.elements.findIndex(x => x.target === state.node.id);\n\n      if (clickedNodeEdgeIndex !== -1) {\n        state.elements[clickedNodeEdgeIndex] = { ...state.elements[clickedNodeEdgeIndex],\n          style: edgeStyle,\n          animated: false,\n          type: \"smoothstep\"\n        };\n      } // state.elements = [...ele, ...ele2, ...ele3, clickedNodeEdge];\n      // state.elements = [...state.elements, clickedNodeEdge];\n\n    },\n\n    onUpdateKNHandler(state, action) {\n      const selectedNodes = action.payload.nodes;\n      let color = action.payload.color;\n      let edgeStyle = {\n        stroke: color\n      };\n      const ele1 = selectedNodes.map((item, index) => {\n        const filtered_item = state.elements.filter(x => x.id === item.value)[0];\n        const data = { ...filtered_item.data,\n          k: 2,\n          n: 4,\n          swR: 0.8\n        };\n        return { ...filtered_item,\n          data: data\n        };\n      }); //Update Edge\n\n      const edge1 = selectedNodes.map((item, index) => {\n        const filterEdge = state.elements.filter(x => x.target === item.value)[0];\n        return { ...filterEdge,\n          style: edgeStyle,\n          animated: true\n        };\n      });\n      state.elements = [...state.elements, ...ele1, ...edge1];\n    },\n\n    onRestoreHandler(state, action) {\n      const elements = action.payload.elements;\n      state.elements = elements;\n    } //Last line\n\n\n  }\n});\nexport const elementActions = elements.actions;\nexport default elements;","map":{"version":3,"sources":["D:/NetraB/netra/src/store/elements.js"],"names":["createSlice","initialState","elements","node","id","type","data","label","position","x","y","style","background","color","selectedNodeParent","selectedNodeParentName","selectedNodeSiblings","name","reducers","addElement","state","action","ele","payload","push","removeElement","onConnect","onHandleNameChange","console","log","nodeName","filter","layoutChange","setNodeDetail","edgeSource","dtype","target","length","source","filteredParent","filteredSiblingsids","map","item","index","filteredItem","updateParallelComponent","parallel_comp","k","Number","n","border","borderRadius","borderColor","padding","edgeStyle","stroke","selectedNodeIndex","findIndex","ele2","p_ele_index","value","pc","ele3","edgeId","animated","clickedNodeEdgeIndex","onUpdateKNHandler","selectedNodes","nodes","ele1","filtered_item","swR","edge1","filterEdge","onRestoreHandler","elementActions","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nconst initialState = {\r\n  elements: [],\r\n  node: {\r\n    id: \"\",\r\n    type: \"\",\r\n    data: { label: \"\" },\r\n    position: { x: 50, y: 50 },\r\n    style: {\r\n      background: \"green\",\r\n      color: \"white\",\r\n    },\r\n  },\r\n  selectedNodeParent: \"\",\r\n  selectedNodeParentName: \"\",\r\n  selectedNodeSiblings: [],\r\n};\r\n\r\nconst elements = createSlice({\r\n  name: \"elements\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    addElement(state, action) {\r\n      debugger;\r\n      let ele = action.payload.ele;\r\n      state.elements.push(ele);\r\n    },\r\n    removeElement(state, action) {\r\n      let ele = action.payload;\r\n      state.elements = ele;\r\n    },\r\n    onConnect(state, action) {\r\n      let ele = action.payload;\r\n      state.elements = ele;\r\n    },\r\n    onHandleNameChange(state, action) {\r\n      console.log(state.elements);\r\n      let nodeName = action.payload.nodeName;\r\n      let node = action.payload.node;\r\n      state.elements.filter((x) => x.id === node.id)[0].data.label = nodeName;\r\n      state.node.data.label = nodeName;\r\n    },\r\n    layoutChange(state, action) {\r\n      let elements = action.payload.elements;\r\n      state.elements = elements;\r\n    },\r\n    setNodeDetail(state, action) {\r\n      let node = action.payload;\r\n      state.node = node;\r\n      const edgeSource = state.elements.filter(\r\n        (x) => x.dtype === \"edge\" && x.target === state.node.id\r\n      );\r\n      if (edgeSource.length > 0) {\r\n        state.selectedNodeParent = edgeSource[0].source;\r\n        const filteredParent = state.elements.filter(\r\n          (x) => x.id === edgeSource[0].source\r\n        );\r\n        state.selectedNodeParentName = filteredParent[0].data.label;\r\n        const filteredSiblingsids = state.elements.filter(\r\n          (x) =>\r\n            x.dtype === \"edge\" &&\r\n            x.source === edgeSource[0].source &&\r\n            x.target !== state.node.id\r\n        );\r\n        state.selectedNodeSiblings = filteredSiblingsids.map((item, index) => {\r\n          const filteredItem = state.elements.filter(\r\n            (x) => x.id === item.target\r\n          );\r\n          if (filteredItem.length > 0) {\r\n            return filteredItem[0];\r\n          }\r\n        });\r\n      } else {\r\n        state.selectedNodeParentName = \"\";\r\n      }\r\n    },\r\n    updateParallelComponent(state, action) {\r\n      debugger; \r\n      // let repair_type = action.payload.repair_type;\r\n      let parallel_comp = action.payload.parallel_comp;\r\n      let color = action.payload.color;\r\n      let data = {\r\n        ...state.node.data,\r\n        k: Number(action.payload.k),\r\n        n:parallel_comp.length+1,\r\n        parallel_comp: parallel_comp,\r\n      };\r\n      let style = {\r\n        background: color,\r\n        border: \"1px solid black\",\r\n        borderRadius: \"5px\",\r\n        borderColor: \"black\",\r\n        padding:'20px'\r\n      };\r\n      let edgeStyle = { stroke: color };\r\n      //CHANGE COLOR OF SELECTED NODE\r\n      let selectedNodeIndex = state.elements.findIndex(data=>data.id===state.node.id)\r\n      state.elements[selectedNodeIndex]={\r\n        ...state.elements[selectedNodeIndex],\r\n        data,\r\n        style\r\n      }\r\n      //OLD LOGIC - ADDS DUPLICATE NODES\r\n      // const ele = state.elements.map((item, index) => {\r\n      //   if (item.id === state.node.id) {\r\n      //     return {\r\n      //       ...item,\r\n      //       data,\r\n      //       style,\r\n      //     };\r\n      //   }\r\n      //   return item;\r\n      // });\r\n      //CHANGE COLOR OF PARALLEL NODES AND UPDATE PARALLEL COMPS\r\n      const ele2 = parallel_comp.map((item, index) => {\r\n        const p_ele_index = state.elements.findIndex(\r\n          (x) => x.id === item.value\r\n        );\r\n        state.elements[p_ele_index]={\r\n          ...state.elements[p_ele_index],\r\n          style,\r\n          data:{...state.elements[p_ele_index].data,\r\n            k: Number(action.payload.k),\r\n            n:parallel_comp.length+1,\r\n            parallel_comp:[...parallel_comp.filter(pc=>pc.value!==item.value),{value:state.node.id,label:data.label}]}\r\n        };\r\n      });\r\n      //CHANGE EDGE COLORS\r\n      const ele3 = parallel_comp.map((item, index) => {\r\n        const edgeId = state.elements.findIndex(\r\n          (x) =>\r\n            x.target === item.value && x.source === state.selectedNodeParent\r\n        );\r\n        state.elements[edgeId]= {\r\n          ...state.elements[edgeId],\r\n          style: edgeStyle,\r\n          type: \"smoothstep\",\r\n          animated: false,\r\n        };\r\n      });\r\n\r\n      //Changing color of edge to clicked node\r\n      let clickedNodeEdgeIndex = state.elements.findIndex(\r\n        (x) => x.target === state.node.id\r\n      );\r\n      if (clickedNodeEdgeIndex!==-1) {\r\n        state.elements[clickedNodeEdgeIndex] = {\r\n          ...state.elements[clickedNodeEdgeIndex],\r\n          style: edgeStyle,\r\n          animated: false,\r\n          type: \"smoothstep\",\r\n        };\r\n      }\r\n      // state.elements = [...ele, ...ele2, ...ele3, clickedNodeEdge];\r\n      // state.elements = [...state.elements, clickedNodeEdge];\r\n    },\r\n    onUpdateKNHandler(state, action) {\r\n      const selectedNodes = action.payload.nodes;\r\n      let color = action.payload.color;\r\n      let edgeStyle = { stroke: color };\r\n      const ele1 = selectedNodes.map((item, index) => {\r\n        const filtered_item = state.elements.filter(\r\n          (x) => x.id === item.value\r\n        )[0];\r\n        const data = { ...filtered_item.data, k: 2, n: 4, swR: 0.8 };\r\n        return {\r\n          ...filtered_item,\r\n          data: data,\r\n        };\r\n      });\r\n      //Update Edge\r\n      const edge1 = selectedNodes.map((item, index) => {\r\n        const filterEdge = state.elements.filter(\r\n          (x) => x.target === item.value\r\n        )[0];\r\n        return {\r\n          ...filterEdge,\r\n          style: edgeStyle,\r\n          animated: true,\r\n        };\r\n      });\r\n      state.elements = [...state.elements, ...ele1, ...edge1];\r\n    },\r\n    onRestoreHandler(state, action) {\r\n      const elements = action.payload.elements;\r\n      state.elements = elements;\r\n    }, //Last line\r\n  },\r\n});\r\n\r\nexport const elementActions = elements.actions;\r\nexport default elements;\r\n"]},"metadata":{},"sourceType":"module"}