{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\CDashboard\\\\CDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport styles from \"./CDashboard.module.css\";\nimport { InputLabel, TextField, makeStyles, Button } from \"@material-ui/core\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Label, ReferenceLine } from \"recharts\"; // import { arr,arr2 } from \"./data\";\n\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from \"@material-ui/pickers\";\nimport MomentUtils from \"@date-io/moment\";\nimport Navigation from \"../../components/navigation/Navigation\";\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { userActions } from \"../../store/ApplicationVariable\";\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\nimport { min } from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CDashboard = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [userSelectionData, setUserSelectionData] = useState([]);\n  const [uniqueEqIds, setUniqueEqIds] = useState([]);\n  const [minMax, setMinMax] = useState([]);\n  useEffect(() => {\n    fetch(\"/cm_dashboard\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      console.log(data);\n      debugger;\n      const params = data[\"parameters\"];\n      console.log(\"hello:\", params);\n      setMinMax([...params]);\n      const user_selection = data[\"user_selection\"][\"data\"];\n      const eqData = data[\"user_selection\"][\"eqData\"];\n      const eqIds = data[\"user_selection\"][\"uniq_eq_data\"];\n      setUniqueEqIds(eqIds);\n      const shipName = user_selection.map(x => x.shipName);\n      setUserSelectionData(eqData);\n      setParamOptions(params);\n      dispatch(userActions.onChangeLoad({\n        filteredData: {\n          shipName: shipName\n        }\n      }));\n    });\n  }, [setUserSelectionData]);\n  console.log(minMax); // console.log(uniqueEqIds)\n\n  const [selectedEqName, setEquipmentName] = useState([]);\n  const [selectedShipName, setShipName] = useState([]);\n  const [selectedParameterName, setParameterName] = useState([]);\n  const [eqDataOption, setEqDataOption] = useState([]);\n  const [paramData, setParamData] = useState([]);\n  const [paramOptions, setParamOptions] = useState([]);\n  const customSelectData = useSelector(state => state.userSelection.userSelection);\n  const componentsData = useSelector(state => state.userSelection.componentsData);\n  console.log(componentsData);\n  const dropDownStyle = makeStyles({\n    root: {\n      paddingLeft: 10,\n      background: \"#fff\",\n      border: \"1px solid #0263a1\",\n      borderRadius: \"5px\",\n      width: \"320px\",\n      minHeight: \"40px\",\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\"\n    },\n    inputRoot: {\n      width: \"100%\"\n    }\n  });\n  const classes = dropDownStyle();\n  let arr = [];\n  let arr2 = [];\n\n  for (let i = 0; i < 50; i++) {\n    // const maxDate = Date.now();\n    // const timestamp = Math.floor(Math.random() * maxDate);\n    arr = [...arr, {\n      name: new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0, 10),\n      uv: Math.floor(Math.random() * (80 - 30 + 1)) + 30\n    }];\n    arr2 = [...arr2, {\n      name: new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0, 10),\n      uv: Math.floor(Math.random() * (75 - 30 + 1)) + 30\n    }];\n  }\n\n  const [showGraph, setShowGraph] = useState(false);\n\n  const onSubmitHandler = () => {\n    console.log(selectedEqName, selectedParameterName);\n    console.log(selectedEqName.map(x => x.id));\n    console.log(selectedParameterName.map(x => x.name));\n    fetch(\"/fetch_cmdata\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        EquipmentIds: selectedEqName.map(x => x.id),\n        // \"EquipmentIds\":[\"973afbdd-31bd-417e-ac8d-27071c92da91\"],\n        ParameterNames: selectedParameterName.map(x => x.name)\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      // console.log(data)\n      // setSnackBarMessage({\n      //   severity: \"success\",\n      //   message: data.message,\n      //   showSnackBar: true,\n      // });\n      debugger;\n      setParamData(data);\n      console.log(\"Param Data:\", data);\n      debugger;\n      console.log(\"Data:\", data);\n      console.log(\"Graph state before update:\", showGraph);\n      setShowGraph(true);\n      console.log(\"Graph state after update:\", showGraph);\n    }).catch(error => {\n      setSnackBarMessage({\n        severity: \"error\",\n        message: \"Some Error Occured. \" + error,\n        showSnackBar: true\n      });\n    });\n    console.log(paramData);\n  }; // Snackbar\n\n\n  const [SnackBarMessage, setSnackBarMessage] = useState({\n    severity: \"error\",\n    message: \"This is awesome\",\n    showSnackBar: false\n  });\n\n  const onHandleSnackClose = () => {\n    setSnackBarMessage({\n      severity: \"error\",\n      message: \"Please Add Systemss\",\n      showSnackBar: false\n    });\n  };\n\n  const minThreshold = minMax[0].min_value;\n  const maxThreshold = minMax[0].max_value;\n\n  const changeShip = e => {\n    var filteredEqData = [];\n    var xx = userSelectionData.filter(x => x.shipName === e.target.value).map(x => {\n      let id = uniqueEqIds.filter(y => y.name === x.equipmentName); // console.log(id);\n      // return  {name:x.equipmentName};\n\n      return id[0];\n    });\n    filteredEqData = [...filteredEqData, ...xx];\n    setEqDataOption(filteredEqData);\n    setShipName(e.target.value);\n  };\n\n  const from = \"2021-01-01\";\n  return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n    utils: MomentUtils,\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.body,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.mprofile,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"300px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            style: {\n              fontWeight: \"bold\",\n              color: \"black\",\n              fontSize: \"16px\",\n              marginBottom: \"10px\"\n            },\n            children: \"Ship Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CustomSelect, {\n            fields: customSelectData[\"shipName\"],\n            onChange: changeShip,\n            value: selectedShipName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"300px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            style: {\n              fontWeight: \"bold\",\n              color: \"black\",\n              fontSize: \"16px\",\n              marginBottom: \"10px\"\n            },\n            children: \"Equipment Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            classes: classes,\n            multiple: true,\n            id: \"tags-standard\",\n            options: eqDataOption,\n            getOptionLabel: option => option.name,\n            value: selectedEqName,\n            onChange: (e, value) => setEquipmentName(value),\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              InputProps: { ...params.InputProps,\n                disableUnderline: true\n              },\n              variant: \"standard\" // label=\"Multiple values\"\n              // placeholder=\"Favorites\"\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: \"300px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            style: {\n              fontWeight: \"bold\",\n              color: \"black\",\n              fontSize: \"16px\",\n              marginBottom: \"10px\"\n            },\n            children: \"Select Parameter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n            classes: classes,\n            multiple: true,\n            id: \"tags-standard\",\n            options: paramOptions,\n            getOptionLabel: option => option.name,\n            value: selectedParameterName,\n            onChange: (e, value) => setParameterName(value),\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              InputProps: { ...params.InputProps,\n                disableUnderline: true\n              },\n              variant: \"standard\" // label=\"Multiple values\"\n              // placeholder=\"Favorites\"\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          style: {\n            marginTop: \"2rem\"\n          },\n          onClick: onSubmitHandler,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), showGraph && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.midSection,\n        children: paramData.map(param => {\n          var _param$data$value, _param$data, _param$data$value2, _param$data2;\n\n          console.log(param);\n\n          if (param.data.length === 0) {\n            return null;\n          }\n\n          const crossingThreshold = ((_param$data$value = (_param$data = param.data[param.data.length - 1]) === null || _param$data === void 0 ? void 0 : _param$data.value) !== null && _param$data$value !== void 0 ? _param$data$value : 0) < minThreshold || ((_param$data$value2 = (_param$data2 = param.data[param.data.length - 1]) === null || _param$data2 === void 0 ? void 0 : _param$data2.value) !== null && _param$data$value2 !== void 0 ? _param$data$value2 : 0) > maxThreshold;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.rchart,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.content,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [crossingThreshold, param.equipmentName, \" \", param.componentName, param.parameterName]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n                width: 550,\n                height: 300,\n                data: param.data,\n                children: [/*#__PURE__*/_jsxDEV(XAxis, {\n                  dataKey: \"date\",\n                  tick: false,\n                  label: {\n                    value: \"Date\",\n                    position: \"insideBottom\",\n                    dy: 10\n                  },\n                  height: 45\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n                  domain: [0, 100],\n                  label: {\n                    value: `${param.parameterName} Data`,\n                    angle: -90,\n                    position: \"center\",\n                    paddingRight: \"20px\",\n                    dy: -10\n                  },\n                  width: 80\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n                  horizontal: false,\n                  vertical: false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 348,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Line, {\n                  type: \"monotone\",\n                  dataKey: \"value\",\n                  stroke: crossingThreshold ? \"red\" : \"green\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                  y: minThreshold,\n                  stroke: \"gray\",\n                  strokeDasharray: \"6 6\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 356,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(ReferenceLine, {\n                  y: maxThreshold,\n                  stroke: \"gray\",\n                  strokeDasharray: \"6 6\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), SnackBarMessage.showSnackBar && /*#__PURE__*/_jsxDEV(CustomizedSnackbars, {\n      message: SnackBarMessage,\n      onHandleClose: onHandleSnackClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CDashboard, \"KkLcks+WZQMRe6agZM+uMFZ+qAw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = CDashboard;\nexport default CDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CDashboard\");","map":{"version":3,"sources":["D:/NetraB/netra/src/pages/CDashboard/CDashboard.js"],"names":["React","useEffect","useState","styles","InputLabel","TextField","makeStyles","Button","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Label","ReferenceLine","MuiPickersUtilsProvider","KeyboardDatePicker","MomentUtils","Navigation","CustomSelect","Autocomplete","useDispatch","useSelector","userActions","CustomizedSnackbars","min","CDashboard","dispatch","userSelectionData","setUserSelectionData","uniqueEqIds","setUniqueEqIds","minMax","setMinMax","fetch","method","headers","Accept","then","res","json","data","console","log","params","user_selection","eqData","eqIds","shipName","map","x","setParamOptions","onChangeLoad","filteredData","selectedEqName","setEquipmentName","selectedShipName","setShipName","selectedParameterName","setParameterName","eqDataOption","setEqDataOption","paramData","setParamData","paramOptions","customSelectData","state","userSelection","componentsData","dropDownStyle","root","paddingLeft","background","border","borderRadius","width","minHeight","boxShadow","inputRoot","classes","arr","arr2","i","name","Date","getTime","Math","random","toISOString","slice","uv","floor","showGraph","setShowGraph","onSubmitHandler","id","body","JSON","stringify","EquipmentIds","ParameterNames","catch","error","setSnackBarMessage","severity","message","showSnackBar","SnackBarMessage","onHandleSnackClose","minThreshold","min_value","maxThreshold","max_value","changeShip","e","filteredEqData","xx","filter","target","value","y","equipmentName","from","mprofile","fontWeight","color","fontSize","marginBottom","option","InputProps","disableUnderline","marginTop","midSection","param","length","crossingThreshold","rchart","content","componentName","parameterName","position","dy","angle","paddingRight"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./CDashboard.module.css\";\r\nimport { InputLabel, TextField, makeStyles, Button } from \"@material-ui/core\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Label,\r\n  ReferenceLine,\r\n} from \"recharts\";\r\n// import { arr,arr2 } from \"./data\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\n\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { userActions } from \"../../store/ApplicationVariable\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\nimport { min } from \"moment\";\r\n\r\nconst CDashboard = () => {\r\n  const dispatch = useDispatch();\r\n  const [userSelectionData, setUserSelectionData] = useState([]);\r\n  const [uniqueEqIds, setUniqueEqIds] = useState([]);\r\n  const [minMax,setMinMax]= useState([])\r\n  \r\n  useEffect(() => {\r\n    fetch(\"/cm_dashboard\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(data);\r\n        debugger;\r\n        const params = data[\"parameters\"];\r\n        console.log(\"hello:\",params);\r\n        setMinMax([...params])\r\n        const user_selection = data[\"user_selection\"][\"data\"];\r\n        const eqData = data[\"user_selection\"][\"eqData\"];\r\n        const eqIds = data[\"user_selection\"][\"uniq_eq_data\"];\r\n        setUniqueEqIds(eqIds);\r\n        const shipName = user_selection.map((x) => x.shipName);\r\n        setUserSelectionData(eqData);\r\n        setParamOptions(params);\r\n        dispatch(\r\n          userActions.onChangeLoad({ filteredData: { shipName: shipName } })\r\n        );\r\n      });\r\n  }, [setUserSelectionData]);\r\n  console.log(minMax)\r\n  // console.log(uniqueEqIds)\r\n  const [selectedEqName, setEquipmentName] = useState([]);\r\n  const [selectedShipName, setShipName] = useState([]);\r\n  const [selectedParameterName, setParameterName] = useState([]);\r\n  const [eqDataOption, setEqDataOption] = useState([]);\r\n  const [paramData, setParamData] = useState([]);\r\n  const [paramOptions, setParamOptions] = useState([]);\r\n\r\n  const customSelectData = useSelector(\r\n    (state) => state.userSelection.userSelection\r\n  );\r\n  const componentsData = useSelector(\r\n    (state) => state.userSelection.componentsData\r\n  );\r\n  console.log(componentsData);\r\n\r\n  const dropDownStyle = makeStyles({\r\n    root: {\r\n      paddingLeft: 10,\r\n      background: \"#fff\",\r\n      border: \"1px solid #0263a1\",\r\n      borderRadius: \"5px\",\r\n      width: \"320px\",\r\n      minHeight: \"40px\",\r\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n    },\r\n    inputRoot: {\r\n      width: \"100%\",\r\n    },\r\n  });\r\n  const classes = dropDownStyle();\r\n  let arr = [];\r\n  let arr2 = [];\r\n  for (let i = 0; i < 50; i++) {\r\n    // const maxDate = Date.now();\r\n    // const timestamp = Math.floor(Math.random() * maxDate);\r\n    arr = [\r\n      ...arr,\r\n      {\r\n        name: new Date(\r\n          new Date(2021, 1, 1).getTime() +\r\n            Math.random() *\r\n              (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())\r\n        )\r\n          .toISOString()\r\n          .slice(0, 10),\r\n        uv: Math.floor(Math.random() * (80 - 30 + 1)) + 30,\r\n      },\r\n    ];\r\n\r\n    arr2 = [\r\n      ...arr2,\r\n      {\r\n        name: new Date(\r\n          new Date(2021, 1, 1).getTime() +\r\n            Math.random() *\r\n              (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())\r\n        )\r\n          .toISOString()\r\n          .slice(0, 10),\r\n        uv: Math.floor(Math.random() * (75 - 30 + 1)) + 30,\r\n      },\r\n    ];\r\n  }\r\n  const [showGraph, setShowGraph] = useState(false);\r\n\r\n  const onSubmitHandler = () => {\r\n    console.log(selectedEqName, selectedParameterName);\r\n    console.log(selectedEqName.map((x) => x.id));\r\n    console.log(selectedParameterName.map((x) => x.name));\r\n    fetch(\"/fetch_cmdata\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        EquipmentIds: selectedEqName.map((x) => x.id),\r\n        // \"EquipmentIds\":[\"973afbdd-31bd-417e-ac8d-27071c92da91\"],\r\n        ParameterNames: selectedParameterName.map((x) => x.name),\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        // console.log(data)\r\n\r\n        // setSnackBarMessage({\r\n        //   severity: \"success\",\r\n        //   message: data.message,\r\n        //   showSnackBar: true,\r\n        // });\r\n        debugger;\r\n        setParamData(data);\r\n        console.log(\"Param Data:\", data);\r\n        debugger;\r\n        console.log(\"Data:\", data);\r\n        console.log(\"Graph state before update:\", showGraph);\r\n        setShowGraph(true);\r\n        console.log(\"Graph state after update:\", showGraph);\r\n      })\r\n      .catch((error) => {\r\n        setSnackBarMessage({\r\n          severity: \"error\",\r\n          message: \"Some Error Occured. \" + error,\r\n          showSnackBar: true,\r\n        });\r\n      });\r\n    console.log(paramData);\r\n  };\r\n  // Snackbar\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const minThreshold = minMax[0].min_value;\r\n  const maxThreshold = minMax[0].max_value;\r\n  const changeShip = (e) => {\r\n    var filteredEqData = [];\r\n\r\n    var xx = userSelectionData\r\n      .filter((x) => x.shipName === e.target.value)\r\n      .map((x) => {\r\n        let id = uniqueEqIds.filter((y) => y.name === x.equipmentName);\r\n        // console.log(id);\r\n        // return  {name:x.equipmentName};\r\n        return id[0];\r\n      });\r\n    filteredEqData = [...filteredEqData, ...xx];\r\n\r\n    setEqDataOption(filteredEqData);\r\n    setShipName(e.target.value);\r\n  };\r\n  const from = \"2021-01-01\";\r\n  return (\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        <div className={styles.mprofile}>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Ship Name\r\n            </InputLabel>\r\n            <CustomSelect\r\n              fields={customSelectData[\"shipName\"]}\r\n              onChange={changeShip}\r\n              value={selectedShipName}\r\n            />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Equipment Name\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n              classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={eqDataOption}\r\n              getOptionLabel={(option) => option.name}\r\n              value={selectedEqName}\r\n              onChange={(e, value) => setEquipmentName(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{ ...params.InputProps, disableUnderline: true }}\r\n                  variant=\"standard\"\r\n                  // label=\"Multiple values\"\r\n                  // placeholder=\"Favorites\"\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Select Parameter\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n              classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={paramOptions}\r\n              getOptionLabel={(option) => option.name}\r\n              value={selectedParameterName}\r\n              onChange={(e, value) => setParameterName(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{ ...params.InputProps, disableUnderline: true }}\r\n                  variant=\"standard\"\r\n                  // label=\"Multiple values\"\r\n                  // placeholder=\"Favorites\"\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              marginTop: \"2rem\",\r\n            }}\r\n            onClick={onSubmitHandler}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n\r\n        {showGraph && (\r\n          <div className={styles.midSection}>\r\n            {paramData.map((param) => {\r\n              console.log(param);\r\n              if (param.data.length === 0) {\r\n                return null;\r\n              }\r\n              const crossingThreshold =\r\n                (param.data[param.data.length - 1]?.value ?? 0) <\r\n                  minThreshold ||\r\n                (param.data[param.data.length - 1]?.value ?? 0) > maxThreshold;\r\n\r\n              return (\r\n                <div className={styles.rchart}>\r\n                  <div className={styles.content}>\r\n                    <div>\r\n                      {crossingThreshold}\r\n                      {param.equipmentName} {param.componentName}\r\n                      {param.parameterName}\r\n                    </div>\r\n                    <LineChart width={550} height={300} data={param.data}>\r\n                      <XAxis\r\n                        dataKey=\"date\"\r\n                        tick={false}\r\n                        label={{\r\n                          value: \"Date\",\r\n                          position: \"insideBottom\",\r\n                          dy: 10,\r\n                        }}\r\n                        height={45}\r\n                      />\r\n                      <YAxis\r\n                        domain={[0, 100]}\r\n                        label={{\r\n                          value: `${param.parameterName} Data`,\r\n                          angle: -90,\r\n                          position: \"center\",\r\n                          paddingRight: \"20px\",\r\n                          dy: -10,\r\n                        }}\r\n                        width={80}\r\n                      />\r\n                      <CartesianGrid horizontal={false} vertical={false} />\r\n\r\n                      <Line\r\n                        type=\"monotone\"\r\n                        dataKey=\"value\"\r\n                        stroke={crossingThreshold ? \"red\" : \"green\"}\r\n                      />\r\n\r\n                      <ReferenceLine\r\n                        y={minThreshold}\r\n                        stroke=\"gray\"\r\n                        strokeDasharray=\"6 6\"\r\n                      />\r\n                      <ReferenceLine\r\n                        y={maxThreshold}\r\n                        stroke=\"gray\"\r\n                        strokeDasharray=\"6 6\"\r\n                      />\r\n\r\n                      <Tooltip />\r\n                    </LineChart>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n\r\n            {/* <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                <div>Parameter 1</div>\r\n                <LineChart width={550} height={300} data={arr2}>\r\n                  <XAxis dataKey=\"name\" tick={false} label={{ value: \"Date\", position: \"insideBottom\", dy: 10}} height={45} />\r\n                  <YAxis domain={[30,75]} label={{ value: 'Vibration Data', angle: -90, position: 'center' ,paddingRight:'20px', dy: -10}} width={80}/>\r\n                  <ReferenceLine y={45} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <ReferenceLine y={60} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <Tooltip />\r\n                  <CartesianGrid horizontal={false} vertical={false}/>\r\n                  \r\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke={maxThreshold>=arr2[arr2.length-1][\"uv\"] && arr2[arr2.length-1][\"uv\"]>=minThreshold?\"green\":\"red\"} />\r\n                 \r\n                </LineChart>\r\n                </div>\r\n              </div>\r\n\r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                <div>Parameter 2</div>\r\n                <LineChart width={550} height={300} data={arr2}>\r\n                  <XAxis dataKey=\"name\" tick={false} label={{ value: \"Date\", position: \"insideBottom\", dy: 10}} height={45} />\r\n                  <YAxis domain={[30,75]} label={{ value: 'Vibration Data', angle: -90, position: 'center' ,paddingRight:'20px', dy: -10}} width={80}/>\r\n                  <ReferenceLine y={45} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <ReferenceLine y={60} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <Tooltip />\r\n                  <CartesianGrid horizontal={false} vertical={false}/>\r\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke={maxThreshold>=arr2[arr2.length-1][\"uv\"] && arr2[arr2.length-1][\"uv\"]>=minThreshold?\"green\":\"red\"} />\r\n                  \r\n                </LineChart>\r\n\r\n\r\n    \r\n                 \r\n                </div>\r\n              </div>\r\n\r\n\r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                <div>Parameter 3</div>\r\n                <LineChart width={550} height={300} data={arr}>\r\n                  <XAxis dataKey=\"name\" tick={false} label={{ value: \"Date\", position: \"insideBottom\", dy: 10}} height={45} />\r\n                  <YAxis domain={[30,80]} label={{ value: 'Vibration Data', angle: -90, position: 'center' ,paddingRight:'20px', dy: -10}} width={80}/>\r\n                  <ReferenceLine y={45} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <ReferenceLine y={60} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <Tooltip />\r\n                  <CartesianGrid horizontal={false} vertical={false}/>\r\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\r\n                  <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n\r\n\r\n    \r\n                 \r\n                </div>\r\n              </div>\r\n            \r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                <div>Parameter 4</div>\r\n                <LineChart width={500} height={300} data={arr}>\r\n                \r\n                <XAxis dataKey=\"name\" label={{ value: \"Date\", position: \"insideBottom\", dy: 10}} height={45} tick={false} />\r\n                 \r\n                  <YAxis domain={[30,80]} label={{ value: 'Vibration Data', angle: -90, position: 'center' ,paddingRight:'20px', dy: -10}} width={80}/>\r\n\r\n                  \r\n                  <ReferenceLine y={40} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <ReferenceLine y={60} stroke=\"red\" strokeDasharray=\"6 6\" />\r\n                  <Tooltip />\r\n                  <CartesianGrid horizontal={false} vertical={false}/>\r\n                  <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\r\n                  <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#82ca9d\" />\r\n                </LineChart>\r\n\r\n                \r\n    \r\n                 \r\n                </div>\r\n              </div> */}\r\n          </div>\r\n        )}\r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\nexport default CDashboard;\r\n"]},"metadata":{},"sourceType":"module"}