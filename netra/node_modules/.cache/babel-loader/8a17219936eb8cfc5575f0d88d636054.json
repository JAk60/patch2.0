{"ast":null,"code":"var _jsxFileName = \"D:\\\\NetraB\\\\netra\\\\src\\\\pages\\\\Phase_Manager\\\\Home\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport { AgGridColumn } from \"ag-grid-react\";\nimport { Fragment } from \"react\";\nimport Table from \"../../../ui/Table/DataManagerTable\";\nimport { useSelector } from \"react-redux\";\nimport styles from \"../Phasemanager.module.css\";\nimport { v4 as uuid } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PhaseManagerHome = props => {\n  _s();\n\n  const phases = useSelector(state => state.phase.phase);\n  const pRow = phases.map(x => {\n    return {\n      id: x.id,\n      Description: x.Description,\n      LowerBound: x.LowerBound,\n      MeasurementType: x.MeasurementType,\n      PhaseName: x.PhaseName,\n      PhaseRange: x.PhaseRange,\n      Status: x.Status,\n      Unit: x.Unit,\n      UpperBound: x.UpperBound\n    };\n  }); // const pRow = [\n  //   {\n  //     Description: \"Description\",\n  //     LowerBound: 0,\n  //     MeasurementType: \"Quantitative\",\n  //     PhaseName: \"Load\",\n  //     PhaseRange: \"L1\",\n  //     Status: \"\",\n  //     Unit: \"Unit\",\n  //     UpperBound: 50,\n  //   },\n  //   {\n  //     Description: \"Description\",\n  //     LowerBound: 51,\n  //     MeasurementType: \"Quantitative\",\n  //     PhaseName: \"Load\",\n  //     PhaseRange: \"L2\",\n  //     Status: \"\",\n  //     Unit: \"Unit\",\n  //     UpperBound: 75,\n  //   },\n  // ];\n\n  const MPcolumnDefs = [/*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"PhaseName\",\n    headerName: \"Phase Parameter name\",\n    headerTooltip: \"Phase Parameter name\",\n    minWidth: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"MeasurementType\",\n    headerName: \"Measurement Type\",\n    headerTooltip: \"Measurement Type\",\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: [\"Qualitative\", \"Quantitative\"]\n    },\n    minWidth: 140,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"LowerBound\",\n    headerName: \"Lower Bound\",\n    headerTooltip: \"Lower Bound\",\n    type: \"number\",\n    minWidth: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"UpperBound\",\n    headerName: \"Upper Bound\",\n    headerTooltip: \"Upper Bound\",\n    type: \"number\",\n    minWidth: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this),\n  /*#__PURE__*/\n  // <AgGridColumn\n  //   field=\"Status\"\n  //   headerName=\"Status\"\n  //   minWidth={100}\n  //   editable={true}\n  // />,\n  _jsxDEV(AgGridColumn, {\n    field: \"PhaseRange\",\n    headerName: \"PhaseRange\",\n    headerTooltip: \"Phase Range\",\n    minWidth: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"Unit\",\n    headerName: \"Unit\",\n    headerTooltip: \"Unit\",\n    cellEditor: \"agSelectCellEditor\",\n    cellEditorParams: {\n      values: [\"Km/hr\", \"M/hr\"]\n    },\n    minWidth: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(AgGridColumn, {\n    field: \"Description\",\n    headerName: \"Description\",\n    headerTooltip: \"Description\",\n    minWidth: 100,\n    editable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this)];\n\n  const updateFinalRowData = allRows => {\n    props.tableUpdate(allRows);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.phaseTable,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        columnDefs: MPcolumnDefs,\n        rowData: pRow,\n        tableUpdate: updateFinalRowData,\n        setGrid: props.setGridApi,\n        gridApi: props.gridApi\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PhaseManagerHome, \"9N4ojVUCrqf5Lvk7uEJ8vpAU4JI=\", false, function () {\n  return [useSelector];\n});\n\n_c = PhaseManagerHome;\nexport default PhaseManagerHome;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhaseManagerHome\");","map":{"version":3,"sources":["D:/NetraB/netra/src/pages/Phase_Manager/Home/Home.js"],"names":["AgGridColumn","Fragment","Table","useSelector","styles","v4","uuid","PhaseManagerHome","props","phases","state","phase","pRow","map","x","id","Description","LowerBound","MeasurementType","PhaseName","PhaseRange","Status","Unit","UpperBound","MPcolumnDefs","values","updateFinalRowData","allRows","tableUpdate","phaseTable","setGridApi","gridApi"],"mappings":"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","sourcesContent":["import { AgGridColumn } from \"ag-grid-react\";\r\nimport { Fragment } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styles from \"../Phasemanager.module.css\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst PhaseManagerHome = (props) => {\r\n  const phases = useSelector((state) => state.phase.phase);\r\n\r\n  const pRow = phases.map((x) => {\r\n    return {\r\n      id: x.id,\r\n      Description: x.Description,\r\n      LowerBound: x.LowerBound,\r\n      MeasurementType: x.MeasurementType,\r\n      PhaseName: x.PhaseName,\r\n      PhaseRange: x.PhaseRange,\r\n      Status: x.Status,\r\n      Unit: x.Unit,\r\n      UpperBound: x.UpperBound,\r\n    };\r\n  });\r\n  // const pRow = [\r\n  //   {\r\n  //     Description: \"Description\",\r\n  //     LowerBound: 0,\r\n  //     MeasurementType: \"Quantitative\",\r\n  //     PhaseName: \"Load\",\r\n  //     PhaseRange: \"L1\",\r\n  //     Status: \"\",\r\n  //     Unit: \"Unit\",\r\n  //     UpperBound: 50,\r\n  //   },\r\n  //   {\r\n  //     Description: \"Description\",\r\n  //     LowerBound: 51,\r\n  //     MeasurementType: \"Quantitative\",\r\n  //     PhaseName: \"Load\",\r\n  //     PhaseRange: \"L2\",\r\n  //     Status: \"\",\r\n  //     Unit: \"Unit\",\r\n  //     UpperBound: 75,\r\n  //   },\r\n  // ];\r\n  const MPcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"PhaseName\"\r\n      headerName=\"Phase Parameter name\"\r\n      headerTooltip=\"Phase Parameter name\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"MeasurementType\"\r\n      headerName=\"Measurement Type\"\r\n      headerTooltip=\"Measurement Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"Qualitative\", \"Quantitative\"] }}\r\n      minWidth={140}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"LowerBound\"\r\n      headerName=\"Lower Bound\"\r\n      headerTooltip=\"Lower Bound\"\r\n      type=\"number\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"UpperBound\"\r\n      headerName=\"Upper Bound\"\r\n      headerTooltip=\"Upper Bound\"\r\n      type=\"number\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    // <AgGridColumn\r\n    //   field=\"Status\"\r\n    //   headerName=\"Status\"\r\n    //   minWidth={100}\r\n    //   editable={true}\r\n    // />,\r\n    <AgGridColumn\r\n      field=\"PhaseRange\"\r\n      headerName=\"PhaseRange\"\r\n      headerTooltip=\"Phase Range\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Unit\"\r\n      headerName=\"Unit\"\r\n      headerTooltip=\"Unit\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"Km/hr\", \"M/hr\"] }}\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Description\"\r\n      headerName=\"Description\"\r\n      headerTooltip=\"Description\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <div className={styles.phaseTable}>\r\n        <Table\r\n          columnDefs={MPcolumnDefs}\r\n          rowData={pRow}\r\n          tableUpdate={updateFinalRowData}\r\n          setGrid={props.setGridApi}\r\n          gridApi={props.gridApi}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default PhaseManagerHome;\r\n"]},"metadata":{},"sourceType":"module"}