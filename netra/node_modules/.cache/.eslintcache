[{"E:\\NetraB\\netra\\src\\index.js":"1","E:\\NetraB\\netra\\src\\App.js":"2","E:\\NetraB\\netra\\src\\store\\index.js":"3","E:\\NetraB\\netra\\src\\store\\elements.js":"4","E:\\NetraB\\netra\\src\\store\\ApplicationVariable.js":"5","E:\\NetraB\\netra\\src\\store\\PhaseStore.js":"6","E:\\NetraB\\netra\\src\\store\\taskStore.js":"7","E:\\NetraB\\netra\\src\\store\\TreeDataStore.js":"8","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\SystemConfiguration.js":"9","E:\\NetraB\\netra\\src\\components\\navigation\\Navigation.js":"10","E:\\NetraB\\netra\\src\\pages\\Home\\Home.js":"11","E:\\NetraB\\netra\\src\\pages\\Phase_Manager\\Phasemanager.js":"12","E:\\NetraB\\netra\\src\\pages\\Settings\\editProfile.js":"13","E:\\NetraB\\netra\\src\\pages\\HEP\\HEP.js":"14","E:\\NetraB\\netra\\src\\pages\\Data Manager\\DataManager.js":"15","E:\\NetraB\\netra\\src\\pages\\Settings\\SignIn.js":"16","E:\\NetraB\\netra\\src\\pages\\Settings\\SignUp.js":"17","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\ReliabilityDashboard.js":"18","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\new.js":"19","E:\\NetraB\\netra\\src\\pages\\Settings\\userApproval.js":"20","E:\\NetraB\\netra\\src\\pages\\Settings\\configureHistory.js":"21","E:\\NetraB\\netra\\src\\pages\\Mission Profile\\MissionProfile.js":"22","E:\\NetraB\\netra\\src\\pages\\dragNdrop\\DragNdrop.js":"23","E:\\NetraB\\netra\\src\\pages\\Settings\\configureHistory2.js":"24","E:\\NetraB\\netra\\src\\pages\\Data Manager\\repairableOverhaul\\repairableOverhaul.js":"25","E:\\NetraB\\netra\\src\\pages\\ViewData\\ViewData.js":"26","E:\\NetraB\\netra\\src\\pages\\Module Selection\\ModuleSelection.js":"27","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\MaintenanceAllocation.js":"28","E:\\NetraB\\netra\\src\\pages\\CDashboard\\CDashboard.js":"29","E:\\NetraB\\netra\\src\\pages\\userSelectionConfig\\UserSelectionConfiguration.js":"30","E:\\NetraB\\netra\\src\\pages\\System Docs\\SysDocs.js":"31","E:\\NetraB\\netra\\src\\pages\\PM OPTIM\\pm.js":"32","E:\\NetraB\\netra\\src\\pages\\TaskDashboard\\TaskDashboard.js":"33","E:\\NetraB\\netra\\src\\pages\\Bayesian\\bayesian_input.js":"34","E:\\NetraB\\netra\\src\\pages\\RUL\\RulLife.js":"35","E:\\NetraB\\netra\\src\\pages\\Phase_Manager\\PhasetableData.js":"36","E:\\NetraB\\netra\\src\\components\\navigation\\SideBarData.js":"37","E:\\NetraB\\netra\\src\\pages\\Settings\\ChangePassword.js":"38","E:\\NetraB\\netra\\src\\pages\\RUL\\RULPredictor.js":"39","E:\\NetraB\\netra\\src\\pages\\TaskDashboard\\TaskRenderMultipleComponent.js":"40","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\MissionSlider.js":"41","E:\\NetraB\\netra\\src\\ui\\CustomSnackBar.js":"42","E:\\NetraB\\netra\\src\\components\\module\\NewModule.js":"43","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\EventCalendar.js":"44","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\DashboardData.js":"45","E:\\NetraB\\netra\\src\\components\\slider\\NewSlider.js":"46","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\dutyCycle\\dutyCycle.js":"47","E:\\NetraB\\netra\\src\\ui\\userSelection\\userSelection.js":"48","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\redundancy\\redundancy.js":"49","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\maintenanceInfo\\maintenanceInfo.js":"50","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\failureMode\\failureMode.js":"51","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\additionalInfo\\additionalInfo.js":"52","E:\\NetraB\\netra\\src\\pages\\Phase_Manager\\Home\\Home.js":"53","E:\\NetraB\\netra\\src\\ui\\Table\\DataManagerTable.js":"54","E:\\NetraB\\netra\\src\\ui\\Table\\Table.js":"55","E:\\NetraB\\netra\\src\\pages\\Phase_Manager\\LifeMultiplier\\LifeMultiplier.js":"56","E:\\NetraB\\netra\\src\\pages\\Phase_Manager\\DCMultiplier\\dcMultiplier.js":"57","E:\\NetraB\\netra\\src\\pages\\Phase_Manager\\Add\\AddPhase.js":"58","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\ReliabilityChart.js":"59","E:\\NetraB\\netra\\src\\ui\\Form\\AutoSelect.js":"60","E:\\NetraB\\netra\\src\\ui\\Form\\CustomTextInput.js":"61","E:\\NetraB\\netra\\src\\ui\\Form\\CustomSelect.js":"62","E:\\NetraB\\netra\\src\\components\\sortableTree\\SortableTree.js":"63","E:\\NetraB\\netra\\src\\pages\\PM OPTIM\\Data.js":"64","E:\\NetraB\\netra\\src\\pages\\PM OPTIM\\OptiQ.js":"65","E:\\NetraB\\netra\\src\\components\\main\\EqptStructuring\\EqptStructuring.js":"66","E:\\NetraB\\netra\\src\\components\\main\\EqptStructuring\\LabelToolTip\\LabelToolTip.js":"67","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\SystemConfigurationTable.js":"68","E:\\NetraB\\netra\\src\\components\\sortableTree\\SortableTreeData.js":"69","E:\\NetraB\\netra\\src\\pages\\PM OPTIM\\GroupTable.js":"70","E:\\NetraB\\netra\\src\\pages\\PM OPTIM\\OptTable.js":"71","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\redundancy\\RenderParallelComponent.js":"72","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\failureMode\\EquipmentName.js":"73","E:\\NetraB\\netra\\src\\ui\\userSelection\\userSelectionData.js":"74","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\RCMMain.js":"75","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\RCM\\CreateRCM.js":"76","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\Main.js":"77","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\RCM\\critical_RCM.js":"78","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\ShareMaintenance\\ShareMaintenance.js":"79","E:\\NetraB\\netra\\src\\pages\\Data Manager\\repairableOverhaul\\repairableSubTable.js":"80","E:\\NetraB\\netra\\src\\ui\\Table\\OverhaulTable.js":"81","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\ModifyandDisplay\\ModifyandDisplayMaintenance.js":"82","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\CreateMaintenance\\CreateMaintenance.js":"83","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\AddData\\AddData.js":"84","E:\\NetraB\\netra\\src\\pages\\dragNdrop\\Layout\\layout.js":"85","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\CreateProfile.js":"86","E:\\NetraB\\netra\\src\\ui\\Form\\SelectWithLimit.js":"87","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\BarGraph.js":"88","E:\\NetraB\\netra\\src\\pages\\Data Manager\\parameterEstimation\\parameterEstimation.js":"89","E:\\NetraB\\netra\\src\\pages\\Data Manager\\importData\\importData.js":"90","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\historicalData.js":"91","E:\\NetraB\\netra\\src\\pages\\Data Manager\\maintenanceData\\maintenanceData.js":"92","E:\\NetraB\\netra\\src\\pages\\Data Manager\\operationalData\\operationalData.js":"93","E:\\NetraB\\netra\\src\\pages\\HEP\\HEPData.js":"94","E:\\NetraB\\netra\\src\\pages\\HEP\\CommanHEP\\CommanHEP.js":"95","E:\\NetraB\\netra\\src\\pages\\HEP\\ComponentLevel\\componentLevel.js":"96","E:\\NetraB\\netra\\src\\pages\\HEP\\LifeMultiplier\\LifeMultiplier.js":"97","E:\\NetraB\\netra\\src\\pages\\HEP\\EquipmentLevel\\EquipmentLevel.js":"98","E:\\NetraB\\netra\\src\\ui\\Table\\Table2.js":"99","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\CreateMaintenance\\AssignType.js":"100","E:\\NetraB\\netra\\src\\pages\\dragNdrop\\Flow\\flow.js":"101","E:\\NetraB\\netra\\src\\pages\\dragNdrop\\ComponentDetails\\ComponentDetails.js":"102","E:\\NetraB\\netra\\src\\pages\\dragNdrop\\SideBar\\Sidebar.js":"103","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\expert.js":"104","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\nprd.js":"105","E:\\NetraB\\netra\\src\\pages\\Data Manager\\maintenanceData\\EquipmentName.js":"106","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\oem.js":"107","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\failureDataPoint.js":"108","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\IntervalData.js":"109","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\oemExpert.js":"110","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\probabilityFailure.js":"111","E:\\NetraB\\netra\\src\\pages\\Data Manager\\selectEquipment\\selectEquipment.js":"112","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\CreateMaintenance\\SaveHandler.js":"113","E:\\NetraB\\netra\\src\\pages\\dragNdrop\\ComponentDetails\\GroupData.js":"114","E:\\NetraB\\netra\\src\\pages\\dragNdrop\\CustomNode\\CustomNode.js":"115","E:\\NetraB\\netra\\src\\pages\\dragNdrop\\ContextMenu\\contextMenu.js":"116","E:\\NetraB\\netra\\src\\pages\\Data Manager\\selectEquipment\\MultiSelect.js":"117"},{"size":605,"mtime":1671081976535,"results":"118","hashOfConfig":"119"},{"size":7812,"mtime":1689929763932,"results":"120","hashOfConfig":"119"},{"size":557,"mtime":1686505144712,"results":"121","hashOfConfig":"119"},{"size":6548,"mtime":1678199695652,"results":"122","hashOfConfig":"119"},{"size":2599,"mtime":1689936208851,"results":"123","hashOfConfig":"119"},{"size":807,"mtime":1671081974574,"results":"124","hashOfConfig":"119"},{"size":988,"mtime":1686631537467,"results":"125","hashOfConfig":"119"},{"size":2373,"mtime":1690190314262,"results":"126","hashOfConfig":"119"},{"size":16149,"mtime":1690106256845,"results":"127","hashOfConfig":"119"},{"size":1913,"mtime":1671081974533,"results":"128","hashOfConfig":"119"},{"size":4039,"mtime":1690017249969,"results":"129","hashOfConfig":"119"},{"size":13700,"mtime":1671081976556,"results":"130","hashOfConfig":"119"},{"size":2350,"mtime":1671081976561,"results":"131","hashOfConfig":"119"},{"size":11730,"mtime":1690106881820,"results":"132","hashOfConfig":"119"},{"size":17545,"mtime":1690193825262,"results":"133","hashOfConfig":"119"},{"size":3706,"mtime":1671081974559,"results":"134","hashOfConfig":"119"},{"size":5045,"mtime":1671081976560,"results":"135","hashOfConfig":"119"},{"size":28269,"mtime":1676409474560,"results":"136","hashOfConfig":"119"},{"size":27201,"mtime":1671081976558,"results":"137","hashOfConfig":"119"},{"size":2884,"mtime":1671081976562,"results":"138","hashOfConfig":"119"},{"size":2826,"mtime":1671081976561,"results":"139","hashOfConfig":"119"},{"size":6847,"mtime":1671671220450,"results":"140","hashOfConfig":"119"},{"size":274,"mtime":1671081974565,"results":"141","hashOfConfig":"119"},{"size":5119,"mtime":1671081976561,"results":"142","hashOfConfig":"119"},{"size":790,"mtime":1690189223019,"results":"143","hashOfConfig":"119"},{"size":3237,"mtime":1690177825342,"results":"144","hashOfConfig":"119"},{"size":4394,"mtime":1671081974554,"results":"145","hashOfConfig":"119"},{"size":1966,"mtime":1683480682754,"results":"146","hashOfConfig":"119"},{"size":12739,"mtime":1689937066372,"results":"147","hashOfConfig":"119"},{"size":9978,"mtime":1690108153465,"results":"148","hashOfConfig":"119"},{"size":10941,"mtime":1690123530206,"results":"149","hashOfConfig":"119"},{"size":5079,"mtime":1689766306618,"results":"150","hashOfConfig":"119"},{"size":26691,"mtime":1690126702826,"results":"151","hashOfConfig":"119"},{"size":11210,"mtime":1686218639389,"results":"152","hashOfConfig":"119"},{"size":8512,"mtime":1690107018397,"results":"153","hashOfConfig":"119"},{"size":3000,"mtime":1671081974556,"results":"154","hashOfConfig":"119"},{"size":692,"mtime":1671081974533,"results":"155","hashOfConfig":"119"},{"size":4587,"mtime":1671081974559,"results":"156","hashOfConfig":"119"},{"size":4147,"mtime":1690016750677,"results":"157","hashOfConfig":"119"},{"size":4567,"mtime":1686657791835,"results":"158","hashOfConfig":"119"},{"size":1175,"mtime":1671081974557,"results":"159","hashOfConfig":"119"},{"size":1191,"mtime":1671081974575,"results":"160","hashOfConfig":"119"},{"size":3841,"mtime":1679604860110,"results":"161","hashOfConfig":"119"},{"size":3057,"mtime":1671081976557,"results":"162","hashOfConfig":"119"},{"size":4776,"mtime":1671081974557,"results":"163","hashOfConfig":"119"},{"size":1492,"mtime":1671081974533,"results":"164","hashOfConfig":"119"},{"size":1256,"mtime":1676999008366,"results":"165","hashOfConfig":"119"},{"size":7520,"mtime":1690015158648,"results":"166","hashOfConfig":"119"},{"size":4235,"mtime":1686495682122,"results":"167","hashOfConfig":"119"},{"size":4220,"mtime":1690193354080,"results":"168","hashOfConfig":"119"},{"size":3957,"mtime":1690105623011,"results":"169","hashOfConfig":"119"},{"size":4347,"mtime":1679426151887,"results":"170","hashOfConfig":"119"},{"size":3280,"mtime":1671081974555,"results":"171","hashOfConfig":"119"},{"size":11372,"mtime":1690105285278,"results":"172","hashOfConfig":"119"},{"size":5545,"mtime":1690181949530,"results":"173","hashOfConfig":"119"},{"size":3228,"mtime":1671081974555,"results":"174","hashOfConfig":"119"},{"size":2371,"mtime":1671081974555,"results":"175","hashOfConfig":"119"},{"size":6093,"mtime":1671081976554,"results":"176","hashOfConfig":"119"},{"size":1279,"mtime":1671081976557,"results":"177","hashOfConfig":"119"},{"size":1489,"mtime":1683401221099,"results":"178","hashOfConfig":"119"},{"size":1437,"mtime":1671081974576,"results":"179","hashOfConfig":"119"},{"size":1808,"mtime":1689315374201,"results":"180","hashOfConfig":"119"},{"size":1520,"mtime":1671532574410,"results":"181","hashOfConfig":"119"},{"size":4244,"mtime":1689763930184,"results":"182","hashOfConfig":"119"},{"size":3032,"mtime":1689765873975,"results":"183","hashOfConfig":"119"},{"size":10574,"mtime":1690025964990,"results":"184","hashOfConfig":"119"},{"size":557,"mtime":1671081974530,"results":"185","hashOfConfig":"119"},{"size":5384,"mtime":1671081974569,"results":"186","hashOfConfig":"119"},{"size":257,"mtime":1671081974535,"results":"187","hashOfConfig":"119"},{"size":4438,"mtime":1689765978824,"results":"188","hashOfConfig":"119"},{"size":3327,"mtime":1689765972197,"results":"189","hashOfConfig":"119"},{"size":4141,"mtime":1671081976572,"results":"190","hashOfConfig":"119"},{"size":2499,"mtime":1671669904819,"results":"191","hashOfConfig":"119"},{"size":61,"mtime":1671081974580,"results":"192","hashOfConfig":"119"},{"size":1191,"mtime":1690122439477,"results":"193","hashOfConfig":"119"},{"size":5206,"mtime":1690129226973,"results":"194","hashOfConfig":"119"},{"size":1798,"mtime":1690122331340,"results":"195","hashOfConfig":"119"},{"size":26467,"mtime":1690127692149,"results":"196","hashOfConfig":"119"},{"size":3430,"mtime":1690106967562,"results":"197","hashOfConfig":"119"},{"size":3532,"mtime":1671081976544,"results":"198","hashOfConfig":"119"},{"size":8555,"mtime":1671081976578,"results":"199","hashOfConfig":"119"},{"size":7240,"mtime":1690106940982,"results":"200","hashOfConfig":"119"},{"size":4083,"mtime":1690106234306,"results":"201","hashOfConfig":"119"},{"size":10283,"mtime":1690116021713,"results":"202","hashOfConfig":"119"},{"size":11358,"mtime":1686599614446,"results":"203","hashOfConfig":"119"},{"size":8081,"mtime":1671081976557,"results":"204","hashOfConfig":"119"},{"size":2859,"mtime":1671081974576,"results":"205","hashOfConfig":"119"},{"size":1858,"mtime":1671081976557,"results":"206","hashOfConfig":"119"},{"size":5885,"mtime":1690525381100,"results":"207","hashOfConfig":"119"},{"size":2043,"mtime":1679489628650,"results":"208","hashOfConfig":"119"},{"size":10060,"mtime":1690554560452,"results":"209","hashOfConfig":"119"},{"size":5537,"mtime":1690113173540,"results":"210","hashOfConfig":"119"},{"size":3597,"mtime":1679558635461,"results":"211","hashOfConfig":"119"},{"size":3071,"mtime":1671081974547,"results":"212","hashOfConfig":"119"},{"size":5621,"mtime":1671081974545,"results":"213","hashOfConfig":"119"},{"size":2180,"mtime":1671081974546,"results":"214","hashOfConfig":"119"},{"size":2041,"mtime":1671081976547,"results":"215","hashOfConfig":"119"},{"size":3300,"mtime":1671081974546,"results":"216","hashOfConfig":"119"},{"size":4512,"mtime":1671081976579,"results":"217","hashOfConfig":"119"},{"size":27500,"mtime":1690133007459,"results":"218","hashOfConfig":"119"},{"size":7100,"mtime":1671081976567,"results":"219","hashOfConfig":"119"},{"size":9696,"mtime":1678199846700,"results":"220","hashOfConfig":"119"},{"size":1198,"mtime":1671081974568,"results":"221","hashOfConfig":"119"},{"size":4172,"mtime":1671081974539,"results":"222","hashOfConfig":"119"},{"size":3708,"mtime":1671081974541,"results":"223","hashOfConfig":"119"},{"size":2570,"mtime":1671669883907,"results":"224","hashOfConfig":"119"},{"size":6126,"mtime":1671081976541,"results":"225","hashOfConfig":"119"},{"size":5375,"mtime":1679478401229,"results":"226","hashOfConfig":"119"},{"size":4035,"mtime":1671081976539,"results":"227","hashOfConfig":"119"},{"size":6418,"mtime":1671081976541,"results":"228","hashOfConfig":"119"},{"size":3507,"mtime":1671081974542,"results":"229","hashOfConfig":"119"},{"size":1375,"mtime":1671081974545,"results":"230","hashOfConfig":"119"},{"size":844,"mtime":1671081976550,"results":"231","hashOfConfig":"119"},{"size":807,"mtime":1671081974564,"results":"232","hashOfConfig":"119"},{"size":694,"mtime":1671081976565,"results":"233","hashOfConfig":"119"},{"size":1086,"mtime":1671081976564,"results":"234","hashOfConfig":"119"},{"size":2929,"mtime":1671081974545,"results":"235","hashOfConfig":"119"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},"xo457z",{"filePath":"239","messages":"240","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"238"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"238"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"238"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"238"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"238"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"238"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"238"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"238"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"238"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"238"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"238"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"238"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"238"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"238"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"238"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"238"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"238"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"238"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"238"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"238"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"238"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"238"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"238"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":68,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"238"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"238"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"238"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"238"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"238"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"238"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"238"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"238"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"238"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"238"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"238"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"238"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"238"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"238"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"238"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"238"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382","usedDeprecatedRules":"238"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"238"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"238"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"238"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"238"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"238"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"238"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"238"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"238"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"238"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"238"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"238"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"238"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"238"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"238"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"238"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"238"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"449","usedDeprecatedRules":"238"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"452","usedDeprecatedRules":"238"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"238"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458","usedDeprecatedRules":"238"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"238"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464","usedDeprecatedRules":"238"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"238"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"238"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"238"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"238"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"238"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"238"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"238"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497","usedDeprecatedRules":"238"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500","usedDeprecatedRules":"238"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"238"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"238"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509","usedDeprecatedRules":"238"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"238"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"238"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"238"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"238"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"238"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527","usedDeprecatedRules":"238"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"530","usedDeprecatedRules":"238"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"238"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"238"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539","usedDeprecatedRules":"238"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"238"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"238"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548","usedDeprecatedRules":"238"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557","usedDeprecatedRules":"238"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},"E:\\NetraB\\netra\\src\\index.js",[],["560","561"],"E:\\NetraB\\netra\\src\\App.js",["562","563","564"],"import \"./App.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Navigation from \"./components/navigation/Navigation\";\r\nimport Home from \"./pages/Home/Home\";\r\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\r\nimport SystemConfiguration from \"./pages/systen_configuration/SystemConfiguration\";\r\nimport Phasemanager from \"./pages/Phase_Manager/Phasemanager\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport HEP from \"./pages/HEP/HEP\";\r\nimport DataManager from \"./pages/Data Manager/DataManager\";\r\nimport ReliabilityDashboard from \"./pages/Reliability Dashboard/ReliabilityDashboard\";\r\nimport SignIn from \"./pages/Settings/SignIn\";\r\nimport SignUp from \"./pages/Settings/SignUp\";\r\nimport ModuleSelection from \"./pages/Module Selection/ModuleSelection\";\r\nimport MissionProfile from \"./pages/Mission Profile/MissionProfile\";\r\nimport UserApproval from \"./pages/Settings/userApproval\";\r\nimport EditProfile from \"./pages/Settings/editProfile\";\r\nimport ConfigureHistory from \"./pages/Settings/configureHistory\";\r\nimport ConfigureHistory2 from \"./pages/Settings/configureHistory2\";\r\nimport ViewData from \"./pages/ViewData/ViewData\";\r\nimport New from \"./pages/Reliability Dashboard/new\";\r\nimport RepairableOverhaul from \"./pages/Data Manager/repairableOverhaul/repairableOverhaul\";\r\nimport MaintenanceAllocation from \"./pages/Maintenance Allocation/MaintenanceAllocation\";\r\nimport DragNDrop from \"./pages/dragNdrop/DragNdrop\";\r\nimport CDashboard from \"./pages/CDashboard/CDashboard\";\r\nimport TaskDashboard from \"./pages/TaskDashboard/TaskDashboard\";\r\nimport UserSelectionConfiguration from \"./pages/userSelectionConfig/UserSelectionConfiguration\";\r\nimport Bayesian_Inputs from \"./pages/Bayesian/bayesian_input\";\r\nimport SysDocs from \"./pages/System Docs/SysDocs\";\r\nimport PM from \"./pages/PM OPTIM/pm\";\r\nimport RulLife from './pages/RUL/RulLife';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      light: \"#53538d\",\r\n      main: \"#292971\",\r\n      dark: \"#1c1c4f\",\r\n    },\r\n    secondary: {\r\n      light: \"#36a4eb\",\r\n      main: \"#048ee7\",\r\n      dark: \"#0263a1\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction App() {\r\n  // useEffect(() => {\r\n  //   fetchFunction();\r\n  // }, []);\r\n  // function fetchFunction() {\r\n  //   fetch(\"/home\", {\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //       Accept: \"application/json\",\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((data) => {\r\n  //       setWord(data);\r\n  //     });\r\n  // }\r\n  const [settings, setSettings] = useState(null);\r\n  const [loggedIn, setLoggedIn] = useState(true);\r\n  useEffect(() => {\r\n    if (localStorage.getItem(\"settings\")) {\r\n      let settings = JSON.parse(localStorage.getItem(\"settings\"));\r\n      console.log(settings);\r\n      setSettings(settings);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className=\"container\">\r\n        <Router>\r\n          <Switch>\r\n            <Route\r\n              path=\"/\"\r\n              exact\r\n              render={(props) => (\r\n                <Home\r\n                  {...props}\r\n                  loggedIn={loggedIn}\r\n                  setLoggedIn={setLoggedIn}\r\n                  settings={settings}\r\n                />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/configure_history\"\r\n              exact\r\n              component={ConfigureHistory}\r\n            />\r\n            <Route\r\n              path=\"/configure_history2\"\r\n              exact\r\n              component={ConfigureHistory2}\r\n            />\r\n            <Route path=\"/user_approval\" exact component={UserApproval} />\r\n            <Route path=\"/edit_profile\" exact component={EditProfile} />\r\n            <Route\r\n              path=\"/view_data\"\r\n              exact\r\n              render={(props) => (\r\n                <ViewData\r\n                  {...props}\r\n                  loggedIn={loggedIn}\r\n                  setLoggedIn={setLoggedIn}\r\n                  settings={settings}\r\n                />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/maintenance_allocation\"\r\n              render={(props) => (\r\n                <MaintenanceAllocation\r\n                  {...props}\r\n                  loggedIn={loggedIn}\r\n                  setLoggedIn={setLoggedIn}\r\n                  settings={settings}\r\n                />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/sign_in\"\r\n              exact\r\n              render={(props) => (\r\n                <SignIn\r\n                  {...props}\r\n                  loggedIn={loggedIn}\r\n                  setLoggedIn={setLoggedIn}\r\n                  settings={settings}\r\n                />\r\n              )}\r\n            />\r\n            <Route path=\"/sign_up\" exact component={SignUp} />\r\n            <Route\r\n              path=\"/module_select\"\r\n              exact\r\n              render={(props) => (\r\n                <ModuleSelection\r\n                  {...props}\r\n                  setSettings={setSettings}\r\n                  settings={settings}\r\n                />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/system_config\"\r\n              render={(props) => (\r\n                <SystemConfiguration {...props} settings={settings} />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/phase_manager\"\r\n              render={(props) => (\r\n                <Phasemanager {...props} settings={settings} />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/HEP\"\r\n              render={(props) => <HEP {...props} settings={settings} />}\r\n            />\r\n            <Route\r\n              path=\"/data_manager\"\r\n              render={(props) => <DataManager {...props} settings={settings} />}\r\n            />\r\n            <Route\r\n              path=\"/mission_profile\"\r\n              render={(props) => (\r\n                <MissionProfile {...props} settings={settings} />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/user_selection_config\"\r\n              render={(props) => (\r\n                <UserSelectionConfiguration {...props} settings={settings} />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/add_system_doc\"\r\n              render={(props) => <SysDocs {...props} settings={settings} />}\r\n            />\r\n            <Route\r\n              path=\"/health_prediction_input\"\r\n              render={(props) => (\r\n                <Bayesian_Inputs {...props} settings={settings} />\r\n              )}\r\n            />\r\n\r\n            <Route\r\n              path=\"/rDashboard\"\r\n              render={(props) => (\r\n                <ReliabilityDashboard {...props} settings={settings} />\r\n              )}\r\n            />\r\n\r\n            <Route\r\n              path=\"/CDashboard\"\r\n              render={(props) => <CDashboard {...props} settings={settings} />}\r\n            />\r\n\r\n            <Route\r\n              path=\"/TaskDashboard\"\r\n              render={(props) => (\r\n                <TaskDashboard {...props} settings={settings} />\r\n              )}\r\n            />\r\n            <Route\r\n              path=\"/new\"\r\n              render={(props) => <New {...props} settings={settings} />}\r\n            />\r\n            <Route\r\n              path=\"/dnd\"\r\n              render={(props) => <DragNDrop {...props} settings={settings} />}\r\n            />\r\n            <Route\r\n              path=\"/optimize\"\r\n              render={()=><PM />}\r\n            />\r\n            <Route\r\n              path=\"/rul\"\r\n              render={()=><RulLife />}\r\n            />\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","E:\\NetraB\\netra\\src\\store\\index.js",[],"E:\\NetraB\\netra\\src\\store\\elements.js",["565","566","567","568","569"],"import { createSlice } from \"@reduxjs/toolkit\";\r\nconst initialState = {\r\n  elements: [],\r\n  node: {\r\n    id: \"\",\r\n    type: \"\",\r\n    data: { label: \"\" },\r\n    position: { x: 50, y: 50 },\r\n    style: {\r\n      background: \"green\",\r\n      color: \"white\",\r\n    },\r\n  },\r\n  selectedNodeParent: \"\",\r\n  selectedNodeParentName: \"\",\r\n  selectedNodeSiblings: [],\r\n};\r\n\r\nconst elements = createSlice({\r\n  name: \"elements\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    addElement(state, action) {\r\n      debugger;\r\n      let ele = action.payload.ele;\r\n      state.elements.push(ele);\r\n    },\r\n    removeElement(state, action) {\r\n      let ele = action.payload;\r\n      state.elements = ele;\r\n    },\r\n    onConnect(state, action) {\r\n      let ele = action.payload;\r\n      state.elements = ele;\r\n    },\r\n    onHandleNameChange(state, action) {\r\n      console.log(state.elements);\r\n      let nodeName = action.payload.nodeName;\r\n      let node = action.payload.node;\r\n      state.elements.filter((x) => x.id === node.id)[0].data.label = nodeName;\r\n      state.node.data.label = nodeName;\r\n    },\r\n    layoutChange(state, action) {\r\n      let elements = action.payload.elements;\r\n      state.elements = elements;\r\n    },\r\n    setNodeDetail(state, action) {\r\n      let node = action.payload;\r\n      state.node = node;\r\n      const edgeSource = state.elements.filter(\r\n        (x) => x.dtype === \"edge\" && x.target === state.node.id\r\n      );\r\n      if (edgeSource.length > 0) {\r\n        state.selectedNodeParent = edgeSource[0].source;\r\n        const filteredParent = state.elements.filter(\r\n          (x) => x.id === edgeSource[0].source\r\n        );\r\n        state.selectedNodeParentName = filteredParent[0].data.label;\r\n        const filteredSiblingsids = state.elements.filter(\r\n          (x) =>\r\n            x.dtype === \"edge\" &&\r\n            x.source === edgeSource[0].source &&\r\n            x.target !== state.node.id\r\n        );\r\n        state.selectedNodeSiblings = filteredSiblingsids.map((item, index) => {\r\n          const filteredItem = state.elements.filter(\r\n            (x) => x.id === item.target\r\n          );\r\n          if (filteredItem.length > 0) {\r\n            return filteredItem[0];\r\n          }\r\n        });\r\n      } else {\r\n        state.selectedNodeParentName = \"\";\r\n      }\r\n    },\r\n    updateParallelComponent(state, action) {\r\n      debugger; \r\n      // let repair_type = action.payload.repair_type;\r\n      let parallel_comp = action.payload.parallel_comp;\r\n      let color = action.payload.color;\r\n      let data = {\r\n        ...state.node.data,\r\n        k: Number(action.payload.k),\r\n        k_elh: Number(action.payload.k_elh),\r\n        k_c: Number(action.payload.k_c),\r\n        k_ds: Number(action.payload.k_ds),\r\n        k_as: Number(action.payload.k_as),\r\n        n:parallel_comp.length+1,\r\n        parallel_comp: parallel_comp,\r\n      };\r\n      let style = {\r\n        background: color,\r\n        border: \"1px solid black\",\r\n        borderRadius: \"5px\",\r\n        borderColor: \"black\",\r\n        padding:'20px'\r\n      };\r\n      let edgeStyle = { stroke: color };\r\n      //CHANGE COLOR OF SELECTED NODE\r\n      let selectedNodeIndex = state.elements.findIndex(data=>data.id===state.node.id)\r\n      state.elements[selectedNodeIndex]={\r\n        ...state.elements[selectedNodeIndex],\r\n        data,\r\n        style\r\n      }\r\n      //OLD LOGIC - ADDS DUPLICATE NODES\r\n      // const ele = state.elements.map((item, index) => {\r\n      //   if (item.id === state.node.id) {\r\n      //     return {\r\n      //       ...item,\r\n      //       data,\r\n      //       style,\r\n      //     };\r\n      //   }\r\n      //   return item;\r\n      // });\r\n      //CHANGE COLOR OF PARALLEL NODES AND UPDATE PARALLEL COMPS\r\n      const ele2 = parallel_comp.map((item, index) => {\r\n        const p_ele_index = state.elements.findIndex(\r\n          (x) => x.id === item.value\r\n        );\r\n        state.elements[p_ele_index]={\r\n          ...state.elements[p_ele_index],\r\n          style,\r\n          data:{...state.elements[p_ele_index].data,\r\n            k: Number(action.payload.k),\r\n            k_elh: Number(action.payload.k_elh),\r\n            k_c: Number(action.payload.k_c),\r\n            k_ds: Number(action.payload.k_ds),\r\n            k_as: Number(action.payload.k_as),\r\n            n:parallel_comp.length+1,\r\n            parallel_comp:[...parallel_comp.filter(pc=>pc.value!==item.value),{value:state.node.id,label:data.label}]}\r\n        };\r\n      });\r\n      //CHANGE EDGE COLORS\r\n      const ele3 = parallel_comp.map((item, index) => {\r\n        const edgeId = state.elements.findIndex(\r\n          (x) =>\r\n            x.target === item.value && x.source === state.selectedNodeParent\r\n        );\r\n        state.elements[edgeId]= {\r\n          ...state.elements[edgeId],\r\n          style: edgeStyle,\r\n          type: \"smoothstep\",\r\n          animated: false,\r\n        };\r\n      });\r\n\r\n      //Changing color of edge to clicked node\r\n      let clickedNodeEdgeIndex = state.elements.findIndex(\r\n        (x) => x.target === state.node.id\r\n      );\r\n      if (clickedNodeEdgeIndex!==-1) {\r\n        state.elements[clickedNodeEdgeIndex] = {\r\n          ...state.elements[clickedNodeEdgeIndex],\r\n          style: edgeStyle,\r\n          animated: false,\r\n          type: \"smoothstep\",\r\n        };\r\n      }\r\n      // state.elements = [...ele, ...ele2, ...ele3, clickedNodeEdge];\r\n      // state.elements = [...state.elements, clickedNodeEdge];\r\n    },\r\n    onUpdateKNHandler(state, action) {\r\n      const selectedNodes = action.payload.nodes;\r\n      let color = action.payload.color;\r\n      let edgeStyle = { stroke: color };\r\n      const ele1 = selectedNodes.map((item, index) => {\r\n        const filtered_item = state.elements.filter(\r\n          (x) => x.id === item.value\r\n        )[0];\r\n        const data = { ...filtered_item.data, k: 2, n: 4, swR: 0.8 };\r\n        return {\r\n          ...filtered_item,\r\n          data: data,\r\n        };\r\n      });\r\n      //Update Edge\r\n      const edge1 = selectedNodes.map((item, index) => {\r\n        const filterEdge = state.elements.filter(\r\n          (x) => x.target === item.value\r\n        )[0];\r\n        return {\r\n          ...filterEdge,\r\n          style: edgeStyle,\r\n          animated: true,\r\n        };\r\n      });\r\n      state.elements = [...state.elements, ...ele1, ...edge1];\r\n    },\r\n    onRestoreHandler(state, action) {\r\n      const elements = action.payload.elements;\r\n      state.elements = elements;\r\n    }, //Last line\r\n  },\r\n});\r\n\r\nexport const elementActions = elements.actions;\r\nexport default elements;\r\n","E:\\NetraB\\netra\\src\\store\\ApplicationVariable.js",[],"E:\\NetraB\\netra\\src\\store\\PhaseStore.js",["570"],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { MProwData } from \"../pages/Phase_Manager/PhasetableData\";\r\n\r\nconst initialState = {\r\n  phase: [],\r\n};\r\n\r\nconst phase = createSlice({\r\n  name: \"phase\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    setPhase(state, action) {\r\n      const phaseData = action.payload.phaseData;\r\n      state.phase = [...state.phase, ...phaseData];\r\n    },\r\n    addPhase(state, action) {\r\n      const newPhase = action.payload.newPhase;\r\n      state.phase = [...state.phase, ...newPhase];\r\n    },\r\n    loadPhase(state, action) {\r\n      const phase_data = action.payload.newPhase;\r\n      // state.phase = [...phase_data];\r\n      state.phase = phase_data;\r\n    },\r\n    //End of Reducers\r\n  },\r\n});\r\n\r\nexport default phase;\r\nexport const phaseActions = phase.actions;\r\n","E:\\NetraB\\netra\\src\\store\\taskStore.js",[],"E:\\NetraB\\netra\\src\\store\\TreeDataStore.js",[],"E:\\NetraB\\netra\\src\\pages\\systen_configuration\\SystemConfiguration.js",["571","572","573","574","575","576","577"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport styles from \"./SystemConfiguration.module.css\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport EqptStructuring from \"../../components/main/EqptStructuring/EqptStructuring\";\r\nimport NewModule from \"../../components/module/NewModule\";\r\nimport StageSlider from \"../../components/slider/NewSlider\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button, unstable_createMuiStrictModeTheme } from \"@material-ui/core\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\nimport { Switch, Route, useHistory, Link } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport RedundancyInfo from \"./redundancy/redundancy\";\r\nimport MaintenanceInfo from \"./maintenanceInfo/maintenanceInfo\";\r\nimport FailureMode from \"./failureMode/failureMode\";\r\nimport DutyCycle from \"./dutyCycle/dutyCycle\";\r\nimport AdditionalInfo from \"./additionalInfo/additionalInfo\";\r\nimport { useLocation } from \"react-router\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst SystemStyles = makeStyles({\r\n  formControl: {\r\n    margin: \"2rem\",\r\n    minWidth: 200,\r\n  },\r\n  Submit: {\r\n    margin: \"2rem\",\r\n  },\r\n  buttons: {\r\n    minWidth: 150,\r\n    marginLeft: 10,\r\n    marginTop: 15,\r\n    float: \"right\",\r\n  },\r\n});\r\n\r\nconst SystemConfiguration = (props) => {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  const location = useLocation();\r\n  const dispatch = useDispatch();\r\n  let finalTableData = [];\r\n  const setFinalTableData = (d) => {\r\n    finalTableData = d;\r\n  };\r\n  \r\n \r\n\r\n  const systemConfigurationTreeData = useSelector(\r\n    (state) => state.treeData.treeData\r\n  );\r\n  const systemConfigurationData = useSelector(\r\n    (state) => state.treeData.sortTreeData\r\n  );\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  // const [showSnackBar, setShowSnackBar] = useState(false);\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const [Stage, setStage] = useState(0);\r\n  const SystemClasses = SystemStyles();\r\n  const history = useHistory();\r\n  const NextStage = () => {\r\n    if (Stage === 0) {\r\n      setStage(1);\r\n      history.push(\"/system_config/redundancy_info\");\r\n    }\r\n    if (Stage === 1) {\r\n      setStage(2);\r\n      history.push(\"/system_config/maintenance_info\");\r\n    }\r\n    if (Stage === 2) {\r\n      setStage(3);\r\n      history.push(\"/system_config/failure_mode\");\r\n    }\r\n    if (Stage === 3) {\r\n      setStage(4);\r\n      history.push(\"/system_config/duty_cycle\");\r\n    }\r\n    if (Stage === 4) {\r\n      setStage(5);\r\n      history.push(\"/system_config/additional_info\");\r\n    }\r\n  };\r\n  const PreviousStage = (reset = false) => {\r\n    if (Stage === 1 && reset === false) {\r\n      setStage(0);\r\n      history.push(\"/system_config\");\r\n    }\r\n    if (Stage === 1 && reset === true) {\r\n      setStage(0);\r\n      history.push(\"/system_config\");\r\n    }\r\n    if (Stage === 2) {\r\n      setStage(1);\r\n      history.push(\"/system_config/redundancy_info\");\r\n    }\r\n    if (Stage === 3) {\r\n      setStage(2);\r\n      history.push(\"/system_config/maintenance_info\");\r\n    }\r\n    if (Stage === 4) {\r\n      setStage(3);\r\n      history.push(\"/system_config/failure_mode\");\r\n    }\r\n    if (Stage === 5) {\r\n      setStage(4);\r\n      history.push(\"/system_config/duty_cycle\");\r\n    }\r\n  };\r\n\r\n  const CheckStage = () => {\r\n    if (Stage === 0) {\r\n      history.push(\"/system_config\");\r\n    }\r\n    if (Stage === 1) {\r\n      history.push(\"/system_config/redundancy_info\");\r\n    }\r\n    if (Stage === 2) {\r\n      history.push(\"/system_config/maintenance_info\");\r\n    }\r\n    if (Stage === 3) {\r\n      history.push(\"/system_config/failure_mode\");\r\n    }\r\n    if (Stage === 4) {\r\n      history.push(\"/system_config/duty_cycle\");\r\n    }\r\n  };\r\n\r\n  const nextModule = (settings) => {\r\n    if (settings.PhaseManager) {\r\n      props.history.push(\"/phase_manager\");\r\n    } else if (settings.HEP) {\r\n      props.history.push(\"/HEP\");\r\n    } else if (settings.DataManager) {\r\n      props.history.push(\"/data_manager\");\r\n    } else if (settings.ReliabilityDashboard) {\r\n      props.history.push(\"/rDashboard\");\r\n    }\r\n  };\r\n\r\n  const [locationKeys, setLocationKeys] = useState([]);\r\n  useEffect(() => {\r\n    if (location.pathname === \"/system_config\") {\r\n      setStage(0);\r\n    }\r\n    return history.listen((location) => {\r\n      if (history.action === \"PUSH\") {\r\n        setLocationKeys([location.key]);\r\n      }\r\n\r\n      if (history.action === \"POP\") {\r\n        if (locationKeys[1] === location.key) {\r\n          setLocationKeys(([_, ...keys]) => keys);\r\n          NextStage();\r\n        } else {\r\n          setLocationKeys((keys) => [location.key, ...keys]);\r\n          PreviousStage();\r\n        }\r\n      }\r\n    });\r\n  }, [locationKeys, history]);\r\n  let [marks, setMarks] = useState([\r\n    {\r\n      value: 15,\r\n      label: \"Equipment Structuring\",\r\n    },\r\n    {\r\n      value: 30,\r\n      label: \"Redundancy & Parallel Information\",\r\n    },\r\n    {\r\n      value: 45,\r\n      label: \"Maintenance Information\",\r\n    },\r\n    {\r\n      value: 60,\r\n      label: \"Failure Mode\",\r\n    },\r\n    {\r\n      value: 75,\r\n      label: \"Duty Cycle\",\r\n    },\r\n    {\r\n      value: 90,\r\n      label: \"Additional Equipment Info\",\r\n    },\r\n  ]);\r\n\r\n  if (width < 768) {\r\n    marks = marks.map((item, index) => {\r\n      return item[\"value\"];\r\n    });\r\n  }\r\n  //on Save button click to save tree and system config data to dB.\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n\r\n  const onSaveButtonClickHandler = () => {\r\n    const currentLocation = location.pathname;\r\n    if (currentLocation === \"/system_config\") {\r\n      if (systemConfigurationTreeData.length > 0) {\r\n        fetch(\"/save_system\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            flatData: systemConfigurationTreeData,\r\n            nestedData: systemConfigurationData,\r\n            dtype: \"insertSystem\",\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n          },\r\n        })\r\n          .then((res) => {\r\n            return res.json();\r\n          })\r\n          .then((data) => {\r\n            setSnackBarMessage({\r\n              severity: \"success\",\r\n              message: data.message,\r\n              showSnackBar: true,\r\n            });\r\n          })\r\n          .catch((error) => {\r\n            setSnackBarMessage({\r\n              severity: \"error\",\r\n              message: \"Some Error Occured. \" + error,\r\n              showSnackBar: true,\r\n            });\r\n          });\r\n      } else {\r\n        setSnackBarMessage((prevState) => {\r\n          const data = {\r\n            ...prevState,\r\n            message: \"This is error\",\r\n            showSnackBar: true,\r\n          };\r\n          return data;\r\n        });\r\n      }\r\n    } else {\r\n      let dType = null;\r\n      if (currentLocation === \"/system_config/redundancy_info\") {\r\n        dType = \"insertRedundancy\";\r\n      } else if (currentLocation === \"/system_config/maintenance_info\") {\r\n        dType = \"insertMaintenanceInfo\";\r\n      } else if (currentLocation === \"/system_config/additional_info\") {\r\n        dType = \"additionalInfo\";\r\n      } else if (currentLocation === \"/system_config/duty_cycle\") {\r\n        dType = \"insertDutyCycle\";\r\n      } else if (currentLocation === \"/system_config/failure_mode\") {\r\n        dType = \"failure_mode\";\r\n        // let data_ = [];\r\n        // debugger;\r\n        // const failureData = finalTableData.map((row) => {\r\n        //   let component_id = row.eqId;\r\n        //   let rComponent_id = row.rEquipmentId;\r\n        //   let fixFailureMode = row.fixFailureMode;\r\n        //   let failureMode = row.FailureMode.split(\",\");\r\n        //   if (fixFailureMode) {\r\n        //     if (fixFailureMode.length > 0) {\r\n        //       fixFailureMode.map((x) => {\r\n        //         if (x.trim() !== \"\") {\r\n        //           data_.push({\r\n        //             component_id,\r\n        //             rComponent_id,\r\n        //             failure_mode: x.trim(),\r\n        //             id: uuid(),\r\n        //           });\r\n        //         }\r\n        //         return null;\r\n        //       });\r\n        //     }\r\n        //   }\r\n        //   if (failureMode.length > 0) {\r\n        //     failureMode.map((x) => {\r\n        //       if (x.trim() !== \"\") {\r\n        //         data_.push({\r\n        //           component_id,\r\n        //           rComponent_id,\r\n        //           failure_mode: x.trim(),\r\n        //           id: uuid(),\r\n        //         });\r\n        //       }\r\n        //       return null;\r\n        //     });\r\n        //   }\r\n        //   return data_;\r\n        // });\r\n        // finalTableData = data_;\r\n      }\r\n      if (dType) {\r\n        if (finalTableData.length > 0) {\r\n          fetch(\"/save_system\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              flatData: finalTableData,\r\n              dtype: dType,\r\n            }),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Accept: \"application/json\",\r\n            },\r\n          })\r\n            .then((res) => {\r\n              return res.json();\r\n            })\r\n            .then((data) => {\r\n              setSnackBarMessage({\r\n                severity: \"success\",\r\n                message: data.message,\r\n                showSnackBar: true,\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              setSnackBarMessage({\r\n                severity: \"error\",\r\n                message: \"Some Error Occured. \" + error,\r\n                showSnackBar: true,\r\n              });\r\n            });\r\n        } else {\r\n          setSnackBarMessage((prevState) => {\r\n            const data = {\r\n              ...prevState,\r\n              message: \"This is error\",\r\n              showSnackBar: true,\r\n            };\r\n            return data;\r\n          });\r\n        }\r\n      }\r\n    }\r\n    //End\r\n  };\r\n\r\n  const sData = useSelector((state) => state.userSelection.componentsData);\r\n\r\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\r\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\r\n\r\n  const matchingId = matchingItems[0]?.id;\r\n  const onLoadTreeStructure = () => {\r\n    const payload = {\r\n      system: currentSelection[\"equipmentName\"],\r\n      ship_name: currentSelection[\"shipName\"],\r\n    };\r\n  \r\n    if (matchingId) {\r\n      payload.component_id = matchingId;\r\n    }\r\n    console.log(payload)\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        console.log(d);\r\n        let treeD = d[\"treeD\"];\r\n        let failureModes = d[\"failureMode\"];\r\n        console.log(failureModes)\r\n        dispatch(\r\n          treeDataActions.setTreeData({\r\n            treeData: treeD,\r\n          }),\r\n        );\r\n        dispatch(\r\n          treeDataActions.setFailureModes(failureModes)\r\n        )\r\n      });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Navigation />\r\n      <NewModule />\r\n      <StageSlider marks={marks} default={marks[Stage][\"value\"]} />\r\n      <div className={styles.flex}>\r\n        <div className={styles.user}>\r\n          <UserSelection />\r\n        </div>\r\n        <div className={styles.buttons}>\r\n          <Route path=\"/system_config\">\r\n            <Route path={[\"/system_config/\"]}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={SystemClasses.buttons}\r\n                onClick={onLoadTreeStructure}\r\n              >\r\n                Load System\r\n              </Button>\r\n            </Route>\r\n            <Route\r\n              exact\r\n              path={[\r\n                \"/system_config/redundancy_info\",\r\n                \"/system_config/maintenance_info\",\r\n                \"/system_config/failure_mode\",\r\n                \"/system_config/duty_cycle\",\r\n                \"/system_config/additional_info\",\r\n              ]}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={SystemClasses.buttons}\r\n                onClick={() => PreviousStage()}\r\n              >\r\n                Back\r\n              </Button>\r\n            </Route>\r\n            {/* <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={SystemClasses.buttons}\r\n            >\r\n              Replicate\r\n            </Button> */}\r\n\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={SystemClasses.buttons}\r\n              onClick={onSaveButtonClickHandler}\r\n            >\r\n              Save\r\n            </Button>\r\n            <Route\r\n              exact\r\n              path={[\r\n                \"/system_config\",\r\n                \"/system_config/redundancy_info\",\r\n                \"/system_config/maintenance_info\",\r\n                \"/system_config/failure_mode\",\r\n                \"/system_config/duty_cycle\",\r\n              ]}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={SystemClasses.buttons}\r\n                onClick={() => NextStage()}\r\n              >\r\n                Next Stage\r\n              </Button>\r\n            </Route>\r\n            <Route exact path=\"/system_config/additional_info\">\r\n              <Button\r\n                onClick={() => nextModule(props.settings)}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={SystemClasses.buttons}\r\n              >\r\n                Next Module\r\n              </Button>\r\n            </Route>\r\n            <Route exact path=\"/system_config/additional_info\">\r\n              <Button\r\n                component={Link}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={SystemClasses.buttons}\r\n                onClick={() => {\r\n                  if (window.confirm(\"Are you sure you want to skip?\")) {\r\n                    history.push(\"/phase_manager\");\r\n                  } else {\r\n                    console.log(\"Hii\");\r\n                  }\r\n                }}\r\n              >\r\n                Skip Stage\r\n              </Button>\r\n            </Route>\r\n          </Route>\r\n        </div>\r\n      </div>\r\n      <Switch>\r\n        <Route path=\"/system_config\" exact={true}>\r\n          <EqptStructuring />\r\n        </Route>\r\n        <Route path=\"/system_config/redundancy_info\" exact={true}>\r\n          <RedundancyInfo tableUpdate={setFinalTableData}></RedundancyInfo>\r\n        </Route>\r\n        <Route path=\"/system_config/maintenance_info\" exact={true}>\r\n          <MaintenanceInfo tableUpdate={setFinalTableData}></MaintenanceInfo>\r\n        </Route>\r\n        <Route path=\"/system_config/failure_mode\" exact={true}>\r\n          <FailureMode\r\n            tableUpdate={setFinalTableData}\r\n            matchingId={matchingId}\r\n          ></FailureMode>\r\n        </Route>\r\n        <Route path=\"/system_config/duty_cycle\" exact={true}>\r\n          <DutyCycle tableUpdate={setFinalTableData}></DutyCycle>\r\n        </Route>\r\n        <Route path=\"/system_config/additional_info\" exact={true}>\r\n          <AdditionalInfo tableUpdate={setFinalTableData}></AdditionalInfo>\r\n        </Route>\r\n      </Switch>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SystemConfiguration;\r\n","E:\\NetraB\\netra\\src\\components\\navigation\\Navigation.js",[],"E:\\NetraB\\netra\\src\\pages\\Home\\Home.js",["578","579","580","581","582"],"import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./Home.module.css\";\r\nimport { Button, Menu, MenuItem } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\r\nimport { userActions } from \"../../store/ApplicationVariable\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\n\r\nconst Home = (props) => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  \r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  useEffect(() => {\r\n    if (!props.loggedIn) {\r\n      props.history.push(\"/sign_in\");\r\n    }\r\n  });\r\n  const Logout = () => {\r\n    props.setLoggedIn(false);\r\n    props.history.push(\"/sign_in\");\r\n  };\r\n  \r\n  const dispatch = useDispatch();\r\n  const resetUserSelection=()=>{\r\n    dispatch(\r\n      userActions.onReset()\r\n    )\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.homeNav}>\r\n        <Link onClick={() => Logout()}>\r\n          <i class=\"fas fa-sign-out-alt\"></i>Logout\r\n        </Link>\r\n        <Link onClick={() => props.history.push(\"/configure_history2\")}>\r\n          <i class=\"fas fa-history\"></i>Configuration History\r\n        </Link>\r\n        <Link\r\n          aria-controls=\"simple-menu\"\r\n          aria-haspopup=\"true\"\r\n          onClick={handleClick}\r\n        >\r\n          <i class=\"fas fa-key\"></i>User Authentication\r\n        </Link>\r\n        <Menu\r\n          id=\"simple-menu\"\r\n          anchorEl={anchorEl}\r\n          keepMounted\r\n          open={Boolean(anchorEl)}\r\n          onClose={handleClose}\r\n        >\r\n          <MenuItem onClick={() => props.history.push(\"/user_approval\")}>\r\n            Account Request\r\n          </MenuItem>\r\n          <MenuItem onClick={() => props.history.push(\"/edit_profile\")}>\r\n            Forgot Password\r\n          </MenuItem>\r\n        </Menu>\r\n      </div>\r\n      <div className={styles.homeLinks}>\r\n        <Link to=\"/system_config\" onClick={resetUserSelection}>\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-cog\"></i>\r\n          </div>\r\n          System Configuration\r\n        </Link>\r\n        <Link to=\"/rDashboard\" onClick={resetUserSelection}>\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"far fa-chart-bar\"></i>\r\n          </div>\r\n          Reliability Dashboard\r\n        </Link>\r\n        <Link to=\"/CDashboard\" onClick={resetUserSelection}>\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"far fa-chart-bar\"></i>\r\n          </div>\r\n          Monitoring Dashboard\r\n        </Link>\r\n        <Link to=\"/TaskDashboard\" onClick={resetUserSelection}>\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"far fa-chart-bar\"></i>\r\n          </div>\r\n          Task Reliability Dashboard\r\n        </Link>\r\n        <Link to=\"/dnd\" onClick={resetUserSelection}>\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"far fa-chart-bar\"></i>\r\n          </div>\r\n          Task Configuration\r\n        </Link>\r\n        <Link to=\"/view_data\" onClick={resetUserSelection}>\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-database\"></i>\r\n          </div>\r\n          View/Update Data\r\n        </Link>\r\n        <Link to=\"/maintenance_allocation\" onClick={resetUserSelection}>\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-microchip\"></i>\r\n          </div>\r\n          Maintenance Allocation\r\n        </Link>\r\n        <Link to=\"/rul\" onClick={resetUserSelection}>\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-microchip\"></i>\r\n          </div>\r\n          Time To Failure/RUL\r\n        </Link>\r\n      </div>\r\n      <div className={styles.netra}>\r\n        <img src=\"/netra-logo-removebg.png\" width={200} height={200} />\r\n        <div>NETRA</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","E:\\NetraB\\netra\\src\\pages\\Phase_Manager\\Phasemanager.js",["583","584"],"import React from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport StageSlider from \"../../components/slider/NewSlider\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Table from \"../../ui/Table/Table\";\r\nimport styles from \"./Phasemanager.module.css\";\r\nimport { useState } from \"react\";\r\nimport { Switch, Route, Link, useLocation } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport NewModule from \"../../components/module/NewModule\";\r\nimport PhaseManagerHome from \"./Home/Home\";\r\nimport AddPhase from \"./Add/AddPhase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { phaseActions } from \"../../store/PhaseStore\";\r\nimport LifeMultiplier from \"./LifeMultiplier/LifeMultiplier\";\r\nimport DCMultiplier from \"./DCMultiplier/dcMultiplier\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst PhaseStyles = makeStyles({\r\n  formControl: {\r\n    // margin: '2rem',\r\n    minWidth: \"20%\",\r\n  },\r\n  Submit: {\r\n    // margin: '2rem',\r\n    height: 40,\r\n  },\r\n  Pbuttons: {\r\n    margin: 5,\r\n    minWidth: 170,\r\n    float: \"right\",\r\n  },\r\n});\r\nconst PhaseManager = (props) => {\r\n  const dispatch = useDispatch();\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n\r\n  const currentSelectedSystem = useSelector(\r\n    (state) => state.userSelection.currentSelection.equipmentName\r\n  );\r\n\r\n  const [gridApi, setGridApi] = useState(null);\r\n\r\n  const [finalTableData, setFinalData] = useState([]);\r\n\r\n  const setFinalTableData = (d) => {\r\n    setFinalData(d);\r\n    if (finalTableData.length > 0) {\r\n      console.log(\"Hi\");\r\n    }\r\n  };\r\n\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n\r\n  const location = useLocation();\r\n  console.log(\"This is Phase Manager Redux Call\");\r\n  console.log(systemData);\r\n  const [Stage, setStage] = useState(0);\r\n  const PhaseClasses = PhaseStyles();\r\n  const [paramName, setParamName] = useState(\"\");\r\n  const [MType, setMType] = useState(\"Quantative\");\r\n  const [Unit, setUnit] = useState(\"\");\r\n  const [Status, setStatus] = useState(\"\");\r\n  const [desc, setDesc] = useState(\"\");\r\n  const [LBound, setLBound] = useState(\"\");\r\n  const [UBound, setUBound] = useState(\"\");\r\n  const [PRange, setPrange] = useState(\"\");\r\n\r\n  const handleParamNameChange = (e) => {\r\n    setParamName(e.target.value);\r\n  };\r\n  const handleMTypeChange = (e) => {\r\n    setMType(e.target.value);\r\n  };\r\n  const handleUnitChange = (e) => {\r\n    setUnit(e.target.value);\r\n  };\r\n  const handleStatusChange = (e) => {\r\n    setStatus(e.target.value);\r\n  };\r\n  const handleDescChange = (e) => {\r\n    setDesc(e.target.value);\r\n  };\r\n  const handleLBoundChange = (e) => {\r\n    setLBound(e.target.value);\r\n  };\r\n  const handleUBoundChange = (e) => {\r\n    setUBound(e.target.value);\r\n  };\r\n  const handlePRangeChange = (e) => {\r\n    setPrange(e.target.value);\r\n  };\r\n  //\r\n  const AddRange = () => {\r\n    props.history.push(\"/phase_manager/add\");\r\n  };\r\n  const NextStage = () => {\r\n    if (Stage === 0) {\r\n      setStage(1);\r\n      props.history.push(\"/phase_manager/life_multiplier\");\r\n    }\r\n    if (Stage === 1) {\r\n      setStage(2);\r\n      props.history.push(\"/phase_manager/dcmultiplier\");\r\n    }\r\n  };\r\n\r\n  let marks = [\r\n    {\r\n      value: 30,\r\n      label: \"Modify Phase\",\r\n    },\r\n    {\r\n      value: 60,\r\n      label: \"Life Multiplier\",\r\n    },\r\n    {\r\n      value: 90,\r\n      label: \"Duty Cycle Multiplier(System)\",\r\n    },\r\n  ];\r\n  const addPhaseTodBList = () => {\r\n    if (paramName.trim() !== \"\" && PRange.trim() !== \"\") {\r\n      let newRows = [\r\n        {\r\n          PhaseName: paramName,\r\n          MeasurementType: MType,\r\n          LowerBound: LBound,\r\n          UpperBound: UBound,\r\n          Status: Status,\r\n          PhaseRange: PRange,\r\n          Unit: Unit,\r\n          Description: desc,\r\n          id: uuid(),\r\n        },\r\n      ];\r\n      let lowRow = {\r\n        PhaseName: paramName,\r\n        MeasurementType: MType,\r\n        LowerBound: 0,\r\n        UpperBound: LBound - 1,\r\n        Status: Status,\r\n        PhaseRange: \"Low\",\r\n        Unit: Unit,\r\n        Description: \"This is system generated phase.\",\r\n        id: uuid(),\r\n      };\r\n      let upperRow = {\r\n        PhaseName: paramName,\r\n        MeasurementType: MType,\r\n        LowerBound: +UBound + 1,\r\n        UpperBound: 100,\r\n        Status: Status,\r\n        PhaseRange: \"High\",\r\n        Unit: Unit,\r\n        Description: \"This is system generated phase.\",\r\n        id: uuid(),\r\n      };\r\n      newRows.push(lowRow);\r\n      newRows.push(upperRow);\r\n      debugger;\r\n      dispatch(phaseActions.addPhase({ newPhase: newRows }));\r\n      setParamName(\"\");\r\n      setLBound(\"\");\r\n      setUBound(\"\");\r\n      setStatus(\"\");\r\n      setPrange(\"\");\r\n      setUnit(\"\");\r\n      setDesc(\"\");\r\n      props.history.push(\"/phase_manager/\");\r\n    } else {\r\n      alert(\"Please Enter Phase Name and Phase Range Name\");\r\n    }\r\n  };\r\n\r\n  const nextModule = (settings) => {\r\n    if (settings.HEP) {\r\n      props.history.push(\"/HEP\");\r\n    } else if (settings.DataManager) {\r\n      props.history.push(\"/data_manager\");\r\n    } else if (settings.ReliabilityDashboard) {\r\n      props.history.push(\"/rDashboard\");\r\n    }\r\n  };\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n\r\n  const onLoadTreeStructure = () => {\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        system: currentSelection[\"equipmentName\"],\r\n        ship_name: currentSelection[\"shipName\"],\r\n        request_from: \"phase\",\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        let system_data = d[\"system_data\"];\r\n        let phase_data = d[\"phase_data\"];\r\n        dispatch(treeDataActions.setTreeData({ treeData: system_data }));\r\n        dispatch(phaseActions.loadPhase({ newPhase: phase_data }));\r\n      });\r\n  };\r\n\r\n  const onSaveButtonClickHandler = () => {\r\n    const currentLocation = location.pathname;\r\n    let newTdata = [];\r\n    let dType = \"\";\r\n    if (currentLocation === \"/phase_manager/\") {\r\n      const ComponentId = systemData.filter(\r\n        (x) => x.name === currentSelectedSystem\r\n      )[0].id;\r\n      newTdata = finalTableData.map((x) => {\r\n        return { ...x, ComponentId: ComponentId };\r\n      });\r\n      dType = \"insertPhase\";\r\n    } else if (currentLocation === \"/phase_manager/life_multiplier\") {\r\n      newTdata = finalTableData;\r\n      dType = \"insertLifeMultiplier\";\r\n    } else if (currentLocation === \"/phase_manager/dcmultiplier\") {\r\n      newTdata = finalTableData;\r\n      dType = \"insertDCMultiplier\";\r\n    }\r\n    debugger;\r\n    //Else End\r\n    if (newTdata.length > 0) {\r\n      fetch(\"/save_phase\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          flatData: newTdata,\r\n          dtype: dType,\r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          setSnackBarMessage({\r\n            severity: \"success\",\r\n            message: data.message,\r\n            showSnackBar: true,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setSnackBarMessage({\r\n            severity: \"error\",\r\n            message: \"Some Error Occured. \" + error,\r\n            showSnackBar: true,\r\n          });\r\n        });\r\n    } else {\r\n      setSnackBarMessage((prevState) => {\r\n        const data = {\r\n          ...prevState,\r\n          message: \"This is error\",\r\n          showSnackBar: true,\r\n        };\r\n        return data;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      {/* <Module/> */}\r\n      <NewModule />\r\n      {/* <Slider marks={marks} default={marks[0][\"value\"]}/> */}\r\n      <StageSlider marks={marks} default={marks[Stage][\"value\"]} />\r\n      <Route\r\n        exact\r\n        path={[\r\n          \"/phase_manager/\",\r\n          \"/phase_manager/life_multiplier\",\r\n          \"/phase_manager/dcmultiplier\",\r\n        ]}\r\n      >\r\n        <div className={styles.flex1}>\r\n          <UserSelection />\r\n\r\n          <div>\r\n            <Route path=\"/phase_manager\" exact={true}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => AddRange()}\r\n                className={PhaseClasses.Pbuttons}\r\n              >\r\n                Add More Range\r\n              </Button>\r\n            </Route>\r\n            <Route path=\"/phase_manager/life_multiplier\" exact={true}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={PhaseClasses.Pbuttons}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Route>\r\n\r\n            <Route\r\n              // exact\r\n              path={[\"/phase_manager\", \"/phase_manager/life_multiplier\"]}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={PhaseClasses.Pbuttons}\r\n                onClick={() => onSaveButtonClickHandler()}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Route>\r\n            <Route path={[\"/phase_manager\"]}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={PhaseClasses.Pbuttons}\r\n                onClick={() => onLoadTreeStructure()}\r\n              >\r\n                Load Equipment\r\n              </Button>\r\n            </Route>\r\n            <Route\r\n              exact\r\n              path={[\r\n                \"/phase_manager\",\r\n                \"/phase_manager/life_multiplier\",\r\n                \"/phase_manager/add\",\r\n              ]}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={PhaseClasses.Pbuttons}\r\n                onClick={() => NextStage()}\r\n              >\r\n                Next Stage\r\n              </Button>\r\n            </Route>\r\n            <Route exact path=\"/phase_manager/dcmultiplier\">\r\n              <Button\r\n                onClick={() => nextModule(props.settings)}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={PhaseClasses.Pbuttons}\r\n              >\r\n                Next Module\r\n              </Button>\r\n            </Route>\r\n          </div>\r\n        </div>\r\n      </Route>\r\n      <Route path=\"/phase_manager/add\" exact={true}>\r\n        <div className={styles.addFlex}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={PhaseClasses.Pbuttons}\r\n            onClick={addPhaseTodBList}\r\n          >\r\n            Update Phase List\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={PhaseClasses.Pbuttons}\r\n            onClick={() => NextStage()}\r\n          >\r\n            Next Stage\r\n          </Button>\r\n        </div>\r\n      </Route>\r\n      <Switch>\r\n        <Route path=\"/phase_manager\" exact={true}>\r\n          <PhaseManagerHome\r\n            gridApi={gridApi}\r\n            setGridApi={setGridApi}\r\n            tableUpdate={setFinalTableData}\r\n          ></PhaseManagerHome>\r\n        </Route>\r\n        <Route path=\"/phase_manager/add\" exact={true}>\r\n          <AddPhase\r\n            MType={MType}\r\n            Status={Status}\r\n            handleDescChange={handleDescChange}\r\n            desc={desc}\r\n            handleUBoundChange={handleUBoundChange}\r\n            UBound={UBound}\r\n            handleLBoundChange={handleLBoundChange}\r\n            LBound={LBound}\r\n            handlePRangeChange={handlePRangeChange}\r\n            PRange={PRange}\r\n            handleStatusChange={handleStatusChange}\r\n            handleUnitChange={handleUnitChange}\r\n            Unit={Unit}\r\n            handleMTypeChange={handleMTypeChange}\r\n            handleParamNameChange={handleParamNameChange}\r\n            paramName={paramName}\r\n          ></AddPhase>\r\n        </Route>\r\n        <Route path=\"/phase_manager/life_multiplier\" exact={true}>\r\n          <LifeMultiplier tableUpdate={setFinalTableData}></LifeMultiplier>\r\n        </Route>\r\n        <Route path=\"/phase_manager/dcmultiplier\" exact={true}>\r\n          <DCMultiplier tableUpdate={setFinalTableData}></DCMultiplier>\r\n        </Route>\r\n      </Switch>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default PhaseManager;\r\n\r\n// const save_fm = () => {\r\n//   let final_fm_data = [];\r\n//   finalTableData.map(x => {\r\n//     if(x.fouthCol.trim() != \"\"){\r\n//       fm_split = x.fouthCol.split(',')\r\n//       fm_split.forEach(x => {\r\n//         final_fm_data.push({\r\n//           id: uuid(),\r\n//           componentId,\r\n//           x,\r\n//         });\r\n//       })\r\n\r\n//     }else{\r\n\r\n//     }\r\n//     final_fm_data.push({\r\n//       id: uuid(),\r\n//       componentId,\r\n//       failure_mode_value,\r\n//     });\r\n//   })\r\n// }\r\n","E:\\NetraB\\netra\\src\\pages\\Settings\\editProfile.js",["585"],"import React, { useState } from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport Table from \"../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport classes from \"./editProfile.module.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport PassModal from \"./ChangePassword\";\r\n\r\nfunction EditProfile() {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [passModal, setPassModal] = useState(false)\r\n  let finalTableData = [];\r\n  const setFinalTableData = (d) => {\r\n    finalTableData = d;\r\n    if (finalTableData.length > 0) {\r\n      console.log(\"Hi\");\r\n    }\r\n  };\r\n  const onPassClick=()=>{\r\n    setPassModal(true)\r\n  }\r\n\r\n  const handlePassOpen = () => {\r\n    setPassModal(true);\r\n  };\r\n\r\n  const handlePassClose = () => {\r\n    setPassModal(false);\r\n  };\r\n\r\n  const EPcolumnDefs = [\r\n    <AgGridColumn field=\"Name\" headerName=\"Name\" width={200} />,\r\n    <AgGridColumn\r\n      field=\"Email\"\r\n      headerName=\"Email Address\"\r\n      width={300}\r\n    />,\r\n    <AgGridColumn \r\n    field=\"Action\" \r\n    headerName=\"Action\" \r\n    width={200} \r\n    cellRenderer='updateButton'\r\n    cellRendererParams={{ onClick: onPassClick }}\r\n    />,\r\n  ];\r\n  const rowData = [\r\n    {\r\n      Name: \"Bhupendra Singh\",\r\n      Email: \"xyz@gmail.com\",\r\n      Action: \"\",\r\n    },\r\n  ];\r\n  return (\r\n    <div\r\n      className={classes.background}\r\n      style={{\r\n        backgroundImage: \"url(/wave.svg)\",\r\n      }}\r\n    >\r\n      <PassModal passModal={passModal} handlePassClose={handlePassClose} handlePassOpen={handlePassOpen}/>\r\n      <div className={classes.flex}>\r\n        <Navigation />\r\n        <div className={classes.table}>\r\n          <div className={classes.button}>\r\n            <Button variant=\"contained\" color=\"primary\">\r\n              User Authentication | Forgot Password Request\r\n            </Button>\r\n          </div>\r\n          <Table\r\n            columnDefs={EPcolumnDefs}\r\n            rowData={rowData}\r\n            tableUpdate={setFinalTableData}\r\n            setGrid={setGridApi}\r\n            gridApi={gridApi}\r\n            rowHeight={50}\r\n          ></Table>\r\n        </div>\r\n        <div className={classes.img}>\r\n          <img src=\"/netra-logo-removebg.png\" width={60} height={60} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default EditProfile;\r\n","E:\\NetraB\\netra\\src\\pages\\HEP\\HEP.js",["586","587","588","589","590","591","592","593","594","595","596","597","598","599","600"],"import React,{useEffect} from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport StageSlider from \"../../components/slider/NewSlider\";\r\nimport Table2 from \"../../ui/Table/Table2\";\r\nimport { useState } from \"react\";\r\nimport { Switch, Route, Link,useLocation } from \"react-router-dom\";\r\nimport NewModule from \"../../components/module/NewModule\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport {\r\n  Button,\r\n  makeStyles,\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n} from \"@material-ui/core\";\r\nimport styles from \"./HEP.module.css\";\r\nimport {\r\n  ELcolumnDefs,\r\n  ELrowData,\r\n  CLrowData,\r\n  CLcolumnDefs,\r\n  SLMcolumnDefs,\r\n  SLMrowData,\r\n} from \"./HEPData\";\r\nimport LensIcon from \"@material-ui/icons/Lens\";\r\nimport EquipmentLevelHEP from \"./EquipmentLevel/EquipmentLevel\";\r\nimport HEPLifeMultiplier from \"./LifeMultiplier/LifeMultiplier\";\r\nimport HEPComponentLevel from \"./ComponentLevel/componentLevel\";\r\nimport CHEP from \"./CommanHEP/CommanHEP\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\nimport { useSelector,useDispatch } from \"react-redux\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\n\r\n\r\nconst HEPStyles = makeStyles({\r\n  Pbuttons: {\r\n    margin:10,\r\n    float:'right',\r\n    minWidth:200\r\n  },\r\n});\r\n\r\nconst HEP = (props) => {\r\n  const [Stage, setStage] = useState(0);\r\n  const HEPClasses = HEPStyles();\r\n  const location=useLocation();\r\n  const dispatch = useDispatch();\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  const currentSelectedSystem = useSelector(\r\n    (state) => state.userSelection.currentSelection.equipmentName\r\n  );\r\n\r\n  let finalTableData = [];\r\n  const setFinalTableData = (d) => {\r\n    finalTableData = d;\r\n    if (finalTableData.length > 0) {\r\n      console.log(\"Hi\");\r\n    }\r\n  };\r\n  const [experience,setExperience]=useState({low:0,nominal:100,high:0})\r\n  const [workCulture,setWorkCulture]=useState('nominal')\r\n  const [fitness,setFitness]=useState({low:0,nominal:100,high:0})\r\n  const [saveExt, setSaveExt] = useState(true)\r\n\r\n  const handleExp=(e,psfType)=>{\r\n    setExperience({...experience,[psfType]:e.target.value})\r\n  }\r\n\r\n  useEffect(() => {\r\n    let sum=Number(experience.low)+Number(experience.high)+Number(experience.nominal)\r\n    //console.log(sum);\r\n    if(sum!=100){\r\n      document.querySelectorAll('.experience').forEach(input=>{\r\n        input.style.border='red 1px solid'\r\n        setSaveExt(false)\r\n      })\r\n    }else{\r\n      document.querySelectorAll('.experience').forEach(input=>{\r\n        input.style.border='black 1px solid'\r\n        setSaveExt(true)\r\n      })\r\n    }\r\n  }, [experience])\r\n\r\n  const handleWC=(e)=>{\r\n    setWorkCulture(e.target.value)\r\n  }\r\n\r\n  const handleFit=(e,psfType)=>{\r\n    setFitness({...fitness,[psfType]:e.target.value})\r\n  }\r\n\r\n  useEffect(() => {\r\n    let sum=Number(fitness.low)+Number(fitness.high)+Number(fitness.nominal)\r\n    //console.log(sum);\r\n    if(sum!=100){\r\n      document.querySelectorAll('.fitness').forEach(input=>{\r\n        input.style.border='red 1px solid'\r\n        setSaveExt(false)\r\n      })\r\n    }else{\r\n      document.querySelectorAll('.fitness').forEach(input=>{\r\n        input.style.border='black 1px solid'\r\n        setSaveExt(true)\r\n      })\r\n    }\r\n  }, [fitness])\r\n\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const sData = useSelector((state) => state.userSelection.componentsData);\r\n\r\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\r\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\r\n\r\n  const matchingId = matchingItems[0]?.id;\r\n  const onLoadTreeStructure = () => {\r\n    const payload = {\r\n      system: currentSelection[\"equipmentName\"],\r\n      ship_name: currentSelection[\"shipName\"],\r\n    };\r\n  \r\n    if (matchingId) {\r\n      payload.component_id = matchingId;\r\n    }\r\n    console.log(payload)\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        console.log(d);\r\n        let treeD = d[\"treeD\"];\r\n        let failureModes = d[\"failureMode\"];\r\n        console.log(failureModes)\r\n        dispatch(\r\n          treeDataActions.setTreeData({\r\n            treeData: treeD,\r\n          }),\r\n        );\r\n        dispatch(\r\n          treeDataActions.setFailureModes(failureModes)\r\n        )\r\n      });\r\n  };\r\n\r\n  const onSaveButtonClickHandler = () => {\r\n    const currentLocation = location.pathname;\r\n    let newTdata = [];\r\n    let dType = \"\";\r\n    //console.log(currentLocation);\r\n    if (currentLocation === \"/HEP\") {\r\n     if(currentSelectedSystem){ \r\n       const ComponentId = systemData.filter(\r\n        (x) => x.name === currentSelectedSystem\r\n      )[0].id;\r\n      newTdata = finalTableData.map((x) => {\r\n        return { ...x, ComponentId: ComponentId };\r\n      });\r\n      dType = \"insertHEP\";}\r\n    } else if (currentLocation === \"/HEP/component_level\") {\r\n      newTdata=finalTableData;\r\n      dType = \"insertComponentLevel\";\r\n    } else if (currentLocation === \"/HEP/ext_factors\") {\r\n      if(saveExt){\r\n        if(currentSelectedSystem){\r\n          const ComponentId = systemData.filter(\r\n          (x) => x.name === currentSelectedSystem\r\n        )[0].id;\r\n        newTdata=[{\r\n          id:uuid(),\r\n          ComponentId: ComponentId,\r\n          expNominal:experience.nominal,\r\n          expLow:experience.low,\r\n          expHigh:experience.high,\r\n          workCulture:workCulture,\r\n          fitNominal:fitness.nominal,\r\n          fitLow:fitness.low,\r\n          fitHigh:fitness.high\r\n        }]};\r\n        dType = \"insertExtFactors\";\r\n      }\r\n    } else if (currentLocation === \"/HEP/swlife_multiplier\") {\r\n      newTdata=finalTableData;\r\n      dType = \"insertLifeMultiplier\";\r\n    } \r\n    debugger;\r\n    //Else End\r\n    if (newTdata.length > 0) {\r\n      fetch(\"/save_hep\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          flatData: newTdata,\r\n          dtype: dType,\r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          setSnackBarMessage({\r\n            severity: \"success\",\r\n            message: data.message,\r\n            showSnackBar: true,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setSnackBarMessage({\r\n            severity: \"error\",\r\n            message: \"Some Error Occured. \" + error,\r\n            showSnackBar: true,\r\n          });\r\n        });\r\n    } else {\r\n      setSnackBarMessage((prevState) => {\r\n        const data = {\r\n          ...prevState,\r\n          message: \"This is error\",\r\n          showSnackBar: true,\r\n        };\r\n        return data;\r\n      });\r\n    }\r\n  };\r\n\r\n  const NextStage = () => {\r\n    if (Stage === 0) {\r\n      setStage(1);\r\n      props.history.push(\"/HEP/swlife_multiplier\");\r\n    }\r\n  };\r\n\r\n  let marks = [\r\n    {\r\n      value: 30,\r\n      label: \"HEP Modelling\",\r\n    },\r\n\r\n    {\r\n      value: 85,\r\n      label: \"Spare Wise Life Multiplier\",\r\n    },\r\n  ];\r\n\r\n  const nextModule = (settings) =>{\r\n    if(settings.DataManager){\r\n      props.history.push(\"/data_manager\")\r\n    }\r\n    else if(settings.ReliabilityDashboard){\r\n      props.history.push(\"/rDashboard\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      {/* <Module/> */}\r\n      <NewModule />\r\n      {/* <Slider marks={marks} default={marks[0][\"value\"]}/> */}\r\n      <StageSlider marks={marks} default={marks[Stage][\"value\"]} />\r\n      <div className={styles.flex1}>\r\n        <UserSelection/>\r\n        <div>\r\n          <Route\r\n            exact\r\n            path={[\"/HEP\", \"/HEP/ext_factors\", \"/HEP/component_level\"]}\r\n          >\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={HEPClasses.Pbuttons}\r\n              onClick={onLoadTreeStructure}\r\n            >\r\n              Load Equipment\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={HEPClasses.Pbuttons}\r\n            >\r\n              Select PSF Criteria\r\n            </Button>\r\n          </Route>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={HEPClasses.Pbuttons}\r\n            onClick={()=>onSaveButtonClickHandler()}\r\n          >\r\n            Save\r\n          </Button>\r\n          <Route exact path=\"/HEP\">\r\n            <Button\r\n              component={Link}\r\n              to=\"/HEP/component_level\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={HEPClasses.Pbuttons}\r\n            >\r\n              Next\r\n            </Button>\r\n          </Route>\r\n          <Route exact path=\"/HEP/component_level\">\r\n            <Button\r\n              component={Link}\r\n              to=\"/HEP/ext_factors\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={HEPClasses.Pbuttons}\r\n            >\r\n              Next\r\n            </Button>\r\n          </Route>\r\n          <Route exact path=\"/HEP/ext_factors\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={HEPClasses.Pbuttons}\r\n              onClick={() => NextStage()}\r\n            >\r\n              Next Stage\r\n            </Button>\r\n          </Route>\r\n          <Route exact path=\"/HEP/swlife_multiplier\">\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={HEPClasses.Pbuttons}\r\n                onClick={onLoadTreeStructure}\r\n              >\r\n                Load Equipment\r\n            </Button>\r\n            <Button\r\n              onClick={()=>nextModule(props.settings)}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={HEPClasses.Pbuttons}\r\n            >\r\n              Next Module\r\n            </Button>\r\n\r\n          </Route>\r\n        </div>\r\n      </div>\r\n      <Switch>\r\n        <Route exact path=\"/HEP\">\r\n          <EquipmentLevelHEP\r\n            tableUpdate={setFinalTableData}\r\n          ></EquipmentLevelHEP>\r\n        </Route>\r\n        <Route path=\"/HEP/ext_factors\" exact={true}>\r\n          <CHEP\r\n          experience={experience}\r\n          handleExp={handleExp}\r\n          workCulture={workCulture}\r\n          handleWC={handleWC}\r\n          fitness={fitness}\r\n          handleFit={handleFit}\r\n          ></CHEP>\r\n        </Route>\r\n\r\n        <Route path=\"/HEP/component_level\" exact>\r\n          <HEPComponentLevel\r\n            tableUpdate={setFinalTableData}\r\n          ></HEPComponentLevel>\r\n        </Route>\r\n        <Route path=\"/HEP/swlife_multiplier\" exact>\r\n          <HEPLifeMultiplier\r\n            tableUpdate={setFinalTableData}\r\n          ></HEPLifeMultiplier>\r\n        </Route>\r\n      </Switch>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HEP;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\DataManager.js",["601","602","603","604","605","606","607","608","609","610","611","612","613"],"import React, { useEffect, useState } from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport NewModule from \"../../components/module/NewModule\";\r\nimport StageSlider from \"../../components/slider/NewSlider\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport {\r\n  Switch,\r\n  Route,\r\n  useHistory,\r\n  Link,\r\n  Redirect,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\nimport styles from \"./DataManager.module.css\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport OperationalData from \"./operationalData/operationalData\";\r\nimport MaintenanceData from \"./maintenanceData/maintenanceData\";\r\nimport ImportData from \"./importData/importData\";\r\nimport ParameterEstimation from \"./parameterEstimation/parameterEstimation\";\r\nimport HistoricalData from \"./historicalData/historicalData\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\nimport { isAllOf } from \"@reduxjs/toolkit\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport RepairableOverhaul from \"./repairableOverhaul/repairableOverhaul\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\n\r\nconst ManagerStyles = makeStyles({\r\n  buttons: {\r\n    marginLeft: 10,\r\n    marginTop: 15,\r\n    minWidth: 150,\r\n  },\r\n});\r\n\r\nfunction DataManager(props) {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const location = useLocation();\r\n  const [Stage, setStage] = useState(0);\r\n  const [isLoadEqt, setIsLoadEqt] = useState(false);\r\n  const ManagerClasses = ManagerStyles();\r\n  const history = useHistory();\r\n  const [tableRows, setTableRows] = useState([]);\r\n  const [dataType, setDataType] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  const systemConfigurationTreeData = useSelector(\r\n    (state) => state.treeData.treeData\r\n  );\r\n  const NextStage = () => {\r\n    if (Stage === 0) {\r\n      setStage(1);\r\n      history.push(\"/data_manager/maintenance_data\");\r\n    }\r\n    if (Stage === 1) {\r\n      setStage(2);\r\n      history.push(\"/data_manager/parameter_estimation\");\r\n    }\r\n    if (Stage === 2) {\r\n      setStage(3);\r\n      history.push(\"/data_manager/historical_data\");\r\n    }\r\n  };\r\n  const PreviousStage = () => {\r\n    if (Stage === 1) {\r\n      setStage(0);\r\n      history.push(\"/data_manager\");\r\n    }\r\n    if (Stage === 2) {\r\n      setStage(1);\r\n      history.push(\"/data_manager/maintenance_data\");\r\n    }\r\n    if (Stage === 3) {\r\n      setStage(2);\r\n      history.push(\"/data_manager/parameter_estimation\");\r\n    }\r\n  };\r\n\r\n  const nextModule = (settings) => {\r\n    if (settings.ReliabilityDashboard) {\r\n      props.history.push(\"/rDashboard\");\r\n    }\r\n  };\r\n\r\n  const [locationKeys, setLocationKeys] = useState([]);\r\n  useEffect(() => {\r\n    return history.listen((location) => {\r\n      if (history.action === \"PUSH\") {\r\n        setLocationKeys([location.key]);\r\n      }\r\n\r\n      if (history.action === \"POP\") {\r\n        if (locationKeys[1] === location.key) {\r\n          setLocationKeys(([_, ...keys]) => keys);\r\n          NextStage();\r\n        } else {\r\n          setLocationKeys((keys) => [location.key, ...keys]);\r\n          PreviousStage();\r\n        }\r\n      }\r\n    });\r\n  }, [locationKeys]);\r\n  let marks = [\r\n    {\r\n      value: 20,\r\n      label: \"Operational Data\",\r\n    },\r\n    {\r\n      value: 50,\r\n      label: \"Maintenance Data\",\r\n    },\r\n    {\r\n      value: 90,\r\n      label: \"Parameter Estimation\",\r\n    },\r\n  ];\r\n\r\n  const sData = useSelector((state) => state.userSelection.componentsData);\r\n\r\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\r\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\r\n\r\n  const matchingId = matchingItems[0]?.id;\r\n  const handleOnLoadSystem = () => {\r\n    const payload = {\r\n      system: currentSelection[\"equipmentName\"],\r\n      ship_name: currentSelection[\"shipName\"],\r\n    };\r\n  \r\n    if (matchingId) {\r\n      payload.component_id = matchingId;\r\n    }\r\n    console.log(payload)\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        // alert(\"Hurray\");\r\n        debugger;\r\n        if (location.pathname === \"/data_manager\") {\r\n          history.push(\"/data_manager\");\r\n        } else if (location.pathname === \"/data_manager/maintenance_data\") {\r\n          history.push(\"/data_manager/maintenance_data\");\r\n        } else if (location.pathname === \"/data_manager/parameter_estimation\") {\r\n          history.push(\"/data_manager/parameter_estimation\");\r\n        } else {\r\n          const equipment = d.treeD.filter((x) => x.parentId === null)[0];\r\n          if (equipment.repairType === \"Replaceable\") {\r\n            history.push(\"/data_manager/historical_data\");\r\n          } else {\r\n            // <Redirect to=\"/data_manager/historical_data/repairable_overhaul\"></Redirect>;\r\n            history.push(\"/data_manager/historical_data/repairable_overhaul\");\r\n          }\r\n        }\r\n        // if (\r\n        //   location.pathname !== \"/data_manager\" ||\r\n        //   location.pathname !== \"/data_manager/maintenance_data\" ||\r\n        //   location !== \"/data_manager/parameter_estimation\"\r\n        // ) {\r\n\r\n        // }\r\n        dispatch(treeDataActions.setTreeData({ treeData: d.treeD }));\r\n      });\r\n  };\r\n\r\n\r\n\r\n  const handleSaveSupport = (data) => {\r\n    fetch(\"/save_historical_data\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        data: data,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setSnackBarMessage({\r\n          severity: \"success\",\r\n          message: data.message,\r\n          showSnackBar: true,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setSnackBarMessage({\r\n          severity: \"error\",\r\n          message: \"Some Error Occured. \" + error,\r\n          showSnackBar: true,\r\n        });\r\n      });\r\n  };\r\n\r\n\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const handleSave = () => {\r\n    debugger;\r\n    let data = [];\r\n    if (dataType === \"oem\") {\r\n      data = tableRows.map((x) => {\r\n        const life_estimate1 = Object.keys(x).sort()[1];\r\n        const life_estimate2 = Object.keys(x).sort()[2];\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          life_estimate1,\r\n          life_estimate2,\r\n          life_estimate1_val: x[life_estimate1],\r\n          life_estimate2_val: x[life_estimate2],\r\n        };\r\n      });\r\n    } else if (dataType === \"fdp\") {\r\n      data = tableRows.map((x) => {\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          installationDate: x.installationDate,\r\n          removalDate: x.removalDate,\r\n          actual_failure: x.AFS,\r\n        };\r\n      });\r\n      //End of FDP\r\n    } else if (dataType === \"oemE\") {\r\n      data = tableRows.map((x) => {\r\n        const life_estimate1 = Object.keys(x).sort()[1];\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          life_estimate1,\r\n          maxLife: x.MaxLife,\r\n          minLife: x.MinLife,\r\n          life_estimate1_val: x[life_estimate1],\r\n          mostLikely: x.MostLikely,\r\n          componentFailure: x.componentFailure,\r\n          time_wo_failure: x.time_wo_failure,\r\n        };\r\n      });\r\n    } else if (dataType === \"expert\") {\r\n      data = tableRows.map((x) => {\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          maxLife: x.MaxLife,\r\n          minLife: x.MinLife,\r\n          mostLikely: x.MostLikely,\r\n          componentFailure: x.componentFailure,\r\n          time_wo_failure: x.time_wo_failure,\r\n        };\r\n      });\r\n    } else if (dataType === \"prob\") {\r\n      data = tableRows.map((x) => {\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          failureProb: x.FailureProbability,\r\n          time: x.Time,\r\n        };\r\n      });\r\n    } else if (dataType === \"nprd\") {\r\n      data = tableRows.map((x) => {\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          failureRate: x.FailureRate,\r\n          beta: x.Beta,\r\n        };\r\n      });\r\n    } else if (dataType === \"import_replacable\") {\r\n      data = tableRows.map((x) => {\r\n        if (x.ScaleParameter !== \"\" && x.ShapeParameter !== \"\") {\r\n          return {\r\n            component_id: x.id,\r\n            id: uuid(),\r\n            eta: x.ScaleParameter,\r\n            beta: x.ShapeParameter,\r\n          };\r\n        }\r\n      });\r\n      console.log(\"\");\r\n    } else if (dataType === \"insertOpData\") {\r\n      data = tableRows.map((x) => {\r\n        return {\r\n          id: x.id,\r\n          oid: uuid(),\r\n          Date: x.Date,\r\n          AverageRunning: x.AverageRunning,\r\n        };\r\n      });\r\n    } else if (dataType === \"maintData\") {\r\n      data = tableRows;\r\n    } else if (dataType === \"overhauls\") {\r\n      const main_data = tableRows[\"mainTable\"];\r\n      const sub_data = tableRows[\"subTable\"];\r\n      console.log(\"This is from Overhauls\");\r\n      console.log(main_data);\r\n      console.log(sub_data);\r\n      let parent = \"\";\r\n      let subSystem = [];\r\n      try {\r\n        parent = systemConfigurationTreeData.filter(\r\n          (x) => x.parentId === null\r\n        )[0].id;\r\n        subSystem = systemConfigurationTreeData.filter(\r\n          (x) => x.parentId === null || x.parentId === parent\r\n        );\r\n\r\n        const subFinalData = sub_data.map((x) => {\r\n          return {\r\n            id: uuid(),\r\n            overhaulNum: x.overhaulNum,\r\n            runAge: x.runAge,\r\n            numMaint: x.numMaint,\r\n            component_id: parent,\r\n          };\r\n        });\r\n\r\n        const mainFinalData = main_data.map((x) => {\r\n          if (x.subSystem) {\r\n            const subSystemId = subSystem.filter(\r\n              (sS) => sS.name === x.subSystem\r\n            )[0].id;\r\n            return {\r\n              id: uuid(),\r\n              overhaulId: x.overhaulId,\r\n              date: x.Date,\r\n              maintenanceType: x.maintenanceType,\r\n              totalRunAge: x.totalRunAge,\r\n              subSystemId: subSystemId,\r\n            };\r\n          }\r\n        });\r\n        data = [{ mainData: mainFinalData, subData: subFinalData }];\r\n      } catch {\r\n        console.log(\"Error\");\r\n      }\r\n    } else if (dataType === \"interval\") {\r\n      data = tableRows.map((x) => {\r\n        return {\r\n          component_id: x.id,\r\n          id: uuid(),\r\n          installationStartDate: x.installationStartDate,\r\n          installationEndDate: x.installationEndDate,\r\n          removalStartDate: x.removalStartDate,\r\n          removalEndDate: x.removalEndDate,\r\n          interval_failure: x.IFS,\r\n        };\r\n      });\r\n    }\r\n    debugger;\r\n    data = data.filter((x) => x !== undefined);\r\n    handleSaveSupport({ data, dataType: dataType });\r\n  };\r\n\r\n  \r\n\r\n  const handleTableUpdatedRows = (allRows, dataType) => {\r\n    setTableRows(allRows);\r\n    debugger\r\n    if(location.pathname == '/data_manager/historical_data/repairable_overhaul'){\r\n      setDataType(dataType);\r\n    }\r\n    else if(location.pathname == '/data_manager/maintenance_data'){\r\n      setDataType(dataType);\r\n    }\r\n  };\r\n  const handleHistoricalDataDropdownChange = (dataType) => {\r\n    setDataType(dataType);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <Navigation />\r\n      <NewModule />\r\n      <StageSlider marks={marks} default={marks[Stage][\"value\"]} />\r\n      <Route\r\n        path={[\r\n          \"/data_manager/maintenance_data\",\r\n          \"/data_manager/\",\r\n          \"/data_manager/parameter_estimation\",\r\n        ]}\r\n      >\r\n        <div className={styles.flex}>\r\n          <UserSelection />\r\n          <div>\r\n            <Route path=\"/data_manager\">\r\n              <Route path={\"/data_manager/\"}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={ManagerClasses.buttons}\r\n                  onClick={handleOnLoadSystem}\r\n                >\r\n                  Load Equipment\r\n                </Button>\r\n              </Route>\r\n              <Route exact path={\"/data_manager/parameter_estimation\"}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={ManagerClasses.buttons}\r\n                >\r\n                  Update List\r\n                </Button>\r\n              </Route>\r\n              <Route\r\n                exact\r\n                path={[\r\n                  \"/data_manager/maintenance_data\",\r\n                  \"/data_manager\",\r\n                  \"/data_manager/parameter_estimation\",\r\n                ]}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={ManagerClasses.buttons}\r\n                  onClick={() => PreviousStage()}\r\n                >\r\n                  Back\r\n                </Button>\r\n              </Route>\r\n              <Route\r\n                exact\r\n                path={[\r\n                  \"/data_manager/historical_data\",\r\n                  \"/data_manager/historical_data/failure_datapoint\",\r\n                  \"/data_manager/historical_data/oem\",\r\n                  \"/data_manager/historical_data/oem_expert\",\r\n                  \"/data_manager/historical_data/expert_judgement\",\r\n                  \"/data_manager/historical_data/probability_failure\",\r\n                  \"/data_manager/historical_data/nprd\",\r\n                  \"/data_manager/historical_data/import_data\",\r\n                  \"/data_manager/historical_data/repairable_overhaul\",\r\n                ]}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={ManagerClasses.buttons}\r\n                  component={Link}\r\n                  to=\"/data_manager/parameter_estimation\"\r\n                >\r\n                  Back to Parameter Estimation\r\n                </Button>\r\n              </Route>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={ManagerClasses.buttons}\r\n                onClick={handleSave}\r\n              >\r\n                Save\r\n              </Button>\r\n              <Route\r\n                exact\r\n                path={[\r\n                  \"/data_manager\",\r\n                  \"/data_manager/maintenance_data\",\r\n                  \"/data_manager/import_data\",\r\n                  \"/data_manager/historical_data/nprd\",\r\n                ]}\r\n              >\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={ManagerClasses.buttons}\r\n                  onClick={() => NextStage()}\r\n                >\r\n                  Next\r\n                </Button>\r\n              </Route>\r\n              <Route exact path=\"/data_manager/parameter_estimation\">\r\n                <Button\r\n                  onClick={() => nextModule(props.settings)}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={ManagerClasses.buttons}\r\n                >\r\n                  Next Module\r\n                </Button>\r\n              </Route>\r\n            </Route>\r\n          </div>\r\n        </div>\r\n      </Route>\r\n\r\n      <Switch>\r\n        <Route path=\"/data_manager\" exact={true}>\r\n          <div className={styles.managerTable}>\r\n            <OperationalData tableUpdate={handleTableUpdatedRows} />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/data_manager/maintenance_data\" exact={true}>\r\n          <div className={styles.managerTable}>\r\n            <MaintenanceData tableUpdate={handleTableUpdatedRows} />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/data_manager/historical_data/:subRoute*\" exact={true}>\r\n          <div className={styles.historicalTable}>\r\n            <HistoricalData\r\n              tableUpdate={handleTableUpdatedRows}\r\n              handleDropdown={handleHistoricalDataDropdownChange}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/data_manager/parameter_estimation\" exact={true}>\r\n          <div className={styles.managerTable}>\r\n            <ParameterEstimation\r\n              list={systemConfigurationTreeData.filter((x) => x.lmu === 1 || x.parent_id == null)}\r\n              rope={true}\r\n            />\r\n          </div>\r\n        </Route>\r\n        {/* <Route\r\n          path=\"/data_manager/historical_data/repairable_overhaul\"\r\n          exact={true}\r\n        >\r\n          <div className={styles.managerTable}>\r\n            <RepairableOverhaul />\r\n          </div>\r\n        </Route> */}\r\n      </Switch>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default DataManager;\r\n","E:\\NetraB\\netra\\src\\pages\\Settings\\SignIn.js",["614","615","616","617","618"],"import React,{ useEffect, useState } from 'react'\r\nimport styles from './SignIn.module.css'\r\nimport { Paper,makeStyles,InputBase,Button,FormControlLabel,Checkbox } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom';\r\nimport CustomizedSnackbars from '../../ui/CustomSnackBar';\r\n\r\nconst InputStyles = makeStyles({\r\n    root: {\r\n        margin:'15px 0px 5px 0px',\r\n        paddingRight: 10,\r\n        paddingLeft: 10,\r\n        background: \"#ebebeb\",\r\n        borderRadius: \"5px\",\r\n        height: 40,\r\n        width: '70%',\r\n        boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n    },\r\n    label:{\r\n        fontWeight: 600\r\n    }\r\n  });\r\n\r\nconst SignIn=(props)=>{\r\n\r\n    useEffect(()=>{\r\n      if(props.loggedIn){\r\n          props.history.push('/')\r\n        }\r\n    })\r\n\r\n    const[keepLogin,setKeepLogin]=useState(false);\r\n    const InputClasses=InputStyles();\r\n    const [userName, setUserName] = useState('')\r\n    const [password, setPassword] = useState('')\r\n\r\n    const [showSnackBar, setShowSnackBar] = useState(false);\r\n    const [SnackBarMessage, setSnackBarMessage] = useState({\r\n        severity: \"error\",\r\n        message: \"\",\r\n        showSnackBar: false,\r\n    });\r\n\r\n    const onHandleSnackClose = () => {\r\n        setSnackBarMessage({\r\n          severity: \"error\",\r\n          message: \"\",\r\n          showSnackBar: false,\r\n        });\r\n      };\r\n\r\n    const Login=()=>{\r\n        if(userName=='admin'&&password=='admin'){\r\n            props.setLoggedIn(true)\r\n            props.history.push('/')\r\n        }\r\n        else{\r\n                setSnackBarMessage({\r\n                    severity: \"error\",\r\n                    message: \"Enter Correct Login details\",\r\n                    showSnackBar: true,\r\n                  })\r\n        }\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n        <Paper className={styles.SignInPaper} elevation={5}>\r\n            <div>\r\n            <img src='/netra-logo.png' width={60} height={60}/>\r\n            <div className={styles.netra}>NETRA</div>\r\n            </div>\r\n            <div style={{textAlign:'center'}}>\r\n            <h5 style={{margin:0}}>Welcome</h5>\r\n            <h6 style={{margin:0}}>Sign in to your account</h6>\r\n            </div>\r\n            <InputBase classes={InputClasses} name='username' value={userName} onChange={(e)=>setUserName(e.target.value)} id='username' placeholder='User Name' required/>\r\n            <InputBase classes={InputClasses} name='password' id='password' value={password} onChange={(e)=>setPassword(e.target.value)} placeholder='Password' type='password' required/>\r\n            <Button variant='contained' style={{backgroundColor:'#1c4199',color:'white'}} onClick={()=>Login()}>Sign In</Button>\r\n            <div style={{display:'flex',justifyContent:'space-between',alignItems:'center',width:'80%'}}>\r\n            <FormControlLabel\r\n                classes={{\r\n                    label: InputClasses.label\r\n                  }}\r\n                style={{color:'#1c4199'}}\r\n                control={<Checkbox style={{color:'#1c4199'}} checked={keepLogin} onChange={()=>{setKeepLogin(!keepLogin)}} name=\"checkedA\" />}\r\n                label=\"Keep me logged in\"\r\n            />\r\n            <Link className={styles.links} to=\"/edit_profile\">\r\n                Forgot Password?\r\n            </Link>\r\n            </div>\r\n            <Link className={styles.links} to=\"/sign_up\">\r\n                Create an Account? Sign Up\r\n            </Link>\r\n        </Paper>\r\n        {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default SignIn;","E:\\NetraB\\netra\\src\\pages\\Settings\\SignUp.js",["619","620","621","622"],"import React,{ useState } from 'react'\r\nimport styles from './SignUp.module.css'\r\nimport { Paper,makeStyles,InputBase,Button,FormControlLabel,Checkbox,InputAdornment,IconButton} from '@material-ui/core'\r\nimport { Link } from 'react-router-dom';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\n\r\nconst InputStyles = makeStyles({\r\n    root: {\r\n        paddingRight: 10,\r\n        paddingLeft: 10,\r\n        background: \"#fff\",\r\n        border:'1px solid #0263a1',\r\n        borderRadius: \"5px\",\r\n        height: 40,\r\n        boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n        width:'100%'\r\n      },\r\n  });\r\n\r\nconst SignUp=()=>{\r\n    const[showPassword,setShowPassword]=useState(false);\r\n    const[fname,setFname]=useState('');\r\n    const[lname,setLname]=useState('');\r\n    const[username,setUsername]=useState('');\r\n    const[password,setPassword]=useState('');\r\n    const[confirmPassword,setConfirmPassword]=useState('');\r\n    const InputClasses=InputStyles();\r\n\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword);\r\n      };\r\n    \r\n      const handleMouseDownPassword = (event) => {\r\n        event.preventDefault();\r\n      };\r\n    return(\r\n        <div className={styles.container}>\r\n        <Paper className={styles.SignUpPaper} elevation={5}>\r\n            <div>\r\n                <img src='/netra-logo.png' width={60} height={60}/>\r\n                <div className={styles.netra}>NETRA</div>\r\n            </div>\r\n            <div style={{textAlign:'center'}}>\r\n                <h4 style={{margin:0}}>Create Your Account</h4>\r\n            </div>\r\n            <form id={styles.signUpForm}>\r\n            <div className={styles.flex}>\r\n                <InputBase classes={InputClasses} name='firstname' value={fname} onChange={(e)=>{setFname(e.target.value)}} id='firstname' placeholder='First Name' required/>\r\n                <InputBase classes={InputClasses} name='lastname' value={lname} onChange={(e)=>{setLname(e.target.value)}} id='lastname' placeholder='Last Name' required/>\r\n            </div>\r\n            <div className={styles.flex}>\r\n                <InputBase \r\n                classes={InputClasses} \r\n                name='username' \r\n                id='username' \r\n                value={username} \r\n                onChange={(e)=>{setUsername(e.target.value)}}\r\n                placeholder='Username' \r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      @netra.com\r\n                    </InputAdornment>\r\n                  }\r\n                required/>\r\n            </div>\r\n            <div className={styles.flex} style={{marginLeft:'2%'}}>\r\n            You can use letters,numbers,periods.\r\n            </div>\r\n            <div className={styles.flex}>\r\n                <InputBase \r\n                classes={InputClasses} \r\n                type={showPassword ? 'text' : 'password'}\r\n                value={password}\r\n                onChange={(e)=>setPassword(e.target.value)}\r\n                id='password' \r\n                placeholder='Password' \r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickShowPassword}\r\n                        onMouseDown={handleMouseDownPassword}\r\n                      >\r\n                        {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                required/>\r\n                <InputBase \r\n                classes={InputClasses} \r\n                type={showPassword ? 'text' : 'password'}\r\n                value={confirmPassword}\r\n                onChange={(e)=>setConfirmPassword(e.target.value)}\r\n                id='confirm-password' \r\n                placeholder='Confirm Password' \r\n                endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={handleClickShowPassword}\r\n                        onMouseDown={handleMouseDownPassword}\r\n                      >\r\n                        {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                required/>\r\n            </div>\r\n            <div className={styles.flex} style={{marginLeft:'2%'}}>\r\n            Use 8 or more characters with a mix of letters,numbers & symbols\r\n            </div>\r\n            </form>\r\n            <Button \r\n            variant='contained' \r\n            style={{backgroundColor:'#1c4199',color:'white'}}\r\n            onClick={()=>{console.log(fname,lname,username,password,confirmPassword)}}\r\n            >Create Account</Button>\r\n        </Paper>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default SignUp;","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\ReliabilityDashboard.js",["623","624","625","626","627","628","629","630","631","632"],"import React, { useState, useEffect } from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport styles from \"./rDashboard.module.css\";\r\nimport { Button, Switch, InputLabel, Input, TextField } from \"@material-ui/core\";\r\nimport BarGraph from \"./BarGraph\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport \"./calendar.css\";\r\n//import LensIcon from '@material-ui/icons/Lens';\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\n// import CreateProfile from \"./CreateProfile\";\r\nimport { data, subSystemLevelData, events, mainData } from \"./DashboardData\";\r\nimport ReliabilityChart from \"./ReliabilityChart\";\r\nimport EventCalendar from \"./EventCalendar\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from \"moment\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\nimport MissionSlider from \"./MissionSlider\";\r\nimport { SelectWithLimit } from \"../../ui/Form/SelectWithLimit\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { userActions } from \"../../store/ApplicationVariable\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst MissionData = (props) => {\r\n  return (\r\n    <div className={styles.missionData} style={props.style}>\r\n      <div className={styles.target}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"icon icon-tabler icon-tabler-target\"\r\n          width=\"14\"\r\n          height=\"14\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke-width=\"1.5\"\r\n          stroke=\"#374c93\"\r\n          fill=\"none\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        >\r\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"1\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"5\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"9\" />\r\n        </svg>{\" \"}\r\n        Target: {props.mission.target}%\r\n      </div>\r\n      <div className={styles.actual}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"icon icon-tabler icon-tabler-shield-check\"\r\n          width=\"14\"\r\n          height=\"14\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke-width=\"1.5\"\r\n          stroke=\"#f8f8f8\"\r\n          fill=\"none\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        >\r\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <path d=\"M9 12l2 2l4 -4\" />\r\n          <path d=\"M12 3a12 12 0 0 0 8.5 3a12 12 0 0 1 -8.5 15a12 12 0 0 1 -8.5 -15a12 12 0 0 0 8.5 -3\" />\r\n        </svg>\r\n        Actual:\r\n        {props.mission.actual.map((data) => {\r\n          return (\r\n            <>\r\n              <div>\r\n                {data.name} {data.rel.toFixed(2)}%\r\n              </div>\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <div className={styles.probabilityHead}>Probability of Achieving</div>\r\n        <div className={styles.probability}>\r\n          {props.mission.actual.map((data) => {\r\n            return (\r\n              <>\r\n                <div>\r\n                  {data.name}{\" \"}\r\n                  {data.prob.toFixed(2) == 100\r\n                    ? \">99%\"\r\n                    : `${data.prob.toFixed(2)}%`}\r\n                </div>\r\n              </>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ReliabilityDashboard = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [missionData, setMissionData] = useState([]);\r\n  const [tempMissionData, setTempMissionData] = useState([]);\r\n\r\n  const [missionInfo, setMissionInfo] = useState([]);\r\n\r\n  const [cardData, setCardData] = useState(null);\r\n\r\n  const handleStartDateChange = (date) => {\r\n    setStartDate(date);\r\n  };\r\n\r\n  const [endDate, setEndDate] = useState(new Date());\r\n\r\n  const [eventInfo, setEventInfo] = useState(null);\r\n\r\n  const handleEndDateChange = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  const handleEventCheck = () => {\r\n    let start = moment(startDate).subtract(1, \"day\");\r\n    let end = moment(endDate).add(1, \"day\");\r\n    let total = (end - start) / (1000 * 3600 * 24) - 1;\r\n    console.log(total);\r\n    let days = { working: 0, down: 0, maintenance: 0, total: total };\r\n    events.forEach((event) => {\r\n      if (event.start < end && event.end > start) {\r\n        if (event.start >= start && event.end <= end) {\r\n          let diff =\r\n            (moment(event.end) - moment(event.start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start >= start && event.end >= end) {\r\n          let diff = (moment(end) - moment(event.start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start <= start && event.end <= end) {\r\n          let diff = (moment(event.end) - moment(start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start <= start && event.end >= end) {\r\n          let diff = (moment(end) - moment(start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        }\r\n      }\r\n    });\r\n    setEventInfo(days);\r\n    setCardFlipped(!isCardFlipped);\r\n  };\r\n\r\n  const [showSubsystem, setSubSystem] = useState(false);\r\n\r\n  const [isCardFlipped, setCardFlipped] = useState(false);\r\n\r\n  const [currentMission, setMission] = useState(0);\r\n  const [eqDataOption, setEqDataOption] = useState([]);\r\n\r\n  const [selectedEqName, setEquipmentName] = useState(null);\r\n  const [selectedShipName, setShipName] = useState(null);\r\n  const [selectedMissionName, setMissionName] = useState(null);\r\n\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  const [subSystemData, setSubSystemData] = useState([]);\r\n\r\n  const saveTempMission = (mission) => {\r\n    // console.log(\"H\");\r\n    console.log(mission);\r\n    // console.log(missionData);\r\n    if (!missionData.includes(mission.missionName)) {\r\n      setMissionData((state) => {\r\n        return [...state, mission.missionName];\r\n      });\r\n      setMissionInfo((state) => {\r\n        return [...state, mission];\r\n      });\r\n      setTempMissionData((state) => {\r\n        return [...state, mission];\r\n      });\r\n    }\r\n  };\r\n\r\n  const [userSelectionData, setUserSelectionData] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const customSelectData = useSelector(\r\n    (state) => state.userSelection.userSelection\r\n  );\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetch(\"/rel_dashboard\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        debugger;\r\n        const mission_data = data[\"mission_data\"];\r\n        setMissionInfo(mission_data);\r\n        const user_selection = data[\"user_selection\"][\"data\"];\r\n        const eqData = data[\"user_selection\"][\"eqData\"];\r\n        const mNames = mission_data.map((x) => x[\"missionName\"]);\r\n        setMissionData(mNames);\r\n        const shipName = user_selection.map((x) => x.shipName);\r\n        setUserSelectionData(eqData);\r\n        dispatch(\r\n          userActions.onChangeLoad({ filteredData: { shipName: shipName } })\r\n        );\r\n      });\r\n  }, [setUserSelectionData]);\r\n\r\n  // useEffect(() => {\r\n  //   fetch(\"/fetch_user_selection\", {\r\n  //     method: \"GET\",\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //       Accept: \"application/json\",\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((data) => {\r\n  //       const shipName = data.map((x) => x.shipName);\r\n  //       debugger;\r\n  //       setUserSelectionData(data);\r\n  //       dispatch(\r\n  //         userActions.onChangeLoad({ filteredData: { shipName: shipName } })\r\n  //       );\r\n  //     });\r\n  // }, [setUserSelectionData]);\r\n\r\n  const getSelectedValues = (d, selectType) => {\r\n    debugger;\r\n    // console.log(selectedEqName, selectedShipName, selectedMissionName);\r\n    if (selectType === \"equipmentName\") {\r\n      setEquipmentName(d);\r\n    }\r\n    if (selectType === \"shipName\") {\r\n      var filteredEqData = [];\r\n      d.map((element) => {\r\n        var xx = userSelectionData\r\n          .filter((x) => x.shipName === element)\r\n          .map((x) => {\r\n            return { name: x.equipmentName, parent: element };\r\n          });\r\n        filteredEqData = [...filteredEqData, ...xx];\r\n        return null;\r\n      });\r\n      setEqDataOption(filteredEqData);\r\n      setShipName(d);\r\n    }\r\n    // if (selectType === \"missionName\") {\r\n    //   setMissionName(d);\r\n    // }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setMissionName(event.target.value);\r\n  };\r\n    const onSubmitHandler = () => {\r\n      debugger;\r\n      setGraphData([]);\r\n      setSubSystem(false);\r\n      setLoading(true);\r\n      const data = {\r\n        missions: [selectedMissionName],\r\n        equipments: selectedEqName,\r\n        shipClass: selectedShipName,\r\n        tempMissions: tempMissionData,\r\n      };\r\n      setMission(0);\r\n      console.log(missionInfo);\r\n      fetch(\"/rel_estimate_EQ\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({ data: data }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .then((d) => {\r\n          debugger;\r\n          console.log(d);\r\n\r\n          if (data.missions.length == 1) {\r\n            if (data.shipClass.length == 1) {\r\n              //for Single Ship and Single Mission\r\n              let newGraphData = [];\r\n              let newSubSystem = [];\r\n              let newCardData = [];\r\n              data.missions.forEach((mission, mid) => {\r\n                let missionData = d[mid][\"Temp Mission\"];\r\n                newCardData[mid] = {\r\n                  ...newCardData[mid],\r\n                  name: mission,\r\n                  target: 90,\r\n                };\r\n                newGraphData = [\r\n                  ...newGraphData,\r\n                  {\r\n                    name: \"Target Reliability\",\r\n                    Reliability: 90,\r\n                  },\r\n                ];\r\n                // missionInfo.forEach((element) => {\r\n                //   if (element.missionName === mission) {\r\n                    \r\n                //   }\r\n                // });\r\n                //console.log(missionData)\r\n                data.shipClass.forEach((ship) => {\r\n                  let shipData = missionData[ship];\r\n                  //console.log(shipData);\r\n                  let actual = [];\r\n                  data.equipments.forEach((eqpt, eid) => {\r\n                    let eqptData = shipData[eid][eqpt.name];\r\n\r\n                    actual[eid] = {\r\n                      name: eqpt.name,\r\n                      rel: 100 * eqptData.rel,\r\n                      prob: 100 * eqptData.prob_ac,\r\n                    };\r\n\r\n                    newCardData[mid].actual = actual;\r\n\r\n                    console.log(newCardData);\r\n                    //console.log(eqptData);\r\n                    newGraphData = [\r\n                      ...newGraphData,\r\n                      { name: `${eqpt.name}`, Reliability: 100 * eqptData.rel },\r\n                    ];\r\n                    eqptData.child.forEach((child, cid) => {\r\n                      newSubSystem[cid] = {\r\n                        ...newSubSystem[cid],\r\n                        name: child.name,\r\n                        [eqpt.name]: 100 * child.rel,\r\n                      };\r\n                    });\r\n                  });\r\n                });\r\n              });\r\n              debugger;\r\n              setGraphData(newGraphData);\r\n              setSubSystemData(newSubSystem);\r\n              setCardData(newCardData);\r\n              setLoading(false);\r\n            } else {\r\n              //for many Ship Classes and Single Mission\r\n              let newGraphData = [];\r\n              let newSubSystem = [];\r\n              let newCardData = [];\r\n              data.missions.forEach((mission, mid) => {\r\n                let missionData = d[mid][mission];\r\n                missionInfo.forEach((element) => {\r\n                  if (element.missionName === mission) {\r\n                    newCardData[mid] = {\r\n                      ...newCardData[mid],\r\n                      name: mission,\r\n                      target: element.tar_rel,\r\n                    };\r\n                    newGraphData = [\r\n                      ...newGraphData,\r\n                      {\r\n                        name: \"Target Reliability\",\r\n                        Reliability: element.tar_rel,\r\n                      },\r\n                    ];\r\n                  }\r\n                });\r\n                //console.log(missionData)\r\n                data.shipClass.forEach((ship, sid) => {\r\n                  let shipData = missionData[ship];\r\n                  //console.log(shipData);\r\n                  let actual = [];\r\n                  data.equipments.forEach((eqpt, eid) => {\r\n                    let eqptData = shipData[eid][eqpt.name];\r\n\r\n                    actual[eid] = {\r\n                      name: eqpt.name,\r\n                      rel: 100 * eqptData.rel,\r\n                      prob: 100 * eqptData.prob_ac,\r\n                    };\r\n\r\n                    newCardData[mid].actual = actual;\r\n\r\n                    //console.log(eqptData);\r\n                    newGraphData[sid] = {\r\n                      ...newGraphData[sid],\r\n                      name: ship,\r\n                      [eqpt.name]: 100 * eqptData.rel,\r\n                    };\r\n                    eqptData.child.forEach((child, cid) => {\r\n                      newSubSystem[cid] = {\r\n                        ...newSubSystem[cid],\r\n                        name: [`${ship} ${child.name}`],\r\n                        [ship]: 100 * child.rel,\r\n                      };\r\n                    });\r\n                  });\r\n                });\r\n              });\r\n              debugger;\r\n              setGraphData(newGraphData);\r\n              setSubSystemData(newSubSystem);\r\n              setCardData(newCardData);\r\n              setLoading(false);\r\n            }\r\n          } else if (data.missions.length > 1) {\r\n            //for many Missions\r\n            let newGraphData = [];\r\n            let newSubSystem = [];\r\n            let newCardData = [];\r\n            let targetRel = {};\r\n            data.missions.forEach((mission, mid) => {\r\n              let missionData = d[mid][mission];\r\n              missionInfo.forEach((element) => {\r\n                if (element.missionName === mission) {\r\n                  newCardData[mid] = {\r\n                    ...newCardData[mid],\r\n                    name: mission,\r\n                    target: element.tar_rel,\r\n                  };\r\n                  targetRel = {\r\n                    ...targetRel,\r\n                    name: \"Target Reliability\",\r\n                    [mission]: element.tar_rel,\r\n                  };\r\n                }\r\n              });\r\n              //console.log(missionData)\r\n              data.shipClass.forEach((ship) => {\r\n                let shipData = missionData[ship];\r\n                //console.log(shipData);\r\n                let actual = [];\r\n                data.equipments.forEach((eqpt, eid) => {\r\n                  let eqptData = shipData[eid][eqpt.name];\r\n\r\n                  actual[eid] = {\r\n                    name: eqpt.name,\r\n                    rel: 100 * eqptData.rel,\r\n                    prob: 100 * eqptData.prob_ac,\r\n                  };\r\n\r\n                  newCardData[mid].actual = actual;\r\n\r\n                  //console.log(eqptData);\r\n                  newGraphData[eid] = {\r\n                    ...newGraphData[eid],\r\n                    name: eqpt.name,\r\n                    [mission]: 100 * eqptData.rel,\r\n                  };\r\n                  eqptData.child.forEach((child, cid) => {\r\n                    newSubSystem[cid] = {\r\n                      ...newSubSystem[cid],\r\n                      name: [`${eqpt.name} ${child.name}`],\r\n                      [mission]: 100 * child.rel,\r\n                    };\r\n                  });\r\n                });\r\n              });\r\n            });\r\n            newGraphData = [targetRel, ...newGraphData];\r\n            setGraphData(newGraphData);\r\n            setSubSystemData(newSubSystem);\r\n            setCardData(newCardData);\r\n            setLoading(false);\r\n            console.log(cardData);\r\n          }\r\n        });\r\n    };\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        <div className={styles.mprofile}>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Ship Name\r\n            </InputLabel>\r\n            <SelectWithLimit\r\n              limit={3}\r\n              options={customSelectData[\"shipName\"]}\r\n              getSelectedValues={getSelectedValues}\r\n              selectType={\"shipName\"}\r\n            />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Equipment Name\r\n            </InputLabel>\r\n            <SelectWithLimit\r\n              limit={3}\r\n              options={eqDataOption}\r\n              getSelectedValues={getSelectedValues}\r\n              selectType={\"equipmentName\"}\r\n            />\r\n          </div>\r\n          {/* <CustomSelect\r\n            label=\"Mission Selection\"\r\n            fields={['Mission A','Mission B','Mission C']}\r\n            /> */}\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Enter Mission Duration\r\n            </InputLabel>\r\n            <TextField id=\"outlined-basic\"  variant=\"outlined\" \r\n             type=\"number\" selectType=\"missionDuration\" value={selectedMissionName} onChange={handleChange} />\r\n          </div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              marginTop: \"2rem\",\r\n            }}\r\n            onClick={onSubmitHandler}\r\n          >\r\n            Submit\r\n          </Button>\r\n          {/* <CreateProfile saveTempMission={saveTempMission} /> */}\r\n        </div>\r\n        {loading && (\r\n          <div className={styles.midSection}>\r\n            <Loader\r\n              type=\"Puff\"\r\n              color=\"#86a0ff\"\r\n              height={300}\r\n              width={300}\r\n              style={{ marginTop: 100 }}\r\n            />\r\n          </div>\r\n        )}\r\n        {graphData.length ? (\r\n          <>\r\n            <div className={styles.midSection}>\r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                  <div className={styles.relChart}>\r\n                    {graphData && <ReliabilityChart data={graphData} />}\r\n                  </div>\r\n                  <div className={styles.compareMission}>\r\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                      <AddCircleOutlineIcon /> Compare with other missions\r\n                    </div>\r\n                    {cardData ? (\r\n                      <div className={styles.missionbox}>\r\n                        {/* <div className={styles.missionName}>Mission B</div> */}\r\n                        <MissionSlider\r\n                          missions={cardData}\r\n                          currentMission={currentMission}\r\n                          setMission={setMission}\r\n                        />\r\n                        <MissionData mission={cardData[currentMission]} />\r\n                        <div className={styles.showSubsystem}>\r\n                          Show Subsytem Level{\" \"}\r\n                          <Switch\r\n                            checked={showSubsystem}\r\n                            disabled={!subSystemData.length}\r\n                            onChange={() => {\r\n                              setSubSystem(!showSubsystem);\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <div className={styles.missionbox}>\r\n                        Select Missions to compare\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className={styles.calendar}>\r\n                {/* <div className={styles.header}>\r\n              <div style={{display:'flex',alignItems:'center'}}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-calendar-event\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#0d1a45\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n              <rect x=\"4\" y=\"5\" width=\"16\" height=\"16\" rx=\"2\" />\r\n              <line x1=\"16\" y1=\"3\" x2=\"16\" y2=\"7\" />\r\n              <line x1=\"8\" y1=\"3\" x2=\"8\" y2=\"7\" />\r\n              <line x1=\"4\" y1=\"11\" x2=\"20\" y2=\"11\" />\r\n              <rect x=\"8\" y=\"15\" width=\"2\" height=\"2\" />\r\n            </svg>Calendar</div> <div><LensIcon style={{color:'#8af6ad',opacity:'0.5'}}/>Working <LensIcon style={{color:'#ff8788',opacity:'0.5'}}/>Down <LensIcon style={{color:'#f3f682',opacity:'0.5'}}/>Maintenance</div></div> */}\r\n                <div className={styles.content}>\r\n                  <div className={styles.calendar}>\r\n                    <EventCalendar events={events} />\r\n                  </div>\r\n                  <ReactCardFlip isFlipped={isCardFlipped}>\r\n                    <div className={styles.datePicker}>\r\n                      <div className={styles.dpHeader}>Availability</div>\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"L\"\r\n                        margin=\"normal\"\r\n                        id=\"start-date\"\r\n                        label=\"Start Date\"\r\n                        value={startDate}\r\n                        onChange={handleStartDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"start date\",\r\n                        }}\r\n                      />\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"L\"\r\n                        margin=\"normal\"\r\n                        id=\"end-date\"\r\n                        label=\"End Date\"\r\n                        value={endDate}\r\n                        onChange={handleEndDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"end date\",\r\n                        }}\r\n                      />\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        style={{ width: 200 }}\r\n                        onClick={() => {\r\n                          handleEventCheck();\r\n                        }}\r\n                      >\r\n                        Check\r\n                      </Button>\r\n                    </div>\r\n                    <div className={styles.datePicker}>\r\n                      <div className={styles.dpHeader}>Availability</div>\r\n                      {eventInfo && (\r\n                        <>\r\n                          <div>The Equipment was: </div>\r\n                          <div>\r\n                            Running for{\" \"}\r\n                            <strong>{eventInfo.working} days</strong>(\r\n                            {(\r\n                              (eventInfo.working / eventInfo.total) *\r\n                              100\r\n                            ).toFixed(2)}\r\n                            %)\r\n                          </div>\r\n                          <div>\r\n                            Under Maintenance for{\" \"}\r\n                            <strong>{eventInfo.maintenance} days</strong>(\r\n                            {(\r\n                              (eventInfo.maintenance / eventInfo.total) *\r\n                              100\r\n                            ).toFixed(2)}\r\n                            %)\r\n                          </div>\r\n                          <div>\r\n                            Down for <strong>{eventInfo.down} days</strong>(\r\n                            {((eventInfo.down / eventInfo.total) * 100).toFixed(\r\n                              2\r\n                            )}\r\n                            %)\r\n                          </div>\r\n                        </>\r\n                      )}\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        style={{ width: 200 }}\r\n                        onClick={() => {\r\n                          setCardFlipped(!isCardFlipped);\r\n                        }}\r\n                      >\r\n                        Back\r\n                      </Button>\r\n                    </div>\r\n                  </ReactCardFlip>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className={styles.subSystemLevel}>\r\n              {showSubsystem && (\r\n                <div className={styles.subSystemContent}>\r\n                  <div className={styles.subSystemLevelChart}>\r\n                    <div>\r\n                      <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                        <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          class=\"icon icon-tabler icon-tabler-adjustments\"\r\n                          width=\"32\"\r\n                          height=\"32\"\r\n                          viewBox=\"0 0 24 24\"\r\n                          stroke-width=\"1.5\"\r\n                          stroke=\"#0d1a45\"\r\n                          fill=\"none\"\r\n                          stroke-linecap=\"round\"\r\n                          stroke-linejoin=\"round\"\r\n                        >\r\n                          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n                          <circle cx=\"6\" cy=\"10\" r=\"2\" />\r\n                          <line x1=\"6\" y1=\"4\" x2=\"6\" y2=\"8\" />\r\n                          <line x1=\"6\" y1=\"12\" x2=\"6\" y2=\"20\" />\r\n                          <circle cx=\"12\" cy=\"16\" r=\"2\" />\r\n                          <line x1=\"12\" y1=\"4\" x2=\"12\" y2=\"14\" />\r\n                          <line x1=\"12\" y1=\"18\" x2=\"12\" y2=\"20\" />\r\n                          <circle cx=\"18\" cy=\"7\" r=\"2\" />\r\n                          <line x1=\"18\" y1=\"4\" x2=\"18\" y2=\"5\" />\r\n                          <line x1=\"18\" y1=\"9\" x2=\"18\" y2=\"20\" />\r\n                        </svg>\r\n                        Sub System Level Indicator\r\n                      </div>\r\n                    </div>\r\n                    <BarGraph data={subSystemData} />\r\n                  </div>\r\n                  <div style={{ width: \"20%\" }}>\r\n                    <MissionData\r\n                      mission={cardData[currentMission]}\r\n                      style={{ height: 200 }}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\nexport default ReliabilityDashboard;\r\n","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\new.js",["633","634","635","636","637","638","639","640","641"],"import React, { useState, useEffect } from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport styles from \"./rDashboard.module.css\";\r\nimport { Button, Switch, InputLabel } from \"@material-ui/core\";\r\nimport BarGraph from \"./BarGraph\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport \"./calendar.css\";\r\n//import LensIcon from '@material-ui/icons/Lens';\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport CreateProfile from \"./CreateProfile\";\r\nimport { data, subSystemLevelData, events, mainData } from \"./DashboardData\";\r\nimport ReliabilityChart from \"./ReliabilityChart\";\r\nimport EventCalendar from \"./EventCalendar\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from \"moment\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\nimport MissionSlider from \"./MissionSlider\";\r\nimport { SelectWithLimit } from \"../../ui/Form/SelectWithLimit\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { userActions } from \"../../store/ApplicationVariable\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport Table from \"../../ui/Table/Table\"\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\n\r\nconst MissionData = (props) => {\r\n  return (\r\n    <div className={styles.missionData} style={props.style}>\r\n      <div className={styles.target}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"icon icon-tabler icon-tabler-target\"\r\n          width=\"14\"\r\n          height=\"14\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke-width=\"1.5\"\r\n          stroke=\"#374c93\"\r\n          fill=\"none\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        >\r\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"1\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"5\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"9\" />\r\n        </svg>{\" \"}\r\n        Target: {props.mission.target}%\r\n      </div>\r\n      <div className={styles.actual}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"icon icon-tabler icon-tabler-shield-check\"\r\n          width=\"14\"\r\n          height=\"14\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke-width=\"1.5\"\r\n          stroke=\"#f8f8f8\"\r\n          fill=\"none\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        >\r\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <path d=\"M9 12l2 2l4 -4\" />\r\n          <path d=\"M12 3a12 12 0 0 0 8.5 3a12 12 0 0 1 -8.5 15a12 12 0 0 1 -8.5 -15a12 12 0 0 0 8.5 -3\" />\r\n        </svg>\r\n        Actual:\r\n        {props.mission.actual.map((data) => {\r\n          return (\r\n            <>\r\n              <div>\r\n                {data.name} {data.rel.toFixed(2)}%\r\n              </div>\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <div className={styles.probabilityHead}>Probability of Achieving</div>\r\n        <div className={styles.probability}>\r\n          {props.mission.actual.map((data) => {\r\n            return (\r\n              <>\r\n                <div>\r\n                  {data.name}{\" \"}\r\n                  {data.prob.toFixed(2) == 100\r\n                    ? \">99%\"\r\n                    : `${data.prob.toFixed(2)}%`}\r\n                </div>\r\n              </>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst New = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [missionData, setMissionData] = useState([]);\r\n  const [tempMissionData, setTempMissionData] = useState([]);\r\n\r\n  const [missionInfo, setMissionInfo] = useState([]);\r\n\r\n  const [cardData, setCardData] = useState(null);\r\n\r\n  const handleStartDateChange = (date) => {\r\n    setStartDate(date);\r\n  };\r\n\r\n  const [endDate, setEndDate] = useState(new Date());\r\n\r\n  const [eventInfo, setEventInfo] = useState(null);\r\n\r\n  const handleEndDateChange = (date) => {\r\n    setEndDate(date);\r\n  };\r\n\r\n  const handleEventCheck = () => {\r\n    let start = moment(startDate).subtract(1, \"day\");\r\n    let end = moment(endDate).add(1, \"day\");\r\n    let total = (end - start) / (1000 * 3600 * 24) - 1;\r\n    console.log(total);\r\n    let days = { working: 0, down: 0, maintenance: 0, total: total };\r\n    events.forEach((event) => {\r\n      if (event.start < end && event.end > start) {\r\n        if (event.start >= start && event.end <= end) {\r\n          let diff =\r\n            (moment(event.end) - moment(event.start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start >= start && event.end >= end) {\r\n          let diff = (moment(end) - moment(event.start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start <= start && event.end <= end) {\r\n          let diff = (moment(event.end) - moment(start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start <= start && event.end >= end) {\r\n          let diff = (moment(end) - moment(start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        }\r\n      }\r\n    });\r\n    setEventInfo(days);\r\n    setCardFlipped(!isCardFlipped);\r\n  };\r\n\r\n  const [showSubsystem, setSubSystem] = useState(false);\r\n\r\n  const [isCardFlipped, setCardFlipped] = useState(false);\r\n\r\n  const [currentMission, setMission] = useState(0);\r\n  const [eqDataOption, setEqDataOption] = useState([]);\r\n\r\n  const [selectedEqName, setEquipmentName] = useState(null);\r\n  const [selectedShipName, setShipName] = useState(null);\r\n  const [selectedMissionName, setMissionName] = useState(null);\r\n\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  const [subSystemData, setSubSystemData] = useState([]);\r\n\r\n  const saveTempMission = (mission) => {\r\n    // console.log(\"H\");\r\n    console.log(mission);\r\n    // console.log(missionData);\r\n    if (!missionData.includes(mission.missionName)) {\r\n      setMissionData((state) => {\r\n        return [...state, mission.missionName];\r\n      });\r\n      setMissionInfo((state) => {\r\n        return [...state, mission];\r\n      });\r\n      setTempMissionData((state) => {\r\n        return [...state, mission];\r\n      });\r\n    }\r\n  };\r\n\r\n  const [userSelectionData, setUserSelectionData] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const customSelectData = useSelector(\r\n    (state) => state.userSelection.userSelection\r\n  );\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetch(\"/rel_dashboard\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        debugger;\r\n        const mission_data = data[\"mission_data\"];\r\n        setMissionInfo(mission_data);\r\n        const user_selection = data[\"user_selection\"][\"data\"];\r\n        const eqData = data[\"user_selection\"][\"eqData\"];\r\n        const mNames = mission_data.map((x) => x[\"missionName\"]);\r\n        setMissionData(mNames);\r\n        const shipName = user_selection.map((x) => x.shipName);\r\n        setUserSelectionData(eqData);\r\n        dispatch(\r\n          userActions.onChangeLoad({ filteredData: { shipName: shipName } })\r\n        );\r\n      });\r\n  }, [setUserSelectionData]);\r\n\r\n  // useEffect(() => {\r\n  //   fetch(\"/fetch_user_selection\", {\r\n  //     method: \"GET\",\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //       Accept: \"application/json\",\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((data) => {\r\n  //       const shipName = data.map((x) => x.shipName);\r\n  //       debugger;\r\n  //       setUserSelectionData(data);\r\n  //       dispatch(\r\n  //         userActions.onChangeLoad({ filteredData: { shipName: shipName } })\r\n  //       );\r\n  //     });\r\n  // }, [setUserSelectionData]);\r\n\r\n  const getSelectedValues = (d, selectType) => {\r\n    // console.log(selectedEqName, selectedShipName, selectedMissionName);\r\n    if (selectType === \"equipmentName\") {\r\n      setEquipmentName(d);\r\n    }\r\n    if (selectType === \"shipName\") {\r\n      var filteredEqData = [];\r\n      d.map((element) => {\r\n        var xx = userSelectionData\r\n          .filter((x) => x.shipName === element)\r\n          .map((x) => {\r\n            return { name: x.equipmentName, parent: element };\r\n          });\r\n        filteredEqData = [...filteredEqData, ...xx];\r\n        return null;\r\n      });\r\n      setEqDataOption(filteredEqData);\r\n      setShipName(d);\r\n    }\r\n    if (selectType === \"missionName\") {\r\n      setMissionName(d);\r\n    }\r\n  };\r\n\r\n  const onSubmitHandler = () => {\r\n    setGraphData([]);\r\n    setSubSystem(false);\r\n    setLoading(true);\r\n    const data = {\r\n      missions: selectedMissionName,\r\n      equipments: selectedEqName,\r\n      shipClass: selectedShipName,\r\n      tempMissions: tempMissionData,\r\n    };\r\n    setMission(0);\r\n    console.log(missionInfo);\r\n    fetch(\"/rel_estimate\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ data: data }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        console.log(d);\r\n\r\n        if (data.missions.length == 1) {\r\n          if (data.shipClass.length == 1) {\r\n            //for Single Ship and Single Mission\r\n            let newGraphData = [];\r\n            let newSubSystem = [];\r\n            let newCardData = [];\r\n            data.missions.forEach((mission, mid) => {\r\n              let missionData = d[mid][mission];\r\n              missionInfo.forEach((element) => {\r\n                if (element.missionName === mission) {\r\n                  newCardData[mid] = {\r\n                    ...newCardData[mid],\r\n                    name: mission,\r\n                    target: element.tar_rel,\r\n                  };\r\n                  newGraphData = [\r\n                    ...newGraphData,\r\n                    {\r\n                      name: \"Target Reliability\",\r\n                      Reliability: element.tar_rel,\r\n                    },\r\n                  ];\r\n                }\r\n              });\r\n              //console.log(missionData)\r\n              data.shipClass.forEach((ship) => {\r\n                let shipData = missionData[ship];\r\n                //console.log(shipData);\r\n                let actual = [];\r\n                data.equipments.forEach((eqpt, eid) => {\r\n                  let eqptData = shipData[eid][eqpt.name];\r\n\r\n                  actual[eid] = {\r\n                    name: eqpt.name,\r\n                    rel: 100 * eqptData.rel,\r\n                    prob: 100 * eqptData.prob_ac,\r\n                  };\r\n\r\n                  newCardData[mid].actual = actual;\r\n\r\n                  console.log(newCardData);\r\n                  //console.log(eqptData);\r\n                  newGraphData = [\r\n                    ...newGraphData,\r\n                    { name: `${eqpt.name}`, Reliability: 100 * eqptData.rel },\r\n                  ];\r\n                  eqptData.child.forEach((child) => {\r\n                    newSubSystem = [\r\n                      ...newSubSystem,\r\n                      {EquipmentName: `${eqpt.name} ${child.name}`,\r\n                      [mission]: 100 * child.rel,\r\n                      target:{[mission]:newCardData[mid].target}}\r\n                  ];\r\n                  });\r\n                });\r\n              });\r\n            });\r\n            setGraphData(newGraphData);\r\n            setSubSystemData(newSubSystem);\r\n            setCardData(newCardData);\r\n            setLoading(false);\r\n          } else {\r\n            //for many Ship Classes and Single Mission\r\n            let newGraphData = [];\r\n            let newSubSystem = [];\r\n            let newCardData = [];\r\n            data.missions.forEach((mission, mid) => {\r\n              let missionData = d[mid][mission];\r\n              missionInfo.forEach((element) => {\r\n                if (element.missionName === mission) {\r\n                  newCardData[mid] = {\r\n                    ...newCardData[mid],\r\n                    name: mission,\r\n                    target: element.tar_rel,\r\n                  };\r\n                  newGraphData = [\r\n                    ...newGraphData,\r\n                    {\r\n                      name: \"Target Reliability\",\r\n                      Reliability: element.tar_rel,\r\n                    },\r\n                  ];\r\n                }\r\n              });\r\n              //console.log(missionData)\r\n              data.shipClass.forEach((ship, sid) => {\r\n                let shipData = missionData[ship];\r\n                //console.log(shipData);\r\n                let actual = [];\r\n                data.equipments.forEach((eqpt, eid) => {\r\n                  let eqptData = shipData[eid][eqpt.name];\r\n\r\n                  actual[eid] = {\r\n                    name: eqpt.name,\r\n                    rel: 100 * eqptData.rel,\r\n                    prob: 100 * eqptData.prob_ac,\r\n                  };\r\n\r\n                  newCardData[mid].actual = actual;\r\n\r\n                  //console.log(eqptData);\r\n                  newGraphData[sid] = {\r\n                    ...newGraphData[sid],\r\n                    name: ship,\r\n                    [eqpt.name]: 100 * eqptData.rel,\r\n                  };\r\n                  //SubSystem to be added\r\n                });\r\n              });\r\n            });\r\n            setGraphData(newGraphData);\r\n            setSubSystemData(newSubSystem);\r\n            setCardData(newCardData);\r\n            setLoading(false);\r\n          }\r\n        } else if (data.missions.length > 1) {\r\n          //for many Missions\r\n          let newGraphData = [];\r\n          let newSubSystem = [];\r\n          let newCardData = [];\r\n          let targetRel = {};\r\n          data.missions.forEach((mission, mid) => {\r\n            let missionData = d[mid][mission];\r\n            missionInfo.forEach((element) => {\r\n              if (element.missionName === mission) {\r\n                newCardData[mid] = {\r\n                  ...newCardData[mid],\r\n                  name: mission,\r\n                  target: element.tar_rel,\r\n                };\r\n                targetRel = {\r\n                  ...targetRel,\r\n                  name: \"Target Reliability\",\r\n                  [mission]: element.tar_rel,\r\n                };\r\n              }\r\n            });\r\n            //console.log(missionData)\r\n            data.shipClass.forEach((ship) => {\r\n              let shipData = missionData[ship];\r\n              //console.log(shipData);\r\n              let actual = [];\r\n              data.equipments.forEach((eqpt, eid) => {\r\n                let eqptData = shipData[eid][eqpt.name];\r\n\r\n                actual[eid] = {\r\n                  name: eqpt.name,\r\n                  rel: 100 * eqptData.rel,\r\n                  prob: 100 * eqptData.prob_ac,\r\n                };\r\n\r\n                newCardData[mid].actual = actual;\r\n\r\n                //console.log(eqptData);\r\n                newGraphData[eid] = {\r\n                  ...newGraphData[eid],\r\n                  name: eqpt.name,\r\n                  [mission]: 100 * eqptData.rel,\r\n                };\r\n                eqptData.child.forEach((child, cid) => {\r\n                  newSubSystem[cid] = {\r\n                    ...newSubSystem[cid],\r\n                    EquipmentName: `${eqpt.name} ${child.name}`,\r\n                    [mission]: 100 * child.rel,\r\n                    target:targetRel\r\n                  };\r\n                });\r\n              });\r\n            });\r\n          });\r\n          newGraphData = [targetRel, ...newGraphData];\r\n          setGraphData(newGraphData);\r\n          setSubSystemData(newSubSystem);\r\n          setCardData(newCardData);\r\n          setLoading(false);\r\n          console.log(subSystemData);\r\n        }\r\n      });\r\n  };\r\n\r\n  const updateFinalRowData = (allRows) => {\r\n    \r\n      let finalTableData = allRows;\r\n      if (finalTableData.length > 0) {\r\n        console.log(allRows);\r\n      }\r\n    }\r\n  \r\n\r\n  const RDcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"EquipmentName\"\r\n      headerName=\"Equipment Name\"\r\n      headerTooltip=\"Equipment Name\"\r\n      width={500}\r\n    />,\r\n    selectedMissionName&&selectedMissionName.map(mission=>{\r\n      return(\r\n        \r\n          <AgGridColumn\r\n          field={mission}\r\n          headerName={mission}\r\n          headerTooltip={mission}\r\n          width={500}\r\n          editable={true}\r\n          cellStyle= {params => {\r\n            //console.log(params);\r\n            if (params.value > params.data.target[mission]) {\r\n                //mark cells with rel more than tar as green\r\n                return {backgroundColor: '#7FFFD4'};\r\n            }\r\n            else if(params.value > params.data.target[mission]-20){\r\n                //mark cells with rel within 20% of tar as yellow\r\n                return {backgroundColor: '#FFFAA0'};\r\n            }\r\n            else{\r\n                //mark cells with rel less than that as red\r\n                return {backgroundColor: '#F88379'};\r\n            }\r\n        }}\r\n        />\r\n    )\r\n    })\r\n    \r\n  ];\r\n\r\n  return (\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        <div className={styles.mprofile}>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Ship Name\r\n            </InputLabel>\r\n            <SelectWithLimit\r\n              limit={3}\r\n              options={customSelectData[\"shipName\"]}\r\n              getSelectedValues={getSelectedValues}\r\n              selectType={\"shipName\"}\r\n            />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Equipment Name\r\n            </InputLabel>\r\n            <SelectWithLimit\r\n              limit={3}\r\n              options={eqDataOption}\r\n              getSelectedValues={getSelectedValues}\r\n              selectType={\"equipmentName\"}\r\n            />\r\n          </div>\r\n          {/* <CustomSelect\r\n            label=\"Mission Selection\"\r\n            fields={['Mission A','Mission B','Mission C']}\r\n            /> */}\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Select Mission\r\n            </InputLabel>\r\n            <SelectWithLimit\r\n              limit={3}\r\n              getSelectedValues={getSelectedValues}\r\n              selectType={\"missionName\"}\r\n              options={missionData}\r\n            />\r\n          </div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              marginTop: \"2rem\",\r\n            }}\r\n            onClick={onSubmitHandler}\r\n          >\r\n            Submit\r\n          </Button>\r\n          <CreateProfile saveTempMission={saveTempMission} />\r\n        </div>\r\n        {loading && (\r\n          <div className={styles.midSection}>\r\n            <Loader\r\n              type=\"Puff\"\r\n              color=\"#86a0ff\"\r\n              height={300}\r\n              width={300}\r\n              style={{ marginTop: 100 }}\r\n            />\r\n          </div>\r\n        )}\r\n        {graphData.length ? (\r\n          <>\r\n            <div className={styles.midSection}>\r\n              <div className={styles.rchart}>\r\n                <div className={styles.content}>\r\n                  <div className={styles.relChart}>\r\n                    {graphData && <ReliabilityChart data={graphData} />}\r\n                  </div>\r\n                  <div className={styles.compareMission}>\r\n                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                      <AddCircleOutlineIcon /> Compare with other missions\r\n                    </div>\r\n                    {cardData ? (\r\n                      <div className={styles.missionbox}>\r\n                        {/* <div className={styles.missionName}>Mission B</div> */}\r\n                        <MissionSlider\r\n                          missions={cardData}\r\n                          currentMission={currentMission}\r\n                          setMission={setMission}\r\n                        />\r\n                        <MissionData mission={cardData[currentMission]} />\r\n                        <div className={styles.showSubsystem}>\r\n                          Show Subsytem Level{\" \"}\r\n                          <Switch\r\n                            checked={showSubsystem}\r\n                            disabled={!subSystemData.length}\r\n                            onChange={() => {\r\n                              setSubSystem(!showSubsystem);\r\n                            }}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    ) : (\r\n                      <div className={styles.missionbox}>\r\n                        Select Missions to compare\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className={styles.calendar}>\r\n                {/* <div className={styles.header}>\r\n              <div style={{display:'flex',alignItems:'center'}}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-tabler icon-tabler-calendar-event\" width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\" stroke=\"#0d1a45\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n              <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n              <rect x=\"4\" y=\"5\" width=\"16\" height=\"16\" rx=\"2\" />\r\n              <line x1=\"16\" y1=\"3\" x2=\"16\" y2=\"7\" />\r\n              <line x1=\"8\" y1=\"3\" x2=\"8\" y2=\"7\" />\r\n              <line x1=\"4\" y1=\"11\" x2=\"20\" y2=\"11\" />\r\n              <rect x=\"8\" y=\"15\" width=\"2\" height=\"2\" />\r\n            </svg>Calendar</div> <div><LensIcon style={{color:'#8af6ad',opacity:'0.5'}}/>Working <LensIcon style={{color:'#ff8788',opacity:'0.5'}}/>Down <LensIcon style={{color:'#f3f682',opacity:'0.5'}}/>Maintenance</div></div> */}\r\n                <div className={styles.content}>\r\n                  <div className={styles.calendar}>\r\n                    <EventCalendar events={events} />\r\n                  </div>\r\n                  <ReactCardFlip isFlipped={isCardFlipped}>\r\n                    <div className={styles.datePicker}>\r\n                      <div className={styles.dpHeader}>Availability</div>\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"L\"\r\n                        margin=\"normal\"\r\n                        id=\"start-date\"\r\n                        label=\"Start Date\"\r\n                        value={startDate}\r\n                        onChange={handleStartDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"start date\",\r\n                        }}\r\n                      />\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        variant=\"inline\"\r\n                        format=\"L\"\r\n                        margin=\"normal\"\r\n                        id=\"end-date\"\r\n                        label=\"End Date\"\r\n                        value={endDate}\r\n                        onChange={handleEndDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"end date\",\r\n                        }}\r\n                      />\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        style={{ width: 200 }}\r\n                        onClick={() => {\r\n                          handleEventCheck();\r\n                        }}\r\n                      >\r\n                        Check\r\n                      </Button>\r\n                    </div>\r\n                    <div className={styles.datePicker}>\r\n                      <div className={styles.dpHeader}>Availability</div>\r\n                      {eventInfo && (\r\n                        <>\r\n                          <div>The Equipment was: </div>\r\n                          <div>\r\n                            Running for{\" \"}\r\n                            <strong>{eventInfo.working} days</strong>(\r\n                            {(\r\n                              (eventInfo.working / eventInfo.total) *\r\n                              100\r\n                            ).toFixed(2)}\r\n                            %)\r\n                          </div>\r\n                          <div>\r\n                            Under Maintenance for{\" \"}\r\n                            <strong>{eventInfo.maintenance} days</strong>(\r\n                            {(\r\n                              (eventInfo.maintenance / eventInfo.total) *\r\n                              100\r\n                            ).toFixed(2)}\r\n                            %)\r\n                          </div>\r\n                          <div>\r\n                            Down for <strong>{eventInfo.down} days</strong>(\r\n                            {((eventInfo.down / eventInfo.total) * 100).toFixed(\r\n                              2\r\n                            )}\r\n                            %)\r\n                          </div>\r\n                        </>\r\n                      )}\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        style={{ width: 200 }}\r\n                        onClick={() => {\r\n                          setCardFlipped(!isCardFlipped);\r\n                        }}\r\n                      >\r\n                        Back\r\n                      </Button>\r\n                    </div>\r\n                  </ReactCardFlip>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className={styles.subSystemLevel}>\r\n              {showSubsystem && (\r\n                <Table\r\n                columnDefs={RDcolumnDefs}\r\n                rowData={subSystemData}\r\n                tableUpdate={updateFinalRowData}\r\n              />\r\n                    \r\n              )}\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\nexport default New;\r\n\r\n\r\n  \r\n  \r\n\r\n","E:\\NetraB\\netra\\src\\pages\\Settings\\userApproval.js",["642","643"],"import React, { useState } from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport Table from \"../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport classes from \"./userApproval.module.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nfunction UserApproval() {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [rowState, setRows] = useState([\r\n    {\r\n      Name: \"Bhupendra Singh\",\r\n      Email: \"xyz@gmail.com\",\r\n      PermissionLevel: \"L1\",\r\n      Status: \"Pending\",\r\n    },\r\n  ]);\r\n  let finalTableData = [];\r\n  const setFinalTableData = (d) => {\r\n    finalTableData = d;\r\n    if (finalTableData.length > 0) {\r\n      console.log(\"Hi\");\r\n    }\r\n  };\r\n  const UAcolumns = [\r\n    <AgGridColumn\r\n      field=\"Name\"\r\n      headerName=\"Name\"\r\n      width={200}\r\n      editable={true}\r\n      checkboxSelection={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Email\"\r\n      headerName=\"Email Address\"\r\n      width={300}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"PermissionLevel\"\r\n      headerName=\"Permission Level\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"L1\", \"L2\", \"L3\"] }}\r\n      type=\"200\"\r\n      width={200}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Status\"\r\n      headerName=\"Status\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"Approved\", \"Pending\"] }}\r\n      type=\"200\"\r\n      width={200}\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    console.log(selectedRows);\r\n  };\r\n  return (\r\n    <div\r\n      className={classes.background}\r\n      style={{\r\n        backgroundImage: \"url(/wave.svg)\",\r\n      }}\r\n    >\r\n      <div className={classes.flex}>\r\n        <Navigation />\r\n        <div className={classes.table}>\r\n          <div className={classes.button}>\r\n            <Button variant=\"contained\" color=\"primary\">\r\n              User Authentication | Account Request\r\n            </Button>\r\n          </div>\r\n          <Table\r\n            columnDefs={UAcolumns}\r\n            rowData={rowState}\r\n            tableUpdate={setFinalTableData}\r\n            setGrid={setGridApi}\r\n            gridApi={gridApi}\r\n          ></Table>\r\n           <div className={classes.footer}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n        </div>\r\n        <div className={classes.img}>\r\n          <img src=\"/netra-logo-removebg.png\" width={60} height={60} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default UserApproval;\r\n","E:\\NetraB\\netra\\src\\pages\\Settings\\configureHistory.js",["644","645"],"import React, { useState } from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport Table from \"../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport classes from \"./configureHistory.module.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport { components } from \"../../ui/userSelection/userSelectionData\";\r\nfunction ConfigureHistory() {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const detailRowAutoHeight = true;\r\n  let finalTableData = [];\r\n  const setFinalTableData = (d) => {\r\n    finalTableData = d;\r\n    if (finalTableData.length > 0) {\r\n      console.log(\"Hi\");\r\n    }\r\n  };\r\n  const EPcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"SubSystemName\"\r\n      headerName=\"Sub System Name\"\r\n      width={50}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"ModuleName\"\r\n      headerName=\"Module Name\"\r\n      cellRenderer=\"slider\"\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Action\"\r\n      headerName=\"Action\"\r\n      width={50}\r\n      cellRenderer=\"redirectButton\"\r\n    />,\r\n  ];\r\n  const rowData = [\r\n    {\r\n      SubSystemName: \"Fresh Water Cooling\",\r\n    },\r\n  ];\r\n  return (\r\n    <div\r\n      className={classes.background}\r\n      style={{\r\n        backgroundImage: \"url(/wave.svg)\",\r\n      }}\r\n    >\r\n      <div className={classes.flex}>\r\n        <Navigation />\r\n        <div className={classes.table}>\r\n          <div className={classes.button}>\r\n            <Button variant=\"contained\" color=\"primary\">\r\n              Configuration History\r\n            </Button>\r\n          </div>\r\n          <div className={classes.dropdown}>\r\n            <div>\r\n              <CustomSelect\r\n                style={{ width: \"300px\" }}\r\n                id=\"platformname\"\r\n                label=\"Platform Name\"\r\n                fields={components}\r\n              />\r\n            </div>\r\n            <div className={classes.spacing}>\r\n              <CustomSelect\r\n                style={{ width: \"300px\" }}\r\n                id=\"systemname\"\r\n                label=\"System Name\"\r\n                fields={components}\r\n              />\r\n            </div>\r\n            <div className={classes.submit}>\r\n              <Button variant=\"contained\" color=\"primary\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <Table\r\n            columnDefs={EPcolumnDefs}\r\n            rowData={rowData}\r\n            tableUpdate={setFinalTableData}\r\n            setGrid={setGridApi}\r\n            gridApi={gridApi}\r\n            rowHeight={80}\r\n          ></Table>\r\n        </div>\r\n        <div className={classes.img}>\r\n          <img src=\"/netra-logo-removebg.png\" width={60} height={60} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default ConfigureHistory;\r\n","E:\\NetraB\\netra\\src\\pages\\Mission Profile\\MissionProfile.js",["646"],"import React, { useEffect, useState } from \"react\";\r\nimport NewModule from \"../../components/module/NewModule\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport styles from \"./MissionProfile.module.css\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport Table from \"../../ui/Table/DataManagerTable\";\r\nimport { Button, makeStyles } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\n\r\nconst SystemStyles = makeStyles({\r\n  formControl: {\r\n    margin: \"2rem\",\r\n    minWidth: 200,\r\n  },\r\n  Submit: {\r\n    margin: \"2rem\",\r\n  },\r\n  buttons: {\r\n    minWidth: 150,\r\n    marginLeft: 10,\r\n    marginTop: 15,\r\n    float: \"right\",\r\n  },\r\n});\r\nconst MissionProfile = (props) => {\r\n  const SystemClasses = SystemStyles();\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Close\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const [missionData, setMissionData] = useState([]);\r\n  // let finalTableData = [];\r\n  const setFinalTableData = (d) => {\r\n    setMissionData(d);\r\n  };\r\n  useEffect(() => {\r\n    fetch(\"/mission_data\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const mData = data;\r\n        // const rowD = data.map((x) => () => {\r\n        //   return {\r\n        //     id: x[\"id\"],\r\n        //     missionName: x[\"missionName\"],\r\n        //     Harbour: x[\"Harbour\"],\r\n        //     elh: x[\"elh\"],\r\n        //     cruise: x[\"cruise\"],\r\n        //     ds: x[\"ds\"],\r\n        //     as: x[\"ask\"],\r\n        //   };\r\n        // });\r\n        setRows(mData);\r\n        setMissionData(mData);\r\n      });\r\n  }, []);\r\n  const [rowState, setRows] = useState([]);\r\n  const MProfileColumns = [\r\n    <AgGridColumn\r\n      field=\"missionName\"\r\n      headerName=\"Mission Name\"\r\n      headerTooltip=\"Mission Name\"\r\n      width={250}\r\n      checkboxSelection={true}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Harbour\"\r\n      headerName=\"Harbour\"\r\n      headerTooltip=\"Harbour\"\r\n      width={250}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"elh\"\r\n      headerName=\"Entry Leaving Harbour\"\r\n      headerTooltip=\"Entry Leaving Harbour\"\r\n      width={250}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"cruise\"\r\n      headerName=\"Cruise\"\r\n      headerTooltip=\"Cruise\"\r\n      width={250}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"ds\"\r\n      headerName=\"Defense Station\"\r\n      headerTooltip=\"Defense Station\"\r\n      width={250}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"as\"\r\n      headerName=\"Action Station\"\r\n      headerTooltip=\"Action Station\"\r\n      width={250}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"tar_rel\"\r\n      headerName=\"Target Reliability\"\r\n      headerTooltip=\"Target Reliability\"\r\n      width={250}\r\n      editable={true}\r\n    />,\r\n  ];\r\n\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: uuidv4(),\r\n        missionName: \"Please Enter Mission Name\",\r\n        Harbour: 0,\r\n        elh: 0,\r\n        cruise: 0,\r\n        ds: 0,\r\n        as: 0,\r\n        tar_rel: 0,\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    let allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    setMissionData(allRowData)\r\n    // console.log(selectedRows);\r\n  };\r\n\r\n  //Save Button Handler\r\n  const onSaveButtonClickHandler = () => {\r\n    debugger;\r\n    if (missionData.length > 0) {\r\n      fetch(\"/mission_data\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          mission_data: missionData,\r\n          dtype: \"insertMission\",\r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n          setSnackBarMessage({\r\n            severity: \"success\",\r\n            message: data.message,\r\n            showSnackBar: true,\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          setSnackBarMessage({\r\n            severity: \"error\",\r\n            message: \"Some Error Occured. \" + error,\r\n            showSnackBar: true,\r\n          });\r\n        });\r\n    } else {\r\n      setSnackBarMessage((prevState) => {\r\n        const data = {\r\n          ...prevState,\r\n          message: \"This is error\",\r\n          showSnackBar: true,\r\n        };\r\n        return data;\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        <div className={styles.module}>\r\n          <NewModule />\r\n        </div>\r\n        <div className={styles.user}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={SystemClasses.buttons}\r\n            onClick={onSaveButtonClickHandler}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n        {/* <div className={styles.user}><UserSelection /></div> */}\r\n        <div className={styles.table}>\r\n          <Table\r\n            rowData={rowState}\r\n            columnDefs={MProfileColumns}\r\n            tableUpdate={setFinalTableData}\r\n            setGrid={setGridApi}\r\n            gridApi={gridApi}\r\n          />\r\n          <div className={styles.tableFooter}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => AddRow()}\r\n            >\r\n              Add Row\r\n            </Button>\r\n            <Button\r\n              style={{ marginLeft: 10 }}\r\n              variant=\"contained\"\r\n              startIcon={<DeleteIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => deleteRows()}\r\n            >\r\n              Delete Rows\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MissionProfile;\r\n","E:\\NetraB\\netra\\src\\pages\\dragNdrop\\DragNdrop.js",[],"E:\\NetraB\\netra\\src\\pages\\Settings\\configureHistory2.js",["647","648","649","650","651","652"],"import React, { useEffect, useState } from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport classes from \"./configureHistory2.module.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport { components } from \"../../ui/userSelection/userSelectionData\";\r\nimport { Grid, makeStyles, Slider } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  slider: {\r\n    padding: \"22px 0px\",\r\n  },\r\n  sliderTrack: {\r\n    height: 5,\r\n  },\r\n});\r\nconst ConfigureHistory2 = () => {\r\n  const [platformName, setPlatformName] = useState([\r\n    \"Talwar 1\",\r\n    \"Talwar 2\",\r\n    \"Kamorta 1\",\r\n    \"Kamorta 2\",\r\n    \"Vikrant\",\r\n  ]);\r\n  const [eqData, setEqData] = useState([\"DA1\", \"DA2\", \"DA3\", \"DA4\", \"DA5\"]);\r\n  // useEffect(() => {\r\n  //   fetch(\"/fetch_user_selection\", {\r\n  //     method: \"GET\",\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //       Accept: \"application/json\",\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((data) => {\r\n  //       const userData = data[\"data\"];\r\n  //       const shipName = userData.map((x) => x.shipName);\r\n  //       setEqData(data[\"eqData\"]);\r\n  //       setPlatformName(shipName);\r\n  //     });\r\n  // }, [eqData, platformName, setEqData, setPlatformName]);\r\n  const Sliderclasses = useStyles();\r\n  const marks = [\r\n    {\r\n      value: 15,\r\n      label: \"Configure New System\",\r\n    },\r\n    {\r\n      value: 40,\r\n      label: \"Phase Definition\",\r\n    },\r\n    {\r\n      value: 65,\r\n      label: \"Extrinsic Factor Definition \",\r\n    },\r\n    {\r\n      value: 90,\r\n      label: \"Data Manager\",\r\n    },\r\n  ];\r\n  const subsystem = [\r\n    { name: \"Fresh Water Cooling\" },\r\n    { name: \"Sea Water Cooling\" },\r\n  ];\r\n  const onChange = (e) => {\r\n    console.log(e);\r\n  };\r\n  return (\r\n    <div\r\n      className={classes.background}\r\n      style={{\r\n        backgroundImage: \"url(/wave.svg)\",\r\n      }}\r\n    >\r\n      <div className={classes.flex}>\r\n        <Navigation />\r\n        <div className={classes.table}>\r\n          <div className={classes.button}>\r\n            <Button variant=\"contained\" color=\"primary\">\r\n              Configuration History\r\n            </Button>\r\n          </div>\r\n          <div className={classes.dropdown}>\r\n            <div>\r\n              <CustomSelect\r\n                style={{ width: \"300px\" }}\r\n                id=\"platformname\"\r\n                label=\"Platform Name\"\r\n                fields={platformName}\r\n                // onChange={onChange}\r\n              />\r\n            </div>\r\n            <div className={classes.spacing}>\r\n              <CustomSelect\r\n                style={{ width: \"300px\" }}\r\n                id=\"systemname\"\r\n                label=\"System Name\"\r\n                fields={eqData}\r\n              />\r\n            </div>\r\n            <div className={classes.submit}>\r\n              <Button variant=\"contained\" color=\"primary\">\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <Grid>\r\n            <Grid container spacing={3} className={classes.grid}>\r\n              <Grid item xs={6} sm={3}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  Sub System Name\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  Module Name\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={6} sm={3}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  Action\r\n                </Button>\r\n              </Grid>\r\n              {subsystem.map((item, index) => (\r\n                <div className={classes.row}>\r\n                  <Grid item xs={6} sm={3}>\r\n                    <h3>{item.name}</h3>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <Slider\r\n                      classes={{\r\n                        container: Sliderclasses.slider,\r\n                        track: Sliderclasses.sliderTrack,\r\n                      }}\r\n                      defaultValue={40}\r\n                      marks={marks}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={6} sm={3}>\r\n                    <Button variant=\"contained\" color=\"primary\">\r\n                      Redirect\r\n                    </Button>\r\n                  </Grid>\r\n                </div>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <div className={classes.img}>\r\n          <img src=\"/netra-logo-removebg.png\" width={60} height={60} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default ConfigureHistory2;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\repairableOverhaul\\repairableOverhaul.js",[],"E:\\NetraB\\netra\\src\\pages\\ViewData\\ViewData.js",["653","654","655","656","657","658","659","660"],"import React,{ useState , useEffect } from 'react'\r\nimport styles from './ViewData.module.css'\r\nimport { Button,Menu,MenuItem } from '@material-ui/core'\r\nimport { Link } from 'react-router-dom';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\nimport { userActions } from '../../store/ApplicationVariable';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst ViewData=(props)=>{\r\n    // useEffect(()=>{\r\n    //     console.log(props.settings)\r\n    // })\r\n    const Logout=()=>{\r\n            props.setLoggedIn(false)\r\n            props.history.push('/sign_in')\r\n    }\r\n    const dispatch = useDispatch();\r\n    const resetUserSelection=()=>{\r\n        dispatch(\r\n        userActions.onReset()\r\n        )\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <div className={styles.viewDataNav}>\r\n                <Link onClick={()=>Logout()}><i class=\"fas fa-sign-out-alt\"></i>Logout</Link>\r\n            </div>\r\n            {props.settings&&<div className={styles.viewDataLinks}>\r\n                    {props.settings.DataManager&&<Link to=\"/data_manager\" onClick={()=>resetUserSelection()}><div className={styles.circleIcon}>\r\n                    <i className=\"fas fa-database\"></i>\r\n                    </div>Data Manager</Link>}\r\n                    {props.settings.HEP&&<Link to=\"/HEP\" onClick={()=>resetUserSelection()}><div className={styles.circleIcon}>\r\n                    <i class=\"fas fa-bug\"></i>\r\n                    </div>HEP</Link>}\r\n                    <Link to=\"/data_manager/historical_data\" onClick={()=>resetUserSelection()}><div className={styles.circleIcon}>\r\n                    <i className=\"fas fa-wrench\"></i>\r\n                    </div>Equipment related data</Link>\r\n                    <Link to=\"/mission_profile\" onClick={()=>resetUserSelection()}><div className={styles.circleIcon}>\r\n                    <i className=\"far fa-chart-bar\"></i>\r\n                    </div>Mission profile</Link>\r\n                    <Link to=\"/user_selection_config\" onClick={()=>resetUserSelection()}><div className={styles.circleIcon}>\r\n                    <i className=\"far fa-chart-bar\"></i>\r\n                    </div>User Selection Config</Link>\r\n\r\n                    <Link to=\"/add_system_doc\" onClick={()=>resetUserSelection()}><div className={styles.circleIcon}>\r\n                    <i className=\"far fa-chart-bar\"></i>\r\n                    </div>Add System Documents</Link>\r\n\r\n                    <Link to=\"/maintenance_allocation/add_data\" onClick={()=>resetUserSelection()}><div className={styles.circleIcon}>\r\n                    <i className=\"far fa-chart-bar\"></i>\r\n                    </div>Add Sensor Data</Link>\r\n\r\n                    {/* <Link to=\"/health_prediction_input\" onClick={()=>resetUserSelection()}><div className={styles.circleIcon}>\r\n                    <i className=\"far fa-chart-bar\"></i>\r\n                    </div>Bayesian Health Inputs</Link> */}\r\n                </div>}\r\n            <div className={styles.netra}>\r\n                <img src='/netra-logo-removebg.png' width={200} height={200}/>\r\n                <div>NETRA</div>\r\n            </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ViewData;","E:\\NetraB\\netra\\src\\pages\\Module Selection\\ModuleSelection.js",["661","662","663"],"import React,{ useEffect } from 'react'\r\nimport styles from './ModuleSelection.module.css'\r\nimport { \r\n    Paper,\r\n    makeStyles,\r\n    FormControlLabel,\r\n    Switch,\r\n    FormGroup, \r\n    Button} \r\n    from '@material-ui/core'\r\n\r\nconst LabelStyles = makeStyles({\r\n    root: {\r\n        display:'flex',\r\n        justifyContent:'space-between',\r\n        margin:'15px 0px 5px 0px',\r\n        paddingRight: 10,\r\n        paddingLeft: 10,\r\n        minWidth:300,\r\n        background: \"#ebebeb\",\r\n        borderRadius: \"5px\",\r\n        height: 40,\r\n        boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n        '&:hover':{\r\n            background: \"#d1d1d1\",\r\n        }\r\n    },\r\n    label: {\r\n        fontSize:20,\r\n        fontWeight:'bold',\r\n    }\r\n  });\r\n\r\nconst ModuleSelection=(props)=>{\r\n    const labelClasses=LabelStyles();\r\n\r\n    const [sysConfig, setSysConfig] = React.useState(true);\r\n    const [phaseManager, setPhaseManager] = React.useState(true);\r\n    const [hep, setHep] = React.useState(true);\r\n    const [dataManager, setDataManager] = React.useState(true);\r\n    const [dashboard, setDashboard] = React.useState(true);\r\n\r\n    const toggleSysConfig = () => {\r\n        setSysConfig((prev) => !prev);\r\n    };\r\n    const togglePhaseManager = () => {\r\n        setPhaseManager((prev) => !prev);\r\n    };\r\n    const toggleHep = () => {\r\n        setHep((prev) => !prev);\r\n    };\r\n    const toggleDataManager = () => {\r\n        setDataManager((prev) => !prev);\r\n    };\r\n    const toggleDashboard = () => {\r\n        setDashboard((prev) => !prev);\r\n    };\r\n\r\n    const save=()=>{\r\n        let settings={\r\n            'SystemConfiguration':sysConfig,\r\n            'PhaseManager':phaseManager,\r\n            'HEP':hep,\r\n            'DataManager':dataManager,\r\n            'ReliabilityDashboard':dashboard,\r\n        }\r\n        localStorage.setItem('settings',JSON.stringify(settings))\r\n        props.setSettings(settings)\r\n        props.history.push('/')\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(localStorage.getItem(\"settings\")){\r\n        let settings=JSON.parse(localStorage.getItem('settings'))\r\n        setSysConfig(settings.SystemConfiguration)\r\n        setPhaseManager(settings.PhaseManager)\r\n        setHep(settings.HEP)\r\n        setDataManager(settings.DataManager)\r\n        setDashboard(settings.ReliabilityDashboard)\r\n        }\r\n    },[])\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n        <Paper className={styles.ModulePaper} elevation={5}>\r\n            <div>\r\n                <img src='/netra-logo.png' width={60} height={60}/>\r\n                <div style={{textAlign:'center'}}>NETRA</div>\r\n            </div>\r\n            <div style={{textAlign:'center'}}>\r\n                <h5 style={{margin:0}}>Settings</h5>\r\n                <h6 style={{margin:0}}>Please Select the required modules</h6>\r\n            </div>\r\n            <FormGroup>\r\n                <FormControlLabel\r\n                    classes={labelClasses}\r\n                    control={<Switch checked={sysConfig} disabled/>}\r\n                    label=\"System Configuration\"\r\n                    labelPlacement=\"start\"\r\n                />\r\n                <FormControlLabel\r\n                    classes={labelClasses}\r\n                    control={<Switch checked={phaseManager} onChange={togglePhaseManager}/>}\r\n                    label=\"Phase Manager\"\r\n                    labelPlacement=\"start\"\r\n                />\r\n                <FormControlLabel\r\n                    classes={labelClasses}\r\n                    control={<Switch checked={hep} onChange={toggleHep} />}\r\n                    label=\"HEP\"\r\n                    labelPlacement=\"start\"\r\n                />\r\n                <FormControlLabel\r\n                    classes={labelClasses}\r\n                    control={<Switch checked={dataManager} onChange={toggleDataManager} />}\r\n                    label=\"Data Manager\"\r\n                    labelPlacement=\"start\"\r\n                />\r\n                <FormControlLabel\r\n                    classes={labelClasses}\r\n                    control={<Switch checked={dashboard} disabled/>}\r\n                    label=\"Reliability Dashboard\"\r\n                    labelPlacement=\"start\"\r\n                />\r\n            </FormGroup>\r\n            <Button variant='contained' color='secondary' onClick={()=>save()}>Save</Button>\r\n        </Paper>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default ModuleSelection;","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\MaintenanceAllocation.js",["664","665","666","667","668","669"],"import { Button } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Switch, Route} from \"react-router-dom\";\r\nimport AddData from \"./AddData/AddData\";\r\nimport CreateMaintenance from \"./CreateMaintenance/CreateMaintenance\";\r\nimport Main from \"./Main\";\r\nimport ModifyandDisplayMaintenance from \"./ModifyandDisplay/ModifyandDisplayMaintenance\";\r\nimport ShareMaintenance from \"./ShareMaintenance/ShareMaintenance\";\r\nimport RCMMain from \"./RCMMain\";\r\nimport CreateRCM from \"./RCM/CreateRCM\";\r\nimport Critical_RCM from \"./RCM/critical_RCM\";\r\n\r\nconst MaintenanceAllocation = (props) => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  useEffect(() => {\r\n    if (!props.loggedIn) {\r\n      props.history.push(\"/sign_in\");\r\n    }\r\n  });\r\n  const Logout = () => {\r\n    props.setLoggedIn(false);\r\n    props.history.push(\"/sign_in\");\r\n  };\r\n  return (<Switch>\r\n          <Route exact path='/maintenance_allocation' component={Main}/>\r\n          <Route path='/maintenance_allocation/create' component={CreateMaintenance}/>\r\n          <Route path='/maintenance_allocation/modify' component={ModifyandDisplayMaintenance}/>\r\n          <Route path='/maintenance_allocation/display' component={ModifyandDisplayMaintenance}/>\r\n          <Route path='/maintenance_allocation/share' component={ShareMaintenance}/>\r\n          <Route exact path='/maintenance_allocation/conduct_rcm_analysis' component={RCMMain}/>\r\n          <Route exact path='/maintenance_allocation/conduct_rcm_analysis/create' component={CreateRCM}/>\r\n          <Route exact path='/maintenance_allocation/conduct_rcm_analysis/critical_comp' component={Critical_RCM}/>\r\n          <Route path='/maintenance_allocation/add_data' component={AddData}/>\r\n          </Switch>\r\n  );\r\n};\r\n\r\nexport default MaintenanceAllocation;\r\n\r\n","E:\\NetraB\\netra\\src\\pages\\CDashboard\\CDashboard.js",["670","671"],"import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./CDashboard.module.css\";\r\nimport { InputLabel, TextField, makeStyles, Button } from \"@material-ui/core\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ReferenceLine,\r\n} from \"recharts\";\r\n// import { arr,arr2 } from \"./data\";\r\nimport {\r\n  MuiPickersUtilsProvider\r\n} from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\n\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { userActions } from \"../../store/ApplicationVariable\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\n\r\nconst CDashboard = () => {\r\n  const dispatch = useDispatch();\r\n  const [userSelectionData, setUserSelectionData] = useState([]);\r\n  const [uniqueEqIds, setUniqueEqIds] = useState([]);\r\n  const [minMax, setMinMax] = useState([]);\r\n  const [selectedEqName, setEquipmentName] = useState([]);\r\n  const [paramOptions, setParamOptions] = useState([]);\r\n  const [selectedShipName, setShipName] = useState([]);\r\n  const [selectedParameterName, setParameterName] = useState([]);\r\n  const [eqDataOption, setEqDataOption] = useState([]);\r\n  const [paramData, setParamData] = useState([]);\r\n  const [currMinMax, setCurrMinMax] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(\"/cm_dashboard\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const params = data[\"parameters\"];\r\n        console.log(\"hello:\", params);\r\n        setMinMax([...params]);\r\n        const user_selection = data[\"user_selection\"][\"data\"];\r\n        const eqData = data[\"user_selection\"][\"eqData\"];\r\n        const eqIds = data[\"user_selection\"][\"uniq_eq_data\"];\r\n        setUniqueEqIds(eqIds);\r\n        const shipName = user_selection.map((x) => x.shipName);\r\n        setUserSelectionData(eqData);\r\n        dispatch(userActions.populateParams({ params: params }));\r\n        dispatch(\r\n          userActions.onChangeLoad({ filteredData: { shipName: shipName } })\r\n        );\r\n      });\r\n    }, []);\r\n  // ...\r\n  useEffect(() => {\r\n    const filteredArray = minMax.filter((item) => {\r\n      return selectedEqName.some(\r\n        (selected) => item.equipment_id === selected.id\r\n      );\r\n    });\r\n\r\n    const filteredNames = filteredArray.map((item) => item.name);\r\n    setParamOptions(filteredNames); // Move this line here\r\n\r\n    const CMinMax = (ele) => {\r\n      const FminMax = filteredArray.filter((i) => i.name === ele);\r\n      setCurrMinMax((prevMinMax) => [...prevMinMax, ...FminMax]);\r\n    };\r\n\r\n    selectedParameterName.forEach((e) => CMinMax(e));\r\n  }, [selectedEqName]);\r\n\r\n\r\n  const customSelectData = useSelector(\r\n    (state) => state.userSelection.userSelection\r\n  );\r\n\r\n  const dropDownStyle = makeStyles({\r\n    root: {\r\n      paddingLeft: 10,\r\n      background: \"#fff\",\r\n      border: \"1px solid #0263a1\",\r\n      borderRadius: \"5px\",\r\n      width: \"320px\",\r\n      minHeight: \"40px\",\r\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n    },\r\n    inputRoot: {\r\n      width: \"100%\",\r\n    },\r\n  });\r\n  const classes = dropDownStyle();\r\n  let arr = [];\r\n  let arr2 = [];\r\n  for (let i = 0; i < 50; i++) {\r\n    // const maxDate = Date.now();\r\n    // const timestamp = Math.floor(Math.random() * maxDate);\r\n    arr = [\r\n      ...arr,\r\n      {\r\n        name: new Date(\r\n          new Date(2021, 1, 1).getTime() +\r\n            Math.random() *\r\n              (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())\r\n        )\r\n          .toISOString()\r\n          .slice(0, 10),\r\n        uv: Math.floor(Math.random() * (80 - 30 + 1)) + 30,\r\n      },\r\n    ];\r\n\r\n    arr2 = [\r\n      ...arr2,\r\n      {\r\n        name: new Date(\r\n          new Date(2021, 1, 1).getTime() +\r\n            Math.random() *\r\n              (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())\r\n        )\r\n          .toISOString()\r\n          .slice(0, 10),\r\n        uv: Math.floor(Math.random() * (75 - 30 + 1)) + 30,\r\n      },\r\n    ];\r\n  }\r\n  const [showGraph, setShowGraph] = useState(false);\r\n\r\n  const onSubmitHandler = () => {\r\n    fetch(\"/fetch_cmdata\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        EquipmentIds: selectedEqName.map((x) => x.id),\r\n        ParameterNames: selectedParameterName.map((x) => x),\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const sortedParamData = data.map((param) => {\r\n          return {\r\n            ...param,\r\n            data: param.data.sort((a, b) => new Date(a.date) - new Date(b.date)),\r\n          };\r\n        });\r\n        setSnackBarMessage({\r\n          severity: \"success\",\r\n          message: data.message,\r\n          showSnackBar: true,\r\n        });\r\n        setParamData(sortedParamData);\r\n        setShowGraph(true);\r\n      })\r\n      .catch((error) => {\r\n        setSnackBarMessage({\r\n          severity: \"error\",\r\n          message: \"Some Error Occured. \" + error,\r\n          showSnackBar: true,\r\n        });\r\n      });\r\n    };\r\n\r\n\r\n    function findMaxValue(dataArray) {\r\n      if (!Array.isArray(dataArray)) {\r\n        return null; // Return null if dataArray is not an array\r\n      }\r\n    \r\n      let max = Number.MIN_SAFE_INTEGER; // Initialize max to the smallest possible number\r\n    \r\n      for (const obj of dataArray) {\r\n        const value = parseInt(obj.value, 10); // Convert the value to a number\r\n        if (!isNaN(value)) { // Check if the value is a valid number\r\n          max = Math.max(max, value);\r\n        }\r\n      }\r\n    \r\n      return max;\r\n    }\r\n    \r\n  // Snackbar\r\n  console.log(paramData)\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n\r\n  const changeShip = (e) => {\r\n    var filteredEqData = [];\r\n\r\n    var xx = userSelectionData\r\n      .filter((x) => x.shipName === e.target.value)\r\n      .map((x) => {\r\n        let id = uniqueEqIds.filter((y) => y.name === x.equipmentName);\r\n        return id[0];\r\n      });\r\n    filteredEqData = [...filteredEqData, ...xx];\r\n\r\n    setEqDataOption(filteredEqData);\r\n    setShipName(e.target.value);\r\n  };\r\n  return (\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        <div className={styles.mprofile}>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Ship Name\r\n            </InputLabel>\r\n            <CustomSelect\r\n              fields={customSelectData[\"shipName\"]}\r\n              onChange={changeShip}\r\n              value={selectedShipName}\r\n            />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Equipment Name\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n              classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={eqDataOption}\r\n              getOptionLabel={(option) => option.name}\r\n              value={selectedEqName}\r\n              onChange={(e, value) => setEquipmentName(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{ ...params.InputProps, disableUnderline: true }}\r\n                  variant=\"standard\"\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Select Parameter\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n              classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={paramOptions}\r\n              // getOptionLabel={(option) => option.name}\r\n              value={selectedParameterName}\r\n              onChange={(e, value) => setParameterName(value)}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{ ...params.InputProps, disableUnderline: true }}\r\n                  variant=\"standard\"\r\n                />\r\n              )}\r\n            />\r\n          </div>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              marginTop: \"2rem\",\r\n            }}\r\n            onClick={onSubmitHandler}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n\r\n        {showGraph && (\r\n          <div className={styles.midSection}>\r\n            {paramData.map((param) => {\r\n              if (param.data.length === 0) {\r\n                return null;\r\n              }\r\n\r\n              const crossingThreshold =\r\n                (param.data[param.data.length - 1]?.value ?? 0) <\r\n                  param.minThreshold ||\r\n                (param.data[param.data.length - 1]?.value ?? 0) >\r\n                  param.maxThreshold;\r\n\r\n              const matchingMinMax = currMinMax?.find(\r\n                (item) => item.name === param.parameterName\r\n              )\r\n\r\n              const minThreshold = parseInt(matchingMinMax?.min_value);\r\n              const maxThreshold = parseInt(matchingMinMax?.max_value);\r\n\r\n              return (\r\n                <div className={styles.rchart}>\r\n                  <div className={styles.content}>\r\n                    <div>\r\n                      {crossingThreshold}\r\n                      {param.equipmentName} {param.componentName}\r\n                      {param.parameterName}\r\n                    </div>\r\n                    <LineChart width={550} height={300} data={param.data}>\r\n                      <XAxis\r\n                        dataKey=\"date\"\r\n                        tick={false}\r\n                        label={{\r\n                          value: \"Date\",\r\n                          position: \"insideBottom\",\r\n                          dy: 10,\r\n                        }}\r\n                        height={45}\r\n                      />\r\n                      <YAxis\r\n                        domain={[0, findMaxValue(paramData[0]?.data)]} // Set the Y-axis domain dynamically\r\n                        label={{\r\n                          value: `${param.parameterName} Data`,\r\n                          angle: -90,\r\n                          position: \"center\",\r\n                          paddingRight: \"20px\",\r\n                          dy: -10,\r\n                        }}\r\n                        width={80}\r\n                      />\r\n                      <CartesianGrid horizontal={false} vertical={false} />\r\n\r\n                      <Line\r\n                        layout=\"horizontal\"\r\n                        dataKey=\"value\"\r\n                        stroke={crossingThreshold ? \"red\" : \"green\"}\r\n                      />\r\n\r\n                      <ReferenceLine\r\n                        y={minThreshold}\r\n                        stroke=\"gray\"\r\n                        strokeDasharray=\"6 6\"\r\n                      />\r\n                      <ReferenceLine\r\n                        y={maxThreshold}\r\n                        stroke=\"gray\"\r\n                        strokeDasharray=\"6 6\"\r\n                      />\r\n\r\n                      <Tooltip />\r\n                    </LineChart>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\nexport default CDashboard;\r\n","E:\\NetraB\\netra\\src\\pages\\userSelectionConfig\\UserSelectionConfiguration.js",["672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691"],"import React, { useEffect, useState } from \"react\";\r\nimport NewModule from \"../../components/module/NewModule\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport styles from \"./UserSelectionConfiguration.module.css\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport Table from \"../../ui/Table/DataManagerTable\";\r\nimport { Button, makeStyles, Grid } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\n\r\n//From Add new equipment form\r\nimport { userActions } from \"../../store/ApplicationVariable\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\nimport classes from \"./EqptStructuring.module.css\";\r\nimport LabelToolTip from \"../../components/main/EqptStructuring/LabelToolTip/LabelToolTip\";\r\n// import Tree from \"./Tree\";\r\n// import TreeComponent from \"../../sortableTree/SortableTree\";\r\nimport CustomTextInput from \"../../ui/Form/CustomTextInput\";\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport AutoSelect from \"../../ui/Form/AutoSelect\";\r\nimport { useFormik } from \"formik\";\r\nimport { v4 as uuid } from \"uuid\"; \r\nconst useStyles = makeStyles({\r\n    root: {\r\n      margin: \"0 2.5em\",\r\n    },\r\n  });\r\n  \r\nconst SystemStyles = makeStyles({\r\n  formControl: {\r\n    margin: \"2rem\",\r\n    minWidth: 200,\r\n  },\r\n  Submit: {\r\n    margin: \"2rem\",\r\n  },\r\n  buttons: {\r\n    minWidth: 150,\r\n    marginLeft: 10,\r\n    marginTop: 15,\r\n    float: \"right\",\r\n  },\r\n});\r\nconst UserSelectionConfiguration = (props) => {\r\n  const SystemClasses = SystemStyles();\r\n  const dispatch = useDispatch();\r\n  const selectedInputs = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  const [disableButton, setDisableButton] = useState(false);\r\n  let fData = useSelector((state) => state.treeData.treeData);\r\n//   const [gridApi, setGridApi] = useState(null);\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Close\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const [parentFiledValue, setParentFieldValue] = useState({\r\n    title: \"\",\r\n    name: \"\",\r\n    children: [],\r\n    id: \"\",\r\n    eqType: \"\",\r\n    parentName: \"\",\r\n    parentId: \"\",\r\n    lmu: 1,\r\n  });\r\n\r\n  const classesButton = useStyles();\r\n  const parentOnChange = (e, value) => {\r\n    debugger\r\n    setParentFieldValue(value);\r\n  };\r\n  const clearForm = (e) => {\r\n    e.preventDefault();\r\n    setDisableButton(false);\r\n    dispatch(treeDataActions.setTreeData({ treeData: [] }));\r\n    formik.resetForm();\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n        command: \"\",\r\n      ship_name: \"\",\r\n      department: \"\",\r\n      shipClass: \"\",\r\n      shipC: \"\",\r\n    },\r\n    //validationSchema: validationSchema,\r\n    onSubmit: (values, {resetForm}) => {\r\n      // alert(JSON.stringify(values, null, 2));\r\n      debugger;\r\n    //   const { platform, platformType, system, systemType } = values;\r\n      console.log(values);\r\n      fetch(\"/addUserSelectionData\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({values}),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n            if (data.code == 1){\r\n                // resetForm()\r\n          setSnackBarMessage({\r\n            severity: \"success\",\r\n            message: data.message,\r\n            showSnackBar: true,\r\n          });\r\n        }else{\r\n            setSnackBarMessage({\r\n                severity: \"error\",\r\n                message: data.message,\r\n                showSnackBar: true,\r\n              });\r\n        }\r\n        })\r\n    //   \r\n    //   const platformId = uuid();\r\n    //   const systemId = uuid();\r\n    //   debugger;\r\n    //   const treeNodes = [\r\n    //     {\r\n    //       name: system,\r\n    //       id: systemId,\r\n    //       eqType: systemType,\r\n    //       parentName: selectedInputs[\"shipName\"],\r\n    //       parentId: null,\r\n    //       parent: null,\r\n    //       children: [],\r\n    //       lmu: 1,\r\n    //       command: selectedInputs[\"command\"],\r\n    //       department: selectedInputs[\"department\"],\r\n    //       shipCategory: selectedInputs[\"shipCategory\"],\r\n    //       shipClass: selectedInputs[\"shipClass\"],\r\n    //       shipName: selectedInputs[\"shipName\"],\r\n    //     },\r\n    //   ];\r\n    //   const updateEqStore = {\r\n    //     equipmentName: system,\r\n    //     equipmentCode: systemType,\r\n    //   };\r\n    //   const filteredData = {\r\n    //     equipmentName: [system],\r\n    //     equipmentCode: [systemType],\r\n    //   };\r\n    //   dispatch(treeDataActions.addElement({ data: treeNodes }));\r\n    //   dispatch(\r\n    //     userActions.onAddingEquipmentName({\r\n    //       selectedData: updateEqStore,\r\n    //       filteredData: filteredData,\r\n    //     })\r\n    //   );\r\n    //   setDisableButton(true);\r\n    },\r\n  });\r\n\r\n\r\n\r\n  //Save Button Handler\r\n \r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        {/* <div className={styles.module}>\r\n          <NewModule />\r\n        </div> */}\r\n        {/* <div className={styles.user}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={SystemClasses.buttons}\r\n            onClick={onSaveButtonClickHandler}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div> */}\r\n        {/* <div className={styles.user}><UserSelection /></div> */}\r\n        <div className={styles.table}>\r\n          {/* <Table\r\n            rowData={rowState}\r\n            columnDefs={MProfileColumns}\r\n            tableUpdate={setFinalTableData}\r\n            setGrid={setGridApi}\r\n            gridApi={gridApi}\r\n          /> */}\r\n         <div className={classes.form}>\r\n      <div className={classes.header}>Add Ship Details</div>\r\n        <form style={{ width: \"100%\" }} onSubmit={formik.handleSubmit}>\r\n          <div className={classes.formrow1}>\r\n            <div className={classes.field1}>\r\n              <LabelToolTip label=\"Command Name\" info=\"Info\" />\r\n              <CustomTextInput\r\n                className={classes.fullWidth}\r\n                id=\"command\"\r\n                name=\"command\"\r\n                value={formik.values.command}\r\n                onChange={formik.handleChange}\r\n                disabled={disableButton}\r\n              ></CustomTextInput>\r\n            </div>\r\n            <div className={classes.field1}>\r\n              <LabelToolTip label=\"Ship Category\" info=\"Info\" />\r\n              <CustomTextInput\r\n                className={classes.fullWidth}\r\n                id=\"shipC\"\r\n                name=\"shipC\"\r\n                value={formik.values.shipC}\r\n                onChange={formik.handleChange}\r\n                disabled={disableButton}\r\n              ></CustomTextInput>\r\n            </div>\r\n          </div>\r\n          <div className={classes.formrow1}>\r\n            <div className={classes.field1}>\r\n              <LabelToolTip label=\"Ship Class\" info=\"Info\" />\r\n              <CustomTextInput\r\n                className={classes.fullWidth}\r\n                id=\"shipClass\"\r\n                name=\"shipClass\"\r\n                value={formik.values.shipClass}\r\n                onChange={formik.handleChange}\r\n                disabled={disableButton}\r\n              ></CustomTextInput>\r\n            </div>\r\n            <div className={classes.field1}>\r\n              <LabelToolTip label=\"Department Name\" info=\"Info\" />\r\n              <CustomTextInput\r\n                className={classes.fullWidth}\r\n                id=\"department\"\r\n                name=\"department\"\r\n                value={formik.values.department}\r\n                onChange={formik.handleChange}\r\n                disabled={disableButton}\r\n              ></CustomTextInput>\r\n            </div>\r\n          </div>\r\n          <div className={classes.formrow1}>\r\n            <div className={classes.field1}>\r\n              <LabelToolTip label=\"Ship Name\" info=\"Info\" />\r\n              <CustomTextInput\r\n                className={classes.fullWidth}\r\n                id=\"ship_name\"\r\n                name=\"ship_name\"\r\n                value={formik.values.ship_name}\r\n                onChange={formik.handleChange}\r\n                disabled={disableButton}\r\n              ></CustomTextInput>\r\n            </div>\r\n            <div className={classes.field1}>\r\n            <Button\r\n                className={classesButton.root}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n       \r\n      </div>\r\n          {/* <div className={styles.tableFooter}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => AddRow()}\r\n            >\r\n              Add Row\r\n            </Button>\r\n            <Button\r\n              style={{ marginLeft: 10 }}\r\n              variant=\"contained\"\r\n              startIcon={<DeleteIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => deleteRows()}\r\n            >\r\n              Delete Rows\r\n            </Button>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserSelectionConfiguration;\r\n","E:\\NetraB\\netra\\src\\pages\\System Docs\\SysDocs.js",["692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712"],"import React, { useEffect, useState } from \"react\";\r\nimport NewModule from \"../../components/module/NewModule\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport styles from \"./SysDocs.module.css\";\r\nimport ustyles from '../systen_configuration/SystemConfiguration.module.css'\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport Table from \"../../ui/Table/DataManagerTable\";\r\nimport { Button, makeStyles, Grid } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\n\r\n//From Add new equipment form\r\nimport { userActions } from \"../../store/ApplicationVariable\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\nimport classes from \"./EqptStructuring.module.css\";\r\nimport LabelToolTip from \"../../components/main/EqptStructuring/LabelToolTip/LabelToolTip\";\r\n// import Tree from \"./Tree\";\r\n// import TreeComponent from \"../../sortableTree/SortableTree\";\r\nimport CustomTextInput from \"../../ui/Form/CustomTextInput\";\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport AutoSelect from \"../../ui/Form/AutoSelect\";\r\nimport { useFormik } from \"formik\";\r\nimport { v4 as uuid } from \"uuid\"; \r\nconst useStyles = makeStyles({\r\n    root: {\r\n      margin: \"0 2.5em\",\r\n    },\r\n  });\r\n  \r\nconst SystemStyles = makeStyles({\r\n  formControl: {\r\n    margin: \"2rem\",\r\n    minWidth: 200,\r\n  },\r\n  Submit: {\r\n    margin: \"2rem\",\r\n  },\r\n  buttons: {\r\n    minWidth: 150,\r\n    marginLeft: 10,\r\n    marginTop: 15,\r\n    float: \"right\",\r\n  },\r\n});\r\nconst SysDocs = (props) => {\r\n  const SystemClasses = SystemStyles();\r\n  const dispatch = useDispatch();\r\n  const selectedInputs = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  const [disableButton, setDisableButton] = useState(false);\r\n  let fData = useSelector((state) => state.treeData.treeData);\r\n  const [file, setFile] = useState();\r\n\r\n  const handleFileChange = (e) => {\r\n    // alert(\"fghfgh\")\r\n    if (e.target.files) {\r\n      setFile(e.target.files[0]);\r\n    }\r\n  };\r\n  const handleUploadClick = () => {\r\n    const data = new FormData() \r\n    data.append('file', file)\r\n    data.append(\"system\", selectedInputs[\"equipmentName\"])\r\n    data.append(\"name\", selectedInputs[\"shipName\"])\r\n    // if (!file) {\r\n    //   return;\r\n    // }\r\n\r\n    // // 👇 Uploading the file using the fetch API to the server\r\n    fetch('/upload', {\r\n      method: 'POST',\r\n      body: data,\r\n    }).then((response) => {\r\n      response.json().then((body) => {\r\n        console.log(\"fs\")\r\n      });\r\n    });\r\n  };\r\n//   const [gridApi, setGridApi] = useState(null);\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Close\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const [parentFiledValue, setParentFieldValue] = useState({\r\n    title: \"\",\r\n    name: \"\",\r\n    children: [],\r\n    id: \"\",\r\n    eqType: \"\",\r\n    parentName: \"\",\r\n    parentId: \"\",\r\n    lmu: 1,\r\n  });\r\n  const[questionsOptions,setquestionsOptions]=useState([]);\r\n  const[selectedFileName,setselectedFileName]=useState(null);\r\n  const questionOnChange = (e) => {\r\n    debugger;\r\n    let data = e.target.value;\r\n    let name = e.target.name;\r\n    setselectedFileName(data)\r\n  }\r\n  const classesButton = useStyles();\r\n  const parentOnChange = (e, value) => {\r\n    debugger\r\n    setParentFieldValue(value);\r\n  };\r\n  const clearForm = (e) => {\r\n    e.preventDefault();\r\n    setDisableButton(false);\r\n    dispatch(treeDataActions.setTreeData({ treeData: [] }));\r\n    formik.resetForm();\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n        command: \"\",\r\n      ship_name: \"\",\r\n      department: \"\",\r\n      shipClass: \"\",\r\n      shipC: \"\",\r\n    },\r\n    //validationSchema: validationSchema,\r\n    onSubmit: (values, {resetForm}) => {\r\n      // alert(JSON.stringify(values, null, 2));\r\n      debugger;\r\n    //   const { platform, platformType, system, systemType } = values;\r\n      console.log(values);\r\n      fetch(\"/addUserSelectionData\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({values}),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n            if (data.code == 1){\r\n                // resetForm()\r\n          setSnackBarMessage({\r\n            severity: \"success\",\r\n            message: data.message,\r\n            showSnackBar: true,\r\n          });\r\n        }else{\r\n            setSnackBarMessage({\r\n                severity: \"error\",\r\n                message: data.message,\r\n                showSnackBar: true,\r\n              });\r\n        }\r\n        })\r\n    //   \r\n    //   const platformId = uuid();\r\n    //   const systemId = uuid();\r\n    //   debugger;\r\n    //   const treeNodes = [\r\n    //     {\r\n    //       name: system,\r\n    //       id: systemId,\r\n    //       eqType: systemType,\r\n    //       parentName: selectedInputs[\"shipName\"],\r\n    //       parentId: null,\r\n    //       parent: null,\r\n    //       children: [],\r\n    //       lmu: 1,\r\n    //       command: selectedInputs[\"command\"],\r\n    //       department: selectedInputs[\"department\"],\r\n    //       shipCategory: selectedInputs[\"shipCategory\"],\r\n    //       shipClass: selectedInputs[\"shipClass\"],\r\n    //       shipName: selectedInputs[\"shipName\"],\r\n    //     },\r\n    //   ];\r\n    //   const updateEqStore = {\r\n    //     equipmentName: system,\r\n    //     equipmentCode: systemType,\r\n    //   };\r\n    //   const filteredData = {\r\n    //     equipmentName: [system],\r\n    //     equipmentCode: [systemType],\r\n    //   };\r\n    //   dispatch(treeDataActions.addElement({ data: treeNodes }));\r\n    //   dispatch(\r\n    //     userActions.onAddingEquipmentName({\r\n    //       selectedData: updateEqStore,\r\n    //       filteredData: filteredData,\r\n    //     })\r\n    //   );\r\n    //   setDisableButton(true);\r\n    },\r\n  });\r\n\r\n  const loadFiles = () => {\r\n    fetch(\"/fetch_system_files\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\"system\": selectedInputs[\"equipmentName\"], \"ship_name\": selectedInputs[\"shipName\"]}),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      }).then((d) => {\r\n        // debugger;\r\n        setquestionsOptions(d.files)\r\n      })\r\n  }\r\n\r\n  //handle download\r\n  const downloadFile = () => {\r\n    let system = selectedInputs[\"equipmentName\"].replace(/\\s/g,'')\r\n    let ship_name = selectedInputs[\"shipName\"].replace(/\\s/g,'')\r\n    let nnn = selectedFileName\r\n    // alert(questionsOptions)\r\n    const link = document.createElement('a');\r\n    link.download = `${selectedFileName}`;\r\n    //       // 👇️ set to relative path\r\n    link.href = `/${ship_name}_${system}/${selectedFileName}`;\r\n    link.click();\r\n  }\r\n  //Save Button Handler\r\n \r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        {/* <div className={styles.module}>\r\n          <NewModule />\r\n        </div> */}\r\n        {/* <div className={styles.user}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={SystemClasses.buttons}\r\n            onClick={onSaveButtonClickHandler}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div> */}\r\n        <div className={ustyles.flex} style={{ marginTop: \"5rem\" }}>\r\n          <div className={ustyles.user} ><UserSelection /></div>\r\n          <div className={styles.buttons}>\r\n          <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={SystemClasses.buttons}\r\n                onClick={loadFiles}\r\n              >\r\n                Load System\r\n              </Button>\r\n        </div>\r\n          </div>\r\n\r\n        <div className={styles.table}>\r\n          {/* <Table\r\n            rowData={rowState}\r\n            columnDefs={MProfileColumns}\r\n            tableUpdate={setFinalTableData}\r\n            setGrid={setGridApi}\r\n            gridApi={gridApi}\r\n          /> */}\r\n         <div className={classes.form}>\r\n      <div className={classes.header}>Previously Added Documents</div>\r\n        <form style={{ width: \"100%\" }} onSubmit={formik.handleSubmit}>\r\n          <div className={classes.formrow1}>\r\n            <div className={classes.field1}>\r\n              {/* <LabelToolTip label=\"Command Name\" info=\"Info\" /> */}\r\n              <CustomSelect\r\n                style={{ width: '100%'}}\r\n                id=\"q7\"\r\n                name= \"\"\r\n                label=\"\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n            </div>\r\n            \r\n          </div>\r\n          \r\n          <div className={classes.formrow1}>\r\n          <div className={classes.field1}>\r\n          <input type=\"file\" onChange={handleFileChange} />\r\n            </div>  \r\n          <div className={classes.field1}>\r\n          <Button\r\n                variant=\"contained\"\r\n                component=\"label\"\r\n                className={classesButton.root}\r\n                onClick={downloadFile}\r\n              >\r\n                Download File\r\n              </Button>\r\n          </div>\r\n            <div className={classes.field1}>\r\n              <Button\r\n                variant=\"contained\"\r\n                component=\"label\"\r\n                className={classesButton.root}\r\n                onClick={handleUploadClick}\r\n              >\r\n                Upload File\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n       \r\n      </div>\r\n          {/* <div className={styles.tableFooter}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => AddRow()}\r\n            >\r\n              Add Row\r\n            </Button>\r\n            <Button\r\n              style={{ marginLeft: 10 }}\r\n              variant=\"contained\"\r\n              startIcon={<DeleteIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => deleteRows()}\r\n            >\r\n              Delete Rows\r\n            </Button>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SysDocs;\r\n","E:\\NetraB\\netra\\src\\pages\\PM OPTIM\\pm.js",[],"E:\\NetraB\\netra\\src\\pages\\TaskDashboard\\TaskDashboard.js",["713","714","715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730","731","732","733","734","735","736","737","738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780"],"import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\n// import styles from \"./TaskDashboard.module.css\";\r\nimport {  InputLabel, TextField,makeStyles,Button, Switch, Input} from \"@material-ui/core\";\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip,Label,ReferenceLine } from 'recharts';\r\n// import { arr,arr2 } from \"./data\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport styles from \"./tDashboard.module.css\";\r\nimport moment from \"moment\";\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport ReliabilityChart from \"../Reliability Dashboard/ReliabilityChart\";\r\nimport MissionSlider from \"../Reliability Dashboard/MissionSlider\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport EventCalendar from \"../Reliability Dashboard/EventCalendar\";\r\nimport { data, subSystemLevelData, events, mainData } from \"../Reliability Dashboard/DashboardData\";\r\nimport ReactCardFlip from \"react-card-flip\";\r\nimport Table from \"../../ui/Table/DataManagerTable\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\n// import RenderParallelComponent from \"../systen_configuration/redundancy/RenderParallelComponent\";\r\nimport RenderMultipleComponent from \"./TaskRenderMultipleComponent\";\r\nimport { taskActions } from \"../../store/taskStore\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nconst MissionData = (props) => {\r\n  \r\n  return (\r\n    <div className={styles.missionData} style={props.style}>\r\n      <div className={styles.target}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"icon icon-tabler icon-tabler-target\"\r\n          width=\"14\"\r\n          height=\"14\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke-width=\"1.5\"\r\n          stroke=\"#374c93\"\r\n          fill=\"none\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        >\r\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"1\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"5\" />\r\n          <circle cx=\"12\" cy=\"12\" r=\"9\" />\r\n        </svg>{\" \"}\r\n        Target: {props.mission.target}%\r\n      </div>\r\n      <div className={styles.actual}>\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          class=\"icon icon-tabler icon-tabler-shield-check\"\r\n          width=\"14\"\r\n          height=\"14\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke-width=\"1.5\"\r\n          stroke=\"#f8f8f8\"\r\n          fill=\"none\"\r\n          stroke-linecap=\"round\"\r\n          stroke-linejoin=\"round\"\r\n        >\r\n          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n          <path d=\"M9 12l2 2l4 -4\" />\r\n          <path d=\"M12 3a12 12 0 0 0 8.5 3a12 12 0 0 1 -8.5 15a12 12 0 0 1 -8.5 -15a12 12 0 0 0 8.5 -3\" />\r\n        </svg>\r\n        Actual:\r\n        {props.mission.actual.map((data) => {\r\n          return (\r\n            <>\r\n              <div>\r\n                {data.name} {data.rel.toFixed(2)}%\r\n              </div>\r\n            </>\r\n          );\r\n        })}\r\n      </div>\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <div className={styles.probabilityHead}>Probability of Achieving</div>\r\n        <div className={styles.probability}>\r\n          {props.mission.actual.map((data) => {\r\n            return (\r\n              <>\r\n                <div>\r\n                  {data.name}{\" \"}\r\n                  {data.prob.toFixed(2) == 100\r\n                    ? \">99%\"\r\n                    : `${data.prob.toFixed(2)}%`}\r\n                </div>\r\n              </>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst TaskDashboard = () => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [gridCompApi, setGridCompApi] = useState(null);\r\n  const [gridTaskApi, setGriTaskdApi] = useState(null);\r\n  const [gridMissionApi, setgridMissionApi] = useState(null);\r\n  const [missionProfileData, setMissionData] = useState([]);\r\n  const [rowState, setRows] = useState([]);\r\n  const [rowCompState, setCompRows] = useState([]);\r\n  const dispatch = useDispatch();\r\n  let ParallelIds = [];\r\n  const setParallelIds = (d) => {\r\n    console.log(\"This is shit!!\")\r\n    console.log(d)\r\n    ParallelIds = d;\r\n  };\r\n  \r\n  const [shipOption, setshipOption] = useState([]);\r\n  const [taskOption, settaskOption] = useState([]);\r\n  const [missionOption, setmissionOption] = useState([]);\r\n  const [taskShipNameOption, settaskShipNameOption] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [selectedTaskShip, setselectedTaskShip] = useState(\"\");\r\n  const [selectedTaskName, setselectedTaskName] = useState(\"\");\r\n  const [selectedShipName, setselectedShipName] = useState(\"\");\r\n\r\n  // Reliability Dashboard\r\n  const [showSubsystem, setSubSystem] = useState(false);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n\r\n  const [isCardFlipped, setCardFlipped] = useState(false);\r\n\r\n  const [currentMission, setMission] = useState(0);\r\n  const [eqDataOption, setEqDataOption] = useState([]);\r\n\r\n  const [taskTableData, settaskTableData] = useState([]);\r\n  const [taskMissionTableData, settaskMissionTableData] = useState([]);\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const [selectedEqName, setEquipmentName] = useState(null);\r\n  const [entireData, setentireData] = useState(null);\r\n  // const [selectedShipName, setShipName] = useState(null);\r\n  const [selectedMissionName, setMissionName] = useState(null);\r\n\r\n  const [graphData, setGraphData] = useState([]);\r\n\r\n  const [missionPhaseGraphData, setMissionPhaseGraphData] = useState([]);\r\n  const currentShip = useSelector((state) => state.taskData.currentShip);\r\n  const currentTaskName = useSelector((state) => state.taskData.currentTaskName);\r\n  const [subSystemData, setSubSystemData] = useState([]);\r\n  const [eventInfo, setEventInfo] = useState(null);\r\n  const [cardData, setCardData] = useState(null);\r\n  const missionName = useRef()\r\n  const thReliab = useRef()\r\n  const handleStartDateChange = (date) => {\r\n    setStartDate(date);\r\n  };\r\n  const [endDate, setEndDate] = useState(new Date());\r\n  const handleEndDateChange = (date) => {\r\n    setEndDate(date);\r\n  };\r\n  const ImportColumns = [\r\n    <AgGridColumn\r\n      field=\"missionType\"\r\n      headerName=\"Mission Type\"\r\n      headerTooltip=\"Mission Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      checkboxSelection={true}\r\n      cellEditorParams={{\r\n        values: [\r\n          \"\",\r\n          \"Harbour\",\r\n          \"Entry Leaving Harbour\",\r\n          \"Cruise\",\r\n          \"Defense Station\",\r\n          \"Action Station\",\r\n        ],\r\n      }}\r\n      width=\"220\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n    field=\"duration\"\r\n    headerName=\"Duration\"\r\n    headerTooltip=\"Duration\"\r\n    type=\"number\"\r\n    width={100}\r\n    editable={true}\r\n  />,\r\n  ];\r\n\r\n  const compColumns = [\r\n    <AgGridColumn\r\n      field=\"missionType\"\r\n      headerName=\"Mission Type\"\r\n      headerTooltip=\"Mission Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      checkboxSelection={true}\r\n      cellEditorParams={{\r\n        values: [\r\n          \"\",\r\n          \"Harbour\",\r\n          \"Entry Leaving Harbour\",\r\n          \"Cruise\",\r\n          \"Defense Station\",\r\n          \"Action Station\",\r\n        ],\r\n      }}\r\n      width=\"220\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"component\"\r\n      headerName=\"Select Component for Mission\"\r\n      headerTooltip=\"Select Component for Mission\"\r\n      // cellEditor=\"agSelectCellEditor\"\r\n      cellEditorFramework={RenderMultipleComponent}\r\n      cellEditorParams={{\r\n        setParallelIds: setParallelIds,\r\n        label: \"Select Component for Mission\",\r\n        isMultiple: true,\r\n        currentTask: selectedTaskName\r\n      }}\r\n      //onCellClicked={onCellChanged}\r\n      width=\"220\"\r\n      editable={true}\r\n    />\r\n  ];\r\n  // <AgGridColumn\r\n  //     field=\"component\"\r\n  //     headerName=\"Select Component for Mission\"\r\n  //     headerTooltip=\"Select Component for Mission\"\r\n  //     // cellEditor=\"agSelectCellEditor\"\r\n  //     cellEditorFramework={RenderMultipleComponent}\r\n  //     cellEditorParams={{\r\n  //       setParallelIds: setParallelIds,\r\n  //       label: \"Select Component for Mission\",\r\n  //       isMultiple: true,\r\n  //       currentTask: selectedTaskName\r\n  //     }}\r\n  //     //onCellClicked={onCellChanged}\r\n  //     width=\"220\"\r\n  //     editable={true}\r\n  //   />\r\n\r\n  const taskTableColumns = [\r\n    <AgGridColumn\r\n    field=\"shipName\"\r\n    headerName=\"Ship Name\"\r\n    headerTooltip=\"Ship Name\"\r\n    width={100}\r\n    editable={true}\r\n  />,\r\n    <AgGridColumn\r\n    field=\"taskName\"\r\n    headerName=\"Task Name\"\r\n    headerTooltip=\"Task Name\"\r\n    width={100}\r\n    editable={true}\r\n  />,\r\n  <AgGridColumn\r\n    field=\"rel\"\r\n    headerName=\"Reliability\"\r\n    headerTooltip=\"Reliability\"\r\n    type=\"number\"\r\n    width={100}\r\n    editable={true}\r\n  />\r\n  ];\r\n  const taskMissionTableColumns = [\r\n    <AgGridColumn\r\n    field=\"shipName\"\r\n    headerName=\"Ship Name\"\r\n    headerTooltip=\"Ship Name\"\r\n    width={100}\r\n    editable={true}\r\n  />,\r\n    <AgGridColumn\r\n    field=\"taskName\"\r\n    headerName=\"Task Name\"\r\n    headerTooltip=\"Task Name\"\r\n    width={100}\r\n    editable={true}\r\n  />,\r\n  <AgGridColumn\r\n    field=\"missionType\"\r\n    headerName=\"Mission Type\"\r\n    headerTooltip=\"Mission Type\"\r\n    width={100}\r\n    editable={true}\r\n  />,\r\n  <AgGridColumn\r\n    field=\"ComponentMission\"\r\n    headerName=\"Component/Mission Type\"\r\n    headerTooltip=\"Component/Mission Type\"\r\n    width={100}\r\n    editable={true}\r\n  />,\r\n  <AgGridColumn\r\n    field=\"rel\"\r\n    headerName=\"Reliability\"\r\n    headerTooltip=\"Reliability\"\r\n    type=\"number\"\r\n    width={100}\r\n    editable={true}\r\n  />\r\n  ];\r\n\r\n\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: uuidv4(),\r\n        duration: 0,\r\n        missionType: \"\",\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n  };\r\nconst updateCompTable = () => {\r\n  let allRowData = [];\r\n  gridApi.forEachNode((node) => allRowData.push(node.data));\r\n  let newData = []\r\n  allRowData.forEach((d) => {\r\n    newData.push({\"missionType\": d[\"missionType\"], \"component\": \"\", \"id\": d[\"id\"]})\r\n  })\r\n  setCompRows(newData)\r\n  // debugger;\r\n}\r\n\r\n  const saveTaskReset = () => {\r\n    debugger;\r\n    let allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    let allRowCData = [];\r\n    gridCompApi.forEachNode((node) => allRowCData.push(node.data));\r\n    //logic for saving it to local data\r\n    let mainData = []\r\n    allRowData.forEach((d, index) => {\r\n      mainData.push({\"id\": allRowData[index][\"id\"], \"missionType\": allRowData[index][\"missionType\"], \r\n      \"duration\": allRowData[index][\"duration\"], \"components\": allRowCData[index][\"components\"]})\r\n    })\r\n    let localData = {'shipName': currentShip, \"taskName\": currentTaskName, \"data\": mainData} \r\n    console.log(localData)\r\n    localStorage.setItem(`${currentShip}_${currentTaskName}`, JSON.stringify(localData));\r\n    gridApi.selectAll();\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n\r\n    // let allCompRows = []\r\n    gridCompApi.selectAll();\r\n    const selectedCompRows = gridCompApi.getSelectedRows();\r\n    gridCompApi.applyTransaction({ remove: selectedCompRows });\r\n    allRowData = [];\r\n    // gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    setMissionData(allRowData)\r\n  }\r\n  const deleteRows = () => {\r\n    debugger;\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    let allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    setMissionData(allRowData)\r\n    // console.log(selectedRows);\r\n  };\r\n\r\n  const handleEventCheck = () => {\r\n    let start = moment(startDate).subtract(1, \"day\");\r\n    let end = moment(endDate).add(1, \"day\");\r\n    let total = (end - start) / (1000 * 3600 * 24) - 1;\r\n    console.log(total);\r\n    let days = { working: 0, down: 0, maintenance: 0, total: total };\r\n    events.forEach((event) => {\r\n      if (event.start < end && event.end > start) {\r\n        if (event.start >= start && event.end <= end) {\r\n          let diff =\r\n            (moment(event.end) - moment(event.start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start >= start && event.end >= end) {\r\n          let diff = (moment(end) - moment(event.start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start <= start && event.end <= end) {\r\n          let diff = (moment(event.end) - moment(start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        } else if (event.start <= start && event.end >= end) {\r\n          let diff = (moment(end) - moment(start)) / (1000 * 3600 * 24);\r\n          console.log(diff);\r\n\r\n          days[event.status] += Math.floor(diff);\r\n        }\r\n      }\r\n    });\r\n    setEventInfo(days);\r\n    setCardFlipped(!isCardFlipped);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    fetch(\"/task_dash_populate\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const mission_data = data[\"missionData\"];\r\n        const taskNames = data[\"tasks\"]\r\n        const taskData = data[\"tasks_data\"]\r\n        const task_ship_name = data[\"ship_name\"]\r\n        setmissionOption(mission_data);\r\n        setentireData(data)\r\n        // settaskOption(taskNames);      \r\n        settaskShipNameOption(task_ship_name)\r\n        dispatch(taskActions.onLoad({'taskData': data}))\r\n      });\r\n  }, []);\r\n\r\n\r\n  const dropDownStyle = makeStyles({\r\n    root: {\r\n      paddingLeft: 10,\r\n      background: \"#fff\",\r\n      border: \"1px solid #0263a1\",\r\n      borderRadius: \"5px\",\r\n      width: \"320px\",\r\n      minHeight: \"40px\",\r\n      boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n    },\r\n    inputRoot:{\r\n      width: '100%'\r\n    },\r\n  });\r\n  const classes=dropDownStyle();\r\n  let arr=[]\r\n  let arr2=[]\r\n  for(let i=0;i<50;i++){\r\n    // const maxDate = Date.now();\r\n    // const timestamp = Math.floor(Math.random() * maxDate);\r\n    arr=[...arr,{name:new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0,10),uv:Math.floor(Math.random() * (80 - 30 + 1)) + 30}]\r\n\r\n    arr2=[...arr2,{name:new Date(new Date(2021, 1, 1).getTime() + Math.random() * (new Date(2022, 1, 1).getTime() - new Date(2021, 1, 1).getTime())).toISOString().slice(0,10),uv:Math.floor(Math.random() * (75 - 30 + 1)) + 30}]\r\n  }\r\n  const [showGraph,setShowGraph]=useState(false);\r\n\r\n  const onResetMissionHandler = () => {\r\n    localStorage.clear();\r\n\r\n  }\r\n\r\n  const onSubmitHandler = () => { \r\n    // setMission(0);\r\n    let storedData = Object.entries(localStorage)\r\n    // storedData.pop()\r\n    let fData = []\r\n    storedData.forEach(ele => {\r\n      debugger;\r\n      let name = ele[0]\r\n      // let elemData = JSON.parse(ele[0])\r\n      if(name != \"settings\"){\r\n        fData.push(JSON.parse(ele[1]))\r\n      }\r\n    })\r\n    if(fData.length > 0){\r\n      const data = {\"taskName\": currentTaskName, \"shipName\": currentShip,\r\n       \"selectedMission\": missionName.current.value, \"missionProfileData\": missionProfileData}\r\n      fetch(\"/task_rel\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(fData),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .then((d) => {\r\n          debugger;\r\n          let taskData = [];\r\n          let taskMissionData = [];\r\n          d.forEach((tData) => {\r\n            let perMData = tData[\"data\"]\r\n            perMData.forEach((pTD) => {\r\n              taskMissionData.push({\"shipName\": tData[\"shipName\"], \"taskName\": tData[\"taskName\"], \r\n              \"rel\": Math.round(pTD[\"rel\"]*100)/100, \"missionType\": pTD[\"missionName\"], \"ComponentMission\": pTD[\"missionName\"]})\r\n              let componentRelData = pTD[\"comp_rel\"]\r\n              componentRelData.forEach((cTD) => {\r\n                taskMissionData.push({\"shipName\": tData[\"shipName\"], \"taskName\": tData[\"taskName\"], \r\n              \"rel\": Math.round(cTD[\"rel\"]*100)/100, \"missionType\": pTD[\"missionName\"], \"ComponentMission\": cTD[\"compName\"]})\r\n              })\r\n            })\r\n            taskData.push({\"shipName\": tData[\"shipName\"], \"taskName\": tData[\"taskName\"], \"rel\": Math.round(tData[\"rel\"]*100)/100})\r\n          });\r\n          settaskTableData(taskData)\r\n          settaskMissionTableData(taskMissionData)\r\n        });\r\n    }else{\r\n      // alert(\"Please add Mission Definition!!\")\r\n      setSnackBarMessage({\r\n        severity: \"error\",\r\n        message: \"Please Select data and Enter Mission Phase Data!!\",\r\n        showSnackBar: true,\r\n      });      \r\n    }\r\n    \r\n  };\r\n\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const updateFinalRowData = (d) => {\r\n    setMissionData(d);\r\n  };\r\n\r\n  const shipNameChange = (event, value) => {\r\n    debugger;\r\n    let tt = entireData;\r\n    let sNames = tt[\"task_ship_name\"][value[0][\"name\"]]\r\n    let fNames = []\r\n    sNames.forEach(s => fNames.push({\"name\": s}))\r\n    settaskOption(fNames)\r\n    // setselectedTaskShip(value)\r\n    dispatch(taskActions.updateCurrentShip({'ship': value[0].name}))\r\n  }\r\n  const TaskNameChange = (event, value) => {\r\n    dispatch(taskActions.updateCurrentTask({'task': value[0].name}))\r\n  }\r\n  const minThreshold=45\r\n  const maxThreshold=60\r\n  return (\r\n    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        <div className={styles.mprofile}>\r\n          {/* <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Ship Name\r\n            </InputLabel>\r\n            <CustomSelect fields={['a','b','c','d','e']}/>\r\n              \r\n           \r\n            \r\n          </div> */}\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Ship Name\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n            classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={taskShipNameOption}\r\n              getOptionLabel={(option) => option.name}\r\n              onChange = {shipNameChange}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{...params.InputProps, disableUnderline: true}}\r\n                  variant=\"standard\"\r\n                  // label=\"Multiple values\"\r\n                  // placeholder=\"Favorites\"\r\n                />\r\n              )}\r\n            />\r\n            \r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n              Task Name\r\n            </InputLabel>\r\n\r\n            <Autocomplete\r\n            classes={classes}\r\n              multiple\r\n              id=\"tags-standard\"\r\n              options={taskOption}\r\n              getOptionLabel={(option) => option.name}\r\n              onChange = {TaskNameChange}\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  InputProps={{...params.InputProps, disableUnderline: true}}\r\n                  variant=\"standard\"\r\n                  // label=\"Multiple values\"\r\n                  // placeholder=\"Favorites\"\r\n                />\r\n              )}\r\n            />\r\n            \r\n          </div>\r\n          \r\n\r\n          <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n               Mission Name\r\n            </InputLabel>\r\n\r\n            {/* <TextField ref={missionName}   id=\"outlined-basic\" variant=\"outlined\" /> */}\r\n            <input\r\n            className={styles.missionName}\r\n                    ref={missionName}\r\n                    // onChange={onHandleChange}\r\n                  ></input>\r\n            \r\n          </div>\r\n\r\n          {/* <div style={{ width: \"300px\" }}>\r\n            <InputLabel\r\n              style={{\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"16px\",\r\n                marginBottom: \"10px\",\r\n              }}\r\n            >\r\n               Threshold Reliability\r\n            </InputLabel>\r\n            <input\r\n            className={styles.missionName}\r\n                    ref={thReliab}\r\n                  \r\n                  ></input>\r\n            \r\n          </div> */}\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              marginTop: \"2rem\",\r\n            }}\r\n            onClick={onResetMissionHandler} \r\n          >\r\n            Reset Temp. Missions\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{\r\n              marginTop: \"2rem\",\r\n            }}\r\n            onClick={onSubmitHandler} \r\n          >\r\n            Calculate Reliability\r\n          </Button>\r\n         \r\n          \r\n        </div>\r\n        \r\n        <div>\r\n          <div className={styles.table}>\r\n          <Table\r\n        columnDefs={ImportColumns}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        rowData={rowState}\r\n        tableUpdate={updateFinalRowData}\r\n        tableSize= {180}\r\n      />\r\n          </div>\r\n      <div className={styles.tableFooter}>\r\n      <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => updateCompTable()}\r\n            >\r\n              Update Mission Component Reliability\r\n            </Button>\r\n            <Button\r\n            style={{ marginLeft: 10 }}\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => AddRow()}\r\n            >\r\n              Add Row\r\n            </Button>\r\n            <Button\r\n              style={{ marginLeft: 10 }}\r\n              variant=\"contained\"\r\n              startIcon={<DeleteIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => deleteRows()}\r\n            >\r\n              Delete Rows\r\n            </Button>\r\n          </div>\r\n      <div className={styles.table}>\r\n      <Table\r\n        columnDefs={compColumns}\r\n        setGrid={setGridCompApi}\r\n        gridApi={gridCompApi}\r\n        rowData={rowCompState}\r\n        tableUpdate={updateFinalRowData}\r\n        tableSize= {180}\r\n      />\r\n      </div>\r\n      <div className={styles.tableFooter}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              color=\"secondary\"\r\n              style={{ marginRight: 10 }}\r\n              onClick={() => saveTaskReset()}\r\n            >\r\n              Save this Task for Comparison\r\n            </Button>\r\n          </div>\r\n        {/* <div style={{ width: \"300px\" }}>\r\n        <TextField id=\"outlined-basic\" label=\"Mission Name\" \r\n        variant=\"outlined\" defaultValue=\"Temp Mission\" />\r\n          </div>\r\n        <div style={{ width: \"300px\" }}>\r\n        <TextField id=\"outlined-basic\" label=\"Harbour Duration\"\r\n         variant=\"outlined\" defaultValue=\"0\" type=\"number\"   />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n          <TextField id=\"outlined-basic\" label=\"Entry Leaving Harbour Duration\"\r\n           variant=\"outlined\" defaultValue=\"0\" type=\"number\" />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n          <TextField id=\"outlined-basic\" label=\"Cruise Duration\"\r\n           variant=\"outlined\" defaultValue=\"0\" type=\"number\" />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n          <TextField id=\"outlined-basic\" label=\"Defence Duration\"\r\n           variant=\"outlined\" defaultValue=\"0\" type=\"number\" />\r\n          </div>\r\n          <div style={{ width: \"300px\" }}>\r\n          <TextField id=\"outlined-basic\" label=\"Action Duration\" \r\n          variant=\"outlined\" defaultValue=\"0\" type=\"number\" />\r\n          </div> */}\r\n        \r\n        </div>\r\n\r\n        <div className={styles.table}>\r\n          {taskTableData.length > 0 && \r\n          <Table columnDefs={taskTableColumns}\r\n          setGrid={setGriTaskdApi}\r\n          gridApi={gridTaskApi}\r\n          rowData={taskTableData}\r\n          tableUpdate={() => {}}\r\n          tableSize= {180}>\r\n            </Table>}\r\n        </div>\r\n\r\n        <div className={styles.table}>\r\n          {taskTableData.length > 0 && \r\n          <Table columnDefs={taskMissionTableColumns}\r\n          setGrid={setgridMissionApi}\r\n          gridApi={gridMissionApi}\r\n          rowData={taskMissionTableData}\r\n          tableUpdate={() => {}}\r\n          tableSize= {290}></Table>}\r\n        </div>\r\n        \r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n};\r\nexport default TaskDashboard;\r\n","E:\\NetraB\\netra\\src\\pages\\Bayesian\\bayesian_input.js",["781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800"],"import React, { useEffect, useState } from \"react\";\r\nimport NewModule from \"../../components/module/NewModule\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport styles from \"./UserSelectionConfiguration.module.css\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport Table from \"../../ui/Table/DataManagerTable\";\r\nimport { Button, makeStyles, Grid } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\nimport ustyles from '../systen_configuration/SystemConfiguration.module.css'\r\n//From Add new equipment form\r\nimport { userActions } from \"../../store/ApplicationVariable\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\nimport classes from \"./EqptStructuring.module.css\";\r\nimport LabelToolTip from \"../../components/main/EqptStructuring/LabelToolTip/LabelToolTip\";\r\n// import Tree from \"./Tree\";\r\n// import TreeComponent from \"../../sortableTree/SortableTree\";\r\nimport CustomTextInput from \"../../ui/Form/CustomTextInput\";\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nimport AutoSelect from \"../../ui/Form/AutoSelect\";\r\nimport { useFormik } from \"formik\";\r\nimport { v4 as uuid } from \"uuid\"; \r\nimport { Route } from \"react-router-dom/cjs/react-router-dom.min\";\r\nconst useStyles = makeStyles({\r\n    root: {\r\n      margin: \"0 2.5em\",\r\n    },\r\n  });\r\n  \r\nconst SystemStyles = makeStyles({\r\n  formControl: {\r\n    margin: \"2rem\",\r\n    minWidth: 200,\r\n  },\r\n  Submit: {\r\n    margin: \"2rem\",\r\n  },\r\n  buttons: {\r\n    minWidth: 150,\r\n    marginLeft: 10,\r\n    marginTop: 15,\r\n    float: \"right\",\r\n  },\r\n});\r\nconst Bayesian_Inputs = (props) => {\r\n  const SystemClasses = SystemStyles();\r\n  const dispatch = useDispatch();\r\n  const selectedInputs = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  const [disableButton, setDisableButton] = useState(false);\r\n  let fData = useSelector((state) => state.treeData.treeData);\r\n//   const [gridApi, setGridApi] = useState(null);\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Close\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const [parentFiledValue, setParentFieldValue] = useState({\r\n    title: \"\",\r\n    name: \"\",\r\n    children: [],\r\n    id: \"\",\r\n    eqType: \"\",\r\n    parentName: \"\",\r\n    parentId: \"\",\r\n    lmu: 1,\r\n  });\r\n\r\n  const classesButton = useStyles();\r\n  const parentOnChange = (e, value) => {\r\n    debugger\r\n    setParentFieldValue(value);\r\n  };\r\n  const clearForm = (e) => {\r\n    e.preventDefault();\r\n    setDisableButton(false);\r\n    dispatch(treeDataActions.setTreeData({ treeData: [] }));\r\n    formik.resetForm();\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n        command: \"\",\r\n      ship_name: \"\",\r\n      department: \"\",\r\n      shipClass: \"\",\r\n      shipC: \"\",\r\n    },\r\n    //validationSchema: validationSchema,\r\n    onSubmit: (values, {resetForm}) => {\r\n      // alert(JSON.stringify(values, null, 2));\r\n      debugger;\r\n    //   const { platform, platformType, system, systemType } = values;\r\n      console.log(values);\r\n      fetch(\"/addUserSelectionData\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({values}),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => {\r\n          return res.json();\r\n        })\r\n        .then((data) => {\r\n            if (data.code == 1){\r\n                // resetForm()\r\n          setSnackBarMessage({\r\n            severity: \"success\",\r\n            message: data.message,\r\n            showSnackBar: true,\r\n          });\r\n        }else{\r\n            setSnackBarMessage({\r\n                severity: \"error\",\r\n                message: data.message,\r\n                showSnackBar: true,\r\n              });\r\n        }\r\n        })\r\n    //   \r\n    //   const platformId = uuid();\r\n    //   const systemId = uuid();\r\n    //   debugger;\r\n    //   const treeNodes = [\r\n    //     {\r\n    //       name: system,\r\n    //       id: systemId,\r\n    //       eqType: systemType,\r\n    //       parentName: selectedInputs[\"shipName\"],\r\n    //       parentId: null,\r\n    //       parent: null,\r\n    //       children: [],\r\n    //       lmu: 1,\r\n    //       command: selectedInputs[\"command\"],\r\n    //       department: selectedInputs[\"department\"],\r\n    //       shipCategory: selectedInputs[\"shipCategory\"],\r\n    //       shipClass: selectedInputs[\"shipClass\"],\r\n    //       shipName: selectedInputs[\"shipName\"],\r\n    //     },\r\n    //   ];\r\n    //   const updateEqStore = {\r\n    //     equipmentName: system,\r\n    //     equipmentCode: systemType,\r\n    //   };\r\n    //   const filteredData = {\r\n    //     equipmentName: [system],\r\n    //     equipmentCode: [systemType],\r\n    //   };\r\n    //   dispatch(treeDataActions.addElement({ data: treeNodes }));\r\n    //   dispatch(\r\n    //     userActions.onAddingEquipmentName({\r\n    //       selectedData: updateEqStore,\r\n    //       filteredData: filteredData,\r\n    //     })\r\n    //   );\r\n    //   setDisableButton(true);\r\n    },\r\n  });\r\n\r\n\r\n\r\n  //Save Button Handler\r\nconst onSaveButtonClickHandler = () => {\r\n  alert(\"Hello\")\r\n} \r\n\r\nconst onLoadTreeStructure = () => {\r\n  fetch(\"/fetch_system\", {\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      system: currentSelection[\"equipmentName\"],\r\n      ship_name: currentSelection[\"shipName\"],\r\n    }),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  })\r\n    .then((res) => res.json())\r\n    .then((d) => {\r\n      let treeD = d[\"treeD\"];\r\n      let failureModes = d[\"failureMode\"];\r\n      dispatch(\r\n        treeDataActions.setTreeData({\r\n          treeData: treeD,\r\n          failureModes: failureModes,\r\n        })\r\n      );\r\n    });\r\n};\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <div className={styles.body}>\r\n        {/* <div className={styles.user}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={SystemClasses.buttons}\r\n            onClick={onSaveButtonClickHandler}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div> */}\r\n        <div className={ustyles.flex} style={{ marginTop: \"5rem\" }}>\r\n          <div className={ustyles.user} ><UserSelection /></div>\r\n          <div className={styles.buttons}>\r\n          <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={SystemClasses.buttons}\r\n                onClick={onLoadTreeStructure}\r\n              >\r\n                Load System\r\n              </Button>\r\n        </div>\r\n          </div>\r\n        \r\n        <div className={styles.table}>\r\n          {/* <Table\r\n            rowData={rowState}\r\n            columnDefs={MProfileColumns}\r\n            tableUpdate={setFinalTableData}\r\n            setGrid={setGridApi}\r\n            gridApi={gridApi}\r\n          /> */}\r\n         <div className={classes.form}>\r\n      <div className={classes.header}>Add Current Data</div>\r\n        <form style={{ width: \"100%\" }} onSubmit={formik.handleSubmit}>\r\n          <div className={classes.formrow1}>\r\n            <div className={classes.field1}>\r\n              <LabelToolTip label=\"Component Current Age\" info=\"Info\" />\r\n              <CustomTextInput\r\n                className={classes.fullWidth}\r\n                id=\"command\"\r\n                name=\"command\"\r\n                value={formik.values.command}\r\n                onChange={formik.handleChange}\r\n                disabled={disableButton}\r\n              ></CustomTextInput>\r\n            </div>\r\n            <div className={classes.field1}>\r\n              <LabelToolTip label=\"Select Parameter\" info=\"Info\" />\r\n              <CustomTextInput\r\n                className={classes.fullWidth}\r\n                id=\"shipC\"\r\n                name=\"shipC\"\r\n                value={formik.values.shipC}\r\n                onChange={formik.handleChange}\r\n                disabled={disableButton}\r\n              ></CustomTextInput>\r\n            </div>\r\n          </div>\r\n          <div className={classes.formrow1}>\r\n            <div className={classes.field1}>\r\n              <LabelToolTip label=\"Current Parameter Value\" info=\"Info\" />\r\n              <CustomTextInput\r\n                className={classes.fullWidth}\r\n                id=\"cpv\"\r\n                name=\"cpv\"\r\n                value={formik.values.shipClass}\r\n                onChange={formik.handleChange}\r\n                disabled={disableButton}\r\n              ></CustomTextInput>\r\n            </div>\r\n            <div className={classes.field1}>\r\n              <LabelToolTip label=\"Projected Days\" info=\"Info\" />\r\n              <CustomTextInput\r\n                className={classes.fullWidth}\r\n                id=\"p_days\"\r\n                name=\"p_days\"\r\n                value={formik.values.department}\r\n                onChange={formik.handleChange}\r\n                disabled={disableButton}\r\n              ></CustomTextInput>\r\n            </div>\r\n          </div>\r\n          <div className={classes.formrow1}>\r\n            <div className={classes.field1}>\r\n              <LabelToolTip label=\"Number of Phases\" info=\"Info\" />\r\n              <CustomTextInput\r\n                className={classes.fullWidth}\r\n                id=\"n_phases\"\r\n                name=\"n_phases\"\r\n                value={formik.values.ship_name}\r\n                onChange={formik.handleChange}\r\n                disabled={disableButton}\r\n              ></CustomTextInput>\r\n            </div>\r\n            <div className={classes.field1}>\r\n            <Button\r\n                className={classesButton.root}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"submit\"\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n       \r\n      </div>\r\n          {/* <div className={styles.tableFooter}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => AddRow()}\r\n            >\r\n              Add Row\r\n            </Button>\r\n            <Button\r\n              style={{ marginLeft: 10 }}\r\n              variant=\"contained\"\r\n              startIcon={<DeleteIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => deleteRows()}\r\n            >\r\n              Delete Rows\r\n            </Button>\r\n          </div> */}\r\n        </div>\r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Bayesian_Inputs;\r\n","E:\\NetraB\\netra\\src\\pages\\RUL\\RulLife.js",["801"],"import React, { useState, useCallback, useEffect } from \"react\";\r\nimport Navigation from \"../../components/navigation/Navigation\";\r\nimport styles from \"./rul.module.css\";\r\nimport UserSelection from \"../../ui/userSelection/userSelection\";\r\nimport { Button, makeStyles, TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport TreeComponent from \"../../components/sortableTree/SortableTree\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\nimport AutoSelect from \"../../ui/Form/AutoSelect\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport CustomizedSnackbars from \"../../ui/CustomSnackBar\";\r\nimport RULPredictor from \"./RULPredictor\";\r\n\r\nconst useStyles = makeStyles({\r\n  buttons: {\r\n    margin: 5,\r\n    minWidth: 170,\r\n    float: \"right\",\r\n  },\r\n  align: {\r\n    marginBottom: 10,\r\n  },\r\n});\r\n\r\nconst RulLife = () => {\r\n  const [paramOptions, setParamOptions] = useState([]);\r\n  const [selectedParameterName, setParameterName] = useState(\"\");\r\n  const [selectedEqName, setEquipmentName] = useState([]);\r\n  const [para, setPara] = useState([]);\r\n  const [prevrul, setPrevrul] = useState();\r\n  const [isRulOpen, setRulOpen] = useState(false);\r\n  const [uploadedFile, setUploadedFile] = useState(null);\r\n\r\n  // Function to handle file upload\r\n  const handleFileUpload = (file) => {\r\n    setUploadedFile(file);\r\n    console.log(uploadedFile);\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    fetch(\"/csv_upload\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    })\r\n      .then((response) => response.text())\r\n      .then((data) => {\r\n        console.log(data); // Response from the server\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Fetch Error:\", error);\r\n      });\r\n  };\r\n\r\n  // Dropzone configuration\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop: (acceptedFiles) => handleFileUpload(acceptedFiles[0]),\r\n    accept: \".csv\", // Accept only CSV files, you can modify this to accept other file types\r\n    multiple: false, // Allow only one file to be uploaded at a time\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  let fData = useSelector((state) => state.treeData.treeData);\r\n  console.log(selectedParameterName);\r\n  const sData = useSelector((state) => state.userSelection.componentsData);\r\n\r\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\r\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\r\n\r\n  const matchingId = matchingItems[0]?.id;\r\n  const onLoadTreeStructure = () => {\r\n    const payload = {\r\n      system: currentSelection[\"equipmentName\"],\r\n      ship_name: currentSelection[\"shipName\"],\r\n    };\r\n  \r\n    if (matchingId) {\r\n      payload.component_id = matchingId;\r\n    }\r\n    console.log(payload)\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        console.log(d);\r\n        let treeD = d[\"treeD\"];\r\n        let failureModes = d[\"failureMode\"];\r\n        console.log(failureModes)\r\n        dispatch(\r\n          treeDataActions.setTreeData({\r\n            treeData: treeD,\r\n          }),\r\n        );\r\n        dispatch(\r\n          treeDataActions.setFailureModes(failureModes)\r\n        )\r\n      });\r\n  };\r\n\r\n  const handlePrevRul = (e, p) => {\r\n    e.preventDefault();\r\n    // console.log(typeof parameter, \"abcd\")\r\n    fetch(\"/prev_rul\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        parameter: p,\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setPrevrul(data);\r\n        setRulOpen(true);\r\n        console.log(data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Fetch Error:\", error);\r\n        throw error;\r\n      });\r\n  };\r\n\r\n  console.log(prevrul);\r\n  useEffect(() => {\r\n    fetch(\"/cm_dashboard\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const params = data[\"parameters\"];\r\n        console.log(\"luck\", params);\r\n        setPara(params);\r\n      })\r\n      .catch((error) => {\r\n        // Handle fetch error\r\n      });\r\n  }, [selectedEqName]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"s\");\r\n    const selectedEqNameArray = Object.values(selectedEqName).map(\r\n      (equipment) => equipment\r\n    );\r\n    console.log(selectedEqNameArray);\r\n\r\n    const filteredArray = para.filter((item) =>\r\n      selectedEqNameArray.includes(item.equipment_id)\r\n    );\r\n\r\n    console.log(filteredArray, \"nafkja\");\r\n\r\n    const filteredNames = filteredArray.map((item) => item.name);\r\n    setParamOptions(filteredNames);\r\n  }, [selectedEqName, para]);\r\n\r\n  // Snackbar\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <div className={styles.userSelection}>\r\n        <UserSelection />\r\n        <div>\r\n          <Button\r\n            className={classes.buttons}\r\n            onClick={onLoadTreeStructure}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.content}>\r\n        <div className={styles.tree}>\r\n          <div className={styles.treeChild}>\r\n            <TreeComponent height=\"600px\"></TreeComponent>\r\n          </div>\r\n        </div>\r\n        <div className={styles.rightSection}>\r\n          <div className={styles.userSelection}>\r\n            <div className={styles.selectContainer}>\r\n              <div className={styles.selectC}>\r\n                Select Component\r\n                <AutoSelect\r\n                  fields={fData}\r\n                  onChange={(e, value) => setEquipmentName(value)}\r\n                  value={selectedEqName}\r\n                ></AutoSelect>\r\n              </div>\r\n              <div>\r\n                Select Parameter\r\n                <Autocomplete\r\n                  className={styles.SelectP}\r\n                  id=\"tags-standard\"\r\n                  options={paramOptions}\r\n                  // getOptionLabel={(option) => option.name}\r\n                  value={selectedParameterName}\r\n                  onChange={(e, value) => setParameterName(value)}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      InputProps={{\r\n                        ...params.InputProps,\r\n                        disableUnderline: true,\r\n                      }}\r\n                      variant=\"standard\"\r\n                    />\r\n                  )}\r\n                />\r\n              </div>\r\n              <div {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                <Button\r\n                  className={classes.buttons}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                >\r\n                  Upload File\r\n                </Button>\r\n              </div>\r\n              <div className={styles.importBtnContainer}>\r\n                <Button\r\n                  className={classes.buttons}\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={(e) => handlePrevRul(e, selectedParameterName)}\r\n                >\r\n                  Calculate RUL\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {isRulOpen && (\r\n            <RULPredictor selectedEqName={selectedEqName} prevRul={prevrul} />\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RulLife;\r\n","E:\\NetraB\\netra\\src\\pages\\Phase_Manager\\PhasetableData.js",["802"],"import { AgGridColumn } from \"ag-grid-react/lib/agGridColumn\";\r\n\r\nexport const MProwData = [\r\n  {\r\n    PhaseName: \"Load\",\r\n    MeasurementType: \"Quantitative\",\r\n    LowerBound: 0,\r\n    UpperBound: 50,\r\n    Status: \"\",\r\n    PhaseRange: \"L1\",\r\n    Unit: \"Unit\",\r\n    Description: \"Description\",\r\n  },\r\n  {\r\n    PhaseName: \"Load\",\r\n    MeasurementType: \"Quantitative\",\r\n    LowerBound: 51,\r\n    UpperBound: 75,\r\n    Status: \"\",\r\n    PhaseRange: \"L2\",\r\n    Unit: \"Unit\",\r\n    Description: \"Description\",\r\n  },\r\n];\r\nexport const MPcolumnDefs = [\r\n  {\r\n    field: \"PhaseName\",\r\n    headerName: \"Phase name\",\r\n    minWidth: 100,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"MeasurementType\",\r\n    headerName: \"Measurement Type\",\r\n    cellEditor: \"agSelectCellEditor\",\r\n    cellEditorParams: { values: [\"Qualitative\", \"Quantitative\"] },\r\n    minWidth: 140,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"LowerBound\",\r\n    headerName: \"Lower Bound\",\r\n    type: \"number\",\r\n    minWidth: 100,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"UpperBound\",\r\n    headerName: \"Upper Bound\",\r\n    type: \"number\",\r\n    minWidth: 100,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"Status\",\r\n    headerName: \"Status\",\r\n    minWidth: 100,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"PhaseRange\",\r\n    headerName: \"PhaseRange\",\r\n    minWidth: 100,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"Unit\",\r\n    headerName: \"Unit\",\r\n    cellEditor: \"agSelectCellEditor\",\r\n    cellEditorParams: { values: [\"Km/hr\", \"M/hr\"] },\r\n    minWidth: 100,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"Description\",\r\n    headerName: \"Description\",\r\n    minWidth: 100,\r\n    editable: true,\r\n  },\r\n];\r\n\r\nexport const LMrowData = [];\r\n\r\nexport const LMcolumnDefs = [\r\n  {\r\n    headerName: \"Component\",\r\n    minWidth: 140,\r\n    editable: true,\r\n  },\r\n  {\r\n    headerName: \"Load\",\r\n    children: [{ field: \"L1\" }, { field: \"L2\" }, { field: \"L3\" }],\r\n  },\r\n  {\r\n    headerName: \"Ship Mode\",\r\n    children: [{ field: \"Docked\" }, { field: \"Cruise\" }, { field: \"Attack\" }],\r\n  },\r\n];\r\n\r\nexport const DCMrowData = [\r\n  {\r\n    System: \"DA\",\r\n    L1: \"0.52\",\r\n    L2: \"1\",\r\n    L3: \"0.5\",\r\n    Docked: \"1\",\r\n    Cruise: \"1\",\r\n    Attack: \"1\",\r\n  },\r\n];\r\n\r\nexport const DCMcolumnDefs = [\r\n  {\r\n    field: \"System\",\r\n    headerName: \"System\",\r\n    minWidth: 260,\r\n    editable: false,\r\n  },\r\n  {\r\n    field: \"L1\",\r\n    headerName: \"L1\",\r\n    minWidth: 120,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"L2\",\r\n    headerName: \"L2\",\r\n    minWidth: 120,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"L3\",\r\n    headerName: \"L3\",\r\n    minWidth: 120,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"Docked\",\r\n    headerName: \"Docked\",\r\n    minWidth: 120,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"Cruise\",\r\n    headerName: \"Cruise\",\r\n    minWidth: 120,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"Attack\",\r\n    headerName: \"Attack\",\r\n    minWidth: 120,\r\n    editable: true,\r\n  },\r\n];\r\n\r\nexport const components = [\"Fresh Water Cooling\", \"Component2\", \"Component3\"];\r\n","E:\\NetraB\\netra\\src\\components\\navigation\\SideBarData.js",[],"E:\\NetraB\\netra\\src\\pages\\Settings\\ChangePassword.js",["803"],"import React,{ useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport { Paper,InputBase,Button,InputAdornment,IconButton} from '@material-ui/core'\r\nimport styles from './ChangePass.module.css'\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\n\r\nconst InputStyles = makeStyles({\r\n    root: {\r\n        margin:'15px 0px 5px 0px',\r\n        paddingRight: 10,\r\n        paddingLeft: 10,\r\n        background: \"#ebebeb\",\r\n        borderRadius: \"5px\",\r\n        height: 40,\r\n        width: '70%',\r\n        boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n    },\r\n    label:{\r\n        fontWeight: 600\r\n    }\r\n  });\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nconst BackStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background:'linear-gradient(210deg, rgba(41,41,113,0.85) 0%, rgba(4,142,231,0.85) 100%)'\r\n    }\r\n  }));\r\n\r\nconst PassModal = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const bgClasses= BackStyles();\r\n  \r\n  const InputClasses=InputStyles();\r\n\r\n  const[showPassword,setShowPassword]=useState(false);\r\n\r\n  const[password,setPassword]=useState('');\r\n\r\n  const[confirmPassword,setConfirmPassword]=useState('');\r\n\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword);\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };  \r\n\r\n  return (\r\n    <div>\r\n      \r\n      <Modal\r\n        aria-labelledby=\"transition-modal-title\"\r\n        aria-describedby=\"transition-modal-description\"\r\n        className={classes.modal}\r\n        open={props.passModal}\r\n        onClose={props.handlePassClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n          classes:bgClasses\r\n        }}\r\n      >\r\n        <Fade in={props.passModal}>\r\n        <Paper className={styles.PassPaper} elevation={5}>\r\n            <div>\r\n            <img src='/netra-logo.png' width={60} height={60}/>\r\n            <div className={styles.netra}>NETRA</div>\r\n            </div>\r\n            <div style={{textAlign:'center'}}>\r\n            <h5 style={{margin:0}}>Create a strong password</h5>\r\n            </div>\r\n            <InputBase \r\n            classes={InputClasses} \r\n            name='password' \r\n            id='password' \r\n            placeholder='Password' \r\n            type={showPassword ? 'text' : 'password'}\r\n            value={password}\r\n            onChange={(e)=>setPassword(e.target.value)}\r\n            endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    aria-label=\"toggle password visibility\"\r\n                    onClick={handleClickShowPassword}\r\n                    onMouseDown={handleMouseDownPassword}\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n            required/>\r\n            <InputBase \r\n            classes={InputClasses} \r\n            name='conf-password' \r\n            id='conf-password' \r\n            placeholder='Confirm Password' \r\n            type={showPassword ? 'text' : 'password'}\r\n            value={confirmPassword}\r\n            onChange={(e)=>setConfirmPassword(e.target.value)}\r\n            endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    aria-label=\"toggle password visibility\"\r\n                    onClick={handleClickShowPassword}\r\n                    onMouseDown={handleMouseDownPassword}\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n            required/>\r\n            Use 8 or more characters with a mix of letters,numbers & symbols\r\n            <Button variant='contained' style={{backgroundColor:'#1c4199',color:'white'}} >Save Password</Button>\r\n            \r\n            \r\n            \r\n        </Paper>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\nexport default PassModal;","E:\\NetraB\\netra\\src\\pages\\RUL\\RULPredictor.js",[],"E:\\NetraB\\netra\\src\\pages\\TaskDashboard\\TaskRenderMultipleComponent.js",["804","805","806","807","808"],"import React, {\r\n    useEffect,\r\n    useState,\r\n    useImperativeHandle,\r\n    useRef,\r\n    forwardRef,\r\n  } from \"react\";\r\n  import Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n  import TextField from \"@material-ui/core/TextField\";\r\n  import { useDispatch, useSelector } from \"react-redux\";\r\n  import { useLocation } from \"react-router\";\r\n  \r\n  const RenderMultipleComponent = forwardRef((props, ref, isMultiple = true) => {\r\n    debugger;\r\n    const [value, setValue] = useState([]);\r\n    const refInput = useRef(null);\r\n    const location = useLocation();\r\n    //   alert(location.pathname);\r\n    let potentialParallelComponents = [];\r\n    const systemData = useSelector((state) => state.treeData.treeData);\r\n    const taskData = useSelector((state) => state.taskData.taskData);\r\n    const currentShip = useSelector((state) => state.taskData.currentShip);\r\n    const currentTaskName = useSelector((state) => state.taskData.currentTaskName);\r\n    const filteredData = taskData.tasks_data.filter(x => x.ship_name === currentShip && x.task_name === currentTaskName)\r\n    // console.log(taskData)\r\n    // debugger;\r\n    // const userSelection = useSelector(\r\n    //   (state) => state.userSelection.userSelection\r\n    // );\r\n    // const currentSelection = useSelector(\r\n    //   (state) => state.userSelection.currentSelection\r\n    // );\r\n    // const componentsData = useSelector(\r\n    //   (state) => state.userSelection.componentsData\r\n    // );\r\n    // const selectedEquipment = props.data.EquipmentName;\r\n    debugger;\r\n    const selectedEquipmentId = props.data.id;\r\n    \r\n    // potentialParallelComponents = systemData.filter(\r\n    //   (x) => x.name !== selectedEquipment\r\n    // );\r\n  \r\n    const handleChange = (event, newValue) => {\r\n      // debugger;\r\n      setValue(newValue);\r\n    };\r\n  \r\n    // useEffect(() => {\r\n    //   // focus on the input\r\n    //   //setTimeout(() => refInput.current.focus());\r\n    //   console.log(potentialParallelComponents);\r\n    // }, []);\r\n  \r\n    /* Component Editor Lifecycle methods */\r\n    useImperativeHandle(ref, () => {\r\n      return {\r\n        // the final value to send to the grid, on completion of editing\r\n        getValue() {\r\n          debugger;\r\n          //console.log(value);\r\n          let valueStr = [];\r\n          let ids = [];\r\n          // if (location.pathname === \"/system_config/additional_info\") {\r\n          //   value.forEach((element) => {\r\n          //     valueStr = [...valueStr, element.name];\r\n          //   });\r\n          // } else\r\n          props.data.components = []\r\n          value.forEach((element) => {\r\n            debugger;\r\n            ids = [...ids, element.EquipmentId];\r\n            valueStr = [...valueStr, element.name];\r\n            props.data.components.push(element)\r\n          });\r\n          props.setParallelIds(ids);\r\n          // if (location.pathname === \"/system_config/failure_mode\") {\r\n          //   ids = [value.id];\r\n          //   valueStr = [value.name];\r\n          //   props.data[\"rEquipmentId\"] = ids[0];\r\n          // } else {\r\n            \r\n           \r\n          // }\r\n          return valueStr.toString();\r\n        },\r\n        isPopup() {\r\n          return true;\r\n        },\r\n        // Gets called once before editing starts, to give editor a chance to\r\n        // cancel the editing before it even starts.\r\n        isCancelBeforeStart() {\r\n          return false;\r\n        },\r\n  \r\n        // Gets called once when editing is finished (eg if Enter is pressed).\r\n        // If you return true, then the result of the edit will be ignored.\r\n        // isCancelAfterEnd() {\r\n        //     // our editor will reject any value greater than 1000\r\n        //     return value > 1000;\r\n        // }\r\n      };\r\n    });\r\n  \r\n    return (\r\n      // <input type=\"number\"\r\n      //        ref={refInput}\r\n      //        value={value}\r\n      //        onChange={event => setValue(event.target.value)}\r\n      //        style={{width: \"100%\"}}\r\n      // />\r\n      <Autocomplete\r\n        id={selectedEquipmentId}\r\n        options={filteredData[0].task_data}\r\n        //value={value}\r\n        multiple={props.isMultiple}\r\n        onChange={handleChange}\r\n        // groupBy={(option) => option.name}\r\n        getOptionLabel={(option) => option.name}\r\n        style={{ width: 300 }}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            ref={refInput}\r\n            label={props.label}\r\n            variant=\"outlined\"\r\n          />\r\n        )}\r\n      />\r\n    );\r\n  });\r\n  export default RenderMultipleComponent;\r\n  ","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\MissionSlider.js",["809"],"import React from \"react\";\r\nimport styles from './rDashboard.module.css'\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nconst MissionSlider=(props)=>{\r\n    const prev =()=>{\r\n        let index = props.currentMission;\r\n        let length = props.missions.length;\r\n        if(index < 1) {\r\n            index = length - 1;\r\n        }\r\n        else{\r\n            index--;\r\n        }\r\n        props.setMission(index);\r\n    }\r\n    const next =()=>{\r\n        let index = props.currentMission;\r\n        let length = props.missions.length;\r\n        if(index == length - 1) {\r\n            index = 0;\r\n        }\r\n        else{\r\n            index++;\r\n        }\r\n        props.setMission(index);\r\n    }\r\n    return(\r\n        <div className={styles.missionName}>\r\n        <button className={styles.calBack} onClick={()=>prev()}><ArrowBackIcon fontSize=\"inherit\"/></button>\r\n        <div > {props.missions[props.currentMission].name} </div>\r\n        <button className={styles.calBack} onClick={()=>next()}><ArrowForwardIcon fontSize=\"inherit\"/></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MissionSlider;","E:\\NetraB\\netra\\src\\ui\\CustomSnackBar.js",["810","811"],"import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nconst CustomizedSnackbars = (props) => {\r\n  // const classes = useStyles();\r\n  // const [open, setOpen] = React.useState(props.message.showSnackBar);\r\n\r\n  // const handleClick = () => {\r\n  //   setOpen(true);\r\n  // };\r\n\r\n  // const handleClose = (event, reason) => {\r\n  //   if (reason === \"clickaway\") {\r\n  //     return;\r\n  //   }\r\n\r\n  //   setOpen(false);\r\n  // };\r\n\r\n  return (\r\n    <Snackbar\r\n      open={props.message.showSnackBar}\r\n      autoHideDuration={7000}\r\n      onClose={props.onHandleClose}\r\n    >\r\n      <Alert onClose={props.onHandleClose} severity={props.message.severity}>\r\n        {props.message.message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nexport default CustomizedSnackbars;\r\n","E:\\NetraB\\netra\\src\\components\\module\\NewModule.js",["812","813","814","815","816"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Stepper from \"@material-ui/core/Stepper\";\r\nimport Step from \"@material-ui/core/Step\";\r\nimport StepLabel from \"@material-ui/core/StepLabel\";\r\nimport clsx from 'clsx';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport styles from \"./Module_radio.module.css\";\r\n\r\nconst StepperStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    background:'#ebebed',\r\n    borderRadius: '5px',\r\n    height:\"18px\",\r\n    justifyContent:'space-between',\r\n    padding:'15px'\r\n  },\r\n  active: {\r\n    color: '#000',\r\n  }\r\n}));\r\nconst CustomIconStyles = makeStyles({\r\n  root: {\r\n    color: '#eaeaf0',\r\n    display: 'flex',\r\n    height: 22,\r\n    alignItems: 'center',\r\n    padding:'10px',\r\n  },\r\n  active: {\r\n    // position: 'relative',\r\n    // // backgroundColor: '#3ae711',\r\n    // left: '5px',\r\n    // top: '5px',\r\n    // width: '15px',\r\n    // height: '15px',\r\n    // borderRadius:'50%',\r\n    // zIndex: 1,\r\n    // boxShadow: '3px 3px 10px 0px rgba(0,0,0,0.3)',\r\n    height: '25px',\r\n    width: '25px',\r\n    borderRadius:'50%',\r\n    boxShadow: '0px 4px 14px 0px rgba(0,0,0,0.2)',\r\n    backgroundColor: '#ffffff',\r\n  },\r\n  circle: {\r\n    height: '25px',\r\n    width: '25px',\r\n    borderRadius:'50%',\r\n    boxShadow: '0px 4px 14px 0px rgba(0,0,0,0.2)',\r\n    backgroundColor: '#ffffff',\r\n},\r\n  \r\n  completed: {\r\n    position: 'relative',\r\n    backgroundColor: '#00dffe',\r\n    left: '5px',\r\n    top: '5px',\r\n    width: '15px',\r\n    height: '15px',\r\n    borderRadius:'50%',\r\n    zIndex: 1,\r\n    fontSize: 18,\r\n    boxShadow: '3px 3px 10px 0px rgba(0,0,0,0.3)',\r\n  },\r\n});\r\n\r\nfunction CustomIcon(props) {\r\n  const classes = CustomIconStyles();\r\n  const { active, completed } = props;\r\n  debugger;\r\n  return (\r\n    <div\r\n      className={classes.root}\r\n    > \r\n      {completed ? <div className={classes.circle}><div className={classes.completed} /></div> : <div className={classes.circle}><div className={clsx({\r\n        [classes.active]: active,\r\n      })}/></div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getSteps() {\r\n  return [\r\n    \"System Configuration\",\r\n    \"Phase Manager\",\r\n    \"HEP\",\r\n    \"Data Manager\",\r\n    \"Mission Profile\"\r\n  ];\r\n}\r\n\r\nexport default function NewModule() {\r\n  const classes = StepperStyles();\r\n  const [activeStep, setActiveStep] = React.useState(1);\r\n  const steps = getSteps();\r\n\r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n  debugger;\r\n  return (\r\n    <div className={styles.module}>\r\n      <Stepper classes={classes}  activeStep={activeStep}  connector={null}>\r\n        {steps.map((label) => (\r\n          <Step key={label} >\r\n            <StepLabel StepIconComponent={CustomIcon}>{label}</StepLabel>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      {/* <div>\r\n        {activeStep === steps.length ? (\r\n          <div>\r\n            <Typography className={classes.instructions}>\r\n              All steps completed\r\n            </Typography>\r\n            <Button onClick={handleReset}>Reset</Button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <div>\r\n              <Button\r\n                disabled={activeStep === 0}\r\n                onClick={handleBack}\r\n                className={classes.backButton}\r\n              >\r\n                Back\r\n              </Button>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={handleNext}>\r\n                {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\EventCalendar.js",["817","818"],"import { Calendar, momentLocalizer } from 'react-big-calendar'\r\nimport moment from 'moment'\r\nimport 'moment/locale/en-in'\r\nimport styles from './rDashboard.module.css'\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport { ModeCommentTwoTone } from '@material-ui/icons';\r\nconst CustomToolbar = (toolbar) => {\r\n    const goToBack = () => {\r\n      console.log('click')\r\n      toolbar.date.setMonth(toolbar.date.getMonth() - 1);\r\n      toolbar.onNavigate('prev');\r\n    };\r\n  \r\n    const goToNext = () => {\r\n      toolbar.date.setMonth(toolbar.date.getMonth() + 1);\r\n      toolbar.onNavigate('next');\r\n    };\r\n  \r\n    const goToCurrent = () => {\r\n      const now = new Date();\r\n      toolbar.date.setMonth(now.getMonth());\r\n      toolbar.date.setYear(now.getFullYear());\r\n      toolbar.onNavigate('current');\r\n    };\r\n  \r\n    const label = () => {\r\n      const date = moment(toolbar.date);\r\n      return (\r\n        <span><b>{date.format('MMMM')}</b><span> {date.format('YYYY')}</span></span>\r\n      );\r\n    };\r\n  \r\n    return (\r\n      <div style={{display:'flex',justifyContent:'space-around',alignItems:'center'}}>\r\n        \r\n  \r\n        <div >\r\n          <button className={styles.calBack} onClick={goToBack}><ArrowBackIcon fontSize=\"inherit\"/></button>\r\n          <label >{label()}</label>\r\n          <button className={styles.calNext} onClick={goToNext}><ArrowForwardIcon fontSize=\"inherit\"/></button>\r\n        </div>\r\n      </div >\r\n    );\r\n  };\r\n  \r\n  const EventCalendar = (props) => {\r\n    moment.locale(\"en-in\")\r\n    const localizer = momentLocalizer(moment)\r\n    return (\r\n        <Calendar\r\n                className={styles.eventCalendar}\r\n                localizer={localizer}\r\n                style={{ height: \"100%\", width: \"100%\" }}\r\n                toolbar={true}\r\n                events={props.events}\r\n                view=\"month\"\r\n                components={{\r\n                  toolbar: CustomToolbar\r\n                }}\r\n                eventPropGetter={(event, start, end, isSelected) => {\r\n                  let newStyle = {\r\n                    position:'relative',\r\n                    color: 'transparent',\r\n                    borderRadius: \"25px\",\r\n                    border: \"none\",\r\n                    zIndex:'1',\r\n                    opacity:0.5,\r\n                    top:'-85%',\r\n                    height:\"100%\"\r\n                  };\r\n\r\n                  if (event.status === \"working\") {\r\n                    newStyle.backgroundColor = \"#8af6ad\";\r\n                  }\r\n                  if (event.status === \"down\") {\r\n                    newStyle.backgroundColor = \"#ff8788\";\r\n                  }\r\n                  if (event.status === \"maintenance\") {\r\n                    newStyle.backgroundColor = \"#f3f682\";\r\n                  }\r\n\r\n                  return {\r\n                    className: \"\",\r\n                    style: newStyle\r\n                  };\r\n                }}\r\n              />\r\n    );\r\n  };\r\n  export default EventCalendar","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\DashboardData.js",[],"E:\\NetraB\\netra\\src\\components\\slider\\NewSlider.js",[],"E:\\NetraB\\netra\\src\\pages\\systen_configuration\\dutyCycle\\dutyCycle.js",["819","820","821"],"import { Button } from \"@material-ui/core\";\r\nimport CustomSelect from \"../../../ui/Form/CustomSelect\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport styles from \"../SystemConfiguration.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport {v4 as uuid} from 'uuid';\r\nconst DutyCycle = (props) => {\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const rowData = systemData.map((element, index) => {\r\n    return {\r\n      Component: element.name,\r\n      ComponentId:element.id,\r\n      id:uuid(),\r\n      DutyCycle: 1,\r\n    };\r\n  });\r\n\r\n  const DCcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"Component\"\r\n      headerName=\"Component\"\r\n      width={500}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"DutyCycle\"\r\n      headerName=\"Duty Cycle\"\r\n      type=\"number\"\r\n      width={500}\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <div className={styles.systemTable}>\r\n      <Table\r\n        columnDefs={DCcolumnDefs}\r\n        rowData={rowData}\r\n        tableUpdate={updateFinalRowData}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default DutyCycle;\r\n","E:\\NetraB\\netra\\src\\ui\\userSelection\\userSelection.js",["822","823","824","825"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\nimport { components } from \"./userSelectionData\";\r\nimport CustomSelect from \"../Form/CustomSelect\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { userActions } from \"../../store/ApplicationVariable\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\n\r\nconst SelectStyles = makeStyles({\r\n  spacing: {\r\n    marginLeft: \"10px\",\r\n  },\r\n});\r\n\r\nfunction UserSelection(props) {\r\n  UserSelection.defaultProps = {\r\n    alignment:\"horizontal\",\r\n    inputWidth:\"200px\"\r\n  }\r\n  const [userSelectionData, setUserSelectionData] = useState([]);\r\n  const [userSelectionEqData, setUserSelectionEqData] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const customSelectData = useSelector(\r\n    (state) => state.userSelection.userSelection\r\n  );\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  useEffect(() => {\r\n    fetch(\"/fetch_user_selection\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        const userData = data[\"data\"];\r\n        const eqData = data[\"eqData\"];\r\n        const shipName = userData.map((x) => x.shipName);\r\n        const components = data[\"uniq_eq_data\"];\r\n        setUserSelectionData(userData);\r\n        setUserSelectionEqData(eqData);\r\n        dispatch(\r\n          userActions.onFirstLoad({\r\n            filteredData: { shipName: shipName },\r\n            componentsData: components,\r\n          })\r\n        );\r\n      });\r\n  }, []);\r\n\r\n  const handleShipNameChange = (e) => {\r\n    const shipName = e.currentTarget.innerText;\r\n    const category = userSelectionData\r\n      .filter((x) => x.shipName === shipName)\r\n      .map((x) => x.shipCategory);\r\n    const shipClass = userSelectionData\r\n      .filter((x) => x.shipName === shipName)\r\n      .map((x) => x.shipClass);\r\n    const command = userSelectionData\r\n      .filter((x) => x.shipName === shipName)\r\n      .map((x) => x.command);\r\n    const dept = userSelectionData\r\n      .filter((x) => x.shipName === shipName)\r\n      .map((x) => x.department);\r\n    const d = {\r\n      shipCategory: category,\r\n      shipClass: shipClass,\r\n      command: command,\r\n      department: dept,\r\n    };\r\n    dispatch(\r\n      userActions.onChangeLoad({\r\n        filteredData: d,\r\n        currentShipName: { shipName: shipName },\r\n      })\r\n    );\r\n  };\r\n\r\n  const onShipCategoryChange = (e) => {\r\n    let data = e.currentTarget.innerText;\r\n    data = { shipCategory: data };\r\n    dispatch(userActions.onChangeCurrentSelection({ selectedData: data }));\r\n  };\r\n\r\n  const onShipClassChange = (e) => {\r\n    let data = e.currentTarget.innerText;\r\n    data = { shipClass: data };\r\n    dispatch(userActions.onChangeCurrentSelection({ selectedData: data }));\r\n  };\r\n\r\n  const onCommandChange = (e) => {\r\n    let data = e.currentTarget.innerText;\r\n    data = { command: data };\r\n    dispatch(userActions.onChangeCurrentSelection({ selectedData: data }));\r\n  };\r\n\r\n  const onDepartmentChange = (e) => {\r\n    let data = e.currentTarget.innerText;\r\n    let eqData = userSelectionEqData\r\n      .filter(\r\n        (x) =>\r\n          x.command === currentSelection.command &&\r\n          x.department === data &&\r\n          x.shipName === currentSelection.shipName &&\r\n          x.shipCategory === currentSelection.shipCategory &&\r\n          x.shipName === currentSelection.shipName &&\r\n          x.shipClass === currentSelection.shipClass\r\n      )\r\n      .map((x) => x.equipmentName);\r\n    data = { department: data };\r\n    eqData = { equipmentName: eqData };\r\n    dispatch(userActions.onChangeCurrentSelection({ selectedData: data }));\r\n    dispatch(userActions.populateEqName({ filteredData: eqData }));\r\n  };\r\n  const onEquipmentChange = (e) => {\r\n    let data = e.currentTarget.innerText;\r\n    data = { equipmentName: data };\r\n    dispatch(userActions.onChangeCurrentSelection({ selectedData: data }));\r\n  };\r\n  const onEquipmentCodeChange = (e) => {\r\n    let data = e.currentTarget.innerText;\r\n    data = { equipmentCode: data };\r\n    dispatch(userActions.onChangeCurrentSelection({ selectedData: data }));\r\n  };\r\n  const SelectClasses = SelectStyles();\r\n  let colwidth=4\r\n  props.alignment===\"vertical\"?colwidth=12:colwidth=4\r\n  \r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={colwidth}>\r\n        <div className={SelectClasses.spacing}>\r\n          <CustomSelect\r\n            style={{ width: props.inputWidth }}\r\n            id=\"ship-name\"\r\n            label=\"Ship Name\"\r\n            fields={customSelectData[\"shipName\"]}\r\n            onChange={handleShipNameChange}\r\n            value={currentSelection[\"shipName\"]}\r\n          />\r\n        </div>\r\n      </Grid>\r\n      <Grid item xs={colwidth}>\r\n        <div className={SelectClasses.spacing}>\r\n          <CustomSelect\r\n            style={{ width: props.inputWidth }}\r\n            id=\"ship-category\"\r\n            label=\"Ship Category\"\r\n            fields={customSelectData[\"shipCategory\"]}\r\n            onChange={onShipCategoryChange}\r\n            value={currentSelection[\"shipCategory\"]}\r\n\r\n          />\r\n        </div>\r\n      </Grid>\r\n      <Grid item xs={colwidth}>\r\n        <div className={SelectClasses.spacing}>\r\n          <CustomSelect\r\n            style={{ width: props.inputWidth }}\r\n            id=\"ship-class\"\r\n            label=\"Ship Class\"\r\n            fields={customSelectData[\"shipClass\"]}\r\n            onChange={onShipClassChange}\r\n            value={currentSelection[\"shipClass\"]}\r\n\r\n          />\r\n        </div>\r\n      </Grid>\r\n      <Grid item xs={colwidth}>\r\n        <div className={SelectClasses.spacing}>\r\n          <CustomSelect\r\n            style={{ width: props.inputWidth }}\r\n            id=\"command\"\r\n            label=\"Command\"\r\n            fields={customSelectData[\"command\"]}\r\n            onChange={onCommandChange}\r\n            value={currentSelection[\"command\"]}\r\n\r\n          />\r\n        </div>\r\n      </Grid>\r\n      <Grid item xs={colwidth}>\r\n        <div className={SelectClasses.spacing}>\r\n          <CustomSelect\r\n            style={{ width: props.inputWidth }}\r\n            id=\"department\"\r\n            label=\"Department\"\r\n            fields={customSelectData[\"department\"]}\r\n            onChange={onDepartmentChange}\r\n            value={currentSelection[\"department\"]}\r\n\r\n          />\r\n        </div>\r\n      </Grid>\r\n      <Route\r\n        path={[\r\n          \"/system_config/redundancy_info\",\r\n          \"/system_config/maintenance_info\",\r\n          \"/system_config/failure_mode\",\r\n          \"/system_config/duty_cycle\",\r\n          \"/system_config/\",\r\n          \"/data_manager/\",\r\n          \"/phase_manager/\",\r\n          \"/HEP/\",\r\n          \"/maintenance_allocation/\",\r\n          \"/add_system_doc/\",\r\n          \"/rul\"\r\n          \r\n        ]}\r\n      >\r\n        <Grid item xs={colwidth}>\r\n          <div className={SelectClasses.spacing}>\r\n            <CustomSelect\r\n              style={{ width: props.inputWidth}}\r\n              id=\"equipment-name\"\r\n              label=\"Equipment Name\"\r\n              fields={customSelectData[\"equipmentName\"]}\r\n              onChange={onEquipmentChange}\r\n              value={currentSelection[\"equipmentName\"]}\r\n            />\r\n          </div>\r\n        </Grid>\r\n      </Route>\r\n    </Grid>\r\n  );\r\n}\r\nexport default UserSelection;\r\n","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\redundancy\\redundancy.js",["826","827","828","829","830","831","832"],"import {\r\n  useEffect,\r\n  useState,\r\n  useImperativeHandle,\r\n  useRef,\r\n  forwardRef,\r\n} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport CustomSelect from \"../../../ui/Form/CustomSelect\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport styles from \"../SystemConfiguration.module.css\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport RenderParallelComponent from \"./RenderParallelComponent\";\r\nconst RedundancyInfo = (props) => {\r\n  // const [rows, setRows] = useState([]);\r\n  // useEffect(() => {\r\n  //   fetch(\"/home\", {\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/json\",\r\n  //       Accept: \"application/json\",\r\n  //     },\r\n  //   })\r\n  //     .then((res) => {\r\n  //       console.log(res);\r\n  //       return res.json();\r\n  //     })\r\n  //     .then((data) => {\r\n  //       setRows(data);\r\n  //     });\r\n  // }, [setRows]);\r\n  const [gridApi, setGridApi] = useState(null);\r\n  let ParallelIds = [];\r\n\r\n  const setParallelIds = (d) => {\r\n    ParallelIds = d;\r\n  };\r\n\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n\r\n  const currentSelectedSystem = useSelector(\r\n    (state) => state.userSelection.currentSelection.equipmentName\r\n  );\r\n\r\n  const RIDemo = [\r\n    <AgGridColumn field=\"eqId\" hide={true} />,\r\n    <AgGridColumn\r\n      field=\"EquipmentName\"\r\n      headerName=\"Equipment name\"\r\n      headerTooltip=\"Equipment name\"\r\n      width=\"220\"\r\n    />,\r\n    <AgGridColumn\r\n      field=\"EquipmentParentName\"\r\n      headerName=\"Equipment Parent Name\"\r\n      headerTooltip=\"Equipment Parent Name\"\r\n      width={300}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"ParallelComponent\"\r\n      headerName=\"Parallel Component (Component - Parent Name)\"\r\n      headerTooltip=\"Parallel Component (Component - Parent Name)\"\r\n      // cellEditor=\"agSelectCellEditor\"\r\n      cellEditorFramework={RenderParallelComponent}\r\n      cellEditorParams={{\r\n        setParallelIds: setParallelIds,\r\n        label: \"Select Parallel Equipments!\",\r\n        isMultiple: true,\r\n      }}\r\n      //onCellClicked={onCellChanged}\r\n      width=\"220\"\r\n      editable={true}\r\n    />,\r\n    // <AgGridColumn\r\n    //   field=\"ParallelComponent\"\r\n    //   headerName=\"Parallel Component (Component - Parent Name)\"\r\n    //   cellEditor=\"agSelectCellEditor\"\r\n    //   // cellEditorParams={renderParallelComponent}\r\n    //   // onCellValueChanged={onCellChanged}\r\n    //   cellRendererFramework={MultipleSelect}\r\n    //   width=\"220\"\r\n    //   editable={true}\r\n    // />,\r\n    <AgGridColumn\r\n      field=\"RedundancyType\"\r\n      headerName=\"Redundancy Type\"\r\n      headerTooltip=\"Redundancy Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\r\n          \"\",\r\n          \"K out-of N - Active Redundancy\",\r\n          \"K out-of N - Inactive Redundancy\",\r\n        ],\r\n      }}\r\n      width=\"220\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"K\"\r\n      headerName=\"K\"\r\n      headerTooltip=\"K\"\r\n      type=\"number\"\r\n      width={100}\r\n      editable={true}\r\n    />,\r\n  ];\r\n\r\n  const rData = systemData.map((element, index) => {\r\n    return {\r\n      eqId: element.id,\r\n      EquipmentName: element.name,\r\n      componentId: element.id,\r\n      systemName: currentSelectedSystem,\r\n      id: uuid(),\r\n      EquipmentParentName: element.parentName,\r\n      ParallelComponent: \"\",\r\n      RedundancyType: \"K out-of N - Active Redundancy\",\r\n      K: 1,\r\n      // hK: 1,\r\n      // elhK: 0,\r\n      // cK: 0,\r\n      // dsK: 0,\r\n      // asK: 0,\r\n      parallelComponentIds: [],\r\n      N: 0,\r\n    };\r\n  });\r\n\r\n  const updateFinalRowData = (allRows, id) => {\r\n    if (id) {\r\n      allRows.filter((x) => x.id === id)[0].parallelComponentIds = ParallelIds;\r\n      allRows.filter((x) => x.id === id)[0].N = ParallelIds.length + 1;\r\n    }\r\n    debugger;\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <div className={styles.systemTable}>\r\n      <Table\r\n        columnDefs={RIDemo}\r\n        rowData={rData}\r\n        tableUpdate={updateFinalRowData}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RedundancyInfo;\r\n","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\maintenanceInfo\\maintenanceInfo.js",["833","834","835","836","837","838"],"import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport CustomSelect from \"../../../ui/Form/CustomSelect\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport styles from \"../SystemConfiguration.module.css\";\r\nimport { MIrowData } from \"../SystemConfigurationTable.js\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst MaintenanceInfo = (props) => {\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const MaintColumns = [\r\n    <AgGridColumn\r\n      field=\"EquipmentName\"\r\n      headerName=\"Equipment name\"\r\n      headerTooltip=\"Equipment name\"\r\n      width={150}\r\n      editable={false}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"RepairType\"\r\n      headerName=\"Repair Type\"\r\n      headerTooltip=\"Repair Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"Replaceable\", \"Repairable\"],\r\n      }}\r\n      width={160}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"PreventiveMaintenaceApplicable\"\r\n      headerName=\"Preventive Maintenace Applicable\"\r\n      headerTooltip=\"Preventive Maintenace Applicable\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"No\", \"Yes\"] }}\r\n      width={200}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"PreventiveMaintenaceInterval\"\r\n      headerName=\"Preventive Maintenace Interval (hrs)\"\r\n      headerTooltip=\"Preventive Maintenace Interval (hrs)\"\r\n      type=\"number\"\r\n      width={200}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"ComponentsReplaced\"\r\n      headerName=\"Can be Replaced Ship Staff\"\r\n      headerTooltip=\"Can be Replaced Ship Staff\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"No\", \"Yes\"] }}\r\n      width={200}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"ConditionMonitoring\"\r\n      headerName=\"Is System Parameter's Recorded\"\r\n      headerTooltip=\"Is System Parameter's Recorded\"\r\n      width={200}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"No\", \"Yes\"] }}\r\n      editable={true}\r\n    />,\r\n    // <AgGridColumn\r\n    //   field=\"ComponentCriticality\"\r\n    //   headerName=\"Criticality\"\r\n    //   width={350}\r\n    //   cellEditor=\"agSelectCellEditor\"\r\n    //   cellEditorParams={{\r\n    //     values: [\r\n    //       \"\",\r\n    //       \"Failure leads to hazard or complete loss of functionality.\",\r\n    //       \"Failure does not lead to hazard but causes partial loss of functionality.\",\r\n    //       \"Failure does not lead hazard or loss of functionality but significant loss in efficiency.\",\r\n    //       \"Failure does not lead to hazard or loss of functionality or loss of efficiency but causes rapid deterioration of some other critical component.\",\r\n    //       \"Failure does not lead to hazard or loss of functionality but minor loss in efficiency.\",\r\n    //       \"Failure does not lead to hazard or loss of functionality but causes rapid deterioration of some other non-critical component.\",\r\n    //       \"Failure does not lead to hazard or loss of functionality or loss of efficiency but leads to significant inconvenience.\",\r\n    //       \"Failure does not lead to hazard or loss of functionality or loss of efficiency but leads to minor inconvenience.\",\r\n    //     ],\r\n    //   }}\r\n    //   editable={true}\r\n    // />,\r\n  ];\r\n\r\n  const rowData = systemData\r\n    // .filter((x) => x.lmu === 1)\r\n    .map((element) => {\r\n      return {\r\n        id: uuid(),\r\n        component_id: element.id,\r\n        EquipmentName: element.name,\r\n        RepairType: element.repairType,\r\n        PreventiveMaintenaceApplicable: \"No\",\r\n        PreventiveMaintenaceInterval: 0,\r\n        ComponentsReplaced: \"No\",\r\n        ConditionMonitoring: \"No\",\r\n      };\r\n    });\r\n  const updateFinalRowData = (allRows) => {\r\n    debugger\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <div className={styles.systemTable}>\r\n      <Table\r\n        columnDefs={MaintColumns}\r\n        rowData={rowData}\r\n        tableUpdate={updateFinalRowData}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaintenanceInfo;\r\n","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\failureMode\\failureMode.js",["839","840"],"import { Button } from \"@material-ui/core\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\n// import CustomSelect from \"../../../ui/Form/CustomSelect\";\r\n// import Table from \"../../../ui/Table/Table\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\"\r\nimport styles from \"../SystemConfiguration.module.css\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useEffect, useState } from \"react\";\r\n// import { treeDataActions } from \"../../../store/TreeDataStore\";\r\n// import RenderParallelComponent from \"../redundancy/RenderParallelComponent\";\r\nimport EquipmentName from \"./EquipmentName\";\r\nconst FailureMode = (props) => {\r\n  const failureModesData = useSelector((state) => state.treeData.failureModes);\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [rowData, setRowData] = useState([]); // State to hold the table's row data\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const tableRowData = failureModesData?.map((failureMode) => ({\r\n      EquipmentName: systemData[0].name,\r\n      eqId: props.matchingId,\r\n      id: uuid(),\r\n      fixFailureMode: failureMode.failure_mode,\r\n      // You can add more properties based on your table columnDefs.\r\n    }));\r\n    setRowData(tableRowData);\r\n  }, []);\r\n\r\n\r\n\r\n  let selectedOptionId = \"\";\r\n  let finalDataTableData = [];\r\n  const setIdToDropdownOption = (id) => {\r\n    selectedOptionId = id;\r\n  };\r\n  console.log(\"rowDATA\",rowData);\r\n \r\n  const FMcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"EquipmentName\"\r\n      headerName=\"Equipment Name\"\r\n      headerTooltip=\"Equipment Name\"\r\n      cellEditorFramework={EquipmentName}\r\n      minWidth={100}\r\n      editable={true}\r\n      // keyCreator={{ values: systemData.map((x) => x.id) }}\r\n      cellEditorParams={{ setId: setIdToDropdownOption }}\r\n      // cellEditorParams={{ values: systemData.map((x) => x.name) }}\r\n      checkboxSelection={true}\r\n      // cellEditor=\"agSelectCellEditor\"\r\n    />,\r\n    <AgGridColumn\r\n      field=\"fixFailureMode\"\r\n      headerName=\"Failure Mode\"\r\n      headerTooltip=\"Failure Mode\"\r\n      width={300}\r\n      editable={true}\r\n      // cellEditor=\"agSelectCellEditor\"\r\n    />\r\n  ];\r\n\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        EquipmentName: systemData[0].name,\r\n        eqId: props.matchingId,\r\n        id: uuid(),\r\n        fixFailureMode: \"\",\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    // console.log(selectedRows);\r\n  };\r\n  const updateFinalRowData = (allRows, id) => {\r\n    // debugger;\r\n    finalDataTableData = allRows;\r\n    if (id) {\r\n      console.log(finalDataTableData[0].id, \"flag\")\r\n      finalDataTableData.filter((x) => x.id === id)[0][\"eqId\"] = props.matchingId;\r\n    }\r\n    props.tableUpdate(finalDataTableData);\r\n  };\r\n  return (\r\n    <div className={styles.systemTable}>\r\n      <Table\r\n        columnDefs={FMcolumnDefs}\r\n        rowData={rowData}\r\n        tableUpdate={updateFinalRowData}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n      />\r\n      <div className={styles.tableFooter}>\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<AddIcon />}\r\n              color=\"secondary\"\r\n              onClick={() => AddRow()}\r\n            >\r\n              Add Row\r\n            </Button>\r\n            <Button\r\n              style={{ marginLeft: 10 }}\r\n              variant=\"contained\"\r\n              startIcon={<DeleteIcon />}\r\n              color=\"secondary\"\r\n              onClick={()=>deleteRows()}\r\n            >\r\n              Delete Rows\r\n            </Button>\r\n          </div>\r\n    </div>\r\n  );\r\n};\r\nexport default FailureMode;\r\n","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\additionalInfo\\additionalInfo.js",["841","842","843","844","845","846"],"import { Button, unstable_createMuiStrictModeTheme } from \"@material-ui/core\";\r\nimport CustomSelect from \"../../../ui/Form/CustomSelect\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport styles from \"../SystemConfiguration.module.css\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport RenderParallelComponent from \"../redundancy/RenderParallelComponent\";\r\nconst AdditionalInfo = (props) => {\r\n  let systemData = useSelector((state) => state.treeData.treeData);\r\n  systemData = systemData.filter((x) => x.parentId === null);\r\n  let ParallelIds = [];\r\n\r\n  const setParallelIds = (d) => {\r\n    ParallelIds = d;\r\n  };\r\n  const rowData = systemData.map((element, index) => {\r\n    return {\r\n      id: uuid(),\r\n      component_id: element.id,\r\n      installation_date: \"10/08/2021\",\r\n      EquipmentName: element.name,\r\n      AverageRunning: \"\",\r\n      Unit: \"\",\r\n      InstallationDate: \"\",\r\n      maintDataAvail: \"Component Level\",\r\n      hK: 1,\r\n      elhK: 1,\r\n      cK: 1,\r\n      dsK: 1,\r\n      asK: 1,\r\n      parallelComponentIds: [],\r\n    };\r\n  });\r\n\r\n  const AIcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"EquipmentName\"\r\n      headerName=\"Equipment Name\"\r\n      headerTooltip=\"Equipment Name\"\r\n      width={150}\r\n      // editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"installation_date\"\r\n      headerName=\"Installation Date\"\r\n      headerTooltip=\"Date\"\r\n      width={150}\r\n      cellEditor=\"datePicker\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"AverageRunning\"\r\n      headerName=\"Default Avg. Monthly Utilization\"\r\n      headerTooltip=\"Default Avg. Monthly Utilization\"\r\n      width={150}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Unit\"\r\n      headerName=\"Unit\"\r\n      headerTooltip=\"Unit\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"Days\", \"Hours\", \"Cycles\"],\r\n      }}\r\n      width={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"maintDataAvail\"\r\n      headerName=\"Maintenance Data Availability\"\r\n      headerTooltip=\"Maintenance Data Availability\"\r\n      width={250}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      editable={true}\r\n      cellEditorParams={{\r\n        values: [\"System Level\", \"Component Level\"],\r\n      }}\r\n    />,\r\n    // <AgGridColumn\r\n    //   field=\"hK\"\r\n    //   headerName=\"Harbour-K\"\r\n    //   headerTooltip=\"Harbour-K\"\r\n    //   type=\"number\"\r\n    //   width=\"100\"\r\n    //   editable={true}\r\n    // />,\r\n    // <AgGridColumn\r\n    //   field=\"elhK\"\r\n    //   headerName=\"Entry Leaving Harbour-K\"\r\n    //   headerTooltip=\"Entry Leaving Harbour-K\"\r\n    //   type=\"number\"\r\n    //   width=\"100\"\r\n    //   editable={true}\r\n    // />,\r\n    // <AgGridColumn\r\n    //   field=\"cK\"\r\n    //   headerName=\"Cruise-K\"\r\n    //   headerTooltip=\"Cruise-K\"\r\n    //   type=\"number\"\r\n    //   width=\"100\"\r\n    //   editable={true}\r\n    // />,\r\n    // <AgGridColumn\r\n    //   field=\"dsK\"\r\n    //   headerName=\"Defence Station-K\"\r\n    //   headerTooltip=\"Defence Station-K\"\r\n    //   type=\"number\"\r\n    //   width=\"100\"\r\n    //   editable={true}\r\n    // />,\r\n    // <AgGridColumn\r\n    //   field=\"asK\"\r\n    //   headerName=\"Action Station-K\"\r\n    //   headerTooltip=\"Action Station-K\"\r\n    //   type=\"number\"\r\n    //   width=\"100\"\r\n    //   editable={true}\r\n    // />,\r\n    // <AgGridColumn\r\n    //   field=\"parallelC\"\r\n    //   headerName=\"Select Parallel\"\r\n    //   headerTooltip=\"Select Parallel\"\r\n    //   type=\"number\"\r\n    //   width=\"100\"\r\n    //   cellEditorFramework={RenderParallelComponent}\r\n    //   cellEditorParams={{\r\n    //     setParallelIds: setParallelIds,\r\n    //     label: \"Select Parallel Components\",\r\n    //     isMultiple: true,\r\n    //   }}\r\n    //   editable={true}\r\n    // />,\r\n  ];\r\n  const updateFinalRowData = (allRows, id) => {\r\n    if (id) {\r\n      allRows.filter((x) => x.id === id)[0].parallelComponentIds = ParallelIds;\r\n      allRows.filter((x) => x.id === id)[0].N = ParallelIds.length + 1;\r\n    }\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <div className={styles.systemTable}>\r\n      <Table\r\n        columnDefs={AIcolumnDefs}\r\n        rowData={rowData}\r\n        tableUpdate={updateFinalRowData}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default AdditionalInfo;\r\n","E:\\NetraB\\netra\\src\\pages\\Phase_Manager\\Home\\Home.js",["847"],"import { AgGridColumn } from \"ag-grid-react\";\r\nimport { Fragment } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styles from \"../Phasemanager.module.css\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst PhaseManagerHome = (props) => {\r\n  const phases = useSelector((state) => state.phase.phase);\r\n\r\n  const pRow = phases.map((x) => {\r\n    return {\r\n      id: x.id,\r\n      Description: x.Description,\r\n      LowerBound: x.LowerBound,\r\n      MeasurementType: x.MeasurementType,\r\n      PhaseName: x.PhaseName,\r\n      PhaseRange: x.PhaseRange,\r\n      Status: x.Status,\r\n      Unit: x.Unit,\r\n      UpperBound: x.UpperBound,\r\n    };\r\n  });\r\n  // const pRow = [\r\n  //   {\r\n  //     Description: \"Description\",\r\n  //     LowerBound: 0,\r\n  //     MeasurementType: \"Quantitative\",\r\n  //     PhaseName: \"Load\",\r\n  //     PhaseRange: \"L1\",\r\n  //     Status: \"\",\r\n  //     Unit: \"Unit\",\r\n  //     UpperBound: 50,\r\n  //   },\r\n  //   {\r\n  //     Description: \"Description\",\r\n  //     LowerBound: 51,\r\n  //     MeasurementType: \"Quantitative\",\r\n  //     PhaseName: \"Load\",\r\n  //     PhaseRange: \"L2\",\r\n  //     Status: \"\",\r\n  //     Unit: \"Unit\",\r\n  //     UpperBound: 75,\r\n  //   },\r\n  // ];\r\n  const MPcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"PhaseName\"\r\n      headerName=\"Phase Parameter name\"\r\n      headerTooltip=\"Phase Parameter name\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"MeasurementType\"\r\n      headerName=\"Measurement Type\"\r\n      headerTooltip=\"Measurement Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"Qualitative\", \"Quantitative\"] }}\r\n      minWidth={140}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"LowerBound\"\r\n      headerName=\"Lower Bound\"\r\n      headerTooltip=\"Lower Bound\"\r\n      type=\"number\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"UpperBound\"\r\n      headerName=\"Upper Bound\"\r\n      headerTooltip=\"Upper Bound\"\r\n      type=\"number\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    // <AgGridColumn\r\n    //   field=\"Status\"\r\n    //   headerName=\"Status\"\r\n    //   minWidth={100}\r\n    //   editable={true}\r\n    // />,\r\n    <AgGridColumn\r\n      field=\"PhaseRange\"\r\n      headerName=\"PhaseRange\"\r\n      headerTooltip=\"Phase Range\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Unit\"\r\n      headerName=\"Unit\"\r\n      headerTooltip=\"Unit\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"Km/hr\", \"M/hr\"] }}\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Description\"\r\n      headerName=\"Description\"\r\n      headerTooltip=\"Description\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <div className={styles.phaseTable}>\r\n        <Table\r\n          columnDefs={MPcolumnDefs}\r\n          rowData={pRow}\r\n          tableUpdate={updateFinalRowData}\r\n          setGrid={props.setGridApi}\r\n          gridApi={props.gridApi}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default PhaseManagerHome;\r\n","E:\\NetraB\\netra\\src\\ui\\Table\\DataManagerTable.js",["848","849","850","851"],"import React, { useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport \"./Table.css\";\r\nimport ReactDom from \"react-dom\";\r\nimport { Button, makeStyles, Slider, TextField } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\n// function getDatePicker() {\r\n//   function Datepicker() {}\r\n//   Datepicker.prototype.init = function (params) {\r\n//     this.eInput = document.createElement(\"input\");\r\n//     this.eInput.value = params.value;\r\n//     this.eInput.classList.add(\"ag-input\");\r\n//     this.eInput.style.height = \"100%\";\r\n//     $(this.eInput).datepicker({ dateFormat: \"dd/mm/yy\" });\r\n//     console.log(params);\r\n//   };\r\n//   Datepicker.prototype.getGui = function () {\r\n//     return this.eInput;\r\n//   };\r\n//   Datepicker.prototype.afterGuiAttached = function () {\r\n//     this.eInput.focus();\r\n//     this.eInput.select();\r\n//   };\r\n//   Datepicker.prototype.getValue = function () {\r\n//     return this.eInput.value;\r\n//   };\r\n//   Datepicker.prototype.destroy = function () {};\r\n//   Datepicker.prototype.isPopup = function () {\r\n//     return false;\r\n//   };\r\n//   return Datepicker;\r\n// }\r\n\r\nconst useStyles = makeStyles({\r\n  slider: {\r\n    padding: \"22px 0px\",\r\n  },\r\n  sliderTrack: {\r\n    height: 5,\r\n  },\r\n});\r\n\r\nexport const getDatePicker = () => {\r\n  // debugger;\r\n  const fillZeros = (a) => {\r\n    return Number(a) < 10 ? \"0\" + a : a;\r\n  };\r\n  const monthNames = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const getFormattedDateOutput = (dateString) => {\r\n    const dateParse = new Date(dateString);\r\n    const dd = dateParse.getDate();\r\n    const mm = dateParse.getMonth() + 1; //January is 0!\r\n    const yyyy = dateParse.getFullYear();\r\n    // console.log(dateString, dateParse);\r\n    return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n  };\r\n  function Datepicker() {}\r\n  Datepicker.prototype.init = function (params) {\r\n    this.textInput = React.createRef();\r\n    const getFormattedDateMaterial = (dateString) => {\r\n      const dateParse = new Date(\r\n        dateString.split(\"/\")[2] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[1] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[0]\r\n      );\r\n      const dd = dateParse.getDate();\r\n      const mm = dateParse.getMonth() + 1; //January is 0!\r\n      const yyyy = dateParse.getFullYear();\r\n      console.log(dateString, dateParse);\r\n      return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n    };\r\n    const eInput = React.createElement(TextField, {\r\n      type: \"date\",\r\n      defaultValue: getFormattedDateMaterial(params.value),\r\n      ref: this.textInput,\r\n      style: { width: \"95%\" },\r\n    });\r\n    this.div = document.createElement(\"div\");\r\n    this.div.className = \"ag-cell-parent-append\";\r\n    ReactDom.render(eInput, this.div);\r\n  };\r\n  Datepicker.prototype.getGui = function () {\r\n    return this.div;\r\n  };\r\n  Datepicker.prototype.afterGuiAttached = function () {\r\n    this.textInput.current.focus();\r\n  };\r\n  Datepicker.prototype.getValue = function () {\r\n    return getFormattedDateOutput(\r\n      this.textInput.current.querySelector(\"input\").value\r\n    );\r\n  };\r\n  Datepicker.prototype.destroy = function () {};\r\n  Datepicker.prototype.isPopup = function () {\r\n    return false;\r\n  };\r\n  return Datepicker;\r\n};\r\n\r\nconst getMonthPicker = () => {\r\n  const fillZeros = (a) => {\r\n    return Number(a) < 10 ? \"0\" + a : a;\r\n  };\r\n  const monthNames = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const getFormattedDateOutput = (dateString) => {\r\n    const dateParse = new Date(dateString);\r\n    const dd = dateParse.getDate();\r\n    const mm = dateParse.getMonth(); //January is 0!\r\n    const yyyy = dateParse.getFullYear();\r\n    // console.log(dateString, dateParse);\r\n    return monthNames[mm] + \"/\" + yyyy;\r\n  };\r\n  function Monthpicker() {}\r\n  Monthpicker.prototype.init = function (params) {\r\n    this.textInput = React.createRef();\r\n    const getFormattedDateMaterial = (dateString) => {\r\n      const dateParse = new Date(\r\n        dateString.split(\"/\")[2] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[1] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[0]\r\n      );\r\n      const dd = dateParse.getDate();\r\n      const mm = dateParse.getMonth() + 1; //January is 0!\r\n      const yyyy = dateParse.getFullYear();\r\n      console.log(dateString, dateParse);\r\n      return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n    };\r\n    const eInput = React.createElement(TextField, {\r\n      type: \"month\",\r\n      defaultValue: getFormattedDateMaterial(params.value),\r\n      ref: this.textInput,\r\n      style: { width: \"95%\" },\r\n    });\r\n    this.div = document.createElement(\"div\");\r\n    this.div.className = \"ag-cell-parent-append\";\r\n    ReactDom.render(eInput, this.div);\r\n  };\r\n  Monthpicker.prototype.getGui = function () {\r\n    return this.div;\r\n  };\r\n  Monthpicker.prototype.afterGuiAttached = function () {\r\n    this.textInput.current.focus();\r\n  };\r\n  Monthpicker.prototype.getValue = function () {\r\n    return getFormattedDateOutput(\r\n      this.textInput.current.querySelector(\"input\").value\r\n    );\r\n  };\r\n  Monthpicker.prototype.destroy = function () {};\r\n  Monthpicker.prototype.isPopup = function () {\r\n    return false;\r\n  };\r\n  return Monthpicker;\r\n};\r\n\r\nconst DataManagerTable = (props) => {\r\n  console.log(\"props\",props);\r\n  const location = useLocation();\r\n  const tableHeight = props.tableSize ? props.tableSize : 400\r\n  // const [gridApi, setGridApi] = useState(null);\r\n  const Sliderclasses = useStyles();\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  const onGridReady = (params) => {\r\n    props.setGrid(params.api);\r\n    props.setGrid(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n\r\n  const onFirstDataRendered = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n    try {\r\n      const allRowData = [];\r\n      props.gridApi.forEachNode((node) => allRowData.push(node.data));\r\n      props.tableUpdate(allRowData);\r\n      console.log(\"hiii\",allRowData)\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  const onGridSizeChanged = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n\r\n  const maintenanceDataCheck = (params) => {\r\n    console.log(params);\r\n    const colId = params.column.getId();\r\n\r\n    if (colId === \"MaintenanceType\") {\r\n      if (params.node.data.MaintenanceType === \"Replaced\") {\r\n        params.node.setDataValue(\"ReplaceType\", null);\r\n      } else {\r\n        params.node.setDataValue(\"ReplaceType\", \"NA\");\r\n      }\r\n    }\r\n    if (colId === \"ReplaceType\") {\r\n      if (params.node.data.ReplaceType === \"Cannibalised\") {\r\n        params.node.setDataValue(\"CannibalisedAge\", null);\r\n      } else {\r\n        params.node.setDataValue(\"CannibalisedAge\", \"NA\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const saveModifiedRows = (params) => {\r\n    // console.log(params);\r\n    maintenanceDataCheck(params);\r\n    let currentlocation = location.pathname;\r\n    try {\r\n      let selectedId = \"\";\r\n      if (currentlocation === \"/data_manager/maintenance_data\") {\r\n        if (params.column.colId === \"LMU\") {\r\n          selectedId = params.data.id;\r\n          const allRowData = [];\r\n          props.gridApi.forEachNode((node) => allRowData.push(node.data));\r\n          props.tableUpdate(allRowData, selectedId);\r\n        } else {\r\n          const allRowData = [];\r\n          props.gridApi.forEachNode((node) => allRowData.push(node.data));\r\n          props.tableUpdate(allRowData);\r\n        }\r\n      }else if (currentlocation === \"/system_config/failure_mode\"){\r\n        let selectedId = \"\";\r\n        selectedId = params.data.id;\r\n        const allRowData = [];\r\n        props.gridApi.forEachNode((node) => allRowData.push(node.data));\r\n        props.tableUpdate(allRowData, selectedId);\r\n      }else{\r\n        const allRowData = [];\r\n      props.gridApi.forEachNode((node) => allRowData.push(node.data));\r\n      props.tableUpdate(allRowData);\r\n      }\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    // add API call to save modified rows\r\n  };\r\n\r\n  const deleteButton = () => {\r\n    return (\r\n      <div>\r\n        <IconButton>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </div>\r\n    );\r\n  };\r\n  const updateButton = (props) => {\r\n    return (\r\n      <div>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => props.onClick()}\r\n        >\r\n          {\" \"}\r\n          Update Password\r\n        </Button>{\" \"}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const redirectButton = () => {\r\n    return (\r\n      <div>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ marginTop: \"20px\" }}\r\n        >\r\n          Redirect\r\n        </Button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const slider = () => {\r\n    const marks = [\r\n      {\r\n        value: 15,\r\n        label: \"Configure New System\",\r\n      },\r\n      {\r\n        value: 40,\r\n        label: \"Phase Definition\",\r\n      },\r\n      {\r\n        value: 65,\r\n        label: \"Extrinsic Factor Definition \",\r\n      },\r\n      {\r\n        value: 90,\r\n        label: \"Data Manager\",\r\n      },\r\n    ];\r\n    return (\r\n      <div>\r\n        <Slider\r\n          classes={{\r\n            container: Sliderclasses.slider,\r\n            track: Sliderclasses.sliderTrack,\r\n          }}\r\n          style={{ marginTop: \"15px\" }}\r\n          defaultValue={40}\r\n          marks={marks}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n  const buttonClick = (e) => {\r\n    // e is getting the current node (Row Node)\r\n\r\n    this.setState({\r\n      visible: true,\r\n    });\r\n    let deletedRow = props.node.data;\r\n    e.gridApi.updateRowData({ remove: [deletedRow] }); // It will update the row\r\n  };\r\n  // debugger;\r\n  return (\r\n    <div className=\"ag-theme-alpine\" style={{ height: tableHeight, width: \"100%\" }}>\r\n      <AgGridReact\r\n        defaultColDef={{\r\n          flex: 1,\r\n          resizable: true,\r\n          filter: true,\r\n          sortable: true,\r\n        }}\r\n        rowData={props.rowData}\r\n        tooltipShowDelay=\"0\"\r\n        // columnDefs={props.columnDefs}\r\n        onGridReady={onGridReady}\r\n        onFirstDataRendered={onFirstDataRendered}\r\n        onGridSizeChanged={onGridSizeChanged}\r\n        onCellValueChanged={saveModifiedRows}\r\n        rowSelection={\"multiple\"}\r\n        rowMultiSelectWithClick={true}\r\n        {...(props.rowHeight ? { rowHeight: props.rowHeight } : {})}\r\n        frameworkComponents={{\r\n          updateButton: updateButton,\r\n          redirectButton: redirectButton,\r\n          slider: slider,\r\n        }}\r\n        components={{\r\n          datePicker: getDatePicker(),\r\n          monthPicker: getMonthPicker(),\r\n          deleteButton: deleteButton(),\r\n        }}\r\n        onCellClicked={props.onCellClicked}\r\n      >\r\n        {props.columnDefs}\r\n      </AgGridReact>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataManagerTable;\r\n","E:\\NetraB\\netra\\src\\ui\\Table\\Table.js",["852","853","854","855"],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport \"./Table.css\";\r\nimport { getDatePicker } from \"./DataManagerTable\";\r\nimport ReactDom from \"react-dom\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\n// function getDatePicker() {\r\n//   function Datepicker() {}\r\n//   Datepicker.prototype.init = function (params) {\r\n//     this.eInput = document.createElement(\"input\");\r\n//     this.eInput.value = params.value;\r\n//     this.eInput.classList.add(\"ag-input\");\r\n//     this.eInput.style.height = \"100%\";\r\n//     $(this.eInput).datepicker({ dateFormat: \"dd/mm/yy\" });\r\n//     console.log(params);\r\n//   };\r\n//   Datepicker.prototype.getGui = function () {\r\n//     return this.eInput;\r\n//   };\r\n//   Datepicker.prototype.afterGuiAttached = function () {\r\n//     this.eInput.focus();\r\n//     this.eInput.select();\r\n//   };\r\n//   Datepicker.prototype.getValue = function () {\r\n//     return this.eInput.value;\r\n//   };\r\n//   Datepicker.prototype.destroy = function () {};\r\n//   Datepicker.prototype.isPopup = function () {\r\n//     return false;\r\n//   };\r\n//   return Datepicker;\r\n// }\r\n\r\n// const getDatePicker = () => {\r\n//   const fillZeros = (a) => {\r\n//     return Number(a) < 10 ? \"0\" + a : a;\r\n//   };\r\n//   const getFormattedDateOutput = (dateString) => {\r\n//     const dateParse = new Date(dateString);\r\n//     const dd = dateParse.getDate();\r\n//     const mm = dateParse.getMonth() + 1; //January is 0!\r\n//     const yyyy = dateParse.getFullYear();\r\n//     // console.log(dateString, dateParse);\r\n//     return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n//   };\r\n//   function Datepicker() {}\r\n//   Datepicker.prototype.init = function (params) {\r\n//     this.textInput = React.createRef();\r\n//     const getFormattedDateMaterial = (dateString) => {\r\n//       const dateParse = new Date(\r\n//         dateString.split(\"/\")[2] +\r\n//           \"-\" +\r\n//           dateString.split(\"/\")[1] +\r\n//           \"-\" +\r\n//           dateString.split(\"/\")[0]\r\n//       );\r\n//       const dd = dateParse.getDate();\r\n//       const mm = dateParse.getMonth() + 1; //January is 0!\r\n//       const yyyy = dateParse.getFullYear();\r\n//       console.log(dateString, dateParse);\r\n//       return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n//     };\r\n//     const eInput = React.createElement(TextField, {\r\n//       type: \"datetime-local\",\r\n//       defaultValue: getFormattedDateMaterial(params.value),\r\n//       ref: this.textInput,\r\n//       style: { width: \"95%\" },\r\n//     });\r\n//     this.div = document.createElement(\"div\");\r\n//     this.div.className = \"ag-cell-parent-append\";\r\n//     ReactDom.render(eInput, this.div);\r\n//   };\r\n//   Datepicker.prototype.getGui = function () {\r\n//     return this.div;\r\n//   };\r\n//   Datepicker.prototype.afterGuiAttached = function () {\r\n//     this.textInput.current.focus();\r\n//   };\r\n//   Datepicker.prototype.getValue = function () {\r\n//     return getFormattedDateOutput(\r\n//       this.textInput.current.querySelector(\"input\").value\r\n//     );\r\n//   };\r\n//   Datepicker.prototype.destroy = function () {};\r\n//   Datepicker.prototype.isPopup = function () {\r\n//     return false;\r\n//   };\r\n//   return Datepicker;\r\n// };\r\n\r\nconst Table = ({tableUpdate,rowData,columnDefs,height=400,getRowStyle}) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  const location = useLocation();\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n    // props.setGrid(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n  // useEffect(()=>{\r\n  //   gridApi.setColumnDefs(columnDefs)\r\n  // },[columnDefs])\r\n\r\n  const onFirstDataRendered = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n    const allRowData = [];\r\n    params.api.forEachNode((node) => allRowData.push(node.data));\r\n    debugger;\r\n    tableUpdate(allRowData);\r\n  };\r\n  const onGridSizeChanged = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n  };\r\nconsole.log(rowData)\r\n  const saveModifiedRows = (params) => {\r\n    debugger;\r\n    let currentlocation = location.pathname;\r\n\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    if (\r\n      currentlocation === \"/system_config/redundancy_info\" ||\r\n      currentlocation === \"/system_config/failure_mode\" ||\r\n      currentlocation === \"/system_config/additional_info\"\r\n    ) {\r\n      tableUpdate(allRowData, params.data.id);\r\n    } else {\r\n      tableUpdate(allRowData);\r\n    }\r\n    console.log(allRowData);\r\n    // add API call to save modified rows\r\n  };\r\n\r\n  return (\r\n    <div className=\"ag-theme-alpine\" style={{ height: height, width: \"100%\" }}>\r\n      <AgGridReact\r\n        defaultColDef={{\r\n          flex: 1,\r\n          resizable: true,\r\n          filter: true,\r\n          sortable: true,\r\n        }}\r\n        rowData={rowData}\r\n        // columnDefs={props.columnDefs}\r\n        onGridReady={onGridReady}\r\n        onFirstDataRendered={onFirstDataRendered}\r\n        onGridSizeChanged={onGridSizeChanged}\r\n        onCellValueChanged={saveModifiedRows}\r\n        tooltipShowDelay=\"0\"\r\n        components={{\r\n          datePicker: getDatePicker(),\r\n        }}\r\n        getRowStyle={getRowStyle}\r\n      >\r\n        {columnDefs}\r\n      </AgGridReact>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","E:\\NetraB\\netra\\src\\pages\\Phase_Manager\\LifeMultiplier\\LifeMultiplier.js",["856","857","858","859","860","861","862","863"],"import { Fragment } from \"react\";\r\nimport CustomSelect from \"../../../ui/Form/CustomSelect\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport styles from \"../Phasemanager.module.css\";\r\nimport LensIcon from \"@material-ui/icons/Lens\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { LMrowData, components } from \"../PhasetableData\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst PhaseStyles = makeStyles({\r\n  formControl: {\r\n    minWidth: \"20%\",\r\n  },\r\n  Submit: {\r\n    height: 40,\r\n  },\r\n  Pbuttons: {\r\n    marginLeft: 10,\r\n  },\r\n});\r\nconst LifeMultiplier = (props) => {\r\n  const PhaseClasses = PhaseStyles();\r\n  const phase = useSelector((state) => state.phase.phase);\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  let distinctPhaseName = phase.map((element, index) => {\r\n    return element.PhaseName;\r\n  });\r\n  distinctPhaseName = [...new Set(distinctPhaseName)];\r\n  let childColHeaders = [];\r\n  const phaseArr = distinctPhaseName.map((ele, index) => {\r\n    const childArr = phase.filter((x) => x.PhaseName === ele);\r\n    const childAgGrid = childArr.map((ele1, index1) => {\r\n      childColHeaders.push(ele1.PhaseRange + \" \" + ele1.id);\r\n      if (ele1.MeasurementType === \"Quantitative\") {\r\n        return (\r\n          <AgGridColumn\r\n            field={ele1.PhaseRange + \" \" + ele1.id}\r\n            headerName={ele1.PhaseRange}\r\n            index={ele1.id}\r\n            editable={true}\r\n          />\r\n        );\r\n      } else {\r\n        return <AgGridColumn field={ele1.Status} />;\r\n      }\r\n    });\r\n    return (\r\n      <AgGridColumn field={ele} headerName={ele}>\r\n        {childAgGrid}\r\n      </AgGridColumn>\r\n    );\r\n  });\r\n  const LMcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"Component\"\r\n      headerName=\"Component\"\r\n      minWidth={140}\r\n      editable={true}\r\n    />,\r\n    ...phaseArr,\r\n  ];\r\n  const rowData = systemData.map((element, index) => {\r\n    let d = {};\r\n    const phaseD = childColHeaders.map((ele, index) => {\r\n      d[ele] = 1;\r\n      return null;\r\n    });\r\n    debugger;\r\n    return {\r\n      Component: element.name,\r\n      component_id: element.id,\r\n      ...d,\r\n    };\r\n  });\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {/* <div className={styles.flex2}>\r\n        <CustomSelect\r\n          style={{ minWidth: \"45%\" }}\r\n          className={PhaseClasses.formControl}\r\n          id=\"parent-component\"\r\n          label=\"Parent Component\"\r\n          fields={components}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={PhaseClasses.Submit}\r\n        >\r\n          Submit\r\n        </Button>\r\n        <span style={{ fontSize: \"0.7rem\" }}>\r\n          <LensIcon style={{ color: \"#d8f0f4\" }} />\r\n          LMU-Lowest Maintainable Unit\r\n        </span>\r\n      </div> */}\r\n      <div className={styles.LMphaseTable}>\r\n        <Table\r\n          columnDefs={LMcolumnDefs}\r\n          rowData={rowData}\r\n          tableUpdate={updateFinalRowData}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default LifeMultiplier;\r\n","E:\\NetraB\\netra\\src\\pages\\Phase_Manager\\DCMultiplier\\dcMultiplier.js",["864","865","866","867"],"import Table from \"../../../ui/Table/Table\";\r\nimport styles from \"../Phasemanager.module.css\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst DCMultiplier = (props) => {\r\n  const phase = useSelector((state) => state.phase.phase);\r\n  if (phase.length === 0) {\r\n    alert(\"Please add Phases first\");\r\n  }\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const rootSystemData = systemData.filter((x) => x.parent === null);\r\n  let distinctPhaseName = phase.map((element, index) => {\r\n    return element.PhaseName;\r\n  });\r\n  distinctPhaseName = [...new Set(distinctPhaseName)];\r\n  let childColHeaders = [];\r\n  const phaseArr = distinctPhaseName.map((ele, index) => {\r\n    const childArr = phase.filter((x) => x.PhaseName === ele);\r\n    const childAgGrid = childArr.map((ele1, index1) => {\r\n      childColHeaders.push(ele1.PhaseRange + \" \" + ele1.id);\r\n      if (ele1.MeasurementType === \"Quantitative\") {\r\n        return (\r\n          <AgGridColumn\r\n            field={ele1.PhaseRange + \" \" + ele1.id}\r\n            headerName={ele1.PhaseRange}\r\n            editable={true}\r\n          />\r\n        );\r\n      } else {\r\n        return <AgGridColumn field={ele1.Status} editable={true} />;\r\n      }\r\n    });\r\n    return (\r\n      <AgGridColumn field={ele} headerName={ele}>\r\n        {childAgGrid}\r\n      </AgGridColumn>\r\n    );\r\n  });\r\n  // childColHeaders = [...new Set(childColHeaders)];\r\n  const DCMcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"Component\"\r\n      headerName=\"Component\"\r\n      minWidth={140}\r\n      editable={true}\r\n    />,\r\n    ...phaseArr,\r\n  ];\r\n  const rowData = systemData\r\n    .filter((x) => x.parentId === null)\r\n    .map((element, index) => {\r\n      let d = {};\r\n      const phaseD = childColHeaders.map((ele, index) => {\r\n        d[ele] = 1;\r\n        return null;\r\n      });\r\n      return {\r\n        Component: element.name,\r\n        component_id: element.id,\r\n        ...d,\r\n      };\r\n    });\r\n  debugger;\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <div className={styles.phaseTable}>\r\n      <Table\r\n        columnDefs={DCMcolumnDefs}\r\n        rowData={rowData}\r\n        tableUpdate={updateFinalRowData}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DCMultiplier;\r\n","E:\\NetraB\\netra\\src\\pages\\Phase_Manager\\Add\\AddPhase.js",["868","869","870"],"import { makeStyles } from \"@material-ui/core\";\r\nimport { Button, Grid } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport CustomSelect from \"../../../ui/Form/CustomSelect\";\r\nimport CustomTextInput from \"../../../ui/Form/CustomTextInput\";\r\nimport styles from \"../Phasemanager.module.css\";\r\nimport { MProwData } from \"../PhasetableData\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nconst PhaseStyles = makeStyles({\r\n  formControl: {\r\n    // margin: '2rem',\r\n    minWidth: \"20%\",\r\n  },\r\n  Submit: {\r\n    // margin: '2rem',\r\n    height: 40,\r\n  },\r\n  Pbuttons: {\r\n    marginLeft: 10,\r\n  },\r\n});\r\nconst AddPhase = (props) => {\r\n  const PhaseClasses = PhaseStyles();\r\n  // const [RangeInput, setRangeInput] = useState([]);\r\n\r\n  // const onAddNewRange = () => {\r\n  //   setRangeInput((prevstate) => {\r\n  //     // const stateLen = prevstate.length;\r\n  //     // // return [...prevstate, stateLen + 1];\r\n  //     return [...prevstate, { Status: \"\", UBound: \"\", LBound: \"\", Desc: \"\" }];\r\n  //   });\r\n  //   console.log(RangeInput);\r\n  // };\r\n  // const onDeleteRange = (index) => {\r\n  //   debugger;\r\n  //   const rangeCopy = [...RangeInput];\r\n  //   rangeCopy.splice(index, 1);\r\n  //   setRangeInput(rangeCopy);\r\n  // };\r\n  // const handleRangeChange = (index, e) => {\r\n  //   let newArr = [...RangeInput];\r\n  //   newArr[index][e.target.name] = e.target.value;\r\n  //   setRangeInput(newArr);\r\n  // };\r\n\r\n  return (\r\n    <div className={styles.addForm}>\r\n      <div>\r\n        <h4>\r\n          Please add only the Medium level phase-range, the system will\r\n          automatically calculate the other two.\r\n        </h4>\r\n      </div>\r\n      <div className={styles.flex} style={{ marginTop: \"4rem\" }}>\r\n        <CustomTextInput\r\n          label=\"Parameter Name\"\r\n          id=\"parameter-name\"\r\n          className={PhaseClasses.formControl}\r\n          value={props.paramName}\r\n          onChange={props.handleParamNameChange}\r\n        ></CustomTextInput>\r\n\r\n        <CustomSelect\r\n          className={PhaseClasses.formControl}\r\n          id=\"measurement-type\"\r\n          label=\"Measurement Type\"\r\n          value={props.MType}\r\n          onChange={props.handleMTypeChange}\r\n          fields={[\"Quantitative\", \"Qualitative\"]}\r\n        />\r\n\r\n        <CustomSelect\r\n          className={PhaseClasses.formControl}\r\n          id=\"unit\"\r\n          label=\"Unit\"\r\n          value={props.Unit}\r\n          onChange={props.handleUnitChange}\r\n          fields={[\"Km/hr\", \"M/hr\"]}\r\n        ></CustomSelect>\r\n        {/* <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className={PhaseClasses.Submit}\r\n          onClick={() => addRow()}\r\n        >\r\n          Submit\r\n        </Button> */}\r\n      </div>\r\n      <div className={styles.flex} style={{ marginTop: \"3rem\" }}>\r\n        <Button variant=\"contained\" color=\"secondary\">\r\n          {props.MType} Measurement Type - Range\r\n        </Button>\r\n      </div>\r\n      <div className={styles.flex} style={{ marginTop: \"3rem\" }}>\r\n        {props.MType === \"Qualitative\" ? (\r\n          <>\r\n            <CustomTextInput\r\n              style={{ minWidth: \"45%\" }}\r\n              label=\"Status\"\r\n              id=\"status\"\r\n              className={PhaseClasses.formControl}\r\n              value={props.Status}\r\n              onChange={props.handleStatusChange}\r\n            ></CustomTextInput>\r\n            <CustomTextInput\r\n              style={{ minWidth: \"45%\" }}\r\n              label=\"Description\"\r\n              id=\"description\"\r\n              className={PhaseClasses.formControl}\r\n              value={props.desc}\r\n              onChange={props.handleDescChange}\r\n            ></CustomTextInput>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Grid container>\r\n              <Grid container item spacing={4}>\r\n                <Grid item xs={2} style={{ marginTop: \"10px\" }}>\r\n                  <CustomTextInput\r\n                    label=\"Phase Range\"\r\n                    id=\"phaserange\"\r\n                    className={PhaseClasses.formControl}\r\n                    value={props.PRange}\r\n                    onChange={props.handlePRangeChange}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2} style={{ marginTop: \"10px\" }}>\r\n                  <CustomTextInput\r\n                    label=\"Lower Bound\"\r\n                    id=\"lowerbound\"\r\n                    className={PhaseClasses.formControl}\r\n                    value={props.LBound}\r\n                    onChange={props.handleLBoundChange}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={2} style={{ marginTop: \"10px\" }}>\r\n                  <CustomTextInput\r\n                    label=\"Upper Bound\"\r\n                    id=\"upperbound\"\r\n                    className={PhaseClasses.formControl}\r\n                    value={props.UBound}\r\n                    onChange={props.handleUBoundChange}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={5} style={{ marginTop: \"10px\" }}>\r\n                  <CustomTextInput\r\n                    label=\"Description\"\r\n                    id=\"description\"\r\n                    style={{ minWidth: \"100%\" }}\r\n                    className={PhaseClasses.formControl}\r\n                    value={props.desc}\r\n                    onChange={props.handleDescChange}\r\n                  />\r\n                </Grid>\r\n                {/* <Grid item xs={1} style={{ marginTop: \"35px\" }}>\r\n                  <DeleteIcon\r\n                    fontSize=\"medium\"\r\n                    onClick={() => {\r\n                      onDeleteRange(id);\r\n                    }}\r\n                  />\r\n                </Grid> */}\r\n              </Grid>\r\n            </Grid>\r\n            {/* {props.MType === \"Quantitative\" && (\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => onAddNewRange()}\r\n              >\r\n                Add\r\n              </Button>\r\n            )} */}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default AddPhase;\r\n","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\ReliabilityChart.js",[],"E:\\NetraB\\netra\\src\\ui\\Form\\AutoSelect.js",["871","872"],"import { makeStyles, InputBase } from \"@material-ui/core\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\nconst LabelStyles = makeStyles({\r\n  root: {\r\n    color: \"black\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"1.3rem\",\r\n    position: \"unset\",\r\n    marginBottom: 10,\r\n  },\r\n});\r\nconst InputStyles = makeStyles({\r\n  root: {\r\n    paddingRight: 10,\r\n    paddingLeft: 10,\r\n    background: \"#fff\",\r\n    border:'1px solid #0263a1',\r\n    borderRadius: \"5px\",\r\n    // height: 40,\r\n    boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n});\r\n\r\nexport default function AutoSelect(props) {\r\n  debugger;\r\n  const options = props.fields.map((option) => {\r\n    //const firstLetter = option.parentName.toUpperCase();\r\n    // firstLetter: /[0-9]/.test(firstLetter) ? \"0-9\" : firstLetter,\r\n    return {\r\n      ...option,\r\n    };\r\n  });\r\n  const Labelclasses = LabelStyles();\r\n  const Inputclasses = InputStyles();\r\n  return (\r\n    <Autocomplete\r\n      multiple={props.multiple}\r\n      classes={Inputclasses}\r\n      id=\"grouped-demo\"\r\n      options={options}\r\n      groupBy={(option) => option.parentName}\r\n      // getOptionLabel={(option) => option.name}\r\n      getOptionLabel={(option) => option.name || \"\"}\r\n      //style={{ width: 300 }}\r\n      value={props.value || null}\r\n      onChange={props.onChange}\r\n      renderInput={(params) => <TextField  {...params} InputProps={{...params.InputProps, disableUnderline: true}} />}\r\n    />\r\n  );\r\n}\r\n","E:\\NetraB\\netra\\src\\ui\\Form\\CustomTextInput.js",[],"E:\\NetraB\\netra\\src\\ui\\Form\\CustomSelect.js",["873"],"//Custom Select- Props{id,label,value,onchange,classname,fields}\r\nimport React from \"react\";\r\nimport {\r\n  withStyles,\r\n  makeStyles,\r\n  FormControl,\r\n  InputBase,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\n\r\nconst LabelStyles = makeStyles({\r\n  root: {\r\n    color: \"black\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"1.3rem\",\r\n    position: \"unset\",\r\n    // marginBottom: 10,\r\n  },\r\n});\r\nconst StyledInput = withStyles({\r\n  root: {\r\n    paddingRight: 25,\r\n    paddingLeft: 10,\r\n    background: \"#fff\",\r\n    border: \"1px solid #0263a1\",\r\n    borderRadius: \"5px\",\r\n    width: \"320px\",\r\n    height: \"40px\",\r\n    boxShadow: \"2px 3px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n})(InputBase);\r\nconst CustomSelect = (props) => {\r\n  const Labelclasses = LabelStyles();\r\n\r\n  return (\r\n    <FormControl className={props.className}>\r\n      <InputLabel id={props.id}  classes={Labelclasses} shrink>\r\n        {props.label}\r\n      </InputLabel>\r\n      {props.value ? (\r\n        <Select\r\n          style={props.style}\r\n          labelId={props.id + \"-label\"}\r\n          id={props.id}\r\n          name={props.name}\r\n          onChange={props.onChange}\r\n          input={<StyledInput />}\r\n          value={props.value}\r\n        >\r\n          {props.fields.map((data) => (\r\n            <MenuItem value={data}>{data}</MenuItem>\r\n          ))}\r\n        </Select>\r\n      ) : (\r\n        <Select\r\n          style={props.style}\r\n          labelId={props.id + \"-label\"}\r\n          id={props.id}\r\n          name={props.name}\r\n          onChange={props.onChange}\r\n          input={<StyledInput />}\r\n        >\r\n          {props.fields.map((data) => (\r\n            <MenuItem value={data}>{data}</MenuItem>\r\n          ))}\r\n        </Select>\r\n      )}\r\n    </FormControl>\r\n  );\r\n};\r\nexport default CustomSelect;\r\n","E:\\NetraB\\netra\\src\\components\\sortableTree\\SortableTree.js",["874","875","876","877"],"import React, { useState, useEffect } from \"react\";\r\nimport SortableTree, { getTreeFromFlatData } from \"react-sortable-tree\";\r\nimport FileExplorerTheme from \"react-sortable-tree-theme-full-node-drag\";\r\nimport treeDataT from \"./SortableTreeData\";\r\nimport { treeDataActions } from \"../../store/TreeDataStore\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport 'react-sortable-tree/style.css' \r\n\r\nconst TreeComponent = (props) => {\r\n  debugger;\r\n  const dispatch = useDispatch();\r\n  const fData = useSelector((state) => state.treeData.treeData);\r\n  const tData = useSelector((state) => state.treeData.sortTreeData);\r\n  let treeData = getTreeFromFlatData({\r\n    flatData: fData.map((node) => ({ ...node, title: node.name })),\r\n    getKey: (node) => node.id, // resolve a node's key\r\n    getParentKey: (node) => node.parent, // resolve a node's parent's key\r\n    rootKey: null, // The value of the parent key when there is no parent (i.e., at root level)\r\n  });\r\n  const [treeDataS, setTreeData] = useState(treeData);\r\n  const onChangeTree = (treeD) => {\r\n    dispatch(\r\n      treeDataActions.setOnChangeTreeData({\r\n        treeData: treeD,\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <div style={{ height: props.height }}>\r\n      <SortableTree\r\n        treeData={tData}\r\n        // onChange={(treeDataS) => setTreeData(treeDataS)}\r\n        onChange={(tData) => onChangeTree(tData)}\r\n        theme={FileExplorerTheme}\r\n        isVirtualized={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default TreeComponent;\r\n","E:\\NetraB\\netra\\src\\pages\\PM OPTIM\\Data.js",[],"E:\\NetraB\\netra\\src\\pages\\PM OPTIM\\OptiQ.js",["878","879","880","881"],"import React, { useState } from \"react\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from \"@material-ui/core\";\r\nimport styles from \"./pm.module.css\";\r\nimport OptTable from \"./OptTable\";\r\nimport GroupTable from \"./GroupTable\";\r\n\r\n// ... (other imports and styles)\r\n\r\nconst OptiQ = ({ questions, name, currQ,option }) => {\r\n  const [answers, setAnswers] = useState({});\r\n  const [tableData, setTableData] = useState([]);\r\n  const [n, setN] = useState(0);\r\n  console.log(tableData)\r\n  // Added tableData state to store the row data for the table\r\n\r\n  const handleAnswerChange = (event, questionId) => {\r\n    const { value } = event.target;\r\n    setAnswers((prevAnswers) => ({\r\n      ...prevAnswers,\r\n      [questionId]: parseFloat(value),\r\n    }));\r\n    console.log(answers);\r\n  };\r\n  const handleAddRow = (e) => {\r\n    e.preventDefault();\r\n    const newRow = { ...answers, method: name };\r\n    setTableData((prevTableData) => [...prevTableData, newRow]);\r\n    setN(newRow?.n);\r\n  };\r\n  console.log(tableData)\r\n  return (\r\n    <>\r\n      <div className={styles.mainOp}>\r\n        <div className={styles.userSele}>\r\n          <h3>{name} Questions</h3>\r\n          <form>\r\n            {questions?.map((question) => (\r\n              <div key={question.id}>\r\n                <label>{question.text}</label>\r\n                {question.type === \"text\" && (\r\n                  <TextField\r\n                    type=\"number\"\r\n                    value={answers[question.id] || \"\"}\r\n                    onChange={(event) => handleAnswerChange(event, question.id)}\r\n                    required={question.required}\r\n                  />\r\n                )}\r\n                {/* Add other input types (e.g., select, radio, checkbox) based on the question type */}\r\n              </div>\r\n            ))}\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleAddRow}\r\n            >\r\n              Add Row\r\n            </Button>\r\n          </form>\r\n        </div>\r\n        <div className={styles.OptTable}>\r\n          {/* {option === 'option3' || option === 'option4'? */}\r\n          {n ?\r\n           <GroupTable \r\n           n={n}\r\n           columnDefs={currQ.columns?.map((column) => ({\r\n            headerName: column,\r\n            field: column,\r\n          }))}\r\n          tData={tableData} // Use tableData as the rowData for the OptTable\r\n          height={200}\r\n          answers={answers}\r\n          name={name}\r\n           />\r\n          \r\n          :<OptTable\r\n            columnDefs={currQ.columns?.map((column) => ({\r\n              headerName: column,\r\n              field: column,\r\n            }))}\r\n            rowData={tableData}\r\n            setRowData={setTableData} // Use tableData as the rowData for the OptTable\r\n            height={200}\r\n            answers={answers}\r\n            name={name}\r\n          />}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OptiQ;\r\n","E:\\NetraB\\netra\\src\\components\\main\\EqptStructuring\\EqptStructuring.js",["882","883","884","885","886","887","888"],"import { Button, Grid, makeStyles } from \"@material-ui/core\";\r\nimport React, { useState, useRef } from \"react\";\r\nimport classes from \"./EqptStructuring.module.css\";\r\nimport LabelToolTip from \"./LabelToolTip/LabelToolTip\";\r\n// import Tree from \"./Tree\";\r\nimport TreeComponent from \"../../sortableTree/SortableTree\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CustomTextInput from \"../../../ui/Form/CustomTextInput\";\r\nimport CustomSelect from \"../../../ui/Form/CustomSelect\";\r\nimport AutoSelect from \"../../../ui/Form/AutoSelect\";\r\nimport { useFormik } from \"formik\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\nimport xData from \"../../sortableTree/SortableTreeData\";\r\nimport { userActions } from \"../../../store/ApplicationVariable\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    margin: \"0 2.5em\",\r\n  },\r\n});\r\n\r\nfunction EqptStructuring() {\r\n  const dispatch = useDispatch();\r\n  let fData = useSelector((state) => state.treeData.treeData);\r\n  const selectedInputs = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  const systemConfigurationData = useSelector(\r\n    (state) => state.treeData.sortTreeData\r\n  );\r\n  const [disableButton, setDisableButton] = useState(false);\r\n  const classesButton = useStyles();\r\n  const [childInputFields, setChildInputFields] = useState([]);\r\n  // const customSelectFields = treeData.map((x) => `${x.title}`);\r\n  const [parentFiledValue, setParentFieldValue] = useState({\r\n    title: \"\",\r\n    name: \"\",\r\n    children: [],\r\n    id: \"\",\r\n    eqType: \"\",\r\n    parentName: \"\",\r\n    parentId: \"\",\r\n    lmu: 1,\r\n  });\r\n\r\n  const clearForm = (e) => {\r\n    e.preventDefault();\r\n    setDisableButton(false);\r\n    dispatch(treeDataActions.setTreeData({ treeData: [] }));\r\n    formik.resetForm();\r\n  };\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      platform: \"\",\r\n      platformType: \"\",\r\n      system: \"\",\r\n      systemType: \"\",\r\n    },\r\n    //validationSchema: validationSchema,\r\n    onSubmit: (values) => {\r\n      // alert(JSON.stringify(values, null, 2));\r\n      const { platform, platformType, system, systemType } = values;\r\n      console.log(selectedInputs);\r\n      const platformId = uuid();\r\n      const systemId = uuid();\r\n      debugger;\r\n      const treeNodes = [\r\n        {\r\n          name: system,\r\n          id: systemId,\r\n          eqType: systemType,\r\n          parentName: selectedInputs[\"shipName\"],\r\n          parentId: null,\r\n          parent: null,\r\n          children: [],\r\n          lmu: 1,\r\n          command: selectedInputs[\"command\"],\r\n          department: selectedInputs[\"department\"],\r\n          shipCategory: selectedInputs[\"shipCategory\"],\r\n          shipClass: selectedInputs[\"shipClass\"],\r\n          shipName: selectedInputs[\"shipName\"],\r\n        },\r\n      ];\r\n      const updateEqStore = {\r\n        equipmentName: system,\r\n        equipmentCode: systemType,\r\n      };\r\n      const filteredData = {\r\n        equipmentName: [system],\r\n        equipmentCode: [systemType],\r\n      };\r\n      dispatch(treeDataActions.addElement({ data: treeNodes }));\r\n      dispatch(\r\n        userActions.onAddingEquipmentName({\r\n          selectedData: updateEqStore,\r\n          filteredData: filteredData,\r\n        })\r\n      );\r\n      setDisableButton(true);\r\n    },\r\n  });\r\n\r\n  const onAddNewChildField = () => {\r\n    setChildInputFields((prevstate) => {\r\n      // const stateLen = prevstate.length;\r\n      // // return [...prevstate, stateLen + 1];\r\n      return [...prevstate, { childName: \"\", childPartId: \"\" }];\r\n    });\r\n  };\r\n  const onDeleteChildField = (index) => {\r\n    const childCopy = [...childInputFields];\r\n    childCopy.splice(index, 1);\r\n    setChildInputFields(childCopy);\r\n  };\r\n  const parentOnChange = (e, value) => {\r\n    debugger\r\n    setParentFieldValue(value);\r\n  };\r\n  const updateChildTree = (e) => {\r\n    e.preventDefault();\r\n    //Make tree object\r\n    const treeNodes = childInputFields.map((x) => {\r\n      const cUuid = uuid();\r\n      return {\r\n        name: x.childName,\r\n        children: [],\r\n        id: cUuid,\r\n        eqType: x.childPartId,\r\n        parentName: parentFiledValue.name,\r\n        parentId: parentFiledValue.id,\r\n        parent: parentFiledValue.id,\r\n        lmu: 1,\r\n        command: selectedInputs[\"command\"],\r\n        department: selectedInputs[\"department\"],\r\n        shipCategory: selectedInputs[\"shipCategory\"],\r\n        shipClass: selectedInputs[\"shipClass\"],\r\n        shipName: selectedInputs[\"shipName\"],\r\n      };\r\n    });\r\n    dispatch(\r\n      treeDataActions.addChildElement({\r\n        children: treeNodes,\r\n        parentId: parentFiledValue.id,\r\n      })\r\n    );\r\n    setParentFieldValue({\r\n      title: \"\",\r\n      name: \"\",\r\n      children: [],\r\n      id: \"\",\r\n      eqType: \"\",\r\n      parentName: \"\",\r\n      parentId: \"\",\r\n      lmu: 1,\r\n    });\r\n    // Autocomplete zero\r\n    setChildInputFields([]);\r\n  };\r\n  const handleChildChange = (index, e) => {\r\n    let newArr = [...childInputFields];\r\n    newArr[index][e.target.name] = e.target.value;\r\n    setChildInputFields(newArr);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.form}>\r\n      <div className={classes.header}>Add New Equipment</div>\r\n      <div>\r\n        <form style={{ width: \"100%\" }} onSubmit={formik.handleSubmit}>\r\n          <div className={classes.formrow1}>\r\n            <div className={classes.field1}>\r\n              <LabelToolTip label=\"System Name\" info=\"Info\" />\r\n              <CustomTextInput\r\n                className={classes.fullWidth}\r\n                id=\"system\"\r\n                name=\"system\"\r\n                value={formik.values.system}\r\n                onChange={formik.handleChange}\r\n                disabled={disableButton}\r\n              ></CustomTextInput>\r\n            </div>\r\n            <div className={classes.field1}>\r\n              <LabelToolTip label=\"System Type\" info=\"Info\" />\r\n              <CustomTextInput\r\n                className={classes.fullWidth}\r\n                id=\"systemType\"\r\n                name=\"systemType\"\r\n                value={formik.values.systemType}\r\n                onChange={formik.handleChange}\r\n                disabled={disableButton}\r\n              ></CustomTextInput>\r\n            </div>\r\n          </div>\r\n          <div className={classes.parent}>\r\n            <div style={{ width: \"400px\" }}>\r\n              <LabelToolTip label=\"Parent Component\" />\r\n              <AutoSelect\r\n                fields={fData}\r\n                onChange={parentOnChange}\r\n                value={parentFiledValue}\r\n              ></AutoSelect>\r\n            </div>\r\n            <div style={{ marginTop: \"20px\",marginRight:'2%' }}>\r\n              <Button\r\n                className={classesButton.root}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                type=\"reset\"\r\n                onClick={clearForm}\r\n              >\r\n                Clear\r\n              </Button>\r\n              {!disableButton && (\r\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                  Update\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </form>\r\n        </div>\r\n        <div className={classes.formrow2}>\r\n          {/* //onSubmit={updateChildTree} ref={childForm} */}\r\n\r\n          {/* This is the end */}\r\n          <form onSubmit={updateChildTree}>\r\n            <div className={classes.child}>\r\n              <Grid container>\r\n                <Grid container item spacing={4}>\r\n                  <Grid item xs={5}>\r\n                    <LabelToolTip label=\"Child Component Name\" />\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    <LabelToolTip label=\"Part Code\" />\r\n                  </Grid>\r\n                  <Grid item xs={2}></Grid>\r\n                </Grid>\r\n                {childInputFields.map((child, item) => {\r\n                  return (\r\n                    <Grid container item key={item} spacing={4}>\r\n                      <Grid item xs={5} style={{ marginTop: \"10px\" }}>\r\n                        <CustomTextInput\r\n                          className={classes.fullWidth}\r\n                          name=\"childName\"\r\n                          // id=\"childName\"\r\n                          value={child.childName}\r\n                          onChange={(e) => handleChildChange(item, e)}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={5} style={{ marginTop: \"10px\" }}>\r\n                        <CustomTextInput\r\n                          className={classes.fullWidth}\r\n                          name=\"childPartId\"\r\n                          // id=\"partId\"\r\n                          value={child.childPartId}\r\n                          onChange={(e) => handleChildChange(item, e)}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={2} style={{ marginTop: \"35px\" }}>\r\n                        <DeleteIcon\r\n                          fontSize=\"medium\"\r\n                          onClick={() => {\r\n                            onDeleteChildField(item);\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  );\r\n                })}\r\n              </Grid>\r\n            </div>\r\n            <div\r\n              style={{\r\n                float: \"right\",\r\n                marginTop: \"30px\",\r\n                marginBottom: \"30px\",\r\n              }}\r\n            >\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                //onClick={updateChildTree}\r\n                type=\"submit\"\r\n                disabled={!(childInputFields.length > 0)}\r\n              >\r\n                Update All\r\n              </Button>\r\n              <Button\r\n                style={{ marginLeft: \"20px\" }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={onAddNewChildField}\r\n              >\r\n                Add\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      <div className={classes.tree}>\r\n        <div className={classes.treeChild}>\r\n          {/* <FullscreenIcon style={{ float: \"right\", marginRight: \"25px\" }} /> */}\r\n          <TreeComponent height='400px'></TreeComponent>\r\n          {/* <div></div> */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EqptStructuring;\r\n","E:\\NetraB\\netra\\src\\components\\main\\EqptStructuring\\LabelToolTip\\LabelToolTip.js",[],"E:\\NetraB\\netra\\src\\pages\\systen_configuration\\SystemConfigurationTable.js",[],"E:\\NetraB\\netra\\src\\components\\sortableTree\\SortableTreeData.js",[],"E:\\NetraB\\netra\\src\\pages\\PM OPTIM\\GroupTable.js",[],"E:\\NetraB\\netra\\src\\pages\\PM OPTIM\\OptTable.js",["889"],"import React,{useEffect, useState} from 'react';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport {  Button, Dialog, DialogTitle, DialogContent, DialogActions } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport styles from './pm.module.css';\r\n\r\nconst OptTable = ({ columnDefs, rowData, height,name,setRowData}) => {\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    dialogContainer: {\r\n      borderRadius: theme.spacing(2),\r\n      padding: theme.spacing(2),\r\n    },\r\n    dialogTitle: {\r\n      paddingBottom: theme.spacing(1),\r\n    },\r\n    dialogContent: {\r\n      paddingTop: 0,\r\n      paddingBottom: theme.spacing(2),\r\n    },\r\n  }));\r\n  const [open, setOpen] = useState(false);\r\n  const [tval, setTval] = useState(0);\r\n  const [tval90, setTval90] = useState(0);\r\n  const [tval110, setTval110] = useState(0);\r\n  \r\n\r\n  const classes = useStyles();\r\n  const handleClose = () => {\r\n    setOpen(false); // Close the dialog\r\n    setRowData([])\r\n    window.location.reload();\r\n    \r\n  };\r\n\r\n \r\n  const handleT =(event)=>{\r\n    event.preventDefault();\r\n\r\n    // Include the method value in the answers object\r\n    const dataToSend = { ...rowData, method: name };\r\n    console.log(dataToSend);\r\n\r\n    // Send the answers to the Flask backend\r\n    fetch(\"/optimize\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(dataToSend[0]),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Handle the response from the backend\r\n        console.log(data);\r\n        setTval(data.t);\r\n        setTval90(data.t - 0.1 * data.t);\r\n        setTval110(data.t + 0.1 * data.t);\r\n        // Set the tableData state with the row data when the form is submitted\r\n       \r\n      })\r\n      .catch((error) => {\r\n        // Handle any errors\r\n        console.error(error);\r\n      });\r\n    setOpen(true);\r\n  }\r\n  return (\r\n    <div className=\"ag-theme-alpine\" style={{ height: height, width: '100%',position: 'relative' }}>\r\n      {console.log(rowData)}\r\n      <AgGridReact\r\n        columnDefs={columnDefs}\r\n        rowData={rowData}\r\n        defaultColDef={{\r\n          flex: 1,\r\n          resizable: true,\r\n          filter: true,\r\n          sortable: true,\r\n          editable: true,\r\n        }}\r\n      ></AgGridReact>\r\n      <Button className={styles.btn} type=\"submit\" variant=\"contained\" color=\"primary\" onClick={handleT}>Submit</Button>\r\n      <Dialog open={open} onClose={handleClose} maxWidth=\"xs\" fullWidth>\r\n            <div className={classes.dialogContainer}>\r\n              <DialogTitle className={classes.dialogTitle}>Optimization Result</DialogTitle>\r\n              <DialogContent className={classes.dialogContent}>\r\n                <p>t value: {tval}</p>\r\n                <p>t value (90%): {tval90}</p>\r\n                <p>t value (110%): {tval110}</p>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                  Close\r\n                </Button>\r\n              </DialogActions>\r\n            </div>\r\n          </Dialog>\r\n          \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OptTable;\r\n","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\redundancy\\RenderParallelComponent.js",["890","891"],"import React, {\r\n  useEffect,\r\n  useState,\r\n  useImperativeHandle,\r\n  useRef,\r\n  forwardRef,\r\n} from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nconst RenderParallelComponent = forwardRef((props, ref, isMultiple = true) => {\r\n  const [value, setValue] = useState([]);\r\n  const refInput = useRef(null);\r\n  const location = useLocation();\r\n  //   alert(location.pathname);\r\n  let potentialParallelComponents = [];\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const userSelection = useSelector(\r\n    (state) => state.userSelection.userSelection\r\n  );\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  const componentsData = useSelector(\r\n    (state) => state.userSelection.componentsData\r\n  );\r\n  const selectedEquipment = props.data.EquipmentName;\r\n  const selectedEquipmentId = props.data.eqId;\r\n\r\n  if (location.pathname === \"/system_config/additional_info\") {\r\n    debugger;\r\n    const currentSelectedPlatform = currentSelection[\"shipName\"];\r\n\r\n    potentialParallelComponents = userSelection[\"equipmentName\"].map((x) => {\r\n      let id = componentsData.filter((c) => c.name === x)[0][\"id\"];\r\n      return {\r\n        name: x,\r\n        parentName: currentSelectedPlatform,\r\n        id: id,\r\n      };\r\n    });\r\n  } else {\r\n    potentialParallelComponents = systemData.filter(\r\n      (x) => x.name !== selectedEquipment\r\n    );\r\n  }\r\n\r\n  const handleChange = (event, newValue) => {\r\n    debugger;\r\n    setValue(newValue);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   // focus on the input\r\n  //   //setTimeout(() => refInput.current.focus());\r\n  //   console.log(potentialParallelComponents);\r\n  // }, []);\r\n\r\n  /* Component Editor Lifecycle methods */\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      // the final value to send to the grid, on completion of editing\r\n      getValue() {\r\n        debugger;\r\n        //console.log(value);\r\n        let valueStr = [];\r\n        let ids = [];\r\n        // if (location.pathname === \"/system_config/additional_info\") {\r\n        //   value.forEach((element) => {\r\n        //     valueStr = [...valueStr, element.name];\r\n        //   });\r\n        // } else\r\n        if (location.pathname === \"/system_config/failure_mode\") {\r\n          ids = [value.id];\r\n          valueStr = [value.name];\r\n          props.data[\"rEquipmentId\"] = ids[0];\r\n        } else {\r\n          value.forEach((element) => {\r\n            ids = [...ids, element.id];\r\n            valueStr = [...valueStr, element.name];\r\n          });\r\n          props.setParallelIds(ids);\r\n        }\r\n        return valueStr.toString();\r\n      },\r\n      isPopup() {\r\n        return true;\r\n      },\r\n      // Gets called once before editing starts, to give editor a chance to\r\n      // cancel the editing before it even starts.\r\n      isCancelBeforeStart() {\r\n        return false;\r\n      },\r\n\r\n      // Gets called once when editing is finished (eg if Enter is pressed).\r\n      // If you return true, then the result of the edit will be ignored.\r\n      // isCancelAfterEnd() {\r\n      //     // our editor will reject any value greater than 1000\r\n      //     return value > 1000;\r\n      // }\r\n    };\r\n  });\r\n\r\n  return (\r\n    // <input type=\"number\"\r\n    //        ref={refInput}\r\n    //        value={value}\r\n    //        onChange={event => setValue(event.target.value)}\r\n    //        style={{width: \"100%\"}}\r\n    // />\r\n    <Autocomplete\r\n      id={selectedEquipmentId}\r\n      options={potentialParallelComponents}\r\n      //value={value}\r\n      multiple={props.isMultiple}\r\n      onChange={handleChange}\r\n      groupBy={(option) => option.parentName}\r\n      getOptionLabel={(option) => option.name}\r\n      style={{ width: 300 }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          ref={refInput}\r\n          label={props.label}\r\n          variant=\"outlined\"\r\n        />\r\n      )}\r\n    />\r\n  );\r\n});\r\nexport default RenderParallelComponent;\r\n","E:\\NetraB\\netra\\src\\pages\\systen_configuration\\failureMode\\EquipmentName.js",["892","893","894","895"],"import React, {\r\n  useEffect,\r\n  useState,\r\n  useImperativeHandle,\r\n  useRef,\r\n  forwardRef,\r\n} from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport SystemConfiguration from \"../../systen_configuration/SystemConfiguration\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nconst EquipmentName = forwardRef((props, ref) => {\r\n  const [value, setValue] = useState([]);\r\n  const refInput = useRef(null);\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const location = useLocation();\r\n  const handleChange = (event, newValue) => {\r\n    debugger;\r\n    // alert(newValue);\r\n    setValue(newValue);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //     // focus on the input\r\n  //     //setTimeout(() => refInput.current.focus());\r\n  //     console.log(systemData)\r\n  // }, []);\r\n\r\n  /* Component Editor Lifecycle methods */\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      // the final value to send to the grid, on completion of editing\r\n      getValue() {\r\n        //console.log(value);\r\n        const path = location.pathname;\r\n        props.setId(value.id);\r\n        return value.name;\r\n      },\r\n      isPopup() {\r\n        return true;\r\n      },\r\n      // Gets called once before editing starts, to give editor a chance to\r\n      // cancel the editing before it even starts.\r\n      isCancelBeforeStart() {\r\n        return false;\r\n      },\r\n\r\n      // Gets called once when editing is finished (eg if Enter is pressed).\r\n      // If you return true, then the result of the edit will be ignored.\r\n      // isCancelAfterEnd() {\r\n      //     // our editor will reject any value greater than 1000\r\n      //     return value > 1000;\r\n      // }\r\n    };\r\n  });\r\n\r\n  return (\r\n    // <input type=\"number\"\r\n    //        ref={refInput}\r\n    //        value={value}\r\n    //        onChange={event => setValue(event.target.value)}\r\n    //        style={{width: \"100%\"}}\r\n    // />\r\n    <Autocomplete\r\n      options={systemData}\r\n      //value={value}\r\n      onChange={handleChange}\r\n      groupBy={(option) => option.parentName}\r\n      getOptionLabel={(option) => option.name}\r\n      style={{ width: 300 }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          ref={refInput}\r\n          label=\"Select Equipment\"\r\n          variant=\"outlined\"\r\n        />\r\n      )}\r\n    />\r\n  );\r\n});\r\nexport default EquipmentName;\r\n","E:\\NetraB\\netra\\src\\ui\\userSelection\\userSelectionData.js",[],"E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\RCMMain.js",["896","897"],"import React from 'react'\r\nimport styles from \"./MaintenanceAllocation.module.css\";\r\nimport { Button } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst RCMMain=(props)=> {\r\n    return <div className={styles.container}>\r\n  \r\n  <div className={styles.homeLinks}>\r\n        <Link to=\"/maintenance_allocation/conduct_rcm_analysis/create\">\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-microchip\"></i>\r\n          </div>\r\n          RCM Analysis\r\n        </Link>\r\n        {/* <Link to=\"/maintenance_allocation/conduct_rcm_analysis/critical_comp\">\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-microchip\"></i>\r\n          </div>\r\n          Select Critical Components\r\n        </Link>\r\n        <Link to=\"/maintenance_allocation/display\">\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-microchip\"></i>\r\n          </div>\r\n          Create RCM Analysis\r\n        </Link> */}\r\n      </div>\r\n      <div className={styles.netra}>\r\n        <img src=\"/netra-logo-removebg.png\" width={200} height={200} />\r\n        <div>NETRA</div>\r\n      </div>\r\n    </div>;\r\n  }\r\n  export default RCMMain;","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\RCM\\CreateRCM.js",["898","899","900","901","902"],"import React,{useState} from 'react'\r\nimport Navigation from '../../../components/navigation/Navigation';\r\nimport styles from \"../CreateMaintenance/CreateMaintenance.module.css\";\r\nimport UserSelection from '../../../ui/userSelection/userSelection'\r\nimport { Button,RadioGroup,FormControlLabel,Radio } from '@material-ui/core';\r\nimport TreeComponent from '../../../components/sortableTree/SortableTree';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\nimport AutoSelect from '../../../ui/Form/AutoSelect';\r\nimport { Route, useHistory } from 'react-router';\r\n// import { useHistory } from \"react-router-dom\";\r\n// import {useNavigate} from 'react-router-dom'\r\n// import AssignType from './AssignType';\r\nimport AssignType from '../CreateMaintenance/AssignType';\r\n\r\n\r\n\r\nconst CreateRCM=(props)=> {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentSelection = useSelector(\r\n        (state) => state.userSelection.currentSelection\r\n      );\r\n    let fData = useSelector((state) => state.treeData.treeData);\r\n    debugger;\r\n    fData = fData.filter(x => x.parentName === currentSelection[\"equipmentName\"] || x.parentId === null)\r\n    //console.log(fData);\r\n    const sData = useSelector((state) => state.userSelection.componentsData);\r\n\r\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\r\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\r\n\r\n  const matchingId = matchingItems[0]?.id;\r\n  const onLoadTreeStructure = () => {\r\n    const payload = {\r\n      system: currentSelection[\"equipmentName\"],\r\n      ship_name: currentSelection[\"shipName\"],\r\n    };\r\n  \r\n    if (matchingId) {\r\n      payload.component_id = matchingId;\r\n    }\r\n    console.log(payload)\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        console.log(d);\r\n        let treeD = d[\"treeD\"];\r\n        let failureModes = d[\"failureMode\"];\r\n        console.log(failureModes)\r\n        dispatch(\r\n          treeDataActions.setTreeData({\r\n            treeData: treeD,\r\n          }),\r\n        );\r\n        dispatch(\r\n          treeDataActions.setFailureModes(failureModes)\r\n        )\r\n      });\r\n  };\r\n\r\n      const[selectedComponent,setComponent]=useState([])\r\n      const selectOnChange=(e,value)=>{\r\n        setComponent(value)\r\n      }\r\n\r\n    const nextLevelBtn = () => {\r\n        history.push('/maintenance_allocation/conduct_rcm_analysis/critical_comp')\r\n    }\r\n\r\n    const SaveAssemplyHandler = () => {\r\n        alert(\"Hello\");\r\n        console.log(selectedComponent);\r\n        fetch(\"/save_assembly_rcm\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              system: currentSelection[\"equipmentName\"],\r\n              ship_name: currentSelection[\"shipName\"],\r\n              asm_data: selectedComponent\r\n            }),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Accept: \"application/json\",\r\n            },\r\n          })\r\n          .then((res) => res.json())\r\n          .then((d) => {\r\n            alert(d.message)\r\n          })\r\n    }\r\n\r\n    return (\r\n      <>\r\n      <Navigation/>\r\n      <div className={styles.userSelection}>\r\n          <UserSelection/>\r\n          <Button className={styles.btn} onClick={onLoadTreeStructure} variant='contained' color='primary'>Submit</Button>\r\n          {/* <Route exact path='/maintenance_allocation/create'>\r\n          \r\n          </Route> */}\r\n      </div>\r\n      {/* <Route exact path='/maintenance_allocation/create'>\r\n          \r\n          \r\n      </Route> */}\r\n      <div className={styles.content}>\r\n            <div className={styles.tree}>\r\n              <div className={styles.treeChild}>\r\n                {/* <FullscreenIcon style={{ float: \"right\", marginRight: \"25px\" }} /> */}\r\n                <TreeComponent height='600px'></TreeComponent>\r\n                {/* <div></div> */}\r\n              </div>\r\n            </div>\r\n            <div className={styles.rightSection}>\r\n              <div className={styles.selectComponent}>\r\n                Select Assemblies to be included for RCM Analysis :\r\n                <AutoSelect\r\n                    multiple=\"multiple\"\r\n                    fields={fData}\r\n                    onChange={selectOnChange}\r\n                    value={selectedComponent}\r\n                  ></AutoSelect>\r\n              </div>\r\n              <Button className={styles.nextbtn} onClick={nextLevelBtn} variant='contained' color='primary'>Add Information for Critical Components</Button>\r\n              <Button className={styles.nextbtn} onClick={SaveAssemplyHandler} style={{marginRight: \"2rem\"}} variant='contained' color='primary'>Save</Button>\r\n              \r\n            </div>\r\n          </div>\r\n      {/* <Route exact path='/maintenance_allocation/create/assignMaintenance'>\r\n          <AssignType selectedComponent={selectedComponent}/>\r\n      </Route> */}\r\n    </>\r\n    );\r\n  }\r\n  export default CreateRCM;","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\Main.js",["903","904"],"import React from 'react'\r\nimport styles from \"./MaintenanceAllocation.module.css\";\r\nimport { Button } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Main=(props)=> {\r\n    return <div className={styles.container}>\r\n  \r\n  <div className={styles.homeLinks}>\r\n        <Link to=\"/maintenance_allocation/create\">\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-microchip\"></i>\r\n          </div>\r\n          Create Maintenance Plan\r\n        </Link>\r\n        {/* <Link to=\"/maintenance_allocation/modify\">\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-microchip\"></i>\r\n          </div>\r\n          Modify Maintenance Plan\r\n        </Link>\r\n        <Link to=\"/maintenance_allocation/display\">\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-microchip\"></i>\r\n          </div>\r\n          Display Maintenance Plan\r\n        </Link>\r\n        <Link to=\"/maintenance_allocation/share\">\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-microchip\"></i>\r\n          </div>\r\n          Share Maintenance Plan\r\n        </Link> */}\r\n        <Link to=\"/maintenance_allocation/conduct_rcm_analysis\">\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-microchip\"></i>\r\n          </div>\r\n          Conduct Rcm Analysis\r\n        </Link>\r\n        {/* <Link to=\"/maintenance_allocation/add_data\">\r\n          <div className={styles.circleIcon}>\r\n            <i class=\"fas fa-microchip\"></i>\r\n          </div>\r\n          Add Data\r\n        </Link> */}\r\n      </div>\r\n      <div className={styles.netra}>\r\n        <img src=\"/netra-logo-removebg.png\" width={200} height={200} />\r\n        <div>NETRA</div>\r\n      </div>\r\n    </div>;\r\n  }\r\n  export default Main;","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\RCM\\critical_RCM.js",["905","906","907","908","909","910","911","912","913","914","915","916","917","918"],"import React,{useState} from 'react'\r\nimport Navigation from '../../../components/navigation/Navigation';\r\nimport styles from \"../CreateMaintenance/CreateMaintenance.module.css\";\r\nimport UserSelection from '../../../ui/userSelection/userSelection'\r\nimport { Button,RadioGroup,FormControlLabel,Radio, TextField } from '@material-ui/core';\r\nimport TreeComponent from '../../../components/sortableTree/SortableTree';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\nimport AutoSelect from '../../../ui/Form/AutoSelect';\r\nimport { Route, useHistory } from 'react-router';\r\n// import { useHistory } from \"react-router-dom\";\r\n// import {useNavigate} from 'react-router-dom'\r\n// import AssignType from './AssignType';\r\nimport AssignType from '../CreateMaintenance/AssignType';\r\nimport Table from '../../../ui/Table/Table';\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport CustomSelect from '../../../ui/Form/CustomSelect';\r\n\r\n\r\n\r\nconst Critical_RCM=(props)=> {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const currentSelection = useSelector(\r\n        (state) => state.userSelection.currentSelection\r\n      );\r\n    const[fData,setfData]=useState([]);\r\n    const[fDataCritical,setfDataCritical]=useState([]);\r\n    const[questionsOptions,setquestionsOptions]=useState(['Yes', 'No']);\r\n    const [questionsF,setquestionsF]=useState(null);\r\n    const [questionsConditional,setquestionsConditional]=useState(null);\r\n    const [questionsPreventive,setquestionsPreventive]=useState(null);\r\n    const [questionsCost,setquestionsCost]=useState(null);\r\n    const [questionsSensor,setquestionsSensor]=useState(null);\r\n    const [questionsContinous,setquestionsContinous]=useState(null);\r\n    const [questionsMission,setquestionsMission]=useState(null);\r\n\r\n    const [questionsOperating,setquestionsOperating]=useState(null);\r\n    const [questionsDowntime,setquestionsDowntime]=useState(null);\r\n    const [questionIsItCose, setquestionIsItCose]=useState(null);\r\n\r\n    // Missiona and Safety\r\n    const [questionSensorSafetyMission,setquestionSensorSafetyMission]=useState(null);\r\n    const [questionsPFS,setquestionsPFS]=useState(null);\r\n    const [questionInspection, setquestionInspection]=useState(null);\r\n    const [questionFeasible, setquestionFeasible]=useState(null);\r\n    let AllData = useSelector((state) => state.treeData.treeData);\r\n    \r\n    const  [finalRCMAns,setfinalRCMAns]=useState(null);\r\n    // AllData = AllData.filter(x => x.parentName === currentSelection[\"equipmentName\"])\r\n    // fData = fData.filter(x => x.parentName === currentSelection[\"equipmentName\"])\r\n    //console.log(fData);\r\n    // const rowData = []\r\n    const onLoadTreeStructure = () => {\r\n        debugger;\r\n        fetch(\"/fetch_assembly_rcm\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            system: currentSelection[\"equipmentName\"],\r\n            ship_name: currentSelection[\"shipName\"],\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n          },\r\n        })\r\n          .then((res) => res.json())\r\n          .then((d) => {\r\n            debugger;\r\n            let treeD = d[\"treeD\"];\r\n            let failureModes = d[\"failureMode\"];\r\n            setfData(d[\"asm\"]) \r\n            dispatch(\r\n              treeDataActions.setTreeData({\r\n                treeData: treeD,\r\n                failureModes: failureModes,\r\n              })\r\n            );\r\n          });\r\n      };\r\n\r\n      const[selectedComponent,setComponent]=useState(null)\r\n      const[selectedCriticalComponent,setCriticalComponent]=useState([])\r\n      const selectOnChange=(e,value)=>{\r\n        setComponent(value)\r\n        debugger;\r\n        let lmuData = []\r\n        let first_ele = AllData.filter(x => x.id === value.component_id)[0]\r\n        let pData = [first_ele]\r\n\r\n        while(pData.length > 0){\r\n            let ele = pData.pop()\r\n            let childs = AllData.filter(x => x.parentId === ele.id);\r\n            if(childs.length === 0){\r\n            lmuData.push(ele)\r\n            }else{\r\n                pData = [...pData, ...childs]\r\n            }\r\n        }\r\n        setfDataCritical(lmuData)\r\n      }\r\n\r\n    const lmuSelectOnChange = (e, value) => {\r\n        // console.log(value)\r\n        setCriticalComponent(value)\r\n    }\r\n\r\n    const reset_everything = () => {\r\n      setfinalRCMAns(null)\r\n      setquestionsConditional(null)\r\n      setquestionIsItCose(null)\r\n      setquestionsSensor(null)\r\n      setquestionsPreventive(null)\r\n      setquestionsContinous(null)\r\n      setquestionsCost(null)\r\n    }\r\n    const resert_below_conditional = () => {\r\n      setfinalRCMAns(null)\r\n      setquestionIsItCose(null)\r\n      setquestionsSensor(null)\r\n      setquestionsPreventive(null)\r\n      setquestionsContinous(null)\r\n      setquestionsCost(null)\r\n    }\r\n    const resert_below_cost = () => {\r\n      setfinalRCMAns(null)\r\n      setquestionsSensor(null)\r\n      setquestionsPreventive(null)\r\n      setquestionsContinous(null)\r\n      setquestionsCost(null)\r\n    }\r\n    const resert_below_sensor = () => {\r\n      setfinalRCMAns(null)\r\n      setquestionsContinous(null)\r\n    }\r\n    const reset_everything2 = () => {\r\n      setfinalRCMAns(null)\r\n      setquestionSensorSafetyMission(null)\r\n      setquestionsPFS(null)\r\n      setquestionInspection(null)\r\n      setquestionsPreventive(null)\r\n      setquestionFeasible(null)\r\n      setquestionIsItCose(null)\r\n      setquestionsCost(null)\r\n      setquestionsContinous(null)\r\n    }\r\n    const reset_below_sensor_s_m = () => {\r\n      setfinalRCMAns(null)\r\n      setquestionsPFS(null)\r\n      setquestionInspection(null)\r\n      setquestionsPreventive(null)\r\n      setquestionFeasible(null)\r\n      setquestionIsItCose(null)\r\n      setquestionsContinous(null)\r\n    }\r\n    const reset_below_PFS = () => {\r\n      setfinalRCMAns(null)\r\n      setquestionInspection(null)\r\n      setquestionsPreventive(null)\r\n      setquestionFeasible(null)\r\n      setquestionIsItCose(null)\r\n      setquestionsContinous(null)\r\n    }\r\n    const reset_below_Inspection = () => {\r\n      setfinalRCMAns(null)\r\n      setquestionsPreventive(null)\r\n      setquestionFeasible(null)\r\n      setquestionIsItCose(null)\r\n    }\r\n    const reset_below_Feasible = () => {\r\n      setfinalRCMAns(null)\r\n      setquestionsPreventive(null)\r\n      setquestionIsItCose(null)\r\n    }\r\n    const conditionMonitoring = (data, name) => {\r\n      if(name === \"Is Sensor based condition monitoring available?\"){\r\n        reset_below_sensor_s_m()\r\n        setquestionSensorSafetyMission(data)\r\n      }else if(name === \"Is P-F interval sufficiently long?\"){\r\n        reset_below_PFS()\r\n        setquestionsPFS(data)\r\n      }else if(name === \"Is Inspection Procedure available?\"){\r\n        reset_below_Inspection()\r\n        setquestionInspection(data)\r\n      }else if(name === \"Is Feasible?\"){\r\n        reset_below_Feasible()\r\n        setquestionFeasible(data)\r\n        if(data === \"Yes\"){\r\n          setfinalRCMAns(\"Inspection Based!!\")\r\n        }\r\n      }else if(name === \"Is Preventive Maintenance available?\"){\r\n        if(data === 'No'){\r\n          setquestionsPreventive(data)\r\n          setfinalRCMAns(\"Design Improvement is Recommended!!\")\r\n        }else{\r\n          setquestionsPreventive(data)\r\n        }\r\n      }else if(name === \"Is the cost is high?\"){\r\n        if(data === 'No'){\r\n          setfinalRCMAns('Calendar time based preventive Maintenance!!')\r\n          setquestionsCost(data)\r\n        }else{\r\n          setfinalRCMAns('Age based preventive Maintenance!!')\r\n          setquestionsCost(data)\r\n        }\r\n      }else if(name === \"Is Continous Monitoring feasible?\"){\r\n        if(data === \"No\"){\r\n          setquestionsContinous(data)\r\n          setfinalRCMAns(\"Sensor based intermittent monitoring!!\")\r\n        }else{\r\n          setquestionsContinous(data)\r\n          setfinalRCMAns(\"Sensor based continous monitoring!!\")\r\n        }\r\n      }\r\n    }\r\n\r\n    const conditionMonitoringOpr = (data, name) => {\r\n      if(name === 'Is conditional Monitoring available?'){\r\n        resert_below_conditional()\r\n        setquestionsConditional(data)\r\n      }else if(name === \"Is it costly?\"){\r\n        resert_below_cost()\r\n        setquestionIsItCose(data)\r\n      }else if(name === 'Is Preventive Maintenance available?'){\r\n        if(questionsConditional === 'No' || questionIsItCose === 'Yes'){\r\n          if(data === 'No'){\r\n            setquestionsPreventive(data)\r\n            setfinalRCMAns(\"Design Improvement is Recommended!!\")\r\n          }else{\r\n            setquestionsPreventive(data)\r\n          }\r\n        }\r\n      }else if(name === 'Is the cost is high?'){\r\n        //cost loop\r\n        if(data === 'No'){\r\n          setfinalRCMAns('Calendar time based preventive Maintenance!!')\r\n          setquestionsCost(data)\r\n        }else{\r\n          setfinalRCMAns('Age based preventive Maintenance!!')\r\n          setquestionsCost(data)\r\n        }\r\n      }else if(name === 'Is Sensor based Monitoring available?'){\r\n        resert_below_sensor()\r\n        if(data === 'No'){\r\n          setfinalRCMAns(\"Inspection!!\")\r\n          setquestionsSensor(data)\r\n        }else{\r\n          setquestionsSensor(data)\r\n        }\r\n      }else if(name === \"Is Continous Monitoring feasible?\"){\r\n          if(data === \"No\"){\r\n            setquestionsContinous(data)\r\n            setfinalRCMAns(\"Sensor based intermittent monitoring!!\")\r\n          }else{\r\n            setquestionsContinous(data)\r\n            setfinalRCMAns(\"Sensor based continous monitoring!!\")\r\n          }\r\n      }\r\n    }\r\n    const handleDowntimeChange = (data, name) => {\r\n      //hell\r\n      if(name === 'Is it critical for downtime?'){\r\n        reset_everything()\r\n        setquestionsDowntime(data)\r\n      }\r\n      if(questionsDowntime === 'Yes'){\r\n        conditionMonitoringOpr(data, name)\r\n      }else{\r\n        setfinalRCMAns(\"Component is non-critical - Run to Failure is recommended!!\")\r\n      }\r\n      //Is it critical for downtime?\r\n    }\r\n\r\n    const handleOperationalChange = (data, name) => {\r\n      if(name === 'Is it critical for operating enviornment?'){\r\n        reset_everything()\r\n        setquestionsOperating(data)\r\n      }\r\n      if(questionsOperating === \"Yes\"){\r\n        conditionMonitoringOpr(data, name)\r\n      }else if(questionsOperating === \"No\"){\r\n        handleDowntimeChange(data, name)\r\n      }\r\n    }\r\n    const questionOnChange = (e) => {\r\n      debugger;\r\n      let data = e.target.value;\r\n      let name = e.target.name;\r\n      if(name === 'Is is critical for safety?'){\r\n        reset_everything2()\r\n        setquestionsMission(null)\r\n        setquestionsOperating(null)\r\n        setquestionsDowntime(null)\r\n        setquestionsF(data)\r\n      }\r\n\r\n      if(questionsF === 'Yes'){\r\n        // llof for condition\r\n        conditionMonitoring(data, name)\r\n      }// loop ends for safety yes\r\n      else if(questionsF === 'No'){\r\n        if(name === 'Is it Critical for Mission?'){\r\n          reset_everything2()\r\n          setquestionsMission(data)\r\n        }\r\n        if(questionsMission === 'Yes'){\r\n          conditionMonitoring(data, name)\r\n        }else if(questionsMission === \"No\"){\r\n          handleOperationalChange(data, name)\r\n        }\r\n        // if(name === 'Is conditional Monitoring available?'){\r\n        //   //call condition monitoring block \r\n          \r\n        // }\r\n        \r\n      }\r\n    }\r\n    const handleDownload = () => {\r\n      let system = currentSelection[\"equipmentName\"].replace(/\\s/g,'')\r\n      let ship_name = currentSelection[\"shipName\"].replace(/\\s/g,'')\r\n      const link = document.createElement('a');\r\n      link.download = `${ship_name}-${system}.pdf`;\r\n          // 👇️ set to relative path\r\n      link.href = `/${ship_name}-${system}.pdf`;\r\n      link.click();\r\n          // link.target = '_blank';\r\n          // link.onClick = loadClick; \r\n    };\r\n    const addCriticalData = () => {\r\n      fetch(\"/rcm_report\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          system: currentSelection[\"equipmentName\"],\r\n          ship_name: currentSelection[\"shipName\"],\r\n          \r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .then((d) => {\r\n          alert(d.res)      \r\n        })\r\n    }\r\n   \r\n    const SaveAssemplyHandler = () => {\r\n        if(selectedCriticalComponent.length > 0){\r\n          fetch(\"/save_rcm\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              system: currentSelection[\"equipmentName\"],\r\n              ship_name: currentSelection[\"shipName\"],\r\n              assembly: selectedComponent,\r\n              component: selectedCriticalComponent,\r\n              rcm_val: finalRCMAns\r\n            }),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Accept: \"application/json\",\r\n            },\r\n          })\r\n            .then((res) => res.json())\r\n            .then((d) => {\r\n              console.log(d)\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const updateFinalRowData = (allRows) => {\r\n      \r\n      };\r\n    \r\n    // const  saveAsFile = (text, filename) => {\r\n    //     // Step 1: Create the blob object with the text you received\r\n    //     const type = 'application/text'; // modify or get it from response\r\n    //     const blob = new BlobBuilder([text], {type});\r\n      \r\n    //     // Step 2: Create Blob Object URL for that blob\r\n    //     const url = URL.createObjectURL(blob);\r\n      \r\n    //     // Step 3: Trigger downloading the object using that URL\r\n    //     const a = document.createElement('a');\r\n    //     a.href = url;\r\n    //     a.download = filename;\r\n    //     a.click(); // triggering it manually\r\n    //   }\r\n\r\n    return (\r\n      <>\r\n      <Navigation/>\r\n      <div className={styles.userSelection}>\r\n          <UserSelection/>\r\n          <Button className={styles.btn} onClick={onLoadTreeStructure} variant='contained' color='primary'>Submit</Button>\r\n          {/* <Route exact path='/maintenance_allocation/create'>\r\n          \r\n          </Route> */}\r\n      </div>\r\n      {/* <Route exact path='/maintenance_allocation/create'>\r\n          \r\n          \r\n      </Route> */}\r\n      <div className={styles.content}>\r\n            {/* <div className={styles.tree}>\r\n              \r\n            </div> */}\r\n            <div className={styles.rightSectionCrit}>\r\n              <div style={{display: \"flex\", paddingBottom: \"1rem\"}}>\r\n              <div className={styles.selectComponent}>\r\n                Select Assemblies to be included for RCM Analysis :\r\n                <AutoSelect\r\n                    fields={fData}\r\n                    onChange={selectOnChange}\r\n                    value={selectedComponent}\r\n                  ></AutoSelect>\r\n              </div>\r\n              <div className={styles.selectComponent}>\r\n                Select Component for criticality :\r\n                <AutoSelect\r\n                    multiple=\"multiple\"\r\n                    fields={fDataCritical}\r\n                    onChange={lmuSelectOnChange}\r\n                    value={selectedCriticalComponent}\r\n                  ></AutoSelect>\r\n              </div>\r\n              </div>\r\n              <div>\r\n              <Button className={styles.nextbtn} onClick={() => {}} style={{marginRight: \"2rem\"}} variant='contained' color='primary'> Optimize</Button>\r\n              <Button className={styles.nextbtn} onClick={addCriticalData} style={{marginRight: \"2rem\"}} variant='contained' color='primary'>Generate Report</Button>\r\n              <Button className={styles.nextbtn} onClick={handleDownload} style={{marginRight: \"2rem\"}} variant='contained' color='primary'>Download Report</Button>\r\n              <Button className={styles.nextbtn} onClick={SaveAssemplyHandler} style={{marginRight: \"2rem\"}} variant='contained' color='primary'>Save</Button>\r\n              </div>\r\n              \r\n              \r\n              <div style={{paddingTop: '1rem',display: 'flex',justifyContent: 'space-around'}}>\r\n                {finalRCMAns != null && <p style={{backgroundColor: 'cornflowerblue',color: 'antiquewhite',paddingRight: '4em',padding: '1em 4em 1em 4em'}}>{finalRCMAns}</p>}\r\n              </div>\r\n              <div style={{paddingTop: \"1rem\"}}>\r\n              <div style={{width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q1\"\r\n                name=\"Is is critical for safety?\"\r\n                label=\"Is is critical for safety?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>\r\n\r\n              {questionsF === 'No' && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q7\"\r\n                name= \"Is it Critical for Mission?\"\r\n                label=\"Is it Critical for Mission?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n\r\n\r\n              {/* {questionsF === 'A' && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q8\"\r\n                name= \"Is condition Monitoring available?\"\r\n                label=\"Is condition Monitoring available?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>} */}\r\n\r\n              {(questionsF === 'No' && questionsMission === \"No\") && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q9\"\r\n                name= \"Is it critical for operating enviornment?\"\r\n                label=\"Is it critical for operating enviornment?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n\r\n              {/* {questionsF === 'A' && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q10\"\r\n                name= \"Is condition Monitoring available?\"\r\n                label = \"Is condition Monitoring available?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>} */}\r\n\r\n              {/* {questionsF === 'A' && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q11\"\r\n                name= \"Is preventive Maintenance available?\"\r\n                label = \"Is preventive Maintenance available?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>} */}\r\n\r\n              {(questionsF === 'No' && questionsMission === \"No\" && questionsOperating === \"No\") && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q12\"\r\n                name= \"Is it critical for downtime?\"\r\n                label = \"Is it critical for downtime?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n              {/* this is for Sensor and Mission */}\r\n              {(questionsF === 'Yes' || questionsMission === \"Yes\") && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q12\"\r\n                name= \"Is Sensor based condition monitoring available?\"\r\n                label = \"Is Sensor based condition monitoring available?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n\r\n              {(questionSensorSafetyMission === 'Yes') && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q12\"\r\n                name= \"Is P-F interval sufficiently long?\"\r\n                label = \"Is P-F interval sufficiently long?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n\r\n              {(questionSensorSafetyMission === 'No' || questionsPFS === \"No\") && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q12\"\r\n                name= \"Is Inspection Procedure available?\"\r\n                label = \"Is Inspection Procedure available?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n\r\n              {(questionInspection === 'Yes') && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q12\"\r\n                name= \"Is Feasible?\"\r\n                label = \"Is Feasible?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n\r\n              {/* Above if for sensors and mission */}\r\n              {/* (questionsF === 'Yes') || (questionsF === 'No' && questionsMission === 'Yes') || */}\r\n              {((questionsF === 'No' && questionsMission === 'No' && questionsOperating === 'Yes') ||\r\n              (questionsF === 'No' && questionsMission === 'No' && questionsOperating === 'No' && questionsDowntime === 'Yes'))\r\n               && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q2\"\r\n                name= \"Is conditional Monitoring available?\"\r\n                label=\"Is conditional Monitoring available?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n\r\n              {((questionsOperating === 'Yes' && questionsConditional === \"Yes\") || \r\n              (questionsDowntime === 'Yes' && questionsConditional === \"Yes\"))\r\n               && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q2\"\r\n                name= \"Is it costly?\"\r\n                label=\"Is it costly?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n\r\n              {((questionsConditional === 'No' || questionIsItCose === \"Yes\") ||\r\n               (questionFeasible === \"No\") || (questionInspection === \"No\")) && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q3\"\r\n                name= \"Is Preventive Maintenance available?\"\r\n                label=\"Is Preventive Maintenance available?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n\r\n              {(questionsConditional === 'Yes'  && questionIsItCose === 'No') && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q4\"\r\n                name= \"Is Sensor based Monitoring available?\"\r\n                label=\"Is Sensor based Monitoring available?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n\r\n              {(questionsPreventive === 'Yes') && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q5\"\r\n                name= \"Is the cost is high?\"\r\n                label=\"Is the cost is high?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n\r\n              {((questionIsItCose === 'No' && questionsSensor === 'Yes') || (questionsPFS === 'Yes')) && <div style={{marginTop: \"1rem\", width: \"100%\", display: 'flex', justifyContent: 'space-around'}}>\r\n                  <CustomSelect\r\n                style={{ width: '70rem'}}\r\n                id=\"q6\"\r\n                name= \"Is Continous Monitoring feasible?\"\r\n                label=\"Is Continous Monitoring feasible?\"\r\n                fields={questionsOptions}\r\n                onChange={questionOnChange}\r\n                value={''}\r\n\r\n                />\r\n              </div>}\r\n\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n      {/* <Route exact path='/maintenance_allocation/create/assignMaintenance'>\r\n          <AssignType selectedComponent={selectedComponent}/>\r\n      </Route> */}\r\n    </>\r\n    );\r\n  }\r\n  export default Critical_RCM;","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\ShareMaintenance\\ShareMaintenance.js",["919","920","921","922","923"],"import React,{useState} from 'react'\r\nimport Navigation from '../../../components/navigation/Navigation';\r\nimport styles from \"./ShareMaintenance.module.css\";\r\nimport UserSelection from '../../../ui/userSelection/userSelection'\r\nimport { Button,RadioGroup,FormControlLabel,Radio } from '@material-ui/core';\r\nimport TreeComponent from '../../../components/sortableTree/SortableTree';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\nimport AutoSelect from '../../../ui/Form/AutoSelect';\r\n\r\n\r\n\r\nconst ShareMaintenance=(props)=> {\r\n    const dispatch = useDispatch();\r\n    const currentSelection = useSelector(\r\n        (state) => state.userSelection.currentSelection\r\n      );\r\n    let fData = useSelector((state) => state.treeData.treeData);\r\n    const sData = useSelector((state) => state.userSelection.componentsData);\r\n\r\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\r\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\r\n\r\n  const matchingId = matchingItems[0]?.id;\r\n  const onLoadTreeStructure = () => {\r\n    const payload = {\r\n      system: currentSelection[\"equipmentName\"],\r\n      ship_name: currentSelection[\"shipName\"],\r\n    };\r\n  \r\n    if (matchingId) {\r\n      payload.component_id = matchingId;\r\n    }\r\n    console.log(payload)\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        console.log(d);\r\n        let treeD = d[\"treeD\"];\r\n        let failureModes = d[\"failureMode\"];\r\n        console.log(failureModes)\r\n        dispatch(\r\n          treeDataActions.setTreeData({\r\n            treeData: treeD,\r\n          }),\r\n        );\r\n        dispatch(\r\n          treeDataActions.setFailureModes(failureModes)\r\n        )\r\n      });\r\n  };\r\n\r\n      const[nextOption,setNext]=useState('assignMaintenance')\r\n      const[selectedComponent,setComponent]=useState(null)\r\n      const selectOnChange=(e,value)=>{\r\n        debugger\r\n        setComponent(value)\r\n      }\r\n      const handleNextChange=(e)=>{\r\n        setNext(e.target.value)\r\n      }\r\n    return (\r\n      <>\r\n      <Navigation/>\r\n      <div className={styles.userSelection}>\r\n          <UserSelection/>\r\n          <Button className={styles.btn} onClick={onLoadTreeStructure} variant='contained' color='primary'>Submit</Button>\r\n      </div>\r\n          \r\n          <div className={styles.content}>\r\n            <div className={styles.tree}>\r\n              <div className={styles.treeChild}>\r\n                {/* <FullscreenIcon style={{ float: \"right\", marginRight: \"25px\" }} /> */}\r\n                <TreeComponent height='600px'></TreeComponent>\r\n                {/* <div></div> */}\r\n              </div>\r\n            </div>\r\n            <div className={styles.rightSection}>\r\n              <div className={styles.selectComponent}>\r\n                Select Component\r\n                <AutoSelect\r\n                    multiple={true}\r\n                    fields={fData}\r\n                    onChange={selectOnChange}\r\n                    value={selectedComponent}\r\n                  ></AutoSelect>\r\n              </div>\r\n              </div>\r\n              </div>\r\n      \r\n    </>\r\n    );\r\n  }\r\n  export default ShareMaintenance;","E:\\NetraB\\netra\\src\\pages\\Data Manager\\repairableOverhaul\\repairableSubTable.js",["924","925"],"import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport styles from \"./repairable.module.css\";\r\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst RepairableSubTable = (props) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [secondRows, setSecondRows] = useState([]);\r\n  const [numOverhaul, setNumOverhaul] = useState(\"1\");\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  //   const location = useLocation();\r\n  let secondRowHeight = 120;\r\n  if (secondRows.length > 0 && secondRows.length > 2) {\r\n    secondRowHeight = 200;\r\n  }\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n    // props.setGrid(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n  const numOverhaulColumns = [\r\n    <AgGridColumn\r\n      field=\"overhaulNum\"\r\n      headerName=\"Overhaul Number\"\r\n      headerTooltip=\"Overhaul Number\"\r\n      minWidth={500}\r\n      //   editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"runAge\"\r\n      headerName=\"Performed at Running Age (hours)\"\r\n      headerTooltip=\"Performed at Running Age (hours)\"\r\n      width={500}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"numMaint\"\r\n      headerName=\"Total Maintenance Events in this Overhaul\"\r\n      headerTooltip=\"Total Maintenance Events in this Overhaul\"\r\n      width={500}\r\n      editable={true}\r\n    />,\r\n  ];\r\n\r\n  const onSubmitNumOverhaul = () => {\r\n    let count = 1;\r\n    const sRows = [];\r\n    while (count <= +numOverhaul) {\r\n      sRows.push({\r\n        overhaulNum: count.toString(),\r\n        runAge: 6000 * count,\r\n        numMaint: 1,\r\n        id: uuid(),\r\n      });\r\n      count = count + 1;\r\n    }\r\n    setSecondRows(sRows);\r\n    props.secondTableDataUpdate(sRows);\r\n  };\r\n\r\n  const saveModifiedRows = (params) => {\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    console.log(allRowData);\r\n    props.secondTableDataUpdate(allRowData, true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.numOverhaulParent}>\r\n        <div className={styles.overhaulHaul}>\r\n          <h2>Total Number of Overhauls performed on this Equipment :</h2>\r\n          <TextField\r\n            required\r\n            id=\"outlined-required\"\r\n            label=\"Number of Overhauls\"\r\n            defaultValue=\"1\"\r\n            values={numOverhaul}\r\n            onChange={(e) => {\r\n              setNumOverhaul(e.target.value);\r\n            }}\r\n          />\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={onSubmitNumOverhaul}\r\n            style={{ width: \"8rem\", height: \"3rem\", marginTop: \"1rem\" }}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"ag-theme-alpine\"\r\n        style={{ height: secondRowHeight, width: \"100%\", marginBottom: \"2rem\" }}\r\n      >\r\n        <AgGridReact\r\n          defaultColDef={{\r\n            flex: 1,\r\n            resizable: true,\r\n            filter: true,\r\n            sortable: true,\r\n          }}\r\n          rowData={secondRows}\r\n          // columnDefs={props.columnDefs}\r\n          onGridReady={onGridReady}\r\n          onCellValueChanged={saveModifiedRows}\r\n        >\r\n          {numOverhaulColumns}\r\n        </AgGridReact>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepairableSubTable;\r\n","E:\\NetraB\\netra\\src\\ui\\Table\\OverhaulTable.js",["926","927"],"import React, { useEffect, useState } from \"react\";\r\nimport { AgGridColumn, AgGridReact } from \"ag-grid-react\";\r\nimport styles from \"./OverHaulTable.module.css\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport ReactDom from \"react-dom\";\r\nimport { v4 as uuid } from \"uuid\";\r\n// import { getDatePicker } from \"./DatePicker\";\r\n// import styles2 from \"../../pages/\";\r\n\r\nexport const getDatePicker = () => {\r\n  debugger;\r\n  const fillZeros = (a) => {\r\n    return Number(a) < 10 ? \"0\" + a : a;\r\n  };\r\n  const monthNames = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const getFormattedDateOutput = (dateString) => {\r\n    const dateParse = new Date(dateString);\r\n    const dd = dateParse.getDate();\r\n    const mm = dateParse.getMonth() + 1; //January is 0!\r\n    const yyyy = dateParse.getFullYear();\r\n    // console.log(dateString, dateParse);\r\n    return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n  };\r\n  function Datepicker() {}\r\n  Datepicker.prototype.init = function (params) {\r\n    this.textInput = React.createRef();\r\n    const getFormattedDateMaterial = (dateString) => {\r\n      const dateParse = new Date(\r\n        dateString.split(\"/\")[2] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[1] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[0]\r\n      );\r\n      const dd = dateParse.getDate();\r\n      const mm = dateParse.getMonth() + 1; //January is 0!\r\n      const yyyy = dateParse.getFullYear();\r\n      console.log(dateString, dateParse);\r\n      return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n    };\r\n    const eInput = React.createElement(TextField, {\r\n      type: \"date\",\r\n      defaultValue: getFormattedDateMaterial(params.value),\r\n      ref: this.textInput,\r\n      style: { width: \"95%\" },\r\n    });\r\n    this.div = document.createElement(\"div\");\r\n    this.div.className = \"ag-cell-parent-append\";\r\n    ReactDom.render(eInput, this.div);\r\n  };\r\n  Datepicker.prototype.getGui = function () {\r\n    return this.div;\r\n  };\r\n  Datepicker.prototype.afterGuiAttached = function () {\r\n    this.textInput.current.focus();\r\n  };\r\n  Datepicker.prototype.getValue = function () {\r\n    return getFormattedDateOutput(\r\n      this.textInput.current.querySelector(\"input\").value\r\n    );\r\n  };\r\n  Datepicker.prototype.destroy = function () {};\r\n  Datepicker.prototype.isPopup = function () {\r\n    return false;\r\n  };\r\n  return Datepicker;\r\n};\r\n//Date Picker End\r\nconst createData = (data) => {\r\n  const finalRows = [];\r\n  data.forEach((ele, index) => {\r\n    let overhaulCount = index + 1;\r\n    if (index === 0) {\r\n      finalRows.push({\r\n        fullWidth: true,\r\n        name: \"Initiation to\" + \" Overhaul \" + overhaulCount,\r\n        overhaulId: ele.id,\r\n      });\r\n    } else {\r\n      finalRows.push({\r\n        fullWidth: true,\r\n        name: \" Overhaul \" + index + \" to Overhaul \" + overhaulCount,\r\n        overhaulId: ele.id,\r\n      });\r\n    }\r\n    let numDps = ele[\"numMaint\"];\r\n    for (let i = 0; i < numDps; i++) {\r\n      finalRows.push({\r\n        Date: \"--/--/----\",\r\n        maintenanceType: \"--Select--\",\r\n        totalRunAge: 0,\r\n        subSystem: \"--Select--\",\r\n        fullWidth: false,\r\n        overhaulId: ele.id,\r\n      });\r\n    }\r\n  });\r\n\r\n  finalRows.push({\r\n    fullWidth: true,\r\n    name: \"Overhaul \" + data.length + \" to Present\",\r\n    overhaulId: uuid(),\r\n  });\r\n  return finalRows;\r\n};\r\nconst OverhaulTable = (props) => {\r\n  const [rowData, setRowData] = useState([]);\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const systemConfigurationTreeData = useSelector(\r\n    (state) => state.treeData.treeData\r\n  );\r\n  useEffect(() => {\r\n    let d = createData(props.data);\r\n    setRowData(d);\r\n  }, [props.data]);\r\n  let parent = \"\";\r\n  let subSystem = [];\r\n  try {\r\n    parent = systemConfigurationTreeData.filter((x) => x.parentId === null)[0]\r\n      .id;\r\n    subSystem = systemConfigurationTreeData.filter(\r\n      (x) => x.parentId === null || x.parentId === parent\r\n    );\r\n  } catch {\r\n    <Redirect to=\"/data_manager/historical_data\"></Redirect>;\r\n  }\r\n  //   const parent = systemConfigurationTreeData.filter(\r\n  //     (x) => x.parentId === null\r\n  //   )[0].id;\r\n  //   const subSystem = systemConfigurationTreeData.filter(\r\n  //     (x) => x.parentId === null || x.parentId === parent\r\n  //   );\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n    // props.setGrid(params.api);\r\n    //   setGridColumnApi(params.columnApi);\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n  const onFirstDataRendered = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    props.tableUpdate({ mainTable: allRowData, subTable: props.data });\r\n  };\r\n  const saveModifiedRows = (params) => {\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    props.tableUpdate({ mainTable: allRowData, subTable: props.data });\r\n  };\r\n  const colDefs = [\r\n    <AgGridColumn\r\n      headerName=\"Date (DD/MM/YYYY)\"\r\n      field=\"Date\"\r\n      //   headerTooltip=\"Date\"\r\n      //   minWidth={250}\r\n      //   cellEditor=\"datePicker\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      headerName=\"Maintenance Type\"\r\n      field=\"maintenanceType\"\r\n      headerTooltip=\"Maintenance Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      minWidth={400}\r\n      cellEditorParams={{ values: [\"Minor Refit\", \"Corrective Maintenance\"] }}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      headerName=\"Total Running Age till this Event\"\r\n      field=\"totalRunAge\"\r\n      headerTooltip=\"Total Running Age till this Event\"\r\n      minWidth={500}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      headerName=\"Associated Sub-System\"\r\n      field=\"subSystem\"\r\n      headerTooltip=\"Associated Sub-System\"\r\n      minWidth={500}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: subSystem.map((x) => x.name),\r\n      }}\r\n      editable={true}\r\n    />,\r\n  ];\r\n\r\n  const fullWidthCellRenderer = (params) => {\r\n    debugger;\r\n    let cssClass;\r\n    let message;\r\n    cssClass = styles[\"example-full-width-row\"];\r\n    message = params.data.name;\r\n    const eDiv = document.createElement(\"div\");\r\n    eDiv.innerHTML = '<div class=\"' + cssClass + '\">' + message + \"</div>\";\r\n    return eDiv.firstChild;\r\n  };\r\n  const AddRow = () => {\r\n    let newRowData = [\r\n      {\r\n        Date: \"10/10/2021\",\r\n        maintenanceType: \"\",\r\n        totalRunAge: \"\",\r\n        subSystem: \"\",\r\n        fullWidth: false,\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: newRowData,\r\n    });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    props.tableUpdate({ mainTable: allRowData, subTable: props.data });\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    props.tableUpdate({ mainTable: allRowData, subTable: props.data });\r\n  };\r\n  return (\r\n    <div className=\"ag-theme-alpine\" style={{ height: 400, width: \"100%\" }}>\r\n      <AgGridReact\r\n        rowData={rowData}\r\n        onGridReady={onGridReady}\r\n        onFirstDataRendered={onFirstDataRendered}\r\n        onCellValueChanged={saveModifiedRows}\r\n        isFullWidthCell={(rowNode) => rowNode.data.fullWidth}\r\n        fullWidthCellRenderer={fullWidthCellRenderer}\r\n        components={{\r\n          datePicker: getDatePicker(),\r\n        }}\r\n      >\r\n        {colDefs}\r\n      </AgGridReact>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OverhaulTable;\r\n","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\ModifyandDisplay\\ModifyandDisplayMaintenance.js",["928","929","930","931","932","933"],"import React,{useState} from 'react'\r\nimport Navigation from '../../../components/navigation/Navigation';\r\nimport styles from \"./ModifyandDisplayMaintenance.module.css\";\r\nimport UserSelection from '../../../ui/userSelection/userSelection'\r\nimport { Button,RadioGroup,FormControlLabel,Radio } from '@material-ui/core';\r\nimport TreeComponent from '../../../components/sortableTree/SortableTree';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\nimport AutoSelect from '../../../ui/Form/AutoSelect';\r\nimport { AgGridColumn } from 'ag-grid-react';\r\nimport {v4 as uuid} from 'uuid';\r\nimport Table from '../../../ui/Table/Table'\r\n\r\nconst ModifyandDisplayMaintenance=(props)=> {\r\n\r\n  // const rowData = []\r\n  const [rowData, setRowData] = useState([])\r\n  const [tableRows, setTableRows] = useState([])\r\n  const DCcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"name\"\r\n      headerName=\"Parameter Name\"\r\n      width={500}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"failure_mode_id\"\r\n      headerName=\"Failure Mode\"\r\n      type=\"number\"\r\n      width={500}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"level\"\r\n      headerName=\"Level Name\"\r\n      type=\"number\"\r\n      width={500}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"min_value\"\r\n      headerName=\"Min Value\"\r\n      type=\"number\"\r\n      width={500}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"max_value\"\r\n      headerName=\"Max Value\"\r\n      type=\"number\"\r\n      width={500}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"unit\"\r\n      headerName=\"Unit\"\r\n      type=\"number\"\r\n      width={500}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"threshold\"\r\n      headerName=\"Threshold\"\r\n      type=\"number\"\r\n      width={500}\r\n      editable={true}\r\n    />,\r\n  ];\r\n    const dispatch = useDispatch();\r\n    const currentSelection = useSelector(\r\n        (state) => state.userSelection.currentSelection\r\n      );\r\n    let fData = useSelector((state) => state.treeData.treeData);\r\n    const sData = useSelector((state) => state.userSelection.componentsData);\r\n\r\n  const currentEquipmentName = currentSelection[\"equipmentName\"];\r\n  const matchingItems = sData.filter(item => item.name === currentEquipmentName);\r\n\r\n  const matchingId = matchingItems[0]?.id;\r\n  const onLoadTreeStructure = () => {\r\n    const payload = {\r\n      system: currentSelection[\"equipmentName\"],\r\n      ship_name: currentSelection[\"shipName\"],\r\n    };\r\n  \r\n    if (matchingId) {\r\n      payload.component_id = matchingId;\r\n    }\r\n    console.log(payload)\r\n    fetch(\"/fetch_system\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify(payload),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((d) => {\r\n        console.log(d);\r\n        let treeD = d[\"treeD\"];\r\n        let failureModes = d[\"failureMode\"];\r\n        console.log(failureModes)\r\n        dispatch(\r\n          treeDataActions.setTreeData({\r\n            treeData: treeD,\r\n          }),\r\n        );\r\n        dispatch(\r\n          treeDataActions.setFailureModes(failureModes)\r\n        )\r\n      });\r\n  };\r\n      const[nextOption,setNext]=useState('assignMaintenance')\r\n      const[selectedComponent,setComponent]=useState(null)\r\n      const selectOnChange=(e,value)=>{\r\n        debugger\r\n        setComponent(value)\r\n      }\r\n      const handleNextChange=(e)=>{\r\n        setNext(e.target.value)\r\n      }\r\n      const updateFinalRowData = (allRows) => {\r\n        setTableRows(allRows);\r\n      };\r\n      const deleteProfile = () => {\r\n        if(selectedComponent != null){\r\n          fetch(\"/fetch_condition_monitoring\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              system: selectedComponent,\r\n              type: \"delete\"\r\n            }),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Accept: \"application/json\",\r\n            },\r\n          })\r\n            .then((res) => res.json())\r\n            .then((d) => {\r\n              console.log(d)\r\n            });\r\n        }else{\r\n          alert(\"Please select component first!!\")\r\n        }\r\n      }\r\n      const updateTable = () => {\r\n        fetch(\"/fetch_condition_monitoring\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            system: tableRows,\r\n            type: \"update\"\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n          },\r\n        })\r\n          .then((res) => res.json())\r\n          .then((d) => {\r\n            console.log(d)\r\n          });\r\n      }\r\n      const submitForDisplay = () => {\r\n        debugger;\r\n        if(selectedComponent == null){\r\n          alert(\"Please select component\")\r\n        }else{\r\n          fetch(\"/fetch_condition_monitoring\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              system: selectedComponent,\r\n              type: \"display\"\r\n            }),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Accept: \"application/json\",\r\n            },\r\n          })\r\n            .then((res) => res.json())\r\n            .then((d) => {\r\n              setRowData(d)\r\n            });\r\n        }\r\n      }\r\n    \r\n\r\n    return (\r\n      <>\r\n      <Navigation/>\r\n      <div className={styles.userSelection}>\r\n          <UserSelection/>\r\n          <Button className={styles.btn} onClick={onLoadTreeStructure} variant='contained' color='primary'>Submit</Button>\r\n      </div>\r\n          \r\n          <div className={styles.content}>\r\n            <div className={styles.tree}>\r\n              <div className={styles.treeChild}>\r\n                {/* <FullscreenIcon style={{ float: \"right\", marginRight: \"25px\" }} /> */}\r\n                <TreeComponent height='600px'></TreeComponent>\r\n                {/* <div></div> */}\r\n              </div>\r\n            </div>\r\n            <div className={styles.rightSection}>\r\n              <div>\r\n              <div className={styles.selectComponent}>\r\n                Select Component\r\n                <AutoSelect\r\n                    fields={fData}\r\n                    onChange={selectOnChange}\r\n                    value={selectedComponent}\r\n                  ></AutoSelect>\r\n              </div>\r\n              <Button className={styles.submitbtn} onClick={submitForDisplay} variant='contained' color='primary' >Submit</Button>\r\n              <Button className={styles.submitbtn} onClick={updateTable} variant='contained' color='primary' >Update</Button>\r\n              <Button className={styles.submitbtn} onClick={deleteProfile} variant='contained' color='primary' >Delete Param Profile</Button>\r\n              </div>\r\n              <div className={styles.tablediv}>\r\n                  <Table  columnDefs={DCcolumnDefs}\r\n                    rowData={rowData}\r\n                    tableUpdate={updateFinalRowData}\r\n                     />\r\n              </div>\r\n              </div>     \r\n              </div>\r\n      \r\n    </>\r\n    );\r\n  }\r\n  export default ModifyandDisplayMaintenance;","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\CreateMaintenance\\CreateMaintenance.js",["934","935","936"],"import React,{useState} from 'react'\r\nimport Navigation from '../../../components/navigation/Navigation';\r\nimport styles from \"./CreateMaintenance.module.css\";\r\nimport UserSelection from '../../../ui/userSelection/userSelection'\r\nimport { Button,RadioGroup,FormControlLabel,Radio } from '@material-ui/core';\r\nimport TreeComponent from '../../../components/sortableTree/SortableTree';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\nimport AutoSelect from '../../../ui/Form/AutoSelect';\r\nimport { Route } from 'react-router';\r\nimport AssignType from './AssignType';\r\n\r\n\r\n\r\nconst CreateMaintenance=(props)=> {\r\n    const dispatch = useDispatch();\r\n    const currentSelection = useSelector(\r\n        (state) => state.userSelection.currentSelection\r\n      );\r\n    let fData = useSelector((state) => state.treeData.treeData);\r\n    //console.log(fData);\r\n    const sData = useSelector((state) => state.userSelection.componentsData);\r\n\r\n    const currentEquipmentName = currentSelection[\"equipmentName\"];\r\n    const matchingItems = sData.filter(item => item.name === currentEquipmentName);\r\n  \r\n    const matchingId = matchingItems[0]?.id;\r\n    const onLoadTreeStructure = () => {\r\n      const payload = {\r\n        system: currentSelection[\"equipmentName\"],\r\n        ship_name: currentSelection[\"shipName\"],\r\n      };\r\n    \r\n      if (matchingId) {\r\n        payload.component_id = matchingId;\r\n      }\r\n      console.log(payload)\r\n      fetch(\"/fetch_system\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify(payload),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n        .then((res) => res.json())\r\n        .then((d) => {\r\n          console.log(d);\r\n          let treeD = d[\"treeD\"];\r\n          let failureModes = d[\"failureMode\"];\r\n          console.log(failureModes)\r\n          dispatch(\r\n            treeDataActions.setTreeData({\r\n              treeData: treeD,\r\n            }),\r\n          );\r\n          dispatch(\r\n            treeDataActions.setFailureModes(failureModes)\r\n          )\r\n        });\r\n    };\r\n\r\n      const[selectedComponent,setComponent]=useState(null)\r\n      const selectOnChange=(e,value)=>{\r\n        setComponent(value)\r\n      }\r\n    return (\r\n      <>\r\n      <Navigation/>\r\n      <div className={styles.userSelection}>\r\n          <UserSelection/>\r\n          <Route exact path='/maintenance_allocation/create'>\r\n          <Button className={styles.btn} onClick={onLoadTreeStructure} variant='contained' color='primary'>Submit</Button>\r\n          </Route>\r\n      </div>\r\n      <Route exact path='/maintenance_allocation/create'>\r\n          \r\n          <div className={styles.content}>\r\n            <div className={styles.tree}>\r\n              <div className={styles.treeChild}>\r\n                {/* <FullscreenIcon style={{ float: \"right\", marginRight: \"25px\" }} /> */}\r\n                <TreeComponent height='600px'></TreeComponent>\r\n                {/* <div></div> */}\r\n              </div>\r\n            </div>\r\n            <div className={styles.rightSection}>\r\n              <div className={styles.selectComponent}>\r\n                Select Component\r\n                <AutoSelect\r\n                    fields={fData}\r\n                    onChange={selectOnChange}\r\n                    value={selectedComponent}\r\n                  ></AutoSelect>\r\n              </div>\r\n              \r\n              <Button className={styles.nextbtn} onClick={()=>{\r\n                if(selectedComponent!=null){\r\n                  props.history.push(`/maintenance_allocation/create/assignMaintenance`)\r\n                  }else{\r\n                    alert('Select a component')\r\n                  }}} variant='contained' color='primary'>Next</Button>\r\n            </div>\r\n          </div>\r\n      </Route>\r\n      <Route exact path='/maintenance_allocation/create/assignMaintenance'>\r\n          <AssignType selectedComponent={selectedComponent}/>\r\n      </Route>\r\n    </>\r\n    );\r\n  }\r\n  export default CreateMaintenance;","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\AddData\\AddData.js",[],"E:\\NetraB\\netra\\src\\pages\\dragNdrop\\Layout\\layout.js",["937","938","939","940","941","942","943","944"],"import ComponentDetails from \"../ComponentDetails/ComponentDetails\";\r\nimport Flow from \"../Flow/flow\";\r\nimport classes from \"./layout.module.css\";\r\nimport Sidebar from \"../SideBar/Sidebar\";\r\nimport { elementActions } from \"../../../store/elements\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport UserSelection from \"../../../ui/userSelection/userSelection\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete/Autocomplete\";\r\nimport { TextField,Button, Select } from \"@material-ui/core\";\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport CustomizedSnackbars from \"../../../ui/CustomSnackBar\";\r\nimport { filter } from \"lodash\";\r\n\r\nconst Layout = (props) => {\r\n  useEffect(()=>{\r\n    fetch(\"/fetch_tasks\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        \r\n        setTaskNames(data['tasks'])\r\n        console.log(data['tasks'])\r\n      });\r\n  },[])\r\n  const [taskNames,setTaskNames]=useState([])\r\n  // Snackbar\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  const history=useHistory()\r\n  const dispatch = useDispatch();\r\n  const allElements = useSelector((state) => state.elements);\r\n  const components = useSelector((state) => state.userSelection.componentsData);\r\n  const currentSelection = useSelector((state) => state.userSelection.currentSelection);\r\n  // console.log(components);\r\n  const onSaveHandler = () => {\r\n    // const stringObject = JSON.stringify(allElements);\r\n    // localStorage.setItem(\"flow\", stringObject);\r\n    // console.log(prompt(\"Enter Task Name\"))\r\n\r\n    //SAVE TO DB LOGIC - NOW USING SAVE TO FILE\r\n    // let edges=allElements.elements.filter(data=>data.dtype==='edge')\r\n    // let finalData=allElements.elements.filter(data=>data.dtype==='node').map(\r\n    //   node=>{\r\n    //     if(node.type==='component'){\r\n    //       let edge=edges.filter(edge=>edge.target===node.id)[0]\r\n    //       let newnode={...node,parentId:edge.source,equipmentId:components.filter(x=>x.name===node.data.label)[0].id}\r\n    //       return newnode\r\n    //     }\r\n    //     else if(node.type==='systemNode'){\r\n    //       let newnode={...node,data:{label:taskName}}\r\n    //       return newnode\r\n    //     }\r\n    //   }\r\n    // )\r\n    // console.log(finalData);\r\n\r\n    //SAVING TO FILE DIRECTLY\r\n    debugger;\r\n    fetch(\"/save_task_configuration\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        taskData:allElements['elements'],\r\n        taskName: taskName\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setSnackBarMessage({\r\n          severity: \"success\",\r\n          message: data.message,\r\n          showSnackBar: true,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setSnackBarMessage({\r\n          severity: \"error\",\r\n          message: \"Some Error Occured. \" + error,\r\n          showSnackBar: true,\r\n        })\r\n      })\r\n    setOpen(false)\r\n  };\r\n  const onLoadHandler = () => {\r\n    console.log(loadname);\r\n    // const ele = JSON.parse(localStorage.getItem(\"flow\"));\r\n\r\n    fetch(\"/load_task_configuration\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        taskName:loadname\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        dispatch(elementActions.onRestoreHandler({ elements: data }));\r\n        setSnackBarMessage({\r\n          severity: \"success\",\r\n          message: \"Data loaded successfully\",\r\n          showSnackBar: true,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setSnackBarMessage({\r\n          severity: \"error\",\r\n          message: \"Some Error Occured. \" + error,\r\n          showSnackBar: true,\r\n        })\r\n      })\r\n      handleLoadClose()\r\n  };\r\n  const [value, setValue] = useState([]);\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const handleChange = (event, newValue) => {\r\n    console.log(newValue);\r\n    // alert(newValue);\r\n    setValue(newValue);\r\n  };\r\n  const reactFlowWrapper = useRef(null);\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n  const [taskName,setTaskName] = useState(\"\")\r\n  const customSelectData = useSelector(\r\n    (state) => state.userSelection.userSelection\r\n  );\r\n  // const currentSelection = useSelector(\r\n  //   (state) => state.userSelection.currentSelection\r\n  // );\r\n  const options=customSelectData[\"equipmentName\"]\r\n  const ship_name = currentSelection[\"shipName\"]\r\n  // console.log(currentSelection)\r\n  const AddNodes=()=>{\r\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n    \r\n    \r\n    let i=50\r\n    const newNode = {\r\n      id: uuid(),\r\n      type:\"systemNode\",\r\n      position:reactFlowInstance.project({\r\n        x:  reactFlowBounds.left+600,\r\n        y:  reactFlowBounds.top+600,\r\n      }),\r\n      data: { label: \"Task Name\" },\r\n      dtype: \"node\",\r\n      shipName: ship_name\r\n      \r\n    }\r\n    dispatch(elementActions.addElement({ ele: newNode }))\r\n\r\n  value.map(equipment=>{\r\n    debugger\r\n    let style = {\r\n      border: \"1px solid black\",\r\n      borderRadius: \"5px\",\r\n      background: \"#DCFFC0\",\r\n      borderColor: \"black\",\r\n      padding:'20px'\r\n    }\r\n    const position = reactFlowInstance.project({\r\n      x:  reactFlowBounds.left+i,\r\n      y:  reactFlowBounds.top+i,\r\n    });\r\n    const newNode = {\r\n      id: uuid(),\r\n      type:\"component\",\r\n      position,\r\n      data: { label: equipment },\r\n      dtype: \"node\",\r\n      style: style,\r\n      shipName: ship_name,\r\n      metaData: currentSelection\r\n    }\r\n    i+=50\r\n    dispatch(elementActions.addElement({ ele: newNode }))\r\n  })\r\n  \r\n \r\n\r\n  }\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const handleClickOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const [loadopen, setLoadOpen] = useState(false);\r\n  const handleLoadClickOpen = () => setLoadOpen(true);\r\n  const handleLoadClose = () => setLoadOpen(false);\r\n  const [loadname,setLoadName]=useState('')\r\n  const [showDetails,setShowDetails]=useState(false)\r\n\r\n  return (\r\n    <div className={classes.parent}>\r\n        {/* <div className={classes.text_div}>\r\n          <Sidebar></Sidebar>\r\n          <div className={classes.buttonDiv}>\r\n          <button onClick={onSaveHandler} className={classes.savebtn}>\r\n            Save\r\n          </button>\r\n          <button onClick={onRestoreHandler} className={classes.restorebtn}>\r\n            Restore\r\n          </button>\r\n        </div>\r\n        </div> */}\r\n        <div className={classes.flow_div}>\r\n          <Flow reactFlowInstance={reactFlowInstance} reactFlowWrapper={reactFlowWrapper} setReactFlowInstance={setReactFlowInstance}></Flow>\r\n        </div>\r\n      <div className={classes.sidebar}>\r\n      <div className={classes.buttonDiv}>\r\n          <button onClick={()=>history.push(\"/\")} className={classes.savebtn}>\r\n            Home\r\n          </button>\r\n          <button onClick={handleClickOpen} className={classes.restorebtn}>\r\n            Save\r\n          </button>\r\n          <button onClick={handleLoadClickOpen} className={classes.restorebtn}>\r\n            Load\r\n          </button>\r\n          {showDetails?<button onClick={()=>{setShowDetails(false)}} className={classes.restorebtn}>\r\n            Back\r\n          </button>:<button onClick={()=>{setShowDetails(true)}} className={classes.restorebtn}>\r\n            Component Details\r\n          </button>}\r\n          {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Save\r\n      </Button> */}\r\n      <Dialog maxWidth='sm' fullWidth open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Enter task name</DialogTitle>\r\n        <DialogContent>\r\n          \r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Task name\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={taskName}\r\n            onChange={(e)=>setTaskName(e.target.value)}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={onSaveHandler} color=\"primary\">\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog maxWidth='sm' fullWidth open={loadopen} onClose={handleLoadClose} aria-labelledby=\"form-dialog-title\">\r\n        <DialogTitle id=\"form-dialog-title\">Select Task</DialogTitle>\r\n        <DialogContent dividers>\r\n          \r\n          <Autocomplete\r\n            value={loadname}\r\n            options={taskNames}\r\n            onChange={(value,newValue)=>setLoadName(newValue)}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"standard\" />\r\n            )}\r\n            />\r\n            \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleLoadClose} color=\"primary\">\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={onLoadHandler} color=\"primary\">\r\n            Load\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n     \r\n        </div>\r\n        {/* <p>Here the details of each component goes!!</p> */}\r\n       {showDetails?<ComponentDetails></ComponentDetails>:<><UserSelection alignment=\"vertical\" inputWidth=\"250px\"/>\r\n        \r\n        <Autocomplete\r\n        multiple\r\n      options={options}\r\n      //value={value}\r\n      onChange={handleChange}\r\n      // groupBy={(option) => option.parentName}\r\n      // getOptionLabel={(option) => option.name}\r\n      style={{ width: 300 }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Select Equipments\"\r\n          variant=\"outlined\"\r\n        />\r\n        \r\n      )}  \r\n    />\r\n    <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={()=>AddNodes()}\r\n              >\r\n                Load Equipments\r\n              </Button>\r\n    </>}\r\n    \r\n    \r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\CreateProfile.js",["945"],"import React, { useState } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CustomTextInput from \"../../ui/Form/CustomTextInput\";\r\nimport CustomSelect from \"../../ui/Form/CustomSelect\";\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: \"absolute\",\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={onClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst CreateProfile = (props) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [stageInput, setStageInput] = useState([]);\r\n  const [missionName, setMissionName] = useState(\"\");\r\n  const [targetReliability, setTargetReliability] = useState(\"\");\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setStageInput([])\r\n    setMissionName(\"\")\r\n    setTargetReliability(\"\")\r\n  };\r\n\r\n  const onAddNewStage = () => {\r\n    setStageInput((prevstate) => {\r\n      // const stateLen = prevstate.length;\r\n      // // return [...prevstate, stateLen + 1];\r\n      return [...prevstate, { stageName: \"\", duration: \"\" }];\r\n    });\r\n    console.log(stageInput);\r\n  };\r\n  const onDeleteStage = (index) => {\r\n    debugger;\r\n    const stageCopy = [...stageInput];\r\n    stageCopy.splice(index, 1);\r\n    setStageInput(stageCopy);\r\n  };\r\n  const handleStageChange = (index, e) => {\r\n    let newArr = [...stageInput];\r\n    newArr[index][e.target.name] = e.target.value;\r\n    setStageInput(newArr);\r\n  };\r\n  const saveProfile = () => {\r\n    let saveObject = {\r\n      missionName: missionName,\r\n      tar_rel: targetReliability,\r\n      stages: stageInput,\r\n    };\r\n    props.saveTempMission(saveObject);\r\n    setMissionName(\"\");\r\n    setTargetReliability(\"\");\r\n    setStageInput([]);\r\n    handleClose();\r\n  };\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={handleClickOpen}\r\n        style={{\r\n          marginTop: \"2rem\",\r\n          borderRadius: \"100px\",\r\n        }}\r\n      >\r\n        Create Temporary Mission Profile\r\n      </Button>\r\n      <Dialog\r\n        onClose={handleClose}\r\n        aria-labelledby=\"customized-dialog-title\"\r\n        open={open}\r\n        fullWidth={true}\r\n        maxWidth=\"md\"\r\n      >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n          Temporary Mission Profile\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Grid container item spacing={4}>\r\n            <Grid item xs={5} style={{ marginTop: \"10px\" }}>\r\n              <CustomTextInput\r\n                style={{ minWidth: 320 }}\r\n                label=\"Mission Name\"\r\n                id=\"mission-name\"\r\n                name=\"missionName\"\r\n                value={missionName}\r\n                onChange={(e) => setMissionName(e.target.value)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={5} style={{ marginTop: \"10px\" }}>\r\n              <CustomTextInput\r\n                style={{ minWidth: 320 }}\r\n                label=\"Set Target Reliability(%)\"\r\n                id=\"set-target-reliability\"\r\n                name=\"targetReliability\"\r\n                value={targetReliability}\r\n                onChange={(e) => setTargetReliability(e.target.value)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container>\r\n            {stageInput.map((stage, id) => {\r\n              return (\r\n                <Grid container item key={id} spacing={4}>\r\n                  <Grid item xs={5} style={{ marginTop: \"10px\" }}>\r\n                    <CustomSelect\r\n                      label=\"Stage\"\r\n                      id=\"stage\"\r\n                      onChange={(e) => {\r\n                        handleStageChange(id, e);\r\n                      }}\r\n                      // className={PhaseClasses.formControl}\r\n                      name=\"stageName\"\r\n                      value={stage.stageName}\r\n                      fields={[\r\n                        \"Harbor\",\r\n                        \"Entry Leaving Harbor\",\r\n                        \"Cruise\",\r\n                        \"Defense Station\",\r\n                        \"Action Station\",\r\n                      ]}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={5} style={{ marginTop: \"10px\" }}>\r\n                    <CustomTextInput\r\n                      style={{ width: 320 }}\r\n                      label=\"Duration\"\r\n                      id=\"duration\"\r\n                      name=\"duration\"\r\n                      value={stage.duration}\r\n                      onChange={(e) => {\r\n                        handleStageChange(id, e);\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item xs={1}>\r\n                    <div\r\n                      onClick={() => {\r\n                        onDeleteStage(id);\r\n                      }}\r\n                      style={{ marginTop: \"100%\" }}\r\n                    >\r\n                      <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        class=\"icon icon-tabler icon-tabler-trash\"\r\n                        width=\"32\"\r\n                        height=\"32\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        stroke-width=\"1.5\"\r\n                        stroke=\"#0d1a45\"\r\n                        fill=\"none\"\r\n                        stroke-linecap=\"round\"\r\n                        stroke-linejoin=\"round\"\r\n                      >\r\n                        <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n                        <line x1=\"4\" y1=\"7\" x2=\"20\" y2=\"7\" />\r\n                        <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\" />\r\n                        <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\" />\r\n                        <path d=\"M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12\" />\r\n                        <path d=\"M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3\" />\r\n                      </svg>\r\n                    </div>\r\n                  </Grid>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n          <Button\r\n            style={{\r\n              float: \"right\",\r\n              margin: \"2rem 0 0 0\",\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => onAddNewStage()}\r\n          >\r\n            Add Stage\r\n          </Button>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            variant=\"contained\"\r\n            autoFocus\r\n            onClick={saveProfile}\r\n            color=\"primary\"\r\n          >\r\n            Save as temporary mission profile\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateProfile;\r\n","E:\\NetraB\\netra\\src\\ui\\Form\\SelectWithLimit.js",[],"E:\\NetraB\\netra\\src\\pages\\Reliability Dashboard\\BarGraph.js",[],"E:\\NetraB\\netra\\src\\pages\\Data Manager\\parameterEstimation\\parameterEstimation.js",["946","947"],"import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport SelectEquipment from \"../selectEquipment/selectEquipment\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { treeDataActions } from \"../../../store/TreeDataStore\";\r\n\r\nconst ParameterStyles = makeStyles({\r\n  dropdown: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    flexDirection: \"row\",\r\n    marginBottom: \"10px\",\r\n  },\r\n});\r\nfunction ParameterEstimation(props) {\r\n  const dispatch = useDispatch();\r\n  debugger;\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [selectedEquipmentList, setSelectedEquipmentList] = useState([]);\r\n  const ParameterClasses = ParameterStyles();\r\n  const [rowState, setRows] = useState([]);\r\n  let systemRepairTypeBool = false;\r\n  const systemConfigurationTreeData = useSelector(\r\n    (state) => state.treeData.treeData\r\n  );\r\n  if (systemConfigurationTreeData.length > 0) {\r\n    const equipment = selectedEquipmentList.map((e) => e.repairType)[0]\r\n    console.log(equipment);\r\n    systemRepairTypeBool =\r\n      equipment === \"Replaceable\" ? true : false;\r\n  }\r\n  let ParameterColumns = [];\r\n  if (!systemRepairTypeBool) {\r\n    // Repairable Data\r\n    ParameterColumns = [\r\n      <AgGridColumn\r\n        colId=\"EquipmentName\"\r\n        field=\"EquipmentName\"\r\n        headerName=\"Equipment Name\"\r\n        minWidth={200}\r\n        editable={true}\r\n      />,\r\n      <AgGridColumn\r\n        colId=\"alpha\"\r\n        field=\"alpha\"\r\n        headerName=\"alpha\"\r\n        minWidth={200}\r\n        type=\"number\"\r\n        editable={false}\r\n      />,\r\n      <AgGridColumn\r\n        colId=\"beta\"\r\n        field=\"beta\"\r\n        headerName=\"β\"\r\n        minWidth={200}\r\n        type=\"number\"\r\n        editable={false}\r\n      />,\r\n    ];\r\n  } else {\r\n    ParameterColumns = [\r\n      <AgGridColumn\r\n        colId=\"EquipmentName\"\r\n        field=\"EquipmentName\"\r\n        headerName=\"Equipment Name\"\r\n        minWidth={200}\r\n        editable={true}\r\n      />,\r\n      <AgGridColumn\r\n        colId=\"eta\"\r\n        field=\"eta\"\r\n        headerName=\"η-Scale Parameter\"\r\n        minWidth={200}\r\n        type=\"number\"\r\n        editable={false}\r\n      />,\r\n      <AgGridColumn\r\n        colId=\"beta\"\r\n        field=\"beta\"\r\n        headerName=\"β-Shape Parameter\"\r\n        minWidth={200}\r\n        type=\"number\"\r\n        editable={false}\r\n      />,\r\n    ];\r\n  }\r\n\r\n\r\n  const onHandleSubmitClick = () => {\r\n    const rowD = selectedEquipmentList.map((ele) => {\r\n      if (!systemRepairTypeBool) {\r\n        return {\r\n          id: ele.id,\r\n          EquipmentName: ele.name,\r\n          eta: \"-\",\r\n          beta: \"-\",\r\n        };\r\n      } else {\r\n        return {\r\n          id: ele.id,\r\n          EquipmentName: ele.name,\r\n          alpha: \"-\",\r\n          beta: \"-\",\r\n        };\r\n      }\r\n    });\r\n    debugger\r\n    setRows(rowD);\r\n    dispatch(\r\n      treeDataActions.setP(selectedEquipmentList)\r\n    )\r\n    console.log(rowD)\r\n  };\r\n\r\n\r\n  const onUpdateSelectedEquipmentList = (d) => {\r\n    setSelectedEquipmentList(d);\r\n  };\r\n  console.log(selectedEquipmentList)\r\n\r\n  const updateFinalRowData = (allRows) => {\r\n    console.log(\"This\");\r\n    console.log(allRows);\r\n  };\r\n  const onHandleUpdateEtaBetaDB = () => {\r\n    fetch(\"/update_parameters\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        data: rowState,\r\n        isReplacable: systemRepairTypeBool,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setRows(data);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={ParameterClasses.dropdown}>\r\n        <div>\r\n          <SelectEquipment\r\n            list={props.list}\r\n            onUpdateSelectedEquipmentList={onUpdateSelectedEquipmentList}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ marginLeft: \"20px\" }}\r\n            onClick={onHandleSubmitClick}\r\n          >\r\n            Submit\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ marginLeft: \"20px\" }}\r\n            onClick={onHandleUpdateEtaBetaDB}\r\n          >\r\n            Update Parameters from Database\r\n          </Button>\r\n\r\n          {/* <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ marginLeft: \"20px\" }}\r\n            onClick={onHandleUpdateEtaBetaDB}\r\n          >\r\n            Update Parameters from Database\r\n          </Button> */}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <Table\r\n          columnDefs={ParameterColumns}\r\n          setGrid={setGridApi}\r\n          gridApi={gridApi}\r\n          rowData={rowState}\r\n          tableUpdate={updateFinalRowData}\r\n        ></Table>\r\n        <div>\r\n          <Button\r\n            style={{ float: \"right\" }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            startIcon={<AddIcon />}\r\n            component={Link}\r\n            to=\"/data_manager/historical_data\"\r\n          >\r\n            Add Data\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      {/* <Button\r\n        variant='contained'\r\n        startIcon={<AddIcon />}\r\n        color=\"secondary\"\r\n        onClick={()=>AddRow()}\r\n        >Add Row</Button>\r\n        <IconButton>\r\n        <DeleteIcon />\r\n        </IconButton> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ParameterEstimation;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\importData\\importData.js",["948"],"import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport LensIcon from \"@material-ui/icons/Lens\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\nconst ImportData = (props) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const rows = props.childList.map((x) => {\r\n    return {\r\n      id: x.id,\r\n      ComponentName: x.name,\r\n      ScaleParameter: \"\",\r\n      ShapeParameter: \"\",\r\n    };\r\n  });\r\n  const ImportColumns = [\r\n    <AgGridColumn\r\n      field=\"ComponentName\"\r\n      headerName=\"Component Name\"\r\n      minWidth={200}\r\n      checkboxSelection={true}\r\n      editable={false}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"ScaleParameter\"\r\n      headerName=\"Scale Parameter\"\r\n      minWidth={200}\r\n      type=\"number\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"ShapeParameter\"\r\n      headerName=\"Shape Parameter\"\r\n      minWidth={200}\r\n      type=\"number\"\r\n      editable={true}\r\n    />,\r\n  ];\r\n\r\n  const updateFinalRowData = (allRows) => {\r\n    debugger;\r\n    props.tableUpdate(allRows, \"import_replacable\");\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  return (\r\n    <div>\r\n      <Table\r\n        columnDefs={ImportColumns}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        rowData={rows}\r\n        tableUpdate={updateFinalRowData}\r\n      />\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImportData;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\historicalData.js",["949","950"],"import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Link, Route, Switch } from \"react-router-dom\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport styles from \"./historicalData.module.css\";\r\nimport ImportData from \"../importData/importData\";\r\nimport FailureDataPoint from \"./failureDataPoint\";\r\nimport OEM from \"./oem\";\r\nimport OEMExpert from \"./oemExpert\";\r\nimport Expert from \"./expert\";\r\nimport ProbabilityFailure from \"./probabilityFailure\";\r\nimport NPRD from \"./nprd\";\r\nimport IntervalDataPoint from \"./IntervalData\";\r\nimport { useSelector } from \"react-redux\";\r\nimport RepairableOverhaul from \"../repairableOverhaul/repairableOverhaul\";\r\nimport treeData from \"../../../store/TreeDataStore\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    // marginTop: theme.spacing(10),\r\n    // marginBottom: theme.spacing(5),\r\n    margin: theme.spacing(8),\r\n    minWidth: 250,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\nfunction HistoricalData(props) {\r\n  const classes = useStyles();\r\n  const [historicalChildData, setHistoricalChildData] = useState([]);\r\n  const systemConfigurationTreeData = useSelector(\r\n    (state) => state.treeData.sortTreeData\r\n  );\r\n  // let filteredSystemConfigData = [];\r\n  const [type, setType] = React.useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    debugger;\r\n    // alert(event.target.value);\r\n    setType(event.target.value);\r\n    if (event.target.value === \"OEM + Expert\") {\r\n      props.handleDropdown(\"oemE\");\r\n    } else if (event.target.value === \"Expert Judgement\") {\r\n      props.handleDropdown(\"expert\");\r\n    } else if (event.target.value === \"oem\") {\r\n      props.handleDropdown(\"oem\");\r\n    } else if (event.target.value === \"Import Data\") {\r\n      props.handleDropdown(\"import_replacable\");\r\n    } else if (event.target.value === \"Failure Data Point\") {\r\n      props.handleDropdown(\"fdp\");\r\n    } else if (event.target.value === \"Interval Data Point\") {\r\n      props.handleDropdown(\"interval\");\r\n    } else if (event.target.value === \"Probability Failure\") {\r\n      props.handleDropdown(\"prob\");\r\n    }else if (event.target.value === \"NPRD\") {\r\n      props.handleDropdown(\"nprd\");\r\n    }\r\n  };\r\n  let systemRepairTypeBool = false;\r\n  let systemRepairedReplaceableOptions = (\r\n    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n      <InputLabel>Select Historical Data Type </InputLabel>\r\n      <Select\r\n        value={type}\r\n        onChange={handleChange}\r\n        label=\"Select Historical Data Type\"\r\n      >\r\n        <MenuItem value=\"\">\r\n          <em>Select Type</em>\r\n        </MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n  console.log(systemConfigurationTreeData, \"system conf\")\r\n\r\n  if (systemConfigurationTreeData.length > 0) {\r\n    // filteredSystemConfigData = systemConfigurationTreeData.filter(\r\n    //   (x) => x.parentId === null\r\n    // )[0];\r\n    // console.log(equipment)\r\n    // debugger\r\n    const EquipRtype = systemConfigurationTreeData[0]?.repairType\r\n    systemRepairTypeBool =\r\n    EquipRtype === \"Replaceable\" ? true : false;\r\n      console.log(systemRepairTypeBool);\r\n      if(!systemRepairTypeBool){ \r\n        <Redirect to=\"/data_manager/historical_data/repairable_overhaul\"></Redirect>\r\n       }\r\n    \r\n    if (EquipRtype === \"Replaceable\") {\r\n      systemRepairedReplaceableOptions = (\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n          <InputLabel>Select Historical Data Type </InputLabel>\r\n          <Select\r\n            value={type}\r\n            onChange={handleChange}\r\n            label=\"Select Historical Data Type\"\r\n          >\r\n            <MenuItem value=\"\">\r\n              <em>Select Type</em>\r\n            </MenuItem>\r\n            <MenuItem\r\n              component={Link}\r\n              to=\"/data_manager/historical_data/import_data\"\r\n              value={\"Import Data\"}\r\n            >\r\n              Input Parameters\r\n            </MenuItem>\r\n            <MenuItem\r\n              component={Link}\r\n              to=\"/data_manager/historical_data/failure_datapoint\"\r\n              value={\"Failure Data Point\"}\r\n            >\r\n              Actual Data Point\r\n            </MenuItem>\r\n            <MenuItem\r\n              component={Link}\r\n              to=\"/data_manager/historical_data/interval_datapoint\"\r\n              value={\"Interval Data Point\"}\r\n            >\r\n              Interval Data Point\r\n            </MenuItem>\r\n            <MenuItem\r\n              component={Link}\r\n              to=\"/data_manager/historical_data/oem\"\r\n              value={\"oem\"}\r\n            >\r\n              OEM\r\n            </MenuItem>\r\n            <MenuItem\r\n              component={Link}\r\n              to=\"/data_manager/historical_data/oem_expert\"\r\n              value={\"OEM + Expert\"}\r\n            >\r\n              OEM + Expert\r\n            </MenuItem>\r\n            <MenuItem\r\n              component={Link}\r\n              to=\"/data_manager/historical_data/expert_judgement\"\r\n              value={\"Expert Judgement\"}\r\n            >\r\n              Expert Judgement\r\n            </MenuItem>\r\n            <MenuItem\r\n              component={Link}\r\n              to=\"/data_manager/historical_data/probability_failure\"\r\n              value={\"Probability Failure\"}\r\n            >\r\n              Probability Failure\r\n            </MenuItem>\r\n            <MenuItem\r\n              component={Link}\r\n              to=\"/data_manager/historical_data/nprd\"\r\n              value={\"NPRD\"}\r\n            >\r\n              NPRD\r\n            </MenuItem>\r\n            \r\n          </Select>\r\n        </FormControl>\r\n      );\r\n    }\r\n  }\r\n\r\n  const onEquipmentChange = (e, selectedoption) => {\r\n    debugger;\r\n    const filteredChild = systemConfigurationTreeData.filter(\r\n      (x) => x.id === selectedoption.id\r\n    );\r\n    setHistoricalChildData(filteredChild);\r\n  };\r\n\r\n  const updateFinalRowData = (allRows, dataType) => {\r\n    props.tableUpdate(allRows, dataType);\r\n  };\r\n  debugger;\r\n\r\n  return (\r\n    <div>\r\n      {systemRepairTypeBool && ( // Only render if systemRepairTypeBool is true\r\n      <div className={`${styles.flex}`}>\r\n        <div>\r\n          <Autocomplete\r\n            id=\"combo-box-demo\"\r\n            groupBy={(option) => option.parentName}\r\n            options={systemConfigurationTreeData}\r\n            getOptionLabel={(option) => option.name}\r\n            style={{ width: 300 }}\r\n            onChange={onEquipmentChange}\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Select Equipment\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        </div>\r\n        <div>{systemRepairedReplaceableOptions}</div>\r\n      </div>\r\n    )}\r\n      <Switch>\r\n        <Route path=\"/data_manager/historical_data/import_data\" exact={true}>\r\n          <div className={styles.table}>\r\n            <ImportData\r\n              childList={historicalChildData}\r\n              tableUpdate={updateFinalRowData}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route\r\n          path=\"/data_manager/historical_data/failure_datapoint\"\r\n          exact={true}\r\n        >\r\n          <div className={styles.table}>\r\n            <FailureDataPoint\r\n              childList={historicalChildData}\r\n              tableUpdate={updateFinalRowData}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route\r\n          path=\"/data_manager/historical_data/interval_datapoint\"\r\n          exact={true}\r\n        >\r\n          <div className={styles.table}>\r\n            <IntervalDataPoint\r\n              childList={historicalChildData}\r\n              tableUpdate={updateFinalRowData}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/data_manager/historical_data/oem\" exact={true}>\r\n          <div className={styles.table}>\r\n            <OEM\r\n              childList={historicalChildData}\r\n              tableUpdate={updateFinalRowData}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/data_manager/historical_data/oem_expert\" exact={true}>\r\n          <div className={styles.table}>\r\n            <OEMExpert\r\n              childList={historicalChildData}\r\n              tableUpdate={updateFinalRowData}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route\r\n          path=\"/data_manager/historical_data/expert_judgement\"\r\n          exact={true}\r\n        >\r\n          <div className={styles.table}>\r\n            <Expert\r\n              childList={historicalChildData}\r\n              tableUpdate={updateFinalRowData}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route\r\n          path=\"/data_manager/historical_data/probability_failure\"\r\n          exact={true}\r\n        >\r\n          <div className={styles.table}>\r\n            <ProbabilityFailure\r\n              childList={historicalChildData}\r\n              tableUpdate={updateFinalRowData}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/data_manager/historical_data/nprd\" exact={true}>\r\n          <div className={styles.table}>\r\n            <NPRD\r\n              childList={historicalChildData}\r\n              tableUpdate={updateFinalRowData}\r\n            />\r\n          </div>\r\n        </Route>\r\n        <Route\r\n          path=\"/data_manager/historical_data/repairable_overhaul\"\r\n          exact={true}\r\n        >\r\n          <div className={styles.table}>\r\n            <RepairableOverhaul tableUpdate={updateFinalRowData} />\r\n          </div>\r\n        </Route>\r\n      </Switch>\r\n      {!systemRepairTypeBool &&\r\n      <Redirect to=\"/data_manager/historical_data/repairable_overhaul\"></Redirect>\r\n      }\r\n    </div>\r\n  );\r\n}\r\nexport default HistoricalData;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\maintenanceData\\maintenanceData.js",["951","952"],"import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\nimport EquipmentName from \"./EquipmentName\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst MaintenanceData = (props) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  let finalDataTableData = [];\r\n  const [rowState, setRows] = useState([]);\r\n  let selectedOptionId = \"\";\r\n  // const\r\n  const setIdToDropdownOption = (id) => {\r\n    selectedOptionId = id;\r\n  };\r\n  const MaintColumns = [\r\n    <AgGridColumn\r\n      field=\"LMU\"\r\n      headerName=\"Equipment Name\"\r\n      headerTooltip=\"Equipment Name\"\r\n      cellEditorFramework={EquipmentName}\r\n      minWidth={100}\r\n      editable={true}\r\n      // keyCreator={{ values: systemData.map((x) => x.id) }}\r\n      cellEditorParams={{ setId: setIdToDropdownOption }}\r\n      // cellEditorParams={{ values: systemData.map((x) => x.name) }}\r\n      checkboxSelection={true}\r\n      // cellEditor=\"agSelectCellEditor\"\r\n    />,\r\n    <AgGridColumn\r\n      field=\"EventType\"\r\n      headerName=\"EventType\"\r\n      headerTooltip=\"EventType\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"Preventive\", \"Breakdown\"],\r\n      }}\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Date\"\r\n      headerName=\"Date\"\r\n      headerTooltip=\"Date\"\r\n      width={200}\r\n      cellEditor=\"datePicker\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"MaintenanceType\"\r\n      headerName=\"Maintenance Type\"\r\n      headerTooltip=\"Maintenance Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"Replaced\", \"Repaired\"] }}\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"ReplaceType\"\r\n      headerName=\"Replace Component Type\"\r\n      headerTooltip=\"Replace Component Type\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"New\", \"Refurbished\", \"Cannibalised\", \"Duplicate\"],\r\n      }}\r\n      minWidth={100}\r\n      editable={(params) => {\r\n        return params.data.ReplaceType === \"NA\" ? false : true;\r\n      }}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"CannibalisedAge\"\r\n      headerName=\"Cannibalised Age\"\r\n      headerTooltip=\"Cannibalised Age\"\r\n      type=\"number\"\r\n      minWidth={100}\r\n      editable={(params) => {\r\n        return params.data.CannibalisedAge === \"NA\" ? false : true;\r\n      }}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"MaintenanceDuration\"\r\n      headerName=\"Maintenance Duration\"\r\n      headerTooltip=\"Maintenance Duration\"\r\n      type=\"nmber\"\r\n      minWidt={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"FM\"\r\n      headerName=\"Failure Mode\"\r\n      headerTooltip=\"Failure Mode\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"Failure Mode 1\", \"Failure Mode 2\", \"Failure Mode 3\"],\r\n      }}\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Remark\"\r\n      headerName=\"Remark\"\r\n      headerTooltip=\"Remark\"\r\n      cellEditor=\"agLargeTextCellEditor\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const AddRow = () => {\r\n    let newRowData = [\r\n      {\r\n        LMU: systemData[0]?.name,\r\n        component_id: systemData[0]?.id,\r\n        EventType: \"Preventive\",\r\n        Date: \"10/08/2021\",\r\n        MaintainanceType: \"Replaced\",\r\n        ReplaceType: \"New\",\r\n        CannibalisedAge: \"NA\",\r\n        MaintenanceDuration: \"0\",\r\n        FM: \"Failure Mode 1\",\r\n        Remark: \"Enter remarks here...\",\r\n        id: uuid(),\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: newRowData,\r\n    });\r\n    onGridAddDeleteSupport();\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    onGridAddDeleteSupport();\r\n  };\r\n  const onGridAddDeleteSupport = () => {\r\n    let allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    tableUpdate(allRowData, undefined);\r\n  };\r\n  const tableUpdate = (data, id) => {\r\n    // alert(id);\r\n    // alert(selectedOptionId);\r\n    finalDataTableData = data;\r\n    if (id) {\r\n      finalDataTableData.filter((x) => x.id === id)[0][\"component_id\"] =\r\n        selectedOptionId;\r\n    }\r\n    props.tableUpdate(finalDataTableData, \"maintData\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Table\r\n        columnDefs={MaintColumns}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        rowData={rowState}\r\n        // selectedOptionId={selectedOptionId}\r\n        tableUpdate={tableUpdate}\r\n      ></Table>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MaintenanceData;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\operationalData\\operationalData.js",["953","954","955","956","957"],"import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { AgGridReact } from \"ag-grid-react/lib/agGridReact\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { v4 as uuid} from \"uuid\";\r\nconst OperationalData = (props) => {\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  //const phaseData = useSelector((state) => state.phase.phase);\r\n  //const phaseNames = [...new Set(phaseData.map((x) => x.PhaseName))];\r\n  //const phaseHeader = [];\r\n  debugger;\r\n  // phaseNames.map((p_e, p_i) => {\r\n  //   const phase_ranges = phaseData.filter((x) => x.PhaseName === p_e);\r\n  //   let values = [];\r\n  //   if (phase_ranges[0].MeasurementType === \"Quantitative\") {\r\n  //     values = phase_ranges.map((x) => x.PhaseRange);\r\n  //   } else {\r\n  //     values = phase_ranges.map((x) => x.Status);\r\n  //   }\r\n  //   const header = (\r\n  //     <AgGridColumn\r\n  //       field={p_e}\r\n  //       headerName={p_e}\r\n  //       cellEditor=\"agSelectCellEditor\"\r\n  //       cellEditorParams={{ values: values }}\r\n  //       width={200}\r\n  //       editable={true}\r\n  //     />\r\n  //   );\r\n  //   phaseHeader.push(header);\r\n  // });\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const components=systemData.filter(x=>x.parentId==null)\r\n  const rows=components.map((element, index) => {\r\n    return {\r\n      id: element.id,\r\n      Date: \"August/2021\",\r\n      AverageRunning: \"0\",\r\n    };\r\n  })\r\n  \r\n  const [rowData,setRows]=useState(rows)\r\n\r\n  const OperationalColumns = [\r\n    <AgGridColumn\r\n      field=\"Date\"\r\n      headerName=\"Date\"\r\n      width={200}\r\n      cellEditor=\"monthPicker\"\r\n      editable={true}\r\n      checkboxSelection={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"AverageRunning\"\r\n      headerName=\"Monthly Utilization\"\r\n      headerTooltip=\"Monthly Utilization\"\r\n      width={200}\r\n      editable={true}\r\n    />\r\n  ];\r\n\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows, \"insertOpData\");\r\n\r\n  };\r\n  const AddRow = () => {\r\n    let newRowData = components.map((element, index) => {\r\n      return {\r\n        id: element.id,\r\n        Date: \"\",\r\n        AverageRunning: \"0\",\r\n      };\r\n    });\r\n    gridApi.applyTransaction({\r\n      add: newRowData,\r\n    });\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    console.log(selectedRows);\r\n  };\r\n  return (\r\n    <div>\r\n      <Table\r\n        columnDefs={OperationalColumns}\r\n        rowData={rowData}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        // onCellClicked={(e) => {\r\n        //   console.log(\"onCellClicked\", e);\r\n        // }}\r\n        tableUpdate={updateFinalRowData}\r\n      ></Table>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OperationalData;\r\n","E:\\NetraB\\netra\\src\\pages\\HEP\\HEPData.js",["958"],"import { AgGridColumn } from \"ag-grid-react/lib/agGridColumn\";\r\n\r\nexport const ELrowData = [\r\n  {\r\n    equipment: \"Fresh Water Cooling\",\r\n    Maintenancepolicy: \"Preventive\",\r\n    Criticality: \"Low\",\r\n    ATNominal: \"1\",\r\n    \"Less than required\": \"2\",\r\n    \"Higher than required\": \"3\",\r\n    \"Very High than required\": \"4\",\r\n    Nominal: \"5\",\r\n    Low: \"6\",\r\n    Extreme: \"7\",\r\n  },\r\n];\r\nexport const ELcolumnDefs = [\r\n  {\r\n    field: \"equipment\",\r\n    headerName: \"Equipment\",\r\n    minWidth: 80,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"Maintenancepolicy\",\r\n    headerName: \"Maintenance Policy\",\r\n    cellEditor: \"agSelectCellEditor\",\r\n    cellEditorParams: { values: [\"Qualitative\", \"Quantitative\"] },\r\n    minWidth: 140,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"Criticality\",\r\n    headerName: \"Criticality\",\r\n    type: \"number\",\r\n    minWidth: 100,\r\n    editable: true,\r\n  },\r\n  {\r\n    headerName: \"PSF-Available Time\",\r\n    children: [\r\n      { field: \"ATNominal\", headerName: \"Nominal\", editable: true },\r\n      { field: \"Less than required\", editable: true },\r\n      { field: \"Higher than required\", editable: true },\r\n      { field: \"Very High than required\", editable: true },\r\n    ],\r\n  },\r\n  {\r\n    headerName: \"PSF-Stress\",\r\n    children: [\r\n      { field: \"Nominal\", editable: true },\r\n      { field: \"Low\", editable: true },\r\n      { field: \"Extreme\", editable: true },\r\n    ],\r\n  },\r\n];\r\n\r\nexport const CLcolumnDefs = [\r\n  {\r\n    field: \"LMU\",\r\n    headerName: \"Lowest Maintainable Unit (LMU)\",\r\n    minWidth: 80,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"shipmode\",\r\n    headerName: \"Ship Mode\",\r\n    minWidth: 80,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"psfcomplexity\",\r\n    headerName: \"PSF-Complexity\",\r\n    cellEditor: \"agSelectCellEditor\",\r\n    cellEditorParams: { values: [\"1\", \"2\"] },\r\n    minWidth: 80,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"psfergonomics\",\r\n    headerName: \"PSF-Ergonomics\",\r\n    cellEditor: \"agSelectCellEditor\",\r\n    cellEditorParams: { values: [\"1\", \"2\"] },\r\n    minWidth: 80,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"psfprocedure\",\r\n    headerName: \"PSF-Procedure Available\",\r\n    cellEditor: \"agSelectCellEditor\",\r\n    cellEditorParams: { values: [\"1\", \"2\"] },\r\n    minWidth: 80,\r\n    editable: true,\r\n  },\r\n];\r\nexport const CLrowData = [\r\n  {\r\n    LMU: \"Water Temperature Gauge\",\r\n    shipmode: \"Docked\",\r\n    psfcomplexity: \"\",\r\n    psfergonomics: \"\",\r\n    psfprocedure: \"\",\r\n  },\r\n];\r\n\r\nexport const SLMcolumnDefs = [\r\n  {\r\n    field: \"component\",\r\n    headerName: \"Component\",\r\n    minWidth: 80,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"refurbished\",\r\n    headerName: \"Refurbished\",\r\n    minWidth: 100,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"cannibalised\",\r\n    headerName: \"Cannibalised\",\r\n    minWidth: 80,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"nonOEM\",\r\n    headerName: \"Non-OEM/Duplicate\",\r\n    minWidth: 80,\r\n    editable: true,\r\n  },\r\n];\r\n\r\nexport const SLMrowData = [\r\n  {\r\n    component: \"DA\",\r\n    refurbished: \"1\",\r\n    cannibalised: \"1\",\r\n    nonOEM: \"1\",\r\n  },\r\n];\r\n","E:\\NetraB\\netra\\src\\pages\\HEP\\CommanHEP\\CommanHEP.js",["959"],"import { FormControl } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Radio } from \"@material-ui/core\";\r\nimport { FormControlLabel } from \"@material-ui/core\";\r\nimport { RadioGroup } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport styles from \"../HEP.module.css\";\r\n\r\nconst radioLabel = makeStyles({\r\n  label: {\r\n    minWidth: 80,\r\n    border: \"rgb(116, 114, 114) 1px solid\",\r\n    borderRadius: \"5px\",\r\n    textAlign: \"center\",\r\n    background: \"#ebebeb\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  labelPlacementStart: {\r\n    marginLeft: 1,\r\n  },\r\n});\r\nconst radioStyles = makeStyles({\r\n  root: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  icon: {\r\n    border: \"1px solid black\",\r\n    borderRadius: 5,\r\n    width: 24,\r\n    height: 22,\r\n    \"input:hover ~ &\": {\r\n      backgroundColor: \"#ebf1f5\",\r\n    },\r\n    \"input:disabled ~ &\": {\r\n      boxShadow: \"none\",\r\n      background: \"rgba(206,217,224,.5)\",\r\n    },\r\n  },\r\n  checkedIcon: {\r\n    backgroundColor: \"#137cbd\",\r\n    border: \"1px solid black\",\r\n    borderRadius: 5,\r\n    \"&:before\": {\r\n      display: \"block\",\r\n      width: 24,\r\n      height: 22,\r\n      content: '\"\"',\r\n    },\r\n    \"input:hover ~ &\": {\r\n      backgroundColor: \"#106ba3\",\r\n    },\r\n  },\r\n});\r\n\r\nfunction StyledRadio(props) {\r\n  const radioClasses = radioStyles();\r\n\r\n  return (\r\n    <Radio\r\n      className={radioClasses.root}\r\n      disableRipple\r\n      color=\"default\"\r\n      checkedIcon={<span className={radioClasses.checkedIcon} />}\r\n      icon={<span className={radioClasses.icon} />}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nconst CHEP = ({experience,workCulture,fitness,handleExp,handleWC,handleFit}) => {\r\n  const radioLabelStyle = radioLabel();\r\n\r\n  return (\r\n    <div className={styles.midSection}>\r\n      \r\n        <div className={styles.sectionHeader}>\r\n          External Factor/PSF-Experience\r\n        </div>\r\n      <div className={styles.Qcard}>\r\n        <div>\r\n          <div className={styles.QcardHeader}>\r\n            What percentage of time does a maintenance personnel with following\r\n            experience perform the task?\r\n          </div>\r\n          <div className=\"Qcard-content\">\r\n            <div className={styles.cardItem}>\r\n              <label className='experience' htmlFor=\"expnominal\">Nominal</label>\r\n              <input className='experience' type=\"number\" id=\"expnominal\" value={experience.nominal} onChange={(e)=>handleExp(e,'nominal')}></input>\r\n            </div>\r\n            <div className={styles.cardItem}>\r\n              <label className='experience' htmlFor=\"explow\">Low</label>\r\n              <input className='experience' type=\"number\" id=\"explow\" value={experience.low} onChange={(e)=>handleExp(e,'low')}></input>\r\n            </div>\r\n            <div className={styles.cardItem}>\r\n              <label className='experience' htmlFor=\"exphigh\">High</label>\r\n              <input className='experience' type=\"number\" id=\"exphigh\" value={experience.high} onChange={(e)=>handleExp(e,'high')}></input>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={styles.sectionHeader}>\r\n        External Factor/PSF-Work Culture\r\n      </div>\r\n      <div className={styles.Qcard}>\r\n        <div className={styles.QcardHeader}>\r\n          How do you rate the work culture of your organisation?\r\n        </div>\r\n        <div className=\"Qcard-content\">\r\n          <FormControl>\r\n            <RadioGroup aria-label=\"work-culture\" value={workCulture} onChange={handleWC} name=\"psf-work-culture\">\r\n              <FormControlLabel\r\n                classes={radioLabelStyle}\r\n                value=\"nominal\"\r\n                control={<StyledRadio />}\r\n                label=\"Nominal\"\r\n                labelPlacement=\"start\"\r\n              />\r\n              <FormControlLabel\r\n                classes={radioLabelStyle}\r\n                value=\"low\"\r\n                control={<StyledRadio />}\r\n                label=\"Low\"\r\n                labelPlacement=\"start\"\r\n              />\r\n              <FormControlLabel\r\n                classes={radioLabelStyle}\r\n                value=\"high\"\r\n                control={<StyledRadio />}\r\n                label=\"High\"\r\n                labelPlacement=\"start\"\r\n              />\r\n            </RadioGroup>\r\n          </FormControl>\r\n        </div>\r\n      </div>\r\n      <div className={styles.sectionHeader}>\r\n        External Factor/PSF-Fitness for Duty\r\n      </div>\r\n      <div className={styles.Qcard}>\r\n        <div className={styles.QcardHeader}>\r\n          What percentage of time does a maintenance personnel with following\r\n          fitness level perform the task?\r\n        </div>\r\n        <div className=\"Qcard-content\">\r\n          <div className={styles.cardItem}>\r\n            <label className='fitness' htmlFor=\"fitnominal\">Nominal</label>\r\n            <input className='fitness' type=\"number\" id=\"fitnominal\" value={fitness.nominal} onChange={(e)=>handleFit(e,'nominal')}></input>\r\n          </div>\r\n          <div className={styles.cardItem}>\r\n            <label className='fitness' htmlFor=\"fitlow\">Low</label>\r\n            <input className='fitness' type=\"number\" id=\"fitlow\" value={fitness.low} onChange={(e)=>handleFit(e,'low')}></input>\r\n          </div>\r\n          <div className={styles.cardItem}>\r\n            <label className='fitness' htmlFor=\"fithigh\">High</label>\r\n            <input className='fitness' type=\"number\" id=\"fithigh\" value={fitness.high} onChange={(e)=>handleFit(e,'high')}></input>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CHEP;\r\n","E:\\NetraB\\netra\\src\\pages\\HEP\\ComponentLevel\\componentLevel.js",["960","961","962","963"],"import { Fragment } from \"react\";\r\nimport styles from \"../HEP.module.css\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport { CLrowData } from \"../HEPData\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst HEPComponentLevel = (props) => {\r\n  let systemData = useSelector((state) => state.treeData.treeData);\r\n  systemData = systemData.filter((x) => x.lmu === 1);\r\n  const phaseData = useSelector((state) => state.phase.phase);\r\n  const mData = [\"Preventive\", \"Breakdown\"];\r\n  const rowData = systemData.map((e, i) => {\r\n    return {\r\n      ComponentId:e.id,\r\n      LMU: e.name,\r\n      psfcomplexity: \"Nominal\",\r\n      psfergonomics: \"Nominal\",\r\n      psfprocedure: \"Available\",\r\n      id:uuid(),\r\n    };\r\n  });\r\n  debugger;\r\n  const CLcolumnDefs = [\r\n    <AgGridColumn\r\n      field=\"LMU\"\r\n      headerName=\"Lowest Maintainable Unit (LMU)\"\r\n      minWidth={80}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"psfcomplexity\"\r\n      headerName=\"PSF-Complexity\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"Nominal\", \"Moderately Complex\", \"Highly Complex\"],\r\n      }}\r\n      minWidth={80}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"psfergonomics\"\r\n      headerName=\"PSF-Ergonomics\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"Nominal\", \"Good\", \"Poor\", \"Misleading\"] }}\r\n      minWidth={80}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"psfprocedure\"\r\n      headerName=\"PSF-Procedure Available\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"Available\", \"Available But Poor\", \"Not Available\"],\r\n      }}\r\n      minWidth={80}\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <div className={styles.phaseTable}>\r\n        <Table\r\n          columnDefs={CLcolumnDefs}\r\n          rowData={rowData}\r\n          tableUpdate={updateFinalRowData}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default HEPComponentLevel;\r\n","E:\\NetraB\\netra\\src\\pages\\HEP\\LifeMultiplier\\LifeMultiplier.js",["964","965","966"],"import { Fragment } from \"react\";\r\nimport LensIcon from \"@material-ui/icons/Lens\";\r\nimport styles from \"../HEP.module.css\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\nconst HEPLifeMultiplier = (props) => {\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const colDefs = [\r\n    <AgGridColumn\r\n      field=\"component\"\r\n      headerName=\"Component\"\r\n      minWidth={80}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"refurbished\"\r\n      headerName=\"Refurbished\"\r\n      minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"cannibalised\"\r\n      headerName=\"Cannibalised\"\r\n      minWidth={80}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"nonOEM\"\r\n      headerName=\"Non-OEM/Duplicate\"\r\n      minWidth={80}\r\n      editable={true}\r\n    />,\r\n  ];\r\n\r\n  const rowData = systemData.map((ele, index) => {\r\n    return {\r\n      id:uuid(),\r\n      ComponentId:ele.id,\r\n      component: ele.name,\r\n      lmu:ele.lmu,\r\n      refurbished: 1,\r\n      cannibalised: 1,\r\n      nonOEM: 1,\r\n    };\r\n  });\r\n\r\n  const getLmuRowStyle = params => {\r\n    //console.log(params.node);\r\n    if (params.node.data.lmu==1) {\r\n      return { background: '#d8f0f4' };\r\n    }\r\n  };\r\n\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n    <Fragment>\r\n      {/* <div className={styles.flex2}>\r\n        <div>\r\n          <span style={{ fontSize: \"0.7rem\" }}>\r\n            <LensIcon style={{ color: \"#d8f0f4\" }} />\r\n            LMU-Lowest Maintainable Unit\r\n          </span>\r\n        </div>\r\n      </div> */}\r\n      <div className={styles.phaseTable}>\r\n        <Table\r\n          columnDefs={colDefs}\r\n          rowData={rowData}\r\n          tableUpdate={updateFinalRowData}\r\n          getRowStyle={getLmuRowStyle}\r\n        />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default HEPLifeMultiplier;\r\n","E:\\NetraB\\netra\\src\\pages\\HEP\\EquipmentLevel\\EquipmentLevel.js",["967","968","969","970"],"import { Fragment } from \"react\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport { ELcolumnDefs, ELrowData } from \"../HEPData\";\r\nimport styles from \"../HEP.module.css\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst EquipmentLevelHEP = (props) => {\r\n  let systemData = useSelector((state) => state.treeData.treeData);\r\n  systemData = systemData.filter((x) => x.parent === null);\r\n  const phaseData = useSelector((state) => state.phase.phase);\r\n  const mData = [\"Preventive\", \"Breakdown\"];\r\n  let rowData = [];\r\n  const rData = systemData.map((e, i) => {\r\n    phaseData.map((p_e, p_i) => {\r\n      mData.map((mE, mI) => {\r\n        if (p_e.MType === \"Qualitative\") {\r\n          rowData.push({\r\n            equipment: e.name,\r\n            phase: p_e.Status,\r\n            Maintenancepolicy: mE,\r\n            ATNominal: 100,\r\n            Lessthanrequired: 0,\r\n            Higherthanrequired: 0,\r\n            vhtr: 0,\r\n            Nominal: 100,\r\n            Low: 0,\r\n            Extreme: 0,\r\n            id:uuid()\r\n          });\r\n          return null;\r\n        } else {\r\n          rowData.push({\r\n            equipment: e.name,\r\n            phase: p_e.PhaseRange,\r\n            Maintenancepolicy: mE,\r\n            ATNominal: 100,\r\n            Lessthanrequired: 0,\r\n            Higherthanrequired: 0,\r\n            vhtr: 0,\r\n            Nominal: 100,\r\n            Low: 0,\r\n            Extreme: 0,\r\n            id:uuid()\r\n          });\r\n          return null;\r\n        }\r\n      });\r\n      return null;\r\n    });\r\n\r\n    return null;\r\n  });\r\n  const ELcolumnDefs = [\r\n    <AgGridColumn field=\"equipment\" headerName=\"Equipment\" minWidth={80} />,\r\n    <AgGridColumn field=\"phase\" headerName=\"Phase Name\" minWidth={80} />,\r\n    <AgGridColumn\r\n      field=\"Maintenancepolicy\"\r\n      headerName=\"Maintenance Policy\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{ values: [\"Preventive\", \"Breakdown\"] }}\r\n      minWidth={140}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn headerName=\"PSF-Available Time\">\r\n      <AgGridColumn\r\n        field=\"ATNominal\"\r\n        headerName=\"Nominal\"\r\n        editable={true}\r\n      ></AgGridColumn>\r\n      <AgGridColumn\r\n        field=\"Lessthanrequired\"\r\n        headerName=\"Less Than Required\"\r\n        editable={true}\r\n      ></AgGridColumn>\r\n      <AgGridColumn\r\n        field=\"Higherthanrequired\"\r\n        headerName=\"Higher than required\"\r\n        editable={true}\r\n      ></AgGridColumn>\r\n      <AgGridColumn\r\n        field=\"vhtr\"\r\n        headerName=\"Very High than required\"\r\n        editable={true}\r\n      ></AgGridColumn>\r\n    </AgGridColumn>,\r\n    <AgGridColumn headerName=\"PSF-Stress\">\r\n      <AgGridColumn field=\"Nominal\" editable={true}></AgGridColumn>\r\n      <AgGridColumn field=\"Low\" editable={true}></AgGridColumn>\r\n      <AgGridColumn field=\"Extreme\" editable={true}></AgGridColumn>\r\n    </AgGridColumn>,\r\n  ];\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows);\r\n  };\r\n  return (\r\n      <div className={styles.phaseTable}>\r\n        <Table\r\n          columnDefs={ELcolumnDefs}\r\n          rowData={rowData}\r\n          tableUpdate={updateFinalRowData}\r\n        />\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default EquipmentLevelHEP;\r\n","E:\\NetraB\\netra\\src\\ui\\Table\\Table2.js",["971","972"],"import React, { useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport \"./Table.css\";\r\nimport ReactDom from \"react-dom\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\n// function getDatePicker() {\r\n//   function Datepicker() {}\r\n//   Datepicker.prototype.init = function (params) {\r\n//     this.eInput = document.createElement(\"input\");\r\n//     this.eInput.value = params.value;\r\n//     this.eInput.classList.add(\"ag-input\");\r\n//     this.eInput.style.height = \"100%\";\r\n//     $(this.eInput).datepicker({ dateFormat: \"dd/mm/yy\" });\r\n//     console.log(params);\r\n//   };\r\n//   Datepicker.prototype.getGui = function () {\r\n//     return this.eInput;\r\n//   };\r\n//   Datepicker.prototype.afterGuiAttached = function () {\r\n//     this.eInput.focus();\r\n//     this.eInput.select();\r\n//   };\r\n//   Datepicker.prototype.getValue = function () {\r\n//     return this.eInput.value;\r\n//   };\r\n//   Datepicker.prototype.destroy = function () {};\r\n//   Datepicker.prototype.isPopup = function () {\r\n//     return false;\r\n//   };\r\n//   return Datepicker;\r\n// }\r\n\r\nconst getDatePicker = () => {\r\n  const fillZeros = (a) => {\r\n    return Number(a) < 10 ? \"0\" + a : a;\r\n  };\r\n  const getFormattedDateOutput = (dateString) => {\r\n    const dateParse = new Date(dateString);\r\n    const dd = dateParse.getDate();\r\n    const mm = dateParse.getMonth() + 1; //January is 0!\r\n    const yyyy = dateParse.getFullYear();\r\n    // console.log(dateString, dateParse);\r\n    return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n  };\r\n  function Datepicker() {}\r\n  Datepicker.prototype.init = function (params) {\r\n    this.textInput = React.createRef();\r\n    const getFormattedDateMaterial = (dateString) => {\r\n      const dateParse = new Date(\r\n        dateString.split(\"/\")[2] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[1] +\r\n          \"-\" +\r\n          dateString.split(\"/\")[0]\r\n      );\r\n      const dd = dateParse.getDate();\r\n      const mm = dateParse.getMonth() + 1; //January is 0!\r\n      const yyyy = dateParse.getFullYear();\r\n      console.log(dateString, dateParse);\r\n      return fillZeros(dd) + \"/\" + fillZeros(mm) + \"/\" + yyyy;\r\n    };\r\n    const eInput = React.createElement(TextField, {\r\n      type: \"datetime-local\",\r\n      defaultValue: getFormattedDateMaterial(params.value),\r\n      ref: this.textInput,\r\n      style: { width: \"95%\" },\r\n    });\r\n    this.div = document.createElement(\"div\");\r\n    this.div.className = \"ag-cell-parent-append\";\r\n    ReactDom.render(eInput, this.div);\r\n  };\r\n  Datepicker.prototype.getGui = function () {\r\n    return this.div;\r\n  };\r\n  Datepicker.prototype.afterGuiAttached = function () {\r\n    this.textInput.current.focus();\r\n  };\r\n  Datepicker.prototype.getValue = function () {\r\n    return getFormattedDateOutput(\r\n      this.textInput.current.querySelector(\"input\").value\r\n    );\r\n  };\r\n  Datepicker.prototype.destroy = function () {};\r\n  Datepicker.prototype.isPopup = function () {\r\n    return false;\r\n  };\r\n  return Datepicker;\r\n};\r\n\r\nconst Table2 = (props) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  const location = useLocation();\r\n  console.log(location);\r\n  const onGridReady = (params) => {\r\n    setGridApi(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n\r\n  const onFirstDataRendered = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n  const onGridSizeChanged = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n  };\r\n\r\n  const saveModifiedRows = () => {\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    console.log(allRowData);\r\n    // add API call to save modified rows\r\n  };\r\n\r\n  return (\r\n    <div className=\"ag-theme-alpine\" style={{ height: 400, width: \"100%\" }}>\r\n      <AgGridReact\r\n        defaultColDef={{\r\n          flex: 1,\r\n          resizable: true,\r\n          filter: true,\r\n          sortable: true,\r\n        }}\r\n        rowData={props.rowData}\r\n        columnDefs={props.columnDefs}\r\n        onGridReady={onGridReady}\r\n        onFirstDataRendered={onFirstDataRendered}\r\n        onGridSizeChanged={onGridSizeChanged}\r\n        onCellValueChanged={saveModifiedRows}\r\n      >\r\n        {/* {props.columnDefs} */}\r\n      </AgGridReact>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table2;\r\n","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\CreateMaintenance\\AssignType.js",["973","974","975","976","977","978","979","980","981","982","983","984","985","986","987"],"import React, { useEffect, useState } from \"react\";\r\nimport styles from \"./CreateMaintenance.module.css\";\r\nimport {\r\n  Button,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  MenuItem,\r\n  Select,\r\n  Dialog,\r\n} from \"@material-ui/core\";\r\nimport Table from \"../../../ui/Table/Table\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { saveSensor } from \"./SaveHandler\";\r\nimport CustomizedSnackbars from \"../../../ui/CustomSnackBar\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst AssignType = (props) => {\r\n  const [type, setType] = useState(\"\");\r\n  const [ageBasedUnit, setAgeBasedUnit] = useState(null);\r\n  const [calendarBasedUnit, setCalendarBasedUnit] = useState(null);\r\n  const [condition, setCondition] = useState(\"visual\");\r\n  const [failureMode, setFailureMode] = useState(null);\r\n  const [visualWearLevels, setVisualWearLevels] = useState(0);\r\n  const [visualCorrosionLevels, setVisualCorrosionLevels] = useState(0);\r\n  const [visualFrequency, setVisualFrequency] = useState(0);\r\n  const [degradationWearLevels, setDegradationWearLevels] = useState(0);\r\n  const [VisualWearRows, setVisualWearRows] = useState([]);\r\n  const [VisualCorrosionRows, setVisualCorrosionRows] = useState([]);\r\n  const [visualActionsRows, setVisualActionRows] = useState([]);\r\n  const hello = [\"This\", \"is\", \"beauty\"];\r\n  const changeVisualFrequency = (e) => {\r\n    setVisualFrequency(e.target.value);\r\n  };\r\n  const changeVisualWearLevel = (e) => {\r\n    setVisualWearLevels(e.target.value);\r\n    addVisualWearRows(e.target.value);\r\n  };\r\n  const changeVisualCorrosionLevel = (e) => {\r\n    setVisualCorrosionLevels(e.target.value);\r\n    addVisualCorrosionRows(e.target.value);\r\n  };\r\n  const changeDegradationWearLevel = (e) => {\r\n    setVisualWearLevels(e.target.value);\r\n  };\r\n  const handleMtypeChange = (e) => {\r\n    setType(e.target.value);\r\n  };\r\n  useEffect(() => {\r\n    addVisualActionRows();\r\n  }, [VisualWearRows, VisualCorrosionRows]);\r\n\r\n  const visualWearColumnDefs = [\r\n    <AgGridColumn\r\n      field=\"level\"\r\n      headerName=\"Level\"\r\n      headerTooltip=\"Level\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"wear\"\r\n      headerName=\"Wear\"\r\n      headerTooltip=\"Wear\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"image\"\r\n      headerName=\"Image\"\r\n      headerTooltip=\"Image\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const visualActionsCols = [\r\n    <AgGridColumn\r\n      field=\"wear\"\r\n      headerName=\"Wear\"\r\n      headerTooltip=\"Wear\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"corrosion\"\r\n      headerName=\"Corrosion\"\r\n      headerTooltip=\"Corrosion\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"alarm\"\r\n      headerName=\"Alarms\"\r\n      headerTooltip=\"Alarms\"\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"Show on dashboard\", \"Alarm1\", \"Alarm2\", \"Alarm3\"],\r\n      }}\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      headerName=\"Invalid\"\r\n      field=\"invalid\"\r\n      //editable={true}\r\n      cellRenderer={(params) => {\r\n        var input = document.createElement(\"input\");\r\n        input.type = \"checkbox\";\r\n        input.checked = params.value;\r\n        input.addEventListener(\"click\", function (event) {\r\n          params.value = !params.value;\r\n          params.node.data.invalid = params.value;\r\n        });\r\n        return input;\r\n      }}\r\n    />,\r\n  ];\r\n  const addVisualWearRows = (n) => {\r\n    let newRows = [];\r\n    let i = 1;\r\n    while (n > 0) {\r\n      newRows = [...newRows, { level: `L${i}`, wear: \"\", image: \"\" }];\r\n      n--;\r\n      i++;\r\n    }\r\n    console.log(newRows);\r\n    setVisualWearRows(newRows);\r\n  };\r\n  const visualCorrosionColumnDefs = [\r\n    <AgGridColumn\r\n      field=\"level\"\r\n      headerName=\"Level\"\r\n      headerTooltip=\"Level\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"corrosion\"\r\n      headerName=\"Corrosion\"\r\n      headerTooltip=\"Corrosion\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"image\"\r\n      headerName=\"Image\"\r\n      headerTooltip=\"Image\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const addVisualCorrosionRows = (n) => {\r\n    let newRows = [];\r\n    let i = 1;\r\n    while (n > 0) {\r\n      newRows = [...newRows, { level: `L${i}`, corrosion: \"\", image: \"\" }];\r\n      n--;\r\n      i++;\r\n    }\r\n    console.log(newRows);\r\n    setVisualCorrosionRows(newRows);\r\n  };\r\n\r\n  const addVisualActionRows = () => {\r\n    let rows = [];\r\n    VisualWearRows.map((wearRow) => {\r\n      VisualCorrosionRows.map((corrosionRow) => {\r\n        rows = [\r\n          ...rows,\r\n          {\r\n            wear: wearRow.level,\r\n            corrosion: corrosionRow.level,\r\n            alarm: \"Show on dashboard\",\r\n            invalid: false,\r\n          },\r\n        ];\r\n      });\r\n    });\r\n    console.log(rows);\r\n    setVisualActionRows(rows);\r\n  };\r\n  // Snackbar\r\n  const [SnackBarMessage, setSnackBarMessage] = useState({\r\n    severity: \"error\",\r\n    message: \"This is awesome\",\r\n    showSnackBar: false,\r\n  });\r\n  const onHandleSnackClose = () => {\r\n    setSnackBarMessage({\r\n      severity: \"error\",\r\n      message: \"Please Add Systemss\",\r\n      showSnackBar: false,\r\n    });\r\n  };\r\n  //Condition modal\r\n  const [modal, setModal] = useState(false);\r\n  //Sensor Based Monitoring\r\n  const [monitoringType, setMonitoringType] = useState(\"intermittent\");\r\n  const [numPara, setNumPara] = useState(0);\r\n  const [pRows, setpRows] = useState([]);\r\n  console.log(pRows);\r\n  const addPRows = (n) => {\r\n    let newRows = [];\r\n    while (n > 0) {\r\n      newRows = [\r\n        ...newRows,\r\n        {\r\n          EquipmentId: eqptId,\r\n          ComponentId: props.selectedComponent.id,\r\n          id: uuid(),\r\n          name: \"\",\r\n          unit: \"\",\r\n          min: \"\",\r\n          max: \"\",\r\n          level: \"\",\r\n          frequency: \"\",\r\n          data: \"\",\r\n        },\r\n      ];\r\n      n--;\r\n    }\r\n    console.log(newRows);\r\n    setpRows(newRows);\r\n  };\r\n\r\n  const parameterColumnDefs = [\r\n    <AgGridColumn\r\n      field=\"name\"\r\n      headerName=\"Name\"\r\n      headerTooltip=\"Name\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"unit\"\r\n      headerName=\"Unit\"\r\n      headerTooltip=\"Unit\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"min\"\r\n      headerName=\"Minimum Value\"\r\n      headerTooltip=\"Minimum Value\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"max\"\r\n      headerName=\"Maximum Value\"\r\n      headerTooltip=\"Maximum Value\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"level\"\r\n      headerName=\"Level\"\r\n      headerTooltip=\"Level\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    monitoringType === \"intermittent\" ? (\r\n      <AgGridColumn\r\n        field=\"frequency\"\r\n        headerName=\"Frequency\"\r\n        headerTooltip=\"Frequency\"\r\n        //minWidth={100}\r\n        editable={true}\r\n      />\r\n    ) : null,\r\n    <AgGridColumn\r\n      field=\"data\"\r\n      headerName=\"Data\"\r\n      headerTooltip=\"Data\"\r\n      //minWidth={100}\r\n      editable={true}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: [\"From Excel File\", \"From DB\"],\r\n      }}\r\n    />,\r\n  ];\r\n  const lvlwiseColumnDefs = [\r\n    <AgGridColumn\r\n      field=\"name\"\r\n      headerName=\"Name\"\r\n      headerTooltip=\"Name\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"level\"\r\n      headerName=\"Level\"\r\n      headerTooltip=\"Level\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"threshold\"\r\n      headerName=\"Threshold\"\r\n      headerTooltip=\"Threshold\"\r\n      //minWidth={100}\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const updateParameterRowData = (allRows) => {\r\n    //get object of levels and lvlwise rows\r\n    let lvlwisearr = [];\r\n    let paramarr = [];\r\n    allRows.map((data) => {\r\n      let lvlarr = [];\r\n      for (let i = 1; i <= data.level; i++) {\r\n        lvlarr.push(\"L\" + i);\r\n        lvlwisearr.push({\r\n          id: uuid(),\r\n          pid: data.id,\r\n          name: data.name,\r\n          level: \"L\" + i,\r\n          threshold: \"\",\r\n        });\r\n      }\r\n      paramarr.push(lvlarr);\r\n    });\r\n    setLvlwiseRows(lvlwisearr);\r\n    let result = paramarr.reduce((a, b) =>\r\n      a.reduce((r, v) => r.concat(b.map((w) => [].concat(v, w))), [])\r\n    );\r\n    // console.log(result);\r\n    let rows = [];\r\n    let alarm_att = [];\r\n    result.map((row) => {\r\n      let alarmId = uuid();\r\n      let newrow = { id: alarmId, alarm: \"Show on dashboard\", invalid: false };\r\n      let i = 0;\r\n      allRows.map((data) => {\r\n        // console.log(row)\r\n        alarm_att = [\r\n          ...alarm_att,\r\n          {\r\n            id: uuid(),\r\n            AlarmId: alarmId,\r\n            paramId: (\r\n              lvlwisearr.filter((element) => {\r\n                return element.name === data.name && element.level === row[i];\r\n              })[0] || {}\r\n            )?.pid,\r\n            lvlId: lvlwisearr.filter((element) => {\r\n              return element.name === data.name && element.level === row[i];\r\n            })[0]?.id,\r\n          },\r\n        ];\r\n\r\n        newrow = { ...newrow, [data.name]: row[i] };\r\n        i++;\r\n      });\r\n      console.log(alarm_att);\r\n      rows = [...rows, newrow];\r\n    });\r\n\r\n    //console.log(rows)\r\n    setSbAlarmAtts(alarm_att);\r\n    setSbAlarmRows(rows);\r\n    //get columns\r\n    let columns = allRows.map((data) => {\r\n      if (data.name != \"\") {\r\n        return (\r\n          <AgGridColumn\r\n            field={data.name}\r\n            headerName={data.name}\r\n            headerTooltip={data.name}\r\n            //minWidth={100}\r\n            //editable={true}\r\n          />\r\n        );\r\n      }\r\n    });\r\n    setSbAlarmCols([\r\n      <AgGridColumn\r\n        field=\"alarm\"\r\n        headerName=\"Alarms\"\r\n        headerTooltip=\"Alarms\"\r\n        cellEditor=\"agSelectCellEditor\"\r\n        cellEditorParams={{\r\n          values: [\"Show on dashboard\", \"Alarm1\", \"Alarm2\", \"Alarm3\"],\r\n        }}\r\n        //minWidth={100}\r\n        editable={true}\r\n      />,\r\n      <AgGridColumn\r\n        headerName=\"Invalid\"\r\n        field=\"invalid\"\r\n        //editable={true}\r\n        cellRenderer={(params) => {\r\n          var input = document.createElement(\"input\");\r\n          input.type = \"checkbox\";\r\n          input.checked = params.value;\r\n          input.addEventListener(\"click\", function (event) {\r\n            params.value = !params.value;\r\n            params.node.data.invalid = params.value;\r\n          });\r\n          return input;\r\n        }}\r\n      />,\r\n      ...columns,\r\n    ]);\r\n  };\r\n  //sensor-based Alarms Table\r\n  const [sbAlarmCols, setSbAlarmCols] = useState([]);\r\n  const [lvlwiseRows, setLvlwiseRows] = useState([]);\r\n  const [sbAlarmRows, setSbAlarmRows] = useState([]);\r\n  const [sbAlarmAtts, setSbAlarmAtts] = useState([]);\r\n  const handleSave = () => {\r\n    debugger\r\n    if (type === \"conditionBased\") {\r\n      if (condition === \"sensorBased\") {\r\n        let newRows = pRows.map((row) => {\r\n          return { ...row, FailureModeId: failureMode };\r\n        });\r\n        let validAlarms = sbAlarmRows\r\n          .filter((data) => {\r\n            return !data.invalid;\r\n          })\r\n          .map((row) => row.id);\r\n        saveSensor(\r\n          {\r\n            sData: newRows,\r\n            lData: lvlwiseRows,\r\n            aData: sbAlarmRows.filter((row) => {\r\n              return !row.invalid;\r\n            }),\r\n            alarmAtts: sbAlarmAtts.filter((attrow) => {\r\n              return validAlarms.includes(attrow.AlarmId);\r\n            }),\r\n          },\r\n          setSnackBarMessage\r\n        );\r\n        console.log(validAlarms);\r\n        console.log({\r\n          sData: newRows,\r\n          lData: lvlwiseRows,\r\n          aData: sbAlarmRows.filter((row) => {\r\n            return !row.invalid;\r\n          }),\r\n          alarmAtts: sbAlarmAtts.filter((attrow) => {\r\n            return validAlarms.includes(attrow.AlarmId);\r\n          }),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const currentSelection = useSelector(\r\n    (state) => state.userSelection.currentSelection\r\n  );\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const failureModes = useSelector((state) => state.treeData.failureModes);\r\n  console.log(\"fffff\",failureModes);\r\n  const eqptId = systemData.filter(\r\n    (data) => data.name === currentSelection.equipmentName\r\n  )[0]?.id;\r\n  return (\r\n    <>\r\n      <div className={styles.assignDiv}>\r\n        <div className={styles.assignContent}>\r\n          <div className={styles.flex}>\r\n            <h3>Selected Component:{props.selectedComponent?.name}</h3>\r\n            <RadioGroup\r\n              row\r\n              name=\"maintenance-type\"\r\n              value={type}\r\n              onChange={handleMtypeChange}\r\n              className={styles.mtypeRadio}\r\n            >\r\n              {/* props.selectedComponent?.repairType === \"Repairable\" ||  */}\r\n              {(\r\n                <FormControlLabel\r\n                  value=\"runToFailure\"\r\n                  control={<Radio />}\r\n                  label=\"Run to Failure\"\r\n                />\r\n              )}\r\n              {props.selectedComponent?.repairType == \"Repairable\" || (\r\n                <FormControlLabel\r\n                  value=\"ageBased\"\r\n                  control={<Radio />}\r\n                  label=\"Age Based Maintenance\"\r\n                />\r\n              )}\r\n              {props.selectedComponent?.repairType == \"Repairable\" || (\r\n                <FormControlLabel\r\n                  value=\"calendarBased\"\r\n                  control={<Radio />}\r\n                  label=\"Calendar Based Maintenance\"\r\n                />\r\n              )}\r\n              { (\r\n                <FormControlLabel\r\n                  value=\"conditionBased\"\r\n                  control={<Radio onClick={() => setModal(true)} />}\r\n                  label=\"Condition Based Maintenance\"\r\n                />\r\n              )}\r\n            </RadioGroup>\r\n          </div>\r\n          <div className={styles.btns}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n              Save\r\n            </Button>\r\n            {/* <Link to=\"/rul\">\r\n              <Button variant=\"contained\" color=\"primary\">\r\n                RUL\r\n              </Button>\r\n            </Link> */}\r\n            {/* <Link to=\"/optimize\">\r\n              <Button variant=\"contained\" color=\"primary\">\r\n                Optimize\r\n              </Button>\r\n            </Link> */}\r\n          </div>\r\n        </div>\r\n        <Dialog open={modal} onClose={() => setModal(false)}>\r\n          <div className={styles.modal}>\r\n            <h4>Select Condition</h4>\r\n            <RadioGroup\r\n              name=\"condition\"\r\n              value={condition}\r\n              onChange={(e) => setCondition(e.target.value)}\r\n            >\r\n              <FormControlLabel\r\n                value=\"visual\"\r\n                control={<Radio />}\r\n                label=\"Visual Inspection\"\r\n              />\r\n              <FormControlLabel\r\n                value=\"degradation\"\r\n                control={<Radio />}\r\n                label=\"Degradation Measurement\"\r\n              />\r\n              <FormControlLabel\r\n                value=\"sensorBased\"\r\n                control={<Radio />}\r\n                label=\"Sensor Based\"\r\n              />\r\n            </RadioGroup>\r\n          </div>\r\n        </Dialog>\r\n        {type === \"runToFailure\" && (\r\n          <div className={styles.MTypeContent}>Run To Failure</div>\r\n        )}\r\n        {type === \"ageBased\" && (\r\n          <div className={styles.MTypeContent}>\r\n            <div className={styles.formField}>\r\n              <label htmlFor=\"age-based-measurement-unit\">\r\n                {\" \"}\r\n                Unit of Measurement\r\n              </label>\r\n              <Select\r\n                disableUnderline\r\n                labelId=\"age-based-measurement-unit-label\"\r\n                id=\"age-based-measurement-unit\"\r\n                value={ageBasedUnit}\r\n                onChange={(e) => setAgeBasedUnit(e.target.value)}\r\n                className={styles.input}\r\n              >\r\n                <MenuItem value=\"hours\">Hours</MenuItem>\r\n                <MenuItem value=\"days\">Days</MenuItem>\r\n                <MenuItem value=\"weeks\">Weeks</MenuItem>\r\n                <MenuItem value=\"months\">Months</MenuItem>\r\n                <MenuItem value=\"years\">Years</MenuItem>\r\n              </Select>\r\n            </div>\r\n            <div className={styles.formField}>\r\n              <label htmlFor=\"age-based-replacement-age\">\r\n                {\" \"}\r\n                Replacement Age\r\n              </label>\r\n              <input\r\n                className={styles.input}\r\n                type=\"text\"\r\n                id=\"age-based-replacement-age\"\r\n                name=\"age-based-replacement-age\"\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        {type === \"calendarBased\" && (\r\n          <div className={styles.MTypeContent}>\r\n            <div className={styles.formField}>\r\n              <label htmlFor=\"calendar-based-measurement-unit\">\r\n                {\" \"}\r\n                Unit of Measurement\r\n              </label>\r\n              <Select\r\n                disableUnderline\r\n                labelId=\"calendar-based-measurement-unit-label\"\r\n                id=\"calendar-based-measurement-unit\"\r\n                value={calendarBasedUnit}\r\n                onChange={(e) => setCalendarBasedUnit(e.target.value)}\r\n                className={styles.input}\r\n              >\r\n                <MenuItem value=\"hours\">Hours</MenuItem>\r\n                <MenuItem value=\"days\">Days</MenuItem>\r\n                <MenuItem value=\"weeks\">Weeks</MenuItem>\r\n                <MenuItem value=\"months\">Months</MenuItem>\r\n                <MenuItem value=\"years\">Years</MenuItem>\r\n              </Select>\r\n            </div>\r\n            <div className={styles.formField}>\r\n              <label htmlFor=\"calendar-based-replacement-age\">\r\n                {\" \"}\r\n                Replacement Age\r\n              </label>\r\n              <input\r\n                className={styles.input}\r\n                type=\"text\"\r\n                id=\"calendar-based-replacement-age\"\r\n                name=\"calendar-based-replacement-age\"\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        {type === \"conditionBased\" && (\r\n          <div className={styles.MTypeContent}>\r\n            <div className={styles.formField}>\r\n              <label htmlFor=\"failure-mode\">\r\n                {\" \"}\r\n                Failure Mode to be inspected\r\n              </label>\r\n              <Select\r\n                disableUnderline\r\n                labelId=\"failure-mode-label\"\r\n                id=\"failure-mode\"\r\n                value={failureMode}\r\n                onChange={(e) => setFailureMode(e.target.value)}\r\n                className={styles.input}\r\n              >\r\n                {failureModes?.map((ele) => {\r\n                  return <MenuItem value={ele.failure_mode}>{ele.failure_mode}</MenuItem>;\r\n                })}\r\n              </Select>\r\n            </div>\r\n            {condition === \"visual\" && (\r\n              <>\r\n                <div className={styles.formField}>\r\n                  <label htmlFor=\"inspection-frequency\">\r\n                    {\" \"}\r\n                    Inspection Frequency\r\n                  </label>\r\n                  <input\r\n                    className={styles.input}\r\n                    value={visualFrequency}\r\n                    onChange={changeVisualFrequency}\r\n                    type=\"number\"\r\n                    id=\"inspection-frequency\"\r\n                    name=\"inspection-frequency\"\r\n                  />\r\n                </div>\r\n                <div className={styles.levels}>\r\n                  <div className={styles.levelCol}>\r\n                    <div className={styles.sectionHead}>Wear</div>\r\n                    <div className={styles.formField}>\r\n                      <label htmlFor=\"visual-wear-level\">No. of levels</label>\r\n                      <input\r\n                        className={styles.input}\r\n                        value={visualWearLevels}\r\n                        onChange={changeVisualWearLevel}\r\n                        type=\"number\"\r\n                        id=\"visual-wear-level\"\r\n                        name=\"visual-wear-level\"\r\n                      />\r\n                    </div>\r\n                    <Table\r\n                      columnDefs={visualWearColumnDefs}\r\n                      rowData={VisualWearRows}\r\n                      tableUpdate={(rows) => {\r\n                        console.log(rows);\r\n                      }}\r\n                      height={250}\r\n                    />\r\n                  </div>\r\n                  <div className={styles.levelCol}>\r\n                    <div className={styles.sectionHead}>Corrosion</div>\r\n                    <div className={styles.formField}>\r\n                      <label htmlFor=\"visual-corrosion-level\">\r\n                        No. of levels\r\n                      </label>\r\n                      <input\r\n                        className={styles.input}\r\n                        value={visualCorrosionLevels}\r\n                        onChange={changeVisualCorrosionLevel}\r\n                        type=\"number\"\r\n                        id=\"visual-corrosion-level\"\r\n                        name=\"visual-corrosion-level\"\r\n                      />\r\n                    </div>\r\n                    <Table\r\n                      columnDefs={visualCorrosionColumnDefs}\r\n                      rowData={VisualCorrosionRows}\r\n                      tableUpdate={(rows) => {\r\n                        console.log(rows);\r\n                      }}\r\n                      height={250}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className={styles.levelwise}>\r\n                  <div className={styles.lwCol}>\r\n                    Actions\r\n                    <Table\r\n                      columnDefs={visualActionsCols}\r\n                      rowData={visualActionsRows}\r\n                      tableUpdate={(data) => console.log(data)}\r\n                      height={200}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </>\r\n            )}\r\n            {condition === \"degradation\" && (\r\n              <>\r\n                <div className={styles.levels}>\r\n                  <div className={styles.levelCol}>\r\n                    <div className={styles.sectionHead}>Wear</div>\r\n                    <div className={styles.sectionHead}>Corrosion</div>\r\n                  </div>\r\n                  <div className={styles.levelCol}>\r\n                    <div className={styles.formField}>\r\n                      <label htmlFor=\"degradation-wear-level\">\r\n                        No. of levels\r\n                      </label>\r\n                      <input\r\n                        className={styles.input}\r\n                        value={degradationWearLevels}\r\n                        onChange={changeDegradationWearLevel}\r\n                        type=\"number\"\r\n                        id=\"degradation-wear-level\"\r\n                        name=\"degradation-wear-level\"\r\n                      />\r\n                    </div>\r\n                    <div className={styles.formField}>\r\n                      <label htmlFor=\"degradation-corrosion-level\">\r\n                        No. of levels\r\n                      </label>\r\n                      <input\r\n                        className={styles.input}\r\n                        type=\"text\"\r\n                        id=\"degradation-corrosion-level\"\r\n                        name=\"degradation-corrosion-level\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className={styles.levelCol}></div>\r\n                </div>\r\n              </>\r\n            )}\r\n            {condition === \"sensorBased\" && (\r\n              <>\r\n                <RadioGroup\r\n                  row\r\n                  name=\"monitoring-type\"\r\n                  value={monitoringType}\r\n                  onChange={(e) => setMonitoringType(e.target.value)}\r\n                  className={styles.sensorRadio}\r\n                >\r\n                  <div>\r\n                    <FormControlLabel\r\n                      labelPlacement=\"start\"\r\n                      value=\"intermittent\"\r\n                      control={<Radio />}\r\n                      label=\"Intermittent Monitoring\"\r\n                    />\r\n                  </div>\r\n                  <FormControlLabel\r\n                    labelPlacement=\"start\"\r\n                    value=\"continuous\"\r\n                    control={<Radio />}\r\n                    label=\"Continuous Monitoring\"\r\n                  />\r\n                </RadioGroup>\r\n                <div className={styles.parameters}>\r\n                  <div className={styles.formField}>\r\n                    <label htmlFor=\"parameters\"> Number of parameters</label>\r\n                    <input\r\n                      className={styles.input}\r\n                      value={numPara}\r\n                      onChange={(e) => setNumPara(e.target.value)}\r\n                      type=\"number\"\r\n                      id=\"parameters\"\r\n                      name=\"parameters\"\r\n                    />\r\n                    <Button\r\n                      onClick={() => addPRows(numPara)}\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      style={{ marginLeft: 10 }}\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                  </div>\r\n                  <div className={styles.formField}>\r\n                    <label htmlFor=\"parameters\"> Define parameters</label>\r\n                    <Table\r\n                      columnDefs={parameterColumnDefs}\r\n                      rowData={pRows}\r\n                      tableUpdate={updateParameterRowData}\r\n                      height={200}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                {/* <div className={styles.levelwise}>\r\n            <div className={styles.lwCol}>\r\n                Level Wise Parameters\r\n                <Table\r\n                    columnDefs={lvlwiseColumnDefs}\r\n                    rowData={lvlwiseRows}\r\n                    tableUpdate={(data)=>console.log(data)}\r\n                    height={200}\r\n                    />\r\n            </div>\r\n            <div className={styles.lwCol}>\r\n                Alarms\r\n                <Table\r\n                    columnDefs={sbAlarmCols}\r\n                    rowData={sbAlarmRows}\r\n                    tableUpdate={(data)=>console.log(data)}\r\n                    height={200}\r\n                    />\r\n            </div>\r\n            </div> */}\r\n              </>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n      {SnackBarMessage.showSnackBar && (\r\n        <CustomizedSnackbars\r\n          message={SnackBarMessage}\r\n          onHandleClose={onHandleSnackClose}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default AssignType;\r\n","E:\\NetraB\\netra\\src\\pages\\dragNdrop\\Flow\\flow.js",["988","989","990","991"],"import { useSelector, useDispatch } from \"react-redux\";\r\nimport React, { useCallback, useRef, useState } from \"react\";\r\nimport { ContextMenu, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  removeElements,\r\n  Background,\r\n  ReactFlowProvider,\r\n  Controls,\r\n  isNode,\r\n} from \"react-flow-renderer\";\r\nimport CustomNode from \"../CustomNode/CustomNode\";\r\nimport dagre from \"dagre\";\r\nimport { elementActions } from \"../../../store/elements\";\r\nimport customCSSClasses from \"./flow.module.css\";\r\nimport \"./flow.css\";\r\nimport CustomContextMenu from \"../ContextMenu/contextMenu\";\r\n\r\nconst nodeTypes = {\r\n  systemNode: CustomNode,\r\n};\r\n\r\nconst styles = {\r\n  background: \"#EEEEEE\",\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n};\r\n\r\nconst dagreGraph = new dagre.graphlib.Graph();\r\ndagreGraph.setDefaultEdgeLabel(() => ({}));\r\n\r\n// In order to keep this example simple the node width and height are hardcoded.\r\n// In a real world app you would use the correct width and height values of\r\n// const nodes = useStoreState(state => state.nodes) and then node.__rf.width, node.__rf.height\r\n\r\nconst nodeWidth = 172;\r\nconst nodeHeight = 36;\r\n\r\nconst getLayoutedElements = (elements, direction = \"TB\") => {\r\n  debugger;\r\n  const isHorizontal = direction === \"LR\";\r\n  dagreGraph.setGraph({ rankdir: direction });\r\n\r\n  elements.forEach((el) => {\r\n    if (isNode(el)) {\r\n      dagreGraph.setNode(el.id, { width: nodeWidth, height: nodeHeight });\r\n    } else {\r\n      dagreGraph.setEdge(el.source, el.target);\r\n    }\r\n  });\r\n\r\n  dagre.layout(dagreGraph);\r\n\r\n  return elements.map((el) => {\r\n    if (isNode(el)) {\r\n      const nodeWithPosition = dagreGraph.node(el.id);\r\n      el.targetPosition = isHorizontal ? \"left\" : \"top\";\r\n      el.sourcePosition = isHorizontal ? \"right\" : \"bottom\";\r\n\r\n      // unfortunately we need this little hack to pass a slightly different position\r\n      // to notify react flow about the change. Moreover we are shifting the dagre node position\r\n      // (anchor=center center) to the top left so it matches the react flow node anchor point (top left).\r\n      el.position = {\r\n        x: nodeWithPosition.x,\r\n        y: nodeWithPosition.y,\r\n      };\r\n    }\r\n\r\n    return el;\r\n  });\r\n};\r\n\r\nconst Flow = ({reactFlowInstance,reactFlowWrapper,setReactFlowInstance}) => {\r\n  const dispatch = useDispatch();\r\n  \r\n  const ielements = useSelector((state) => state.elements.elements);\r\n  const onElementsRemove = (elementsToRemove) => {\r\n    let ele = removeElements(elementsToRemove, ielements);\r\n    dispatch(elementActions.removeElement(ele));\r\n  };\r\n  const onConnect = (params) => {\r\n    params.type = \"smoothstep\";\r\n    params.id = uuid();\r\n    params.dtype = \"edge\";\r\n    let ele = addEdge(params, ielements);\r\n    dispatch(elementActions.onConnect(ele));\r\n  };\r\n  const onDragOver = (event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  };\r\n  const onElementClick = (event, node) => {\r\n    dispatch(elementActions.setNodeDetail(node));\r\n  };\r\n  const onLoad = (_reactFlowInstance) =>\r\n    setReactFlowInstance(_reactFlowInstance);\r\n\r\n  const onLayout = useCallback(\r\n    (direction) => {\r\n      let elements = JSON.parse(JSON.stringify(ielements));\r\n      const layoutedElements = getLayoutedElements(elements, direction);\r\n      dispatch(elementActions.layoutChange({ elements: layoutedElements }));\r\n    },\r\n    [ielements]\r\n  );\r\n\r\n  const onContextMenu = (e) => {\r\n    e.preventDefault();\r\n    return <ContextMenu></ContextMenu>;\r\n  };\r\n  const onDrop = (event) => {\r\n    event.preventDefault();\r\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n    const type = event.dataTransfer.getData(\"application/reactflow\");\r\n    if (type === \"systemNode\") {\r\n      let isRootNodeExist =\r\n        ielements.filter((x) => x.type === \"systemNode\").length > 0;\r\n      if (isRootNodeExist) {\r\n        alert(\"System already exist!!\");\r\n        return false;\r\n      }\r\n    }\r\n\r\n    const position = reactFlowInstance.project({\r\n      x: event.clientX - reactFlowBounds.left,\r\n      y: event.clientY - reactFlowBounds.top,\r\n    });\r\n    let style = {};\r\n    if (type === \"output\") {\r\n      style = {\r\n        border: \"2px solid black\",\r\n        borderRadius: \"5px\",\r\n        background: \"#DCFFC0\",\r\n        borderColor: \"black\",\r\n      };\r\n    } else {\r\n      style = {\r\n        border: \"2px solid black\",\r\n        borderRadius: \"5px\",\r\n        background: \"#FFFBDA\",\r\n      };\r\n    }\r\n    const newNode = {\r\n      id: uuid(),\r\n      type,\r\n      position,\r\n      data: { label: `Please Define Name` },\r\n      dtype: \"node\",\r\n      style: style,\r\n    };\r\n    dispatch(elementActions.addElement({ ele: newNode }));\r\n  };\r\n\r\n  const onHoverBegin=(event, node)=>{\r\n    // console.log(node)\r\n    let pc=\"\"\r\n    \r\n    if(\"parallel_comp\" in node.data){\r\n      node.data.parallel_comp.map(\r\n        component=>{\r\n          return(\r\n            pc+=\"<br/>\"+component.label\r\n          )\r\n          \r\n        })\r\n      document.getElementById('tooltip').innerHTML=\r\n      `<h4>${node.data.label}</h4>`+\"<p>Parallel Components:\"+pc+\"</p>\"\r\n      document.getElementById('tooltip').style.opacity = 1\r\n      }\r\n    \r\n  }\r\n  \r\n  const duringHover=(event,node)=>{\r\n    //console.log(event);\r\n    debugger;\r\n    document.getElementById('tooltip').style.left = event.pageX-20+\"px\"\r\n    document.getElementById('tooltip').style.top = event.pageY-110+\"px\"\r\n  }\r\n\r\n  const onHoverEnd=(event, node)=>{\r\n    document.getElementById('tooltip').style.opacity = 0\r\n    document.getElementById('tooltip').innerHTML=null\r\n  }\r\n\r\n  return (<>\r\n    <ContextMenuTrigger id=\"same_unique_identifier\">\r\n        \r\n      \r\n    <ReactFlowProvider>\r\n      <div className={customCSSClasses.react_flow_pane_parent}>\r\n        <div style={{ height: \"98vh\", width: \"100%\" }} ref={reactFlowWrapper}>\r\n          <CustomContextMenu/>\r\n          <ReactFlow\r\n            style={styles}\r\n            elements={ielements}\r\n            onElementsRemove={onElementsRemove}\r\n            onConnect={onConnect}\r\n            onDrop={onDrop}\r\n            onLoad={onLoad}\r\n            onDragOver={onDragOver}\r\n            nodeTypes={nodeTypes}\r\n            onElementClick={onElementClick}\r\n            onNodeContextMenu={onContextMenu}\r\n            // onNodeDoubleClick={onDoubleClick}\r\n\r\n            onNodeMouseEnter={onHoverBegin}\r\n            onNodeMouseMove={duringHover}\r\n            onNodeMouseLeave={onHoverEnd}\r\n          >\r\n            <div id=\"tooltip\">\r\n            </div>\r\n            <Controls></Controls>\r\n            <Background></Background>\r\n          </ReactFlow>\r\n        </div>\r\n        <div className={`controls + ' ' + ${customCSSClasses.control_div}`}>\r\n          <button className={customCSSClasses.horizontal} onClick={() => onLayout(\"LR\")}>Horizontal Layout</button>\r\n          <button className={customCSSClasses.vertical} onClick={() => onLayout(\"TB\")}>Vertical Layout</button>\r\n        </div>\r\n      </div>\r\n    </ReactFlowProvider>\r\n    </ContextMenuTrigger>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Flow;\r\n","E:\\NetraB\\netra\\src\\pages\\dragNdrop\\ComponentDetails\\ComponentDetails.js",["992","993","994"],"import React, { useRef } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport customclasses from \"./ComponentDetails.module.css\";\r\nimport Select from \"react-select\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { elementActions } from \"../../../store/elements\";\r\nimport randomColor from \"randomcolor\";\r\n\r\nimport GroupData from \"./GroupData\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginTop:20,\r\n    width: \"100%\",\r\n    \"& .MuiAccordionDetails-root\": {\r\n      \"flex-direction\": \"column\",\r\n    },\r\n    \"& .MuiFormControl-root\": {\r\n      margin: \"5px\",\r\n    },\r\n    \"& .MuiFormLabel-root\": {\r\n      fontSize: \"0.8rem\",\r\n    },\r\n    \"& .MuiInputBase-input\": {\r\n      height: \"0.6rem\",\r\n    },\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\nconst AccordionStyles=makeStyles(theme=>({\r\n  root:{\r\n    border:'1px solid gray',\r\n    borderRadius:'10px',\r\n    marginTop:20,\r\n    },\r\n    \r\n\r\n}))\r\n\r\nconst ComponentDetails = (props) => {\r\n  const dispatch = useDispatch();\r\n  const selectedNode = useSelector((state) => state.elements.node);\r\n  const allElements = useSelector((state) => state.elements.elements);\r\n  const edgesN = allElements\r\n    .filter((x) => x.dtype === \"edge\")\r\n    .map((x) => x.source);\r\n\r\n  // console.log(\"Edge\");\r\n  // console.log(edgesN);\r\n  const groupDataKN = GroupData();\r\n  const parentName = useSelector(\r\n    (state) => state.elements.selectedNodeParentName\r\n  );\r\n  let filteredOptions = useSelector(\r\n    (state) => state.elements.selectedNodeSiblings\r\n  );\r\n  filteredOptions = filteredOptions.map((x) => {\r\n    return { value: x.id, label: x.data.label };\r\n  });\r\n  const p_selectRef = useRef();\r\n  const kRef = useRef();\r\n  const kRefELH = useRef();\r\n  const kRefC = useRef();\r\n  const kRefDS = useRef();\r\n  const kRefAS = useRef();\r\n  const nodeNameRef = useRef();\r\n  const knP = useRef();\r\n  const classes = useStyles();\r\n\r\n  const accordionClasses=AccordionStyles();\r\n  const data = useSelector((state) => state.elements.node.data);\r\n\r\n  const onHandleChange = (e) => {\r\n    console.log(data);\r\n    dispatch(\r\n      elementActions.onHandleNameChange({\r\n        nodeName: nodeNameRef.current.value,\r\n        node: selectedNode,\r\n      })\r\n    );\r\n  };\r\n  const onHandleButtonClick = () => {\r\n    debugger;\r\n    const parallel_comp = p_selectRef.current.state.value;\r\n    const color = randomColor({ luminosity: \"bright\", format: \"rgb\" });\r\n    //console.log(kRef.current.value)\r\n    dispatch(\r\n      elementActions.updateParallelComponent({\r\n        k:kRef.current.value,\r\n        k_elh: kRefELH.current.value,\r\n        k_c: kRefC.current.value,\r\n        k_ds: kRefDS.current.value,\r\n        k_as: kRefAS.current.value,\r\n        parallel_comp: parallel_comp,\r\n        color: color,\r\n      })\r\n    );\r\n    kRef.current.value='';\r\n    kRefELH.current.value = '';\r\n    kRefC.current.value = '';\r\n    kRefDS.current.value = '';\r\n    kRefAS.current.value = '';\r\n    p_selectRef.current.state.value = null;\r\n    \r\n  };\r\n\r\n  const onHandleUpdateKN = () => {\r\n    const color = randomColor({ luminosity: \"bright\", format: \"rgb\" });\r\n    const nodes = knP.current.state.value;\r\n    dispatch(\r\n      elementActions.onUpdateKNHandler({\r\n        nodes: nodes,\r\n        color: color,\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Accordion square elevation={0} classes={accordionClasses} defaultExpanded={true}>\r\n        <AccordionSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>Basic Details</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <div>\r\n            <form onSubmit={(e) => e.preventDefault()}>\r\n              <div>\r\n                <label className={customclasses.inputlabel}>\r\n                  Name\r\n                  <input\r\n                    className={customclasses.input}\r\n                    ref={nodeNameRef}\r\n                    type=\"text\"\r\n                    placeholder=\"Name\"\r\n                    value={selectedNode.data.label}\r\n                    onChange={onHandleChange}\r\n                  ></input>\r\n                </label>\r\n                <label className={customclasses.inputlabel}>\r\n                  Parent Name\r\n                  <input\r\n                    className={customclasses.input}\r\n                    type=\"text\"\r\n                    placeholder=\"Parent Name\"\r\n                    value={parentName}\r\n                    readOnly\r\n                    disabled\r\n                  ></input>\r\n                </label>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      <Accordion square elevation={0} classes={accordionClasses}>\r\n        <AccordionSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel2a-content\"\r\n          id=\"panel2a-header\"\r\n        >\r\n          <Typography className={classes.heading}>Advance Details</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <div>\r\n            {/* <label className={customclasses.inputlabel}>\r\n              Repair type\r\n              <Select options={[\r\n                { value: 'None', label: 'None' },\r\n                { value: 'Repairable', label: 'Repairable' },\r\n                { value: 'Replacable', label: 'Replacable' }]} ref={r_selectRef}>\r\n              </Select>\r\n            </label> */}\r\n            <label className={customclasses.inputlabel}>\r\n              Please Select Parallel Components\r\n              <Select\r\n                ref={p_selectRef}\r\n                options={filteredOptions}\r\n                isMulti\r\n                isSearchable\r\n              />\r\n            </label>\r\n            {/* <label className={customclasses.inputlabel}>\r\n              Please Select All K out of N components.\r\n              <Select ref={knP} options={groupDataKN} isMulti isSearchable />\r\n            </label> */}\r\n            <label className={customclasses.inputlabel}>\r\n                  \r\n                  <input\r\n                    className={customclasses.input}\r\n                    ref={kRef}\r\n                    type=\"number\"\r\n                    placeholder=\"Enter K-Harbour value\"\r\n                    // onChange={onHandleChange}\r\n                  ></input>\r\n                </label>\r\n                <label className={customclasses.inputlabel}>\r\n                  \r\n                  <input\r\n                    className={customclasses.input}\r\n                    ref={kRefELH}\r\n                    type=\"number\"\r\n                    placeholder=\"Enter K- Entry Leaving Harbour value\"\r\n                    // onChange={onHandleChange}\r\n                  ></input>\r\n                </label>\r\n                <label className={customclasses.inputlabel}>\r\n                  \r\n                  <input\r\n                    className={customclasses.input}\r\n                    ref={kRefC}\r\n                    type=\"number\"\r\n                    placeholder=\"Enter K-Cruise value\"\r\n                    // onChange={onHandleChange}\r\n                  ></input>\r\n                </label>\r\n                <label className={customclasses.inputlabel}>\r\n                  \r\n                  <input\r\n                    className={customclasses.input}\r\n                    ref={kRefDS}\r\n                    type=\"number\"\r\n                    placeholder=\"Enter K-Defense Station value\"\r\n                    // onChange={onHandleChange}\r\n                  ></input>\r\n                </label>\r\n                <label className={customclasses.inputlabel}>\r\n                  \r\n                  <input\r\n                    className={customclasses.input}\r\n                    ref={kRefAS}\r\n                    type=\"number\"\r\n                    placeholder=\"Enter K-Action Station value\"\r\n                    // onChange={onHandleChange}\r\n                  ></input>\r\n                </label>\r\n                <label className={customclasses.inputlabel}>\r\n                  \r\n                  <input\r\n                    className={customclasses.input}\r\n                    type=\"number\"\r\n                    placeholder=\"Enter N value\"\r\n                    disabled={true}\r\n                    style={{background:'rgb(235,235,228)'}}\r\n                    // value={parentName}\r\n                    // readOnly\r\n                    // disabled\r\n                  ></input>\r\n                </label>\r\n            <button className={customclasses.savebtn} onClick={onHandleButtonClick}>Save Details</button>\r\n          </div>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      {/* <Accordion square elevation={0} classes={accordionClasses} defaultExpanded={true}>\r\n        <AccordionSummary aria-controls=\"panel2a-content\" id=\"panel2a-header\">\r\n          <Typography className={classes.heading}>K out of N</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <div>\r\n            \r\n            <button className={customclasses.savebtn} \r\n            // onClick={onHandleUpdateKN}\r\n            >Update K/N</button>\r\n          </div>\r\n        </AccordionDetails>\r\n      </Accordion> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComponentDetails;\r\n","E:\\NetraB\\netra\\src\\pages\\dragNdrop\\SideBar\\Sidebar.js",["995"],"import { Button } from \"@material-ui/core\";\r\nimport classes from \"./Sidebar.module.css\";\r\nconst Sidebar = () => {\r\n  const onDragStart = (event, nodeType) => {\r\n    event.dataTransfer.setData(\"application/reactflow\", nodeType);\r\n    event.dataTransfer.effectAllowed = \"move\";\r\n  };\r\n  return (\r\n    <aside className={classes.parent}>\r\n      {/* <div className={classes.description}>\r\n        You can drag these nodes to the pane below.\r\n      </div> */}\r\n      <div className={classes.nodeparent}>\r\n        <div\r\n          className={`${classes.dndnode} + ' ' + ${classes.system}`}\r\n          onDragStart={(event) => onDragStart(event, \"systemNode\")}\r\n          draggable\r\n        >\r\n          System Node\r\n        </div>\r\n        <div\r\n          className={classes.dndnode}\r\n          onDragStart={(event) => onDragStart(event, \"default\")}\r\n          draggable\r\n        >\r\n          Component Node\r\n        </div>\r\n        <div\r\n          className={`${classes.dndnode} + ' ' + ${classes.output}`}\r\n          onDragStart={(event) => onDragStart(event, \"output\")}\r\n          draggable\r\n        >\r\n          LMU Node\r\n        </div>\r\n      </div>\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\expert.js",["996","997"],"import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: theme.spacing(30),\r\n      height: theme.spacing(5),\r\n      background: \"#048ee7\",\r\n      color: \"white\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Expert = (props) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const classes = useStyles();\r\n  const rows = props.childList.map((x) => {\r\n    return { name: x.name, id: x.id };\r\n  });\r\n  const [rowState, setRows] = useState([\r\n    {\r\n      id: rows[0].id,\r\n      ComponentName: rows[0].name,\r\n      MostLikely: \"\",\r\n      MaxLife: \"\",\r\n      MinLife: \"\",\r\n      componentFailure: \"\",\r\n      time_wo_failure: \"\",\r\n    },\r\n  ]);\r\n\r\n  const ExpertColumns = [\r\n    <AgGridColumn\r\n      field=\"ComponentName\"\r\n      headerName=\"Component Name\"\r\n      editable={true}\r\n      width={200}\r\n      checkboxSelection={true}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: rows.map((x) => x.name),\r\n      }}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"MostLikely\"\r\n      headerName=\"Most Likely Life\"\r\n      width={150}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"MaxLife\"\r\n      headerName=\"Maximum Life\"\r\n      width={150}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"MinLife\"\r\n      headerName=\"Minimum Life\"\r\n      width={150}\r\n      editable={true}\r\n    />,\r\n    // <AgGridColumn\r\n    //   field=\"Replacements\"\r\n    //   headerName=\"No. of Replacements (Acknowledged by Expert)\"\r\n    //   editable={true}\r\n    // />,\r\n    <AgGridColumn\r\n      field=\"componentFailure\"\r\n      headerName=\"Number of Component seen withour Failure\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"time_wo_failure\"\r\n      headerName=\"Total time without Failure\"\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows, \"expert\");\r\n  };\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: rows[0].id,\r\n        ComponentName: rows[0].name,\r\n        MostLikely: \"\",\r\n        MaxLife: \"\",\r\n        MinLife: \"\",\r\n        componentFailure: \"\",\r\n        time_wo_failure: \"\",\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Paper elevation={3} variant=\"outlined\">\r\n          Expert Judgement\r\n        </Paper>\r\n      </div>\r\n      <Table\r\n        columnDefs={ExpertColumns}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        rowData={rowState}\r\n        tableUpdate={updateFinalRowData}\r\n      ></Table>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Expert;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\nprd.js",["998","999","1000"],"import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    \"& > *\": {\r\n      marginTop: theme.spacing(0),\r\n      // width:\r\n      width: \"50%\",\r\n      height: theme.spacing(5),\r\n      // background: \"#048ee7\",\r\n      color: \"black\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      // justifyContent: \"center\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst NPRD = (props) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const classes = useStyles();\r\n  const rows = props.childList.map((x) => {\r\n    return { name: x.name, id: x.id };\r\n  });\r\n  const [rowState, setRows] = useState([\r\n    {\r\n      id: rows[0].id,\r\n      ComponentName: rows[0].name,\r\n      FailureRate: \"2\",\r\n      Beta: \"2\",\r\n    },\r\n  ]);\r\n\r\n  const NPRDColumns = [\r\n    <AgGridColumn\r\n      field=\"ComponentName\"\r\n      headerName=\"Component Name\"\r\n      editable={true}\r\n      minWidth={100}\r\n      checkboxSelection={true}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: rows.map((x) => x.name),\r\n      }}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"FailureRate\"\r\n      headerName=\"Failure Rate\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Beta\"\r\n      headerName=\"β - Shape Parameter\"\r\n      type=\"nmber\"\r\n      editable={true}\r\n    />,\r\n  ];\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows, \"nprd\");\r\n  };\r\n\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: rows[0].id,\r\n        ComponentName: rows[0].name,\r\n        FailureRate: \"2\",\r\n        Beta: \"2\",\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <h5>\r\n          *If the beta of the component is not known, use the following\r\n          information: <br />\r\n          1. If Failure of the component is observed in narrow time window use\r\n          beta(β) = 2.5 <br />\r\n          2. If Failure of the component is observed in scattered time window\r\n          use beta(β) = 1.5\r\n        </h5>\r\n      </div>\r\n      <Table\r\n        columnDefs={NPRDColumns}\r\n        rowData={rowState}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        tableUpdate={updateFinalRowData}\r\n      ></Table>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NPRD;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\maintenanceData\\EquipmentName.js",["1001","1002","1003"],"import React, {\r\n  useEffect,\r\n  useState,\r\n  useImperativeHandle,\r\n  useRef,\r\n  forwardRef,\r\n} from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport SystemConfiguration from \"../../systen_configuration/SystemConfiguration\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nconst EquipmentName = forwardRef((props, ref) => {\r\n  const [value, setValue] = useState([]);\r\n  const refInput = useRef(null);\r\n  const systemData = useSelector((state) => state.treeData.treeData);\r\n  const location = useLocation();\r\n  const handleChange = (event, newValue) => {\r\n    debugger;\r\n    // alert(newValue);\r\n    setValue(newValue);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //     // focus on the input\r\n  //     //setTimeout(() => refInput.current.focus());\r\n  //     console.log(systemData)\r\n  // }, []);\r\n\r\n  /* Component Editor Lifecycle methods */\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      // the final value to send to the grid, on completion of editing\r\n      getValue() {\r\n        //console.log(value);\r\n        const path = location.pathname;\r\n        if (path === \"/data_manager/maintenance_data\") {\r\n          props.setId(value.id);\r\n        }\r\n        return value.name;\r\n      },\r\n      isPopup() {\r\n        return true;\r\n      },\r\n      // Gets called once before editing starts, to give editor a chance to\r\n      // cancel the editing before it even starts.\r\n      isCancelBeforeStart() {\r\n        return false;\r\n      },\r\n\r\n      // Gets called once when editing is finished (eg if Enter is pressed).\r\n      // If you return true, then the result of the edit will be ignored.\r\n      // isCancelAfterEnd() {\r\n      //     // our editor will reject any value greater than 1000\r\n      //     return value > 1000;\r\n      // }\r\n    };\r\n  });\r\n\r\n  return (\r\n    // <input type=\"number\"\r\n    //        ref={refInput}\r\n    //        value={value}\r\n    //        onChange={event => setValue(event.target.value)}\r\n    //        style={{width: \"100%\"}}\r\n    // />\r\n    <Autocomplete\r\n      options={systemData}\r\n      //value={value}\r\n      onChange={handleChange}\r\n      groupBy={(option) => option.parentName}\r\n      getOptionLabel={(option) => option.name}\r\n      style={{ width: 300 }}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          ref={refInput}\r\n          label=\"Select Equipment\"\r\n          variant=\"outlined\"\r\n        />\r\n      )}\r\n    />\r\n  );\r\n});\r\nexport default EquipmentName;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\oem.js",["1004","1005","1006","1007","1008","1009"],"import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Button, Input, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"50px\",\r\n    margin: 50,\r\n    height: 1,\r\n  },\r\n  parent: { marginTop: \"20px\" },\r\n  child1: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: theme.spacing(20),\r\n      height: theme.spacing(5),\r\n      background: \"#048ee7\",\r\n      color: \"white\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n    },\r\n  },\r\n  child2: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  paper: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: theme.spacing(60),\r\n      height: theme.spacing(3),\r\n      textAlign: \"center\",\r\n      padding: \"10px\",\r\n    },\r\n  },\r\n  buttons: {\r\n    marginLeft: \"20px\",\r\n    marginTop: \"25px\",\r\n    alignItems: \"center\",\r\n    height: \"40px\",\r\n  },\r\n}));\r\n\r\nconst OEM = (props) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const rows = props.childList.map((x) => {\r\n    return { name: x.name, id: x.id };\r\n  });\r\n  const [lifeEstimates, setlifeEstimates] = useState([\"L10\", \"L90\"]);\r\n  const [columnDefs, setColumnDefs] = useState([\r\n    <AgGridColumn\r\n      field=\"ComponentName\"\r\n      headerName=\"Component Name\"\r\n      editable={true}\r\n      width={200}\r\n      checkboxSelection={true}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: rows.map((x) => x.name),\r\n      }}\r\n    />,\r\n  ]);\r\n  // console.log(lifeEstimates);\r\n  const classes = useStyles();\r\n  const [rowState, setRows] = useState([\r\n    {\r\n      id: rows[0].id,\r\n      ComponentName: rows[0].name,\r\n      L10: \"\",\r\n      L90: \"\",\r\n    },\r\n  ]);\r\n\r\n  // const OEMColumns = [\r\n  //   <AgGridColumn\r\n  //     field=\"ComponentName\"\r\n  //     headerName=\"Component Name\"\r\n  //     editable={true}\r\n  //     width={200}\r\n  //     checkboxSelection={true}\r\n  //     cellEditor=\"agSelectCellEditor\"\r\n  //     cellEditorParams={{\r\n  //       values: [\"Pressure Cap\", \"Tank\", \"Water Pump Mounting Support\"],\r\n  //     }}\r\n  //   />,\r\n  //   <AgGridColumn field=\"L10\" headerName=\"L10\" editable={true} />,\r\n  //   <AgGridColumn field=\"L90\" headerName=\"L90\" editable={true} />,\r\n  // ];\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows, \"oem\");\r\n  };\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: rows[0].id,\r\n        ComponentName: rows[0].name,\r\n        L10: \"\",\r\n        L90: \"\",\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    console.log(selectedRows);\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  const submitLifeEstimates = () => {\r\n    const columns = lifeEstimates.map((c, i) => {\r\n      if (!columnDefs.some((e) => e.props.headerName === c)) {\r\n        return <AgGridColumn field={c} headerName={c} editable={true} />;\r\n      }\r\n    });\r\n\r\n    setColumnDefs((prevState) => {\r\n      return [...prevState, ...columns];\r\n    });\r\n  };\r\n  const addMoreLifeEstimates = () => {\r\n    setlifeEstimates((prevState) => {\r\n      return [...prevState, \"L\"];\r\n    });\r\n  };\r\n  const onChangeTextField = function (e, i) {\r\n    setlifeEstimates((prevState) => {\r\n      let stateCopy = [...prevState];\r\n      stateCopy[i] = e.target.value;\r\n      return [...stateCopy];\r\n    });\r\n  };\r\n  return (\r\n    <div className={classes.parent}>\r\n      {/* <div className={classes.child1}>\r\n        <Paper elevation={3} variant=\"outlined\">\r\n          OEM\r\n        </Paper>\r\n      </div> */}\r\n      <div className={classes.child2}>\r\n        <div className={classes.paper}>\r\n          {lifeEstimates.map((l, i) => {\r\n            return (\r\n              <TextField\r\n                key={i}\r\n                data-index={i}\r\n                onChange={(e) => onChangeTextField(e, i)}\r\n                label=\"Life Estimate\"\r\n                defaultValue={l}\r\n                variant=\"outlined\"\r\n                classes={{ root: classes.root }}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <Button\r\n          className={classes.buttons}\r\n          onClick={submitLifeEstimates}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Submit\r\n        </Button>\r\n        {/* <Button\r\n          className={classes.buttons}\r\n          variant=\"contained\"\r\n          onClick={addMoreLifeEstimates}\r\n          color=\"primary\"\r\n        >\r\n          Add More Life Estimate\r\n        </Button> */}\r\n      </div>\r\n      <div style={{ marginTop: \"50px\" }}>\r\n        <Table\r\n          columnDefs={columnDefs}\r\n          setGrid={setGridApi}\r\n          gridApi={gridApi}\r\n          rowData={rowState}\r\n          tableUpdate={updateFinalRowData}\r\n        ></Table>\r\n      </div>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OEM;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\failureDataPoint.js",["1010","1011"],"import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\nconst FailureDataPoint = (props) => {\r\n  debugger\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const rows = props.childList.map((x) => {\r\n    return { name: x.name, id: x.id };\r\n  });\r\n  const [rowState, setRows] = useState([\r\n    {\r\n      id: rows[0].id,\r\n      ComponentName: rows[0].name,\r\n      installationDate: \"\",\r\n      removalDate: \"\",\r\n      AFS: \"Failure\",\r\n    },\r\n  ]);\r\n\r\n  // const DPColumns = [\r\n  //   <AgGridColumn\r\n  //     field=\"ComponentName\"\r\n  //     headerName=\"Component Name\"\r\n  //     editable={true}\r\n  //     minWidth={100}\r\n  //     checkboxSelection={true}\r\n  //     cellEditor=\"agSelectCellEditor\"\r\n  //     cellEditorParams={{\r\n  //       values: rows.map((x) => x.name),\r\n  //     }}\r\n  //   />,\r\n  //   <AgGridColumn headerName=\"Actual Data\">\r\n  //     <AgGridColumn\r\n  //       field=\"DateTime\"\r\n  //       headerName=\"Date & Time\"\r\n  //       cellEditor=\"datePicker\"\r\n  //       editable={true}\r\n  //     ></AgGridColumn>\r\n  //     <AgGridColumn\r\n  //       resizable={true}\r\n  //       field=\"RTStart\"\r\n  //       headerName=\"Run Time at Start of Month\"\r\n  //       editable={true}\r\n  //     ></AgGridColumn>\r\n  //     <AgGridColumn\r\n  //       field=\"RTEnd\"\r\n  //       headerName=\"Run Time at End of Month\"\r\n  //       editable={true}\r\n  //     ></AgGridColumn>\r\n  //     <AgGridColumn\r\n  //       field=\"AFS\"\r\n  //       headerName=\"Failure/Suspension\"\r\n  //       editable={true}\r\n  //       width={150}\r\n  //       cellEditor=\"agSelectCellEditor\"\r\n  //       cellEditorParams={{\r\n  //         values: [\"Failure\", \"Suspension\"],\r\n  //       }}\r\n  //     ></AgGridColumn>\r\n  //   </AgGridColumn>,\r\n  //   <AgGridColumn headerName=\"Interval Data\">\r\n  //     <AgGridColumn\r\n  //       field=\"StartDate\"\r\n  //       headerName=\"Start Date\"\r\n  //       cellEditor=\"datePicker\"\r\n  //       editable={true}\r\n  //     ></AgGridColumn>\r\n\r\n  //     <AgGridColumn\r\n  //       field=\"EndDate\"\r\n  //       headerName=\"End Date\"\r\n  //       cellEditor=\"datePicker\"\r\n  //       editable={true}\r\n  //     ></AgGridColumn>\r\n\r\n  //     <AgGridColumn\r\n  //       field=\"IFS\"\r\n  //       headerName=\"Failure/Suspension\"\r\n  //       editable={true}\r\n  //       width={150}\r\n  //       cellEditor=\"agSelectCellEditor\"\r\n  //       cellEditorParams={{\r\n  //         values: [\"Failure\", \"Suspension\"],\r\n  //       }}\r\n  //     ></AgGridColumn>\r\n  //   </AgGridColumn>,\r\n  // ];\r\n\r\n  const DPColumns = [\r\n    <AgGridColumn\r\n      field=\"ComponentName\"\r\n      headerName=\"Component Name\"\r\n      editable={true}\r\n      minWidth={100}\r\n      checkboxSelection={true}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: rows.map((x) => x.name),\r\n      }}\r\n    />,\r\n    <AgGridColumn headerName=\"Actual Data\">\r\n      <AgGridColumn\r\n        field=\"installationDate\"\r\n        headerName=\"Installation Date\"\r\n        cellEditor=\"datePicker\"\r\n        editable={true}\r\n      ></AgGridColumn>\r\n      <AgGridColumn\r\n        field=\"removalDate\"\r\n        headerName=\"Removal Date\"\r\n        cellEditor=\"datePicker\"\r\n        editable={true}\r\n      ></AgGridColumn>\r\n      <AgGridColumn\r\n        field=\"AFS\"\r\n        headerName=\"Failure/Suspension\"\r\n        editable={true}\r\n        width={150}\r\n        cellEditor=\"agSelectCellEditor\"\r\n        cellEditorParams={{\r\n          values: [\"Failure\", \"Suspension\"],\r\n        }}\r\n      ></AgGridColumn>\r\n    </AgGridColumn>,\r\n  ];\r\n  //End\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows, \"fdp\");\r\n  };\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: rows[0].id,\r\n        ComponentName: rows[0].name,\r\n        installationDate: \"\",\r\n        removalDate: \"\",\r\n        AFS: \"Failure\",\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    console.log(selectedRows);\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  return (\r\n    <div>\r\n      <Table\r\n        columnDefs={DPColumns}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        rowData={rowState}\r\n        tableUpdate={updateFinalRowData}\r\n      ></Table>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FailureDataPoint;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\IntervalData.js",["1012"],"import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\nconst IntervalDataPoint = (props) => {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const rows = props.childList.map((x) => {\r\n    return { name: x.name, id: x.id };\r\n  });\r\n  const [rowState, setRows] = useState([\r\n    {\r\n      id: rows[0].id,\r\n      ComponentName: rows[0].name,\r\n      installationStartDate: \"\",\r\n      installationEndDate: \"\",\r\n      removalStartDate: \"\",\r\n      removalEndDate: \"\",\r\n      IFS: \"Suspension\",\r\n    },\r\n  ]);\r\n\r\n  const DPColumns = [\r\n    <AgGridColumn\r\n      field=\"ComponentName\"\r\n      headerName=\"Component Name\"\r\n      editable={true}\r\n      minWidth={100}\r\n      checkboxSelection={true}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: rows.map((x) => x.name),\r\n      }}\r\n    />,\r\n    <AgGridColumn headerName=\"Interval Data\">\r\n      <AgGridColumn headerName=\"Installation Interval\">\r\n        <AgGridColumn\r\n          field=\"installationStartDate\"\r\n          headerName=\"Interval Start Date\"\r\n          cellEditor=\"datePicker\"\r\n          editable={true}\r\n        ></AgGridColumn>\r\n        <AgGridColumn\r\n          field=\"installationEndDate\"\r\n          headerName=\"Interval End Date\"\r\n          cellEditor=\"datePicker\"\r\n          editable={true}\r\n        ></AgGridColumn>\r\n      </AgGridColumn>\r\n\r\n      <AgGridColumn headerName=\"Removal Interval\">\r\n        <AgGridColumn\r\n          field=\"removalStartDate\"\r\n          headerName=\"Interval Start Date\"\r\n          cellEditor=\"datePicker\"\r\n          editable={true}\r\n        ></AgGridColumn>\r\n        <AgGridColumn\r\n          field=\"removalEndDate\"\r\n          headerName=\"Interval End Date\"\r\n          cellEditor=\"datePicker\"\r\n          editable={true}\r\n        ></AgGridColumn>\r\n      </AgGridColumn>\r\n\r\n      <AgGridColumn\r\n        field=\"IFS\"\r\n        headerName=\"Failure/Suspension\"\r\n        editable={true}\r\n        // width={150}\r\n        cellEditor=\"agSelectCellEditor\"\r\n        cellEditorParams={{\r\n          values: [\"Failure\", \"Suspension\"],\r\n        }}\r\n      ></AgGridColumn>\r\n    </AgGridColumn>,\r\n  ];\r\n  //End\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows, \"interval\");\r\n  };\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: rows[0].id,\r\n        ComponentName: rows[0].name,\r\n        installationStartDate: \"\",\r\n        installationEndDate: \"\",\r\n        removalStartDate: \"\",\r\n        removalEndDate: \"\",\r\n        IFS: \"Suspension\",\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    console.log(selectedRows);\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  return (\r\n    <div>\r\n      <Table\r\n        columnDefs={DPColumns}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        rowData={rowState}\r\n        tableUpdate={updateFinalRowData}\r\n      ></Table>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IntervalDataPoint;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\oemExpert.js",["1013","1014","1015"],"import React, { useRef, useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport CustomTextInput from \"../../../ui/Form/CustomTextInput\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginTop: \"10px\",\r\n  },\r\n  paper: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: theme.spacing(40),\r\n      height: theme.spacing(5),\r\n      background: \"#048ee7\",\r\n      color: \"white\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n    },\r\n  },\r\n  row: {\r\n    display: \"flex\",\r\n    width: \"98%\",\r\n    marginLeft: \"1%\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n  },\r\n  value: {\r\n    marginLeft: \"50%\",\r\n  },\r\n  input: {\r\n    width: \"100%\",\r\n    marginBottom: \"20px\",\r\n  },\r\n}));\r\n\r\nfunction OEMExpert(props) {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const rows = props.childList.map((x) => {\r\n    return { name: x.name, id: x.id };\r\n  });\r\n  const [lifeEstimateValue, setLifeEstimateValue] = useState(\"L\");\r\n  const [columnDefs, setColdefs] = useState([\r\n    <AgGridColumn\r\n      field=\"ComponentName\"\r\n      headerName=\"Component Name\"\r\n      editable={true}\r\n      width={200}\r\n      checkboxSelection={true}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: rows.map((x) => x.name),\r\n      }}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"MostLikely\"\r\n      headerName=\"Most Likely Life\"\r\n      width={150}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"MaxLife\"\r\n      headerName=\"Maximum Life\"\r\n      width={150}\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"MinLife\"\r\n      headerName=\"Minimum Life\"\r\n      width={150}\r\n      editable={true}\r\n    />,\r\n    // <AgGridColumn\r\n    //   field=\"Replacements\"\r\n    //   headerName=\"No. of Replacements (Acknowledged by Expert)\"\r\n    //   editable={true}\r\n    // />,\r\n    <AgGridColumn\r\n      field=\"componentFailure\"\r\n      headerName=\"Number of Component seen withour Failure\"\r\n      editable={true}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"time_wo_failure\"\r\n      headerName=\"Total time without Failure\"\r\n      editable={true}\r\n    />,\r\n  ]);\r\n  const classes = useStyles();\r\n  const [rowState, setRows] = useState([]);\r\n\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows, \"oemE\");\r\n  };\r\n  const AddRow = () => {\r\n    if (columnDefs.length >= 6) {\r\n      const lifeEstimateName = columnDefs[1].props.field;\r\n      const defaultRow = [\r\n        {\r\n          id: rows[0].id,\r\n          ComponentName: rows[0].name,\r\n          MostLikely: \"\",\r\n          MaxLife: \"\",\r\n          MinLife: \"\",\r\n          componentFailure: \"\",\r\n          time_wo_failure: \"\",\r\n          // Replacements: \"1\",\r\n        },\r\n      ];\r\n      defaultRow[0][lifeEstimateName] = \"\";\r\n      gridApi.applyTransaction({\r\n        add: defaultRow,\r\n      });\r\n      const allRowData = [];\r\n      gridApi.forEachNode((node) => allRowData.push(node.data));\r\n      updateFinalRowData(allRowData);\r\n    } else {\r\n      alert(\"Please Add Life Estimate!!\");\r\n    }\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  const submitLifeEstimates = () => {\r\n    debugger;\r\n    const coldefs = [...columnDefs];\r\n    if (columnDefs[1].props.field[0] === \"L\") {\r\n      if (!coldefs.some((e) => e.props.headerName === lifeEstimateValue)) {\r\n        const item = (\r\n          <AgGridColumn\r\n            field={lifeEstimateValue}\r\n            headerName={lifeEstimateValue}\r\n            editable={true}\r\n            width={50}\r\n          />\r\n        );\r\n        console.log(coldefs);\r\n        coldefs.splice(1, 1, item);\r\n        setColdefs(coldefs);\r\n      }\r\n    } else {\r\n      if (!coldefs.some((e) => e.props.headerName === lifeEstimateValue)) {\r\n        const item = (\r\n          <AgGridColumn\r\n            field={lifeEstimateValue}\r\n            headerName={lifeEstimateValue}\r\n            editable={true}\r\n            width={50}\r\n          />\r\n        );\r\n        console.log(coldefs);\r\n        coldefs.splice(1, 0, item);\r\n        setColdefs(coldefs);\r\n      }\r\n    }\r\n  };\r\n  const onChangeLifeEsti = (e) => {\r\n    setLifeEstimateValue(e.target.value);\r\n  };\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.row}>\r\n        <div className={classes.paper}>\r\n          <Paper elevation={3} variant=\"outlined\">\r\n            OEM + Expert Judgement\r\n          </Paper>\r\n        </div>\r\n        <div className={classes.value}>\r\n          <Typography align=\"center\" variant=\"caption\">\r\n            Specify the Available Life Estimates\r\n          </Typography>\r\n          <div className={classes.input}>\r\n            <CustomTextInput\r\n              value={lifeEstimateValue}\r\n              onChange={onChangeLifeEsti}\r\n            />\r\n          </div>\r\n        </div>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={submitLifeEstimates}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </div>\r\n      <Table\r\n        columnDefs={columnDefs}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        rowData={rowState}\r\n        tableUpdate={updateFinalRowData}\r\n      ></Table>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OEMExpert;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\historicalData\\probabilityFailure.js",["1016","1017"],"import React, { useState } from \"react\";\r\nimport Table from \"../../../ui/Table/DataManagerTable\";\r\nimport { AgGridColumn } from \"ag-grid-react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport styles from \"../DataManager.module.css\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: theme.spacing(40),\r\n      height: theme.spacing(5),\r\n      background: \"#048ee7\",\r\n      color: \"white\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction ProbabilityFailure(props) {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const classes = useStyles();\r\n  const rows = props.childList.map((x) => {\r\n    return { name: x.name, id: x.id };\r\n  });\r\n  const [rowState, setRows] = useState([\r\n    {\r\n      id: rows[0].id,\r\n      ComponentName: rows[0].name,\r\n      Time: \"120\",\r\n      FailureProbability: \"10\",\r\n    },\r\n  ]);\r\n\r\n  const PFColumns = [\r\n    <AgGridColumn\r\n      field=\"ComponentName\"\r\n      headerName=\"Component Name\"\r\n      editable={true}\r\n      minWidth={100}\r\n      checkboxSelection={true}\r\n      cellEditor=\"agSelectCellEditor\"\r\n      cellEditorParams={{\r\n        values: rows.map((x) => x.name),\r\n      }}\r\n    />,\r\n    <AgGridColumn\r\n      field=\"Time\"\r\n      headerName=\"Time (T<) hrs\"\r\n      editable={true}\r\n      type=\"number\"\r\n    />,\r\n    <AgGridColumn\r\n      field=\"FailureProbability\"\r\n      headerName=\"Failure Probability\"\r\n      type=\"number\"\r\n      editable={true}\r\n    />,\r\n  ];\r\n\r\n  const updateFinalRowData = (allRows) => {\r\n    props.tableUpdate(allRows, \"prob\");\r\n  };\r\n  const AddRow = () => {\r\n    const defaultRow = [\r\n      {\r\n        id: rows[0].id,\r\n        ComponentName: rows[0].name,\r\n        Time: \"120\",\r\n        FailureProbability: \"10\",\r\n      },\r\n    ];\r\n    gridApi.applyTransaction({\r\n      add: defaultRow,\r\n    });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  const deleteRows = () => {\r\n    const selectedRows = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedRows });\r\n    const allRowData = [];\r\n    gridApi.forEachNode((node) => allRowData.push(node.data));\r\n    updateFinalRowData(allRowData);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={classes.root}>\r\n        <Paper elevation={3} variant=\"outlined\">\r\n          Probabilty of Failure\r\n        </Paper>\r\n      </div>\r\n      <Table\r\n        columnDefs={PFColumns}\r\n        setGrid={setGridApi}\r\n        gridApi={gridApi}\r\n        rowData={rowState}\r\n        tableUpdate={updateFinalRowData}\r\n      ></Table>\r\n      <div className={styles.tableFooter}>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<AddIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => AddRow()}\r\n        >\r\n          Add Row\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          startIcon={<DeleteIcon />}\r\n          color=\"secondary\"\r\n          onClick={() => deleteRows()}\r\n        >\r\n          Delete Rows\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProbabilityFailure;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\selectEquipment\\selectEquipment.js",["1018","1019","1020"],"import React, { useEffect, useState } from \"react\";\r\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport MultiSelect from \"./MultiSelect\";\r\n\r\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\r\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\r\n\r\nfunction SelectEquipment(props) {\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const list = props.list;\r\n\r\n  const handleClearOptions = () => setSelectedOptions([]);\r\n  return (\r\n    <MultiSelect\r\n      items={list}\r\n      getOptionLabel={(option) => `${option.name}`}\r\n      // getOptionDisabled={option => option.name === \"foo\"}\r\n      selectedValues={selectedOptions}\r\n      label=\"Select Equipment\"\r\n      // selectAllLabel=\"Select all\"\r\n      onUpdateSelectedEquipmentList={props.onUpdateSelectedEquipmentList}\r\n      onToggleOption={(selectedOptions) => setSelectedOptions(selectedOptions)}\r\n      onClearOptions={handleClearOptions}\r\n      // onSelectAll={(isSelected) => {\r\n      //   if (isSelected) {\r\n      //     setSelectedOptions(list);\r\n      //     props.onUpdateSelectedEquipmentList(list);\r\n      //   } else {\r\n      //     handleClearOptions();\r\n      //     props.onUpdateSelectedEquipmentList([]);\r\n      //   }\r\n      // }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default SelectEquipment;\r\n","E:\\NetraB\\netra\\src\\pages\\Maintenance Allocation\\CreateMaintenance\\SaveHandler.js",[],"E:\\NetraB\\netra\\src\\pages\\dragNdrop\\ComponentDetails\\GroupData.js",[],"E:\\NetraB\\netra\\src\\pages\\dragNdrop\\CustomNode\\CustomNode.js",[],"E:\\NetraB\\netra\\src\\pages\\dragNdrop\\ContextMenu\\contextMenu.js",["1021","1022"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport './menu.css'\r\n\r\nconst CustomContextMenu = () => {\r\n  const handleClick = (e, data) => {\r\n    console.log(data.foo);\r\n  };\r\n  return (\r\n    <div>\r\n      {/* NOTICE: id must be unique between EVERY <ContextMenuTrigger> and <ContextMenu> pair */}\r\n      {/* NOTICE: inside the pair, <ContextMenuTrigger> and <ContextMenu> must have the same id */}\r\n\r\n      \r\n\r\n      <ContextMenu id=\"same_unique_identifier\" style={{position:'absolute',zIndex:'999'}}>\r\n        <MenuItem data={{ foo: \"bar\" }} onClick={handleClick}>\r\n          ContextMenu Item 1\r\n        </MenuItem>\r\n        <MenuItem divider />\r\n        <MenuItem data={{ foo: \"bar\" }} onClick={handleClick}>\r\n          ContextMenu Item 2\r\n        </MenuItem>\r\n        <MenuItem divider />\r\n        <MenuItem data={{ foo: \"bar\" }} onClick={handleClick}>\r\n          ContextMenu Item 3\r\n        </MenuItem>\r\n      </ContextMenu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomContextMenu;\r\n","E:\\NetraB\\netra\\src\\pages\\Data Manager\\selectEquipment\\MultiSelect.js",[],{"ruleId":"1023","replacedBy":"1024"},{"ruleId":"1025","replacedBy":"1026"},{"ruleId":"1027","severity":1,"message":"1028","line":3,"column":8,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1031","line":22,"column":8,"nodeType":"1029","messageId":"1030","endLine":22,"endColumn":26},{"ruleId":"1032","severity":1,"message":"1033","line":192,"column":17,"nodeType":"1034","messageId":"1035","endLine":192,"endColumn":67},{"ruleId":"1036","severity":1,"message":"1037","line":65,"column":76,"nodeType":"1038","messageId":"1039","endLine":65,"endColumn":78},{"ruleId":"1027","severity":1,"message":"1040","line":119,"column":13,"nodeType":"1029","messageId":"1030","endLine":119,"endColumn":17},{"ruleId":"1036","severity":1,"message":"1041","line":119,"column":52,"nodeType":"1038","messageId":"1042","endLine":119,"endColumn":54},{"ruleId":"1027","severity":1,"message":"1043","line":137,"column":13,"nodeType":"1029","messageId":"1030","endLine":137,"endColumn":17},{"ruleId":"1036","severity":1,"message":"1041","line":137,"column":52,"nodeType":"1038","messageId":"1042","endLine":137,"endColumn":54},{"ruleId":"1027","severity":1,"message":"1044","line":2,"column":10,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1045","line":1,"column":38,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":44},{"ruleId":"1027","severity":1,"message":"1046","line":8,"column":18,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":51},{"ruleId":"1027","severity":1,"message":"1047","line":20,"column":16,"nodeType":"1029","messageId":"1030","endLine":20,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1048","line":38,"column":43,"nodeType":"1029","messageId":"1030","endLine":38,"endColumn":49},{"ruleId":"1027","severity":1,"message":"1049","line":115,"column":9,"nodeType":"1029","messageId":"1030","endLine":115,"endColumn":19},{"ruleId":"1050","severity":1,"message":"1051","line":165,"column":6,"nodeType":"1052","endLine":165,"endColumn":29,"suggestions":"1053"},{"ruleId":"1027","severity":1,"message":"1054","line":166,"column":15,"nodeType":"1029","messageId":"1030","endLine":166,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1055","line":1,"column":17,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":25},{"ruleId":"1027","severity":1,"message":"1056","line":3,"column":10,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1057","line":5,"column":8,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1058","line":6,"column":8,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":21},{"ruleId":"1059","severity":1,"message":"1060","line":118,"column":9,"nodeType":"1034","endLine":118,"endColumn":72},{"ruleId":"1027","severity":1,"message":"1061","line":5,"column":8,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1062","line":8,"column":25,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":29},{"ruleId":"1059","severity":1,"message":"1060","line":79,"column":11,"nodeType":"1034","endLine":79,"endColumn":72},{"ruleId":"1027","severity":1,"message":"1063","line":4,"column":8,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1064","line":13,"column":3,"nodeType":"1029","messageId":"1030","endLine":13,"endColumn":8},{"ruleId":"1027","severity":1,"message":"1065","line":14,"column":3,"nodeType":"1029","messageId":"1030","endLine":14,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1066","line":15,"column":3,"nodeType":"1029","messageId":"1030","endLine":15,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1067","line":16,"column":3,"nodeType":"1029","messageId":"1030","endLine":16,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1068","line":17,"column":3,"nodeType":"1029","messageId":"1030","endLine":17,"endColumn":12},{"ruleId":"1027","severity":1,"message":"1069","line":21,"column":3,"nodeType":"1029","messageId":"1030","endLine":21,"endColumn":15},{"ruleId":"1027","severity":1,"message":"1070","line":22,"column":3,"nodeType":"1029","messageId":"1030","endLine":22,"endColumn":12},{"ruleId":"1027","severity":1,"message":"1071","line":23,"column":3,"nodeType":"1029","messageId":"1030","endLine":23,"endColumn":12},{"ruleId":"1027","severity":1,"message":"1072","line":24,"column":3,"nodeType":"1029","messageId":"1030","endLine":24,"endColumn":15},{"ruleId":"1027","severity":1,"message":"1073","line":25,"column":3,"nodeType":"1029","messageId":"1030","endLine":25,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1074","line":26,"column":3,"nodeType":"1029","messageId":"1030","endLine":26,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1075","line":28,"column":8,"nodeType":"1029","messageId":"1030","endLine":28,"endColumn":16},{"ruleId":"1076","severity":1,"message":"1077","line":78,"column":11,"nodeType":"1078","messageId":"1079","endLine":78,"endColumn":13},{"ruleId":"1076","severity":1,"message":"1077","line":102,"column":11,"nodeType":"1078","messageId":"1079","endLine":102,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1080","line":11,"column":3,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":11},{"ruleId":"1027","severity":1,"message":"1081","line":18,"column":8,"nodeType":"1029","messageId":"1030","endLine":18,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1082","line":24,"column":10,"nodeType":"1029","messageId":"1030","endLine":24,"endColumn":17},{"ruleId":"1027","severity":1,"message":"1031","line":26,"column":8,"nodeType":"1029","messageId":"1030","endLine":26,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1083","line":38,"column":23,"nodeType":"1029","messageId":"1030","endLine":38,"endColumn":28},{"ruleId":"1027","severity":1,"message":"1048","line":38,"column":43,"nodeType":"1029","messageId":"1030","endLine":38,"endColumn":49},{"ruleId":"1027","severity":1,"message":"1084","line":46,"column":10,"nodeType":"1029","messageId":"1030","endLine":46,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1085","line":46,"column":21,"nodeType":"1029","messageId":"1030","endLine":46,"endColumn":33},{"ruleId":"1050","severity":1,"message":"1086","line":110,"column":6,"nodeType":"1052","endLine":110,"endColumn":20,"suggestions":"1087"},{"ruleId":"1036","severity":1,"message":"1037","line":293,"column":32,"nodeType":"1038","messageId":"1039","endLine":293,"endColumn":34},{"ruleId":"1036","severity":1,"message":"1037","line":341,"column":49,"nodeType":"1038","messageId":"1039","endLine":341,"endColumn":51},{"ruleId":"1076","severity":1,"message":"1088","line":383,"column":26,"nodeType":"1078","messageId":"1079","endLine":383,"endColumn":28},{"ruleId":"1076","severity":1,"message":"1088","line":386,"column":31,"nodeType":"1078","messageId":"1079","endLine":386,"endColumn":33},{"ruleId":"1027","severity":1,"message":"1089","line":36,"column":12,"nodeType":"1029","messageId":"1030","endLine":36,"endColumn":24},{"ruleId":"1027","severity":1,"message":"1090","line":36,"column":26,"nodeType":"1029","messageId":"1030","endLine":36,"endColumn":41},{"ruleId":"1076","severity":1,"message":"1088","line":52,"column":20,"nodeType":"1078","messageId":"1079","endLine":52,"endColumn":22},{"ruleId":"1076","severity":1,"message":"1088","line":52,"column":39,"nodeType":"1078","messageId":"1079","endLine":52,"endColumn":41},{"ruleId":"1059","severity":1,"message":"1060","line":68,"column":13,"nodeType":"1034","endLine":68,"endColumn":64},{"ruleId":"1027","severity":1,"message":"1066","line":3,"column":44,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":60},{"ruleId":"1027","severity":1,"message":"1091","line":3,"column":61,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":69},{"ruleId":"1027","severity":1,"message":"1062","line":4,"column":10,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":14},{"ruleId":"1059","severity":1,"message":"1060","line":41,"column":17,"nodeType":"1034","endLine":41,"endColumn":68},{"ruleId":"1027","severity":1,"message":"1092","line":4,"column":38,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":43},{"ruleId":"1027","severity":1,"message":"1093","line":11,"column":10,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1094","line":11,"column":16,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":34},{"ruleId":"1027","severity":1,"message":"1095","line":11,"column":44,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":52},{"ruleId":"1076","severity":1,"message":"1088","line":86,"column":41,"nodeType":"1078","messageId":"1079","endLine":86,"endColumn":43},{"ruleId":"1027","severity":1,"message":"1096","line":171,"column":9,"nodeType":"1029","messageId":"1030","endLine":171,"endColumn":24},{"ruleId":"1027","severity":1,"message":"1097","line":193,"column":9,"nodeType":"1029","messageId":"1030","endLine":193,"endColumn":25},{"ruleId":"1050","severity":1,"message":"1098","line":222,"column":6,"nodeType":"1052","endLine":222,"endColumn":28,"suggestions":"1099"},{"ruleId":"1076","severity":1,"message":"1088","line":299,"column":36,"nodeType":"1078","messageId":"1079","endLine":299,"endColumn":38},{"ruleId":"1076","severity":1,"message":"1088","line":300,"column":39,"nodeType":"1078","messageId":"1079","endLine":300,"endColumn":41},{"ruleId":"1027","severity":1,"message":"1100","line":5,"column":8,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1093","line":11,"column":10,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1094","line":11,"column":16,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":34},{"ruleId":"1027","severity":1,"message":"1095","line":11,"column":44,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":52},{"ruleId":"1076","severity":1,"message":"1088","line":88,"column":41,"nodeType":"1078","messageId":"1079","endLine":88,"endColumn":43},{"ruleId":"1027","severity":1,"message":"1097","line":195,"column":9,"nodeType":"1029","messageId":"1030","endLine":195,"endColumn":25},{"ruleId":"1050","severity":1,"message":"1098","line":224,"column":6,"nodeType":"1052","endLine":224,"endColumn":28,"suggestions":"1101"},{"ruleId":"1076","severity":1,"message":"1088","line":295,"column":34,"nodeType":"1078","messageId":"1079","endLine":295,"endColumn":36},{"ruleId":"1076","severity":1,"message":"1088","line":296,"column":37,"nodeType":"1078","messageId":"1079","endLine":296,"endColumn":39},{"ruleId":"1027","severity":1,"message":"1102","line":11,"column":20,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":27},{"ruleId":"1059","severity":1,"message":"1060","line":98,"column":11,"nodeType":"1034","endLine":98,"endColumn":72},{"ruleId":"1027","severity":1,"message":"1103","line":11,"column":9,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":28},{"ruleId":"1059","severity":1,"message":"1060","line":90,"column":11,"nodeType":"1034","endLine":90,"endColumn":72},{"ruleId":"1027","severity":1,"message":"1104","line":4,"column":8,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1105","line":1,"column":17,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1106","line":6,"column":10,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1107","line":18,"column":24,"nodeType":"1029","messageId":"1030","endLine":18,"endColumn":39},{"ruleId":"1027","severity":1,"message":"1108","line":25,"column":18,"nodeType":"1029","messageId":"1030","endLine":25,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1109","line":67,"column":9,"nodeType":"1029","messageId":"1030","endLine":67,"endColumn":17},{"ruleId":"1059","severity":1,"message":"1060","line":164,"column":11,"nodeType":"1034","endLine":164,"endColumn":72},{"ruleId":"1027","severity":1,"message":"1055","line":1,"column":16,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":24},{"ruleId":"1027","severity":1,"message":"1105","line":1,"column":27,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":36},{"ruleId":"1027","severity":1,"message":"1056","line":3,"column":10,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1110","line":3,"column":17,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1111","line":3,"column":22,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":30},{"ruleId":"1027","severity":1,"message":"1057","line":5,"column":8,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1058","line":6,"column":8,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":21},{"ruleId":"1059","severity":1,"message":"1060","line":59,"column":17,"nodeType":"1034","endLine":59,"endColumn":79},{"ruleId":"1027","severity":1,"message":"1112","line":43,"column":11,"nodeType":"1029","messageId":"1030","endLine":43,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1113","line":55,"column":11,"nodeType":"1029","messageId":"1030","endLine":55,"endColumn":26},{"ruleId":"1059","severity":1,"message":"1060","line":87,"column":17,"nodeType":"1034","endLine":87,"endColumn":68},{"ruleId":"1027","severity":1,"message":"1056","line":1,"column":10,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1055","line":2,"column":17,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":25},{"ruleId":"1027","severity":1,"message":"1114","line":14,"column":10,"nodeType":"1029","messageId":"1030","endLine":14,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1115","line":16,"column":9,"nodeType":"1029","messageId":"1030","endLine":16,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1116","line":20,"column":9,"nodeType":"1029","messageId":"1030","endLine":20,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1117","line":28,"column":9,"nodeType":"1029","messageId":"1030","endLine":28,"endColumn":15},{"ruleId":"1050","severity":1,"message":"1098","line":66,"column":8,"nodeType":"1052","endLine":66,"endColumn":10,"suggestions":"1118"},{"ruleId":"1050","severity":1,"message":"1119","line":84,"column":6,"nodeType":"1052","endLine":84,"endColumn":22,"suggestions":"1120"},{"ruleId":"1027","severity":1,"message":"1105","line":1,"column":17,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1121","line":2,"column":8,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":17},{"ruleId":"1027","severity":1,"message":"1104","line":4,"column":8,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1122","line":6,"column":10,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1061","line":7,"column":8,"nodeType":"1029","messageId":"1030","endLine":7,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1123","line":8,"column":30,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":34},{"ruleId":"1027","severity":1,"message":"1124","line":9,"column":8,"nodeType":"1029","messageId":"1030","endLine":9,"endColumn":15},{"ruleId":"1027","severity":1,"message":"1125","line":10,"column":16,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1126","line":11,"column":8,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1127","line":15,"column":10,"nodeType":"1029","messageId":"1030","endLine":15,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1128","line":23,"column":8,"nodeType":"1029","messageId":"1030","endLine":23,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1129","line":24,"column":8,"nodeType":"1029","messageId":"1030","endLine":24,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1047","line":26,"column":16,"nodeType":"1029","messageId":"1030","endLine":26,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1130","line":49,"column":9,"nodeType":"1029","messageId":"1030","endLine":49,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1131","line":51,"column":9,"nodeType":"1029","messageId":"1030","endLine":51,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1132","line":55,"column":7,"nodeType":"1029","messageId":"1030","endLine":55,"endColumn":12},{"ruleId":"1027","severity":1,"message":"1133","line":69,"column":10,"nodeType":"1029","messageId":"1030","endLine":69,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1134","line":81,"column":9,"nodeType":"1029","messageId":"1030","endLine":81,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1135","line":85,"column":9,"nodeType":"1029","messageId":"1030","endLine":85,"endColumn":18},{"ruleId":"1076","severity":1,"message":"1088","line":118,"column":27,"nodeType":"1078","messageId":"1079","endLine":118,"endColumn":29},{"ruleId":"1027","severity":1,"message":"1105","line":1,"column":17,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1121","line":2,"column":8,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":17},{"ruleId":"1027","severity":1,"message":"1122","line":7,"column":10,"nodeType":"1029","messageId":"1030","endLine":7,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1061","line":8,"column":8,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1123","line":9,"column":30,"nodeType":"1029","messageId":"1030","endLine":9,"endColumn":34},{"ruleId":"1027","severity":1,"message":"1124","line":10,"column":8,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":15},{"ruleId":"1027","severity":1,"message":"1125","line":11,"column":16,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1126","line":12,"column":8,"nodeType":"1029","messageId":"1030","endLine":12,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1127","line":16,"column":10,"nodeType":"1029","messageId":"1030","endLine":16,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1136","line":20,"column":8,"nodeType":"1029","messageId":"1030","endLine":20,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1137","line":23,"column":8,"nodeType":"1029","messageId":"1030","endLine":23,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1129","line":25,"column":8,"nodeType":"1029","messageId":"1030","endLine":25,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1047","line":27,"column":16,"nodeType":"1029","messageId":"1030","endLine":27,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1138","line":55,"column":10,"nodeType":"1029","messageId":"1030","endLine":55,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1132","line":56,"column":7,"nodeType":"1029","messageId":"1030","endLine":56,"endColumn":12},{"ruleId":"1027","severity":1,"message":"1133","line":97,"column":10,"nodeType":"1029","messageId":"1030","endLine":97,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1139","line":112,"column":9,"nodeType":"1029","messageId":"1030","endLine":112,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1134","line":116,"column":9,"nodeType":"1029","messageId":"1030","endLine":116,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1135","line":120,"column":9,"nodeType":"1029","messageId":"1030","endLine":120,"endColumn":18},{"ruleId":"1076","severity":1,"message":"1088","line":153,"column":27,"nodeType":"1078","messageId":"1079","endLine":153,"endColumn":29},{"ruleId":"1027","severity":1,"message":"1140","line":229,"column":9,"nodeType":"1029","messageId":"1030","endLine":229,"endColumn":12},{"ruleId":"1027","severity":1,"message":"1141","line":1,"column":46,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":57},{"ruleId":"1027","severity":1,"message":"1142","line":3,"column":52,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":58},{"ruleId":"1027","severity":1,"message":"1092","line":3,"column":60,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":65},{"ruleId":"1027","severity":1,"message":"1143","line":4,"column":10,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1144","line":4,"column":21,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":25},{"ruleId":"1027","severity":1,"message":"1145","line":4,"column":27,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":32},{"ruleId":"1027","severity":1,"message":"1146","line":4,"column":34,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":39},{"ruleId":"1027","severity":1,"message":"1147","line":4,"column":41,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":54},{"ruleId":"1027","severity":1,"message":"1148","line":4,"column":56,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":63},{"ruleId":"1027","severity":1,"message":"1149","line":4,"column":64,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":69},{"ruleId":"1027","severity":1,"message":"1150","line":4,"column":70,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":83},{"ruleId":"1027","severity":1,"message":"1151","line":8,"column":3,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1128","line":15,"column":8,"nodeType":"1029","messageId":"1030","endLine":15,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1152","line":16,"column":8,"nodeType":"1029","messageId":"1030","endLine":16,"endColumn":24},{"ruleId":"1027","severity":1,"message":"1153","line":17,"column":8,"nodeType":"1029","messageId":"1030","endLine":17,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1154","line":18,"column":8,"nodeType":"1029","messageId":"1030","endLine":18,"endColumn":28},{"ruleId":"1027","severity":1,"message":"1155","line":20,"column":8,"nodeType":"1029","messageId":"1030","endLine":20,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1156","line":21,"column":8,"nodeType":"1029","messageId":"1030","endLine":21,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1093","line":22,"column":10,"nodeType":"1029","messageId":"1030","endLine":22,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1094","line":22,"column":16,"nodeType":"1029","messageId":"1030","endLine":22,"endColumn":34},{"ruleId":"1027","severity":1,"message":"1095","line":22,"column":44,"nodeType":"1029","messageId":"1030","endLine":22,"endColumn":52},{"ruleId":"1027","severity":1,"message":"1157","line":23,"column":8,"nodeType":"1029","messageId":"1030","endLine":23,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1158","line":33,"column":7,"nodeType":"1029","messageId":"1030","endLine":33,"endColumn":18},{"ruleId":"1076","severity":1,"message":"1088","line":93,"column":41,"nodeType":"1078","messageId":"1079","endLine":93,"endColumn":43},{"ruleId":"1027","severity":1,"message":"1102","line":113,"column":20,"nodeType":"1029","messageId":"1030","endLine":113,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1159","line":116,"column":7,"nodeType":"1029","messageId":"1030","endLine":116,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1160","line":123,"column":10,"nodeType":"1029","messageId":"1030","endLine":123,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1161","line":123,"column":22,"nodeType":"1029","messageId":"1030","endLine":123,"endColumn":35},{"ruleId":"1027","severity":1,"message":"1162","line":125,"column":10,"nodeType":"1029","messageId":"1030","endLine":125,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1163","line":127,"column":10,"nodeType":"1029","messageId":"1030","endLine":127,"endColumn":17},{"ruleId":"1027","severity":1,"message":"1164","line":127,"column":19,"nodeType":"1029","messageId":"1030","endLine":127,"endColumn":29},{"ruleId":"1027","severity":1,"message":"1165","line":129,"column":10,"nodeType":"1029","messageId":"1030","endLine":129,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1166","line":129,"column":28,"nodeType":"1029","messageId":"1030","endLine":129,"endColumn":47},{"ruleId":"1027","severity":1,"message":"1167","line":130,"column":28,"nodeType":"1029","messageId":"1030","endLine":130,"endColumn":47},{"ruleId":"1027","severity":1,"message":"1168","line":131,"column":10,"nodeType":"1029","messageId":"1030","endLine":131,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1169","line":131,"column":28,"nodeType":"1029","messageId":"1030","endLine":131,"endColumn":47},{"ruleId":"1027","severity":1,"message":"1170","line":134,"column":10,"nodeType":"1029","messageId":"1030","endLine":134,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1171","line":134,"column":25,"nodeType":"1029","messageId":"1030","endLine":134,"endColumn":37},{"ruleId":"1027","severity":1,"message":"1172","line":139,"column":10,"nodeType":"1029","messageId":"1030","endLine":139,"endColumn":24},{"ruleId":"1027","severity":1,"message":"1173","line":139,"column":26,"nodeType":"1029","messageId":"1030","endLine":139,"endColumn":36},{"ruleId":"1027","severity":1,"message":"1174","line":140,"column":10,"nodeType":"1029","messageId":"1030","endLine":140,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1175","line":140,"column":24,"nodeType":"1029","messageId":"1030","endLine":140,"endColumn":39},{"ruleId":"1027","severity":1,"message":"1176","line":149,"column":10,"nodeType":"1029","messageId":"1030","endLine":149,"endColumn":24},{"ruleId":"1027","severity":1,"message":"1177","line":149,"column":26,"nodeType":"1029","messageId":"1030","endLine":149,"endColumn":42},{"ruleId":"1027","severity":1,"message":"1178","line":152,"column":10,"nodeType":"1029","messageId":"1030","endLine":152,"endColumn":29},{"ruleId":"1027","severity":1,"message":"1179","line":152,"column":31,"nodeType":"1029","messageId":"1030","endLine":152,"endColumn":45},{"ruleId":"1027","severity":1,"message":"1180","line":154,"column":10,"nodeType":"1029","messageId":"1030","endLine":154,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1181","line":154,"column":21,"nodeType":"1029","messageId":"1030","endLine":154,"endColumn":33},{"ruleId":"1027","severity":1,"message":"1182","line":156,"column":10,"nodeType":"1029","messageId":"1030","endLine":156,"endColumn":31},{"ruleId":"1027","severity":1,"message":"1183","line":156,"column":33,"nodeType":"1029","messageId":"1030","endLine":156,"endColumn":57},{"ruleId":"1027","severity":1,"message":"1184","line":159,"column":10,"nodeType":"1029","messageId":"1030","endLine":159,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1185","line":159,"column":25,"nodeType":"1029","messageId":"1030","endLine":159,"endColumn":41},{"ruleId":"1027","severity":1,"message":"1186","line":160,"column":10,"nodeType":"1029","messageId":"1030","endLine":160,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1187","line":161,"column":10,"nodeType":"1029","messageId":"1030","endLine":161,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1188","line":161,"column":20,"nodeType":"1029","messageId":"1030","endLine":161,"endColumn":31},{"ruleId":"1027","severity":1,"message":"1189","line":163,"column":9,"nodeType":"1029","messageId":"1030","endLine":163,"endColumn":17},{"ruleId":"1027","severity":1,"message":"1190","line":164,"column":9,"nodeType":"1029","messageId":"1030","endLine":164,"endColumn":30},{"ruleId":"1027","severity":1,"message":"1191","line":168,"column":9,"nodeType":"1029","messageId":"1030","endLine":168,"endColumn":28},{"ruleId":"1027","severity":1,"message":"1192","line":379,"column":9,"nodeType":"1029","messageId":"1030","endLine":379,"endColumn":25},{"ruleId":"1027","severity":1,"message":"1193","line":428,"column":15,"nodeType":"1029","messageId":"1030","endLine":428,"endColumn":24},{"ruleId":"1027","severity":1,"message":"1194","line":429,"column":15,"nodeType":"1029","messageId":"1030","endLine":429,"endColumn":23},{"ruleId":"1050","severity":1,"message":"1098","line":437,"column":6,"nodeType":"1052","endLine":437,"endColumn":8,"suggestions":"1195"},{"ruleId":"1027","severity":1,"message":"1196","line":464,"column":10,"nodeType":"1029","messageId":"1030","endLine":464,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1197","line":464,"column":20,"nodeType":"1029","messageId":"1030","endLine":464,"endColumn":32},{"ruleId":"1076","severity":1,"message":"1077","line":480,"column":15,"nodeType":"1078","messageId":"1079","endLine":480,"endColumn":17},{"ruleId":"1027","severity":1,"message":"1198","line":485,"column":13,"nodeType":"1029","messageId":"1030","endLine":485,"endColumn":17},{"ruleId":"1027","severity":1,"message":"1199","line":551,"column":9,"nodeType":"1029","messageId":"1030","endLine":551,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1200","line":552,"column":9,"nodeType":"1029","messageId":"1030","endLine":552,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1105","line":1,"column":17,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1121","line":2,"column":8,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":17},{"ruleId":"1027","severity":1,"message":"1122","line":6,"column":10,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1061","line":7,"column":8,"nodeType":"1029","messageId":"1030","endLine":7,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1123","line":8,"column":30,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":34},{"ruleId":"1027","severity":1,"message":"1124","line":9,"column":8,"nodeType":"1029","messageId":"1030","endLine":9,"endColumn":15},{"ruleId":"1027","severity":1,"message":"1125","line":10,"column":16,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1126","line":11,"column":8,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1127","line":15,"column":10,"nodeType":"1029","messageId":"1030","endLine":15,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1128","line":23,"column":8,"nodeType":"1029","messageId":"1030","endLine":23,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1129","line":24,"column":8,"nodeType":"1029","messageId":"1030","endLine":24,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1047","line":26,"column":16,"nodeType":"1029","messageId":"1030","endLine":26,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1201","line":27,"column":10,"nodeType":"1029","messageId":"1030","endLine":27,"endColumn":15},{"ruleId":"1027","severity":1,"message":"1131","line":52,"column":9,"nodeType":"1029","messageId":"1030","endLine":52,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1132","line":60,"column":7,"nodeType":"1029","messageId":"1030","endLine":60,"endColumn":12},{"ruleId":"1027","severity":1,"message":"1133","line":74,"column":10,"nodeType":"1029","messageId":"1030","endLine":74,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1134","line":86,"column":9,"nodeType":"1029","messageId":"1030","endLine":86,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1135","line":90,"column":9,"nodeType":"1029","messageId":"1030","endLine":90,"endColumn":18},{"ruleId":"1076","severity":1,"message":"1088","line":123,"column":27,"nodeType":"1078","messageId":"1079","endLine":123,"endColumn":29},{"ruleId":"1027","severity":1,"message":"1202","line":181,"column":7,"nodeType":"1029","messageId":"1030","endLine":181,"endColumn":31},{"ruleId":"1027","severity":1,"message":"1141","line":1,"column":27,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":38},{"ruleId":"1027","severity":1,"message":"1122","line":1,"column":10,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":22},{"ruleId":"1059","severity":1,"message":"1060","line":87,"column":13,"nodeType":"1034","endLine":87,"endColumn":64},{"ruleId":"1027","severity":1,"message":"1105","line":2,"column":5,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1203","line":10,"column":12,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1204","line":17,"column":11,"nodeType":"1029","messageId":"1030","endLine":17,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1205","line":19,"column":9,"nodeType":"1029","messageId":"1030","endLine":19,"endColumn":36},{"ruleId":"1027","severity":1,"message":"1206","line":20,"column":11,"nodeType":"1029","messageId":"1030","endLine":20,"endColumn":21},{"ruleId":"1076","severity":1,"message":"1088","line":20,"column":18,"nodeType":"1078","messageId":"1079","endLine":20,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1056","line":2,"column":8,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1207","line":11,"column":7,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1056","line":7,"column":8,"nodeType":"1029","messageId":"1030","endLine":7,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1208","line":8,"column":8,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1209","line":100,"column":9,"nodeType":"1029","messageId":"1030","endLine":100,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1210","line":104,"column":9,"nodeType":"1029","messageId":"1030","endLine":104,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1211","line":108,"column":9,"nodeType":"1029","messageId":"1030","endLine":108,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1212","line":7,"column":10,"nodeType":"1029","messageId":"1030","endLine":7,"endColumn":28},{"ruleId":"1027","severity":1,"message":"1213","line":20,"column":11,"nodeType":"1029","messageId":"1030","endLine":20,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1056","line":1,"column":10,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1128","line":2,"column":8,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1203","line":5,"column":10,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1056","line":2,"column":10,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1106","line":3,"column":10,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":20},{"ruleId":"1050","severity":1,"message":"1098","line":55,"column":6,"nodeType":"1052","endLine":55,"endColumn":8,"suggestions":"1214"},{"ruleId":"1027","severity":1,"message":"1215","line":126,"column":9,"nodeType":"1029","messageId":"1030","endLine":126,"endColumn":30},{"ruleId":"1027","severity":1,"message":"1105","line":2,"column":3,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":12},{"ruleId":"1027","severity":1,"message":"1216","line":4,"column":3,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1045","line":5,"column":3,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":9},{"ruleId":"1027","severity":1,"message":"1217","line":6,"column":3,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1203","line":8,"column":10,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1056","line":9,"column":10,"nodeType":"1029","messageId":"1030","endLine":9,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1128","line":10,"column":8,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1105","line":1,"column":10,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1055","line":1,"column":21,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":29},{"ruleId":"1027","severity":1,"message":"1203","line":2,"column":10,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1056","line":3,"column":10,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1128","line":4,"column":8,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1218","line":7,"column":10,"nodeType":"1029","messageId":"1030","endLine":7,"endColumn":19},{"ruleId":"1050","severity":1,"message":"1219","line":32,"column":6,"nodeType":"1052","endLine":32,"endColumn":8,"suggestions":"1220"},{"ruleId":"1027","severity":1,"message":"1221","line":36,"column":7,"nodeType":"1029","messageId":"1030","endLine":36,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1056","line":1,"column":10,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1046","line":1,"column":18,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":51},{"ruleId":"1027","severity":1,"message":"1128","line":2,"column":8,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1203","line":5,"column":10,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1222","line":8,"column":8,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":31},{"ruleId":"1027","severity":1,"message":"1223","line":14,"column":9,"nodeType":"1029","messageId":"1030","endLine":14,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1047","line":6,"column":16,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1224","line":53,"column":9,"nodeType":"1029","messageId":"1030","endLine":53,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1225","line":140,"column":11,"nodeType":"1029","messageId":"1030","endLine":140,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1226","line":197,"column":10,"nodeType":"1029","messageId":"1030","endLine":197,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1227","line":346,"column":9,"nodeType":"1029","messageId":"1030","endLine":346,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1105","line":1,"column":17,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1228","line":8,"column":8,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1229","line":9,"column":10,"nodeType":"1029","messageId":"1030","endLine":9,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1226","line":97,"column":10,"nodeType":"1029","messageId":"1030","endLine":97,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1128","line":2,"column":8,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1075","line":5,"column":8,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1230","line":7,"column":10,"nodeType":"1029","messageId":"1030","endLine":7,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1106","line":7,"column":21,"nodeType":"1029","messageId":"1030","endLine":7,"endColumn":31},{"ruleId":"1027","severity":1,"message":"1203","line":9,"column":23,"nodeType":"1029","messageId":"1030","endLine":9,"endColumn":34},{"ruleId":"1027","severity":1,"message":"1047","line":10,"column":16,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1231","line":23,"column":9,"nodeType":"1029","messageId":"1030","endLine":23,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1232","line":65,"column":11,"nodeType":"1029","messageId":"1030","endLine":65,"endColumn":17},{"ruleId":"1027","severity":1,"message":"1203","line":4,"column":23,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":34},{"ruleId":"1027","severity":1,"message":"1047","line":5,"column":16,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1233","line":12,"column":9,"nodeType":"1029","messageId":"1030","endLine":12,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1232","line":54,"column":13,"nodeType":"1029","messageId":"1030","endLine":54,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1055","line":3,"column":10,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1044","line":7,"column":10,"nodeType":"1029","messageId":"1030","endLine":7,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1126","line":8,"column":8,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1234","line":1,"column":22,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":31},{"ruleId":"1027","severity":1,"message":"1235","line":35,"column":9,"nodeType":"1029","messageId":"1030","endLine":35,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1229","line":11,"column":3,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":12},{"ruleId":"1027","severity":1,"message":"1105","line":1,"column":27,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":36},{"ruleId":"1027","severity":1,"message":"1236","line":4,"column":8,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":17},{"ruleId":"1027","severity":1,"message":"1237","line":20,"column":10,"nodeType":"1029","messageId":"1030","endLine":20,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1238","line":20,"column":21,"nodeType":"1029","messageId":"1030","endLine":20,"endColumn":32},{"ruleId":"1027","severity":1,"message":"1239","line":5,"column":3,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":9},{"ruleId":"1027","severity":1,"message":"1240","line":6,"column":3,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1241","line":7,"column":3,"nodeType":"1029","messageId":"1030","endLine":7,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1242","line":8,"column":3,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1045","line":2,"column":27,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":33},{"ruleId":"1027","severity":1,"message":"1128","line":9,"column":8,"nodeType":"1029","messageId":"1030","endLine":9,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1243","line":15,"column":8,"nodeType":"1029","messageId":"1030","endLine":15,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1244","line":30,"column":9,"nodeType":"1029","messageId":"1030","endLine":30,"endColumn":32},{"ruleId":"1027","severity":1,"message":"1245","line":64,"column":15,"nodeType":"1029","messageId":"1030","endLine":64,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1246","line":64,"column":25,"nodeType":"1029","messageId":"1030","endLine":64,"endColumn":37},{"ruleId":"1027","severity":1,"message":"1247","line":66,"column":13,"nodeType":"1029","messageId":"1030","endLine":66,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1105","line":1,"column":15,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":24},{"ruleId":"1027","severity":1,"message":"1105","line":2,"column":3,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":12},{"ruleId":"1027","severity":1,"message":"1203","line":10,"column":10,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1105","line":2,"column":3,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":12},{"ruleId":"1027","severity":1,"message":"1203","line":10,"column":10,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1248","line":11,"column":8,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1249","line":37,"column":15,"nodeType":"1029","messageId":"1030","endLine":37,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1056","line":3,"column":10,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":16},{"ruleId":"1059","severity":1,"message":"1060","line":31,"column":9,"nodeType":"1034","endLine":31,"endColumn":72},{"ruleId":"1027","severity":1,"message":"1065","line":5,"column":17,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1066","line":5,"column":28,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":44},{"ruleId":"1027","severity":1,"message":"1064","line":5,"column":45,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":50},{"ruleId":"1027","severity":1,"message":"1201","line":10,"column":10,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":15},{"ruleId":"1027","severity":1,"message":"1250","line":14,"column":8,"nodeType":"1029","messageId":"1030","endLine":14,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1056","line":3,"column":10,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":16},{"ruleId":"1059","severity":1,"message":"1060","line":49,"column":9,"nodeType":"1034","endLine":49,"endColumn":72},{"ruleId":"1027","severity":1,"message":"1065","line":5,"column":17,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1066","line":5,"column":28,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":44},{"ruleId":"1027","severity":1,"message":"1064","line":5,"column":45,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":50},{"ruleId":"1027","severity":1,"message":"1229","line":5,"column":52,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":61},{"ruleId":"1027","severity":1,"message":"1251","line":6,"column":8,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1201","line":10,"column":10,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":15},{"ruleId":"1027","severity":1,"message":"1250","line":14,"column":8,"nodeType":"1029","messageId":"1030","endLine":14,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1061","line":15,"column":8,"nodeType":"1029","messageId":"1030","endLine":15,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1122","line":16,"column":10,"nodeType":"1029","messageId":"1030","endLine":16,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1252","line":23,"column":11,"nodeType":"1029","messageId":"1030","endLine":23,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1253","line":29,"column":28,"nodeType":"1029","messageId":"1030","endLine":29,"endColumn":47},{"ruleId":"1027","severity":1,"message":"1254","line":33,"column":12,"nodeType":"1029","messageId":"1030","endLine":33,"endColumn":25},{"ruleId":"1027","severity":1,"message":"1255","line":35,"column":12,"nodeType":"1029","messageId":"1030","endLine":35,"endColumn":30},{"ruleId":"1027","severity":1,"message":"1256","line":372,"column":11,"nodeType":"1029","messageId":"1030","endLine":372,"endColumn":29},{"ruleId":"1027","severity":1,"message":"1065","line":5,"column":17,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1066","line":5,"column":28,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":44},{"ruleId":"1027","severity":1,"message":"1064","line":5,"column":45,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":50},{"ruleId":"1027","severity":1,"message":"1257","line":60,"column":13,"nodeType":"1029","messageId":"1030","endLine":60,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1258","line":66,"column":13,"nodeType":"1029","messageId":"1030","endLine":66,"endColumn":29},{"ruleId":"1027","severity":1,"message":"1061","line":2,"column":8,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1226","line":11,"column":10,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1224","line":21,"column":9,"nodeType":"1029","messageId":"1030","endLine":21,"endColumn":19},{"ruleId":"1259","severity":1,"message":"1260","line":95,"column":31,"nodeType":"1078","messageId":"1261","endLine":95,"endColumn":32},{"ruleId":"1027","severity":1,"message":"1065","line":5,"column":17,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1066","line":5,"column":28,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":44},{"ruleId":"1027","severity":1,"message":"1064","line":5,"column":45,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":50},{"ruleId":"1027","severity":1,"message":"1047","line":11,"column":15,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1257","line":114,"column":13,"nodeType":"1029","messageId":"1030","endLine":114,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1258","line":120,"column":13,"nodeType":"1029","messageId":"1030","endLine":120,"endColumn":29},{"ruleId":"1027","severity":1,"message":"1065","line":5,"column":17,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1066","line":5,"column":28,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":44},{"ruleId":"1027","severity":1,"message":"1064","line":5,"column":45,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":50},{"ruleId":"1027","severity":1,"message":"1262","line":4,"column":8,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":15},{"ruleId":"1027","severity":1,"message":"1263","line":10,"column":28,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":34},{"ruleId":"1027","severity":1,"message":"1264","line":11,"column":10,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":25},{"ruleId":"1027","severity":1,"message":"1265","line":18,"column":8,"nodeType":"1029","messageId":"1030","endLine":18,"endColumn":25},{"ruleId":"1027","severity":1,"message":"1266","line":21,"column":10,"nodeType":"1029","messageId":"1030","endLine":21,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1267","line":58,"column":9,"nodeType":"1029","messageId":"1030","endLine":58,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1206","line":150,"column":9,"nodeType":"1029","messageId":"1030","endLine":150,"endColumn":19},{"ruleId":"1036","severity":1,"message":"1041","line":187,"column":22,"nodeType":"1038","messageId":"1042","endLine":187,"endColumn":24},{"ruleId":"1027","severity":1,"message":"1126","line":11,"column":8,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1268","line":8,"column":8,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1126","line":9,"column":8,"nodeType":"1029","messageId":"1030","endLine":9,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1075","line":4,"column":8,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1056","line":3,"column":8,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1269","line":23,"column":8,"nodeType":"1029","messageId":"1030","endLine":23,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1268","line":6,"column":8,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1102","line":16,"column":20,"nodeType":"1029","messageId":"1030","endLine":16,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1270","line":5,"column":10,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1268","line":7,"column":8,"nodeType":"1029","messageId":"1030","endLine":7,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1203","line":10,"column":23,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":34},{"ruleId":"1027","severity":1,"message":"1047","line":11,"column":16,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1102","line":48,"column":18,"nodeType":"1029","messageId":"1030","endLine":48,"endColumn":25},{"ruleId":"1027","severity":1,"message":"1122","line":1,"column":10,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1055","line":6,"column":10,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1071","line":4,"column":10,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":19},{"ruleId":"1027","severity":1,"message":"1203","line":6,"column":23,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":34},{"ruleId":"1027","severity":1,"message":"1271","line":12,"column":9,"nodeType":"1029","messageId":"1030","endLine":12,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1272","line":13,"column":9,"nodeType":"1029","messageId":"1030","endLine":13,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1075","line":2,"column":8,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1203","line":6,"column":23,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":34},{"ruleId":"1076","severity":1,"message":"1088","line":51,"column":29,"nodeType":"1078","messageId":"1079","endLine":51,"endColumn":31},{"ruleId":"1027","severity":1,"message":"1273","line":1,"column":10,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1069","line":3,"column":10,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":22},{"ruleId":"1027","severity":1,"message":"1070","line":3,"column":24,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":33},{"ruleId":"1027","severity":1,"message":"1274","line":15,"column":9,"nodeType":"1029","messageId":"1030","endLine":15,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1275","line":37,"column":7,"nodeType":"1029","messageId":"1030","endLine":37,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1226","line":96,"column":10,"nodeType":"1029","messageId":"1030","endLine":96,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1062","line":18,"column":10,"nodeType":"1029","messageId":"1030","endLine":18,"endColumn":14},{"ruleId":"1027","severity":1,"message":"1276","line":29,"column":33,"nodeType":"1029","messageId":"1030","endLine":29,"endColumn":57},{"ruleId":"1027","severity":1,"message":"1277","line":33,"column":9,"nodeType":"1029","messageId":"1030","endLine":33,"endColumn":14},{"ruleId":"1050","severity":1,"message":"1278","line":53,"column":6,"nodeType":"1052","endLine":53,"endColumn":43,"suggestions":"1279"},{"ruleId":"1036","severity":1,"message":"1041","line":168,"column":34,"nodeType":"1038","messageId":"1042","endLine":168,"endColumn":36},{"ruleId":"1036","severity":1,"message":"1041","line":169,"column":46,"nodeType":"1038","messageId":"1042","endLine":169,"endColumn":48},{"ruleId":"1027","severity":1,"message":"1280","line":285,"column":9,"nodeType":"1029","messageId":"1030","endLine":285,"endColumn":26},{"ruleId":"1036","severity":1,"message":"1041","line":312,"column":24,"nodeType":"1038","messageId":"1042","endLine":312,"endColumn":26},{"ruleId":"1036","severity":1,"message":"1041","line":333,"column":22,"nodeType":"1038","messageId":"1042","endLine":333,"endColumn":24},{"ruleId":"1036","severity":1,"message":"1041","line":337,"column":26,"nodeType":"1038","messageId":"1042","endLine":337,"endColumn":28},{"ruleId":"1036","severity":1,"message":"1037","line":366,"column":38,"nodeType":"1038","messageId":"1039","endLine":366,"endColumn":40},{"ruleId":"1076","severity":1,"message":"1077","line":367,"column":21,"nodeType":"1078","messageId":"1079","endLine":367,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1281","line":410,"column":10,"nodeType":"1029","messageId":"1030","endLine":410,"endColumn":21},{"ruleId":"1076","severity":1,"message":"1088","line":484,"column":52,"nodeType":"1078","messageId":"1079","endLine":484,"endColumn":54},{"ruleId":"1076","severity":1,"message":"1088","line":491,"column":52,"nodeType":"1078","messageId":"1079","endLine":491,"endColumn":54},{"ruleId":"1027","severity":1,"message":"1045","line":2,"column":30,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":36},{"ruleId":"1027","severity":1,"message":"1055","line":2,"column":38,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":46},{"ruleId":"1050","severity":1,"message":"1282","line":105,"column":5,"nodeType":"1052","endLine":105,"endColumn":16,"suggestions":"1283"},{"ruleId":"1259","severity":1,"message":"1260","line":168,"column":36,"nodeType":"1078","messageId":"1261","endLine":168,"endColumn":37},{"ruleId":"1027","severity":1,"message":"1284","line":52,"column":9,"nodeType":"1029","messageId":"1030","endLine":52,"endColumn":15},{"ruleId":"1027","severity":1,"message":"1285","line":58,"column":9,"nodeType":"1029","messageId":"1030","endLine":58,"endColumn":20},{"ruleId":"1027","severity":1,"message":"1286","line":115,"column":9,"nodeType":"1029","messageId":"1030","endLine":115,"endColumn":25},{"ruleId":"1027","severity":1,"message":"1056","line":1,"column":10,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1268","line":8,"column":8,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1102","line":34,"column":20,"nodeType":"1029","messageId":"1030","endLine":34,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1287","line":4,"column":8,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1268","line":8,"column":8,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1102","line":36,"column":20,"nodeType":"1029","messageId":"1030","endLine":36,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1105","line":2,"column":3,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":12},{"ruleId":"1027","severity":1,"message":"1203","line":10,"column":10,"nodeType":"1029","messageId":"1030","endLine":10,"endColumn":21},{"ruleId":"1027","severity":1,"message":"1248","line":11,"column":8,"nodeType":"1029","messageId":"1030","endLine":11,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1287","line":4,"column":8,"nodeType":"1029","messageId":"1030","endLine":4,"endColumn":13},{"ruleId":"1027","severity":1,"message":"1092","line":5,"column":18,"nodeType":"1029","messageId":"1030","endLine":5,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1268","line":8,"column":8,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1102","line":76,"column":20,"nodeType":"1029","messageId":"1030","endLine":76,"endColumn":27},{"ruleId":"1036","severity":1,"message":"1037","line":128,"column":46,"nodeType":"1038","messageId":"1039","endLine":128,"endColumn":48},{"ruleId":"1027","severity":1,"message":"1288","line":138,"column":9,"nodeType":"1029","messageId":"1030","endLine":138,"endColumn":29},{"ruleId":"1027","severity":1,"message":"1268","line":6,"column":8,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1102","line":15,"column":20,"nodeType":"1029","messageId":"1030","endLine":15,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1102","line":13,"column":20,"nodeType":"1029","messageId":"1030","endLine":13,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1045","line":1,"column":17,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":23},{"ruleId":"1027","severity":1,"message":"1268","line":9,"column":8,"nodeType":"1029","messageId":"1030","endLine":9,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1102","line":100,"column":20,"nodeType":"1029","messageId":"1030","endLine":100,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1268","line":8,"column":8,"nodeType":"1029","messageId":"1030","endLine":8,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1102","line":34,"column":20,"nodeType":"1029","messageId":"1030","endLine":34,"endColumn":27},{"ruleId":"1027","severity":1,"message":"1105","line":1,"column":17,"nodeType":"1029","messageId":"1030","endLine":1,"endColumn":26},{"ruleId":"1027","severity":1,"message":"1289","line":6,"column":7,"nodeType":"1029","messageId":"1030","endLine":6,"endColumn":11},{"ruleId":"1027","severity":1,"message":"1290","line":7,"column":7,"nodeType":"1029","messageId":"1030","endLine":7,"endColumn":18},{"ruleId":"1027","severity":1,"message":"1291","line":2,"column":8,"nodeType":"1029","messageId":"1030","endLine":2,"endColumn":16},{"ruleId":"1027","severity":1,"message":"1292","line":3,"column":33,"nodeType":"1029","messageId":"1030","endLine":3,"endColumn":51},"no-native-reassign",["1293"],"no-negated-in-lhs",["1294"],"no-unused-vars","'Navigation' is defined but never used.","Identifier","unusedVar","'RepairableOverhaul' is defined but never used.","react/jsx-pascal-case","Imported JSX component Bayesian_Inputs must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'ele2' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'ele3' is assigned a value but never used.","'MProwData' is defined but never used.","'useRef' is defined but never used.","'unstable_createMuiStrictModeTheme' is defined but never used.","'uuid' is defined but never used.","'height' is assigned a value but never used.","'CheckStage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'NextStage', 'PreviousStage', and 'location.pathname'. Either include them or remove the dependency array.","ArrayExpression",["1295"],"'setMarks' is assigned a value but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'Visibility' is defined but never used.","'VisibilityOff' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Table' is defined but never used.","'Link' is defined but never used.","'Table2' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'ELcolumnDefs' is defined but never used.","'ELrowData' is defined but never used.","'CLrowData' is defined but never used.","'CLcolumnDefs' is defined but never used.","'SLMcolumnDefs' is defined but never used.","'SLMrowData' is defined but never used.","'LensIcon' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Redirect' is defined but never used.","'ImportData' is defined but never used.","'isAllOf' is defined but never used.","'width' is assigned a value but never used.","'isLoadEqt' is assigned a value but never used.","'setIsLoadEqt' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'NextStage', 'PreviousStage', and 'history'. Either include them or remove the dependency array.",["1296"],"Expected '===' and instead saw '=='.","'showSnackBar' is assigned a value but never used.","'setShowSnackBar' is assigned a value but never used.","'Checkbox' is defined but never used.","'Input' is defined but never used.","'data' is defined but never used.","'subSystemLevelData' is defined but never used.","'mainData' is defined but never used.","'saveTempMission' is assigned a value but never used.","'currentSelection' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["1297"],"'BarGraph' is defined but never used.",["1298"],"'setRows' is assigned a value but never used.","'detailRowAutoHeight' is assigned a value but never used.","'UserSelection' is defined but never used.","'useEffect' is defined but never used.","'components' is defined but never used.","'setPlatformName' is assigned a value but never used.","'setEqData' is assigned a value but never used.","'onChange' is assigned a value but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'toggleSysConfig' is assigned a value but never used.","'toggleDashboard' is assigned a value but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'Logout' is assigned a value but never used.",["1299"],"React Hook useEffect has missing dependencies: 'minMax' and 'selectedParameterName'. Either include them or remove the dependency array.",["1300"],"'NewModule' is defined but never used.","'AgGridColumn' is defined but never used.","'Grid' is defined but never used.","'AddIcon' is defined but never used.","'uuidv4' is defined but never used.","'DeleteIcon' is defined but never used.","'userActions' is defined but never used.","'CustomSelect' is defined but never used.","'AutoSelect' is defined but never used.","'SystemClasses' is assigned a value but never used.","'selectedInputs' is assigned a value but never used.","'fData' is assigned a value but never used.","'parentFiledValue' is assigned a value but never used.","'parentOnChange' is assigned a value but never used.","'clearForm' is assigned a value but never used.","'LabelToolTip' is defined but never used.","'CustomTextInput' is defined but never used.","'disableButton' is assigned a value but never used.","'name' is assigned a value but never used.","'nnn' is assigned a value but never used.","'useCallback' is defined but never used.","'Switch' is defined but never used.","'LineChart' is defined but never used.","'Line' is defined but never used.","'XAxis' is defined but never used.","'YAxis' is defined but never used.","'CartesianGrid' is defined but never used.","'Tooltip' is defined but never used.","'Label' is defined but never used.","'ReferenceLine' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'ReliabilityChart' is defined but never used.","'MissionSlider' is defined but never used.","'AddCircleOutlineIcon' is defined but never used.","'Loader' is defined but never used.","'EventCalendar' is defined but never used.","'ReactCardFlip' is defined but never used.","'MissionData' is assigned a value but never used.","'ParallelIds' is assigned a value but never used.","'shipOption' is assigned a value but never used.","'setshipOption' is assigned a value but never used.","'missionOption' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'selectedTaskShip' is assigned a value but never used.","'setselectedTaskShip' is assigned a value but never used.","'setselectedTaskName' is assigned a value but never used.","'selectedShipName' is assigned a value but never used.","'setselectedShipName' is assigned a value but never used.","'showSubsystem' is assigned a value but never used.","'setSubSystem' is assigned a value but never used.","'currentMission' is assigned a value but never used.","'setMission' is assigned a value but never used.","'eqDataOption' is assigned a value but never used.","'setEqDataOption' is assigned a value but never used.","'selectedEqName' is assigned a value but never used.","'setEquipmentName' is assigned a value but never used.","'selectedMissionName' is assigned a value but never used.","'setMissionName' is assigned a value but never used.","'graphData' is assigned a value but never used.","'setGraphData' is assigned a value but never used.","'missionPhaseGraphData' is assigned a value but never used.","'setMissionPhaseGraphData' is assigned a value but never used.","'subSystemData' is assigned a value but never used.","'setSubSystemData' is assigned a value but never used.","'eventInfo' is assigned a value but never used.","'cardData' is assigned a value but never used.","'setCardData' is assigned a value but never used.","'thReliab' is assigned a value but never used.","'handleStartDateChange' is assigned a value but never used.","'handleEndDateChange' is assigned a value but never used.","'handleEventCheck' is assigned a value but never used.","'taskNames' is assigned a value but never used.","'taskData' is assigned a value but never used.",["1301"],"'showGraph' is assigned a value but never used.","'setShowGraph' is assigned a value but never used.","'data' is assigned a value but never used.","'minThreshold' is assigned a value but never used.","'maxThreshold' is assigned a value but never used.","'Route' is defined but never used.","'onSaveButtonClickHandler' is assigned a value but never used.","'useDispatch' is defined but never used.","'location' is assigned a value but never used.","'potentialParallelComponents' is assigned a value but never used.","'systemData' is assigned a value but never used.","'useStyles' is assigned a value but never used.","'Typography' is defined but never used.","'handleNext' is assigned a value but never used.","'handleBack' is assigned a value but never used.","'handleReset' is assigned a value but never used.","'ModeCommentTwoTone' is defined but never used.","'goToCurrent' is assigned a value but never used.",["1302"],"'onEquipmentCodeChange' is assigned a value but never used.","'useImperativeHandle' is defined but never used.","'forwardRef' is defined but never used.","'MIrowData' is defined but never used.","React Hook useEffect has missing dependencies: 'failureModesData', 'props.matchingId', and 'systemData'. Either include them or remove the dependency array.",["1303"],"'selectedOptionId' is assigned a value but never used.","'RenderParallelComponent' is defined but never used.","'setParallelIds' is assigned a value but never used.","'monthNames' is assigned a value but never used.","'dd' is assigned a value but never used.","'gridColumnApi' is assigned a value but never used.","'buttonClick' is assigned a value but never used.","'ReactDom' is defined but never used.","'TextField' is defined but never used.","'LMrowData' is defined but never used.","'PhaseClasses' is assigned a value but never used.","'phaseD' is assigned a value but never used.","'rootSystemData' is assigned a value but never used.","'InputBase' is defined but never used.","'Labelclasses' is assigned a value but never used.","'treeDataT' is defined but never used.","'treeDataS' is assigned a value but never used.","'setTreeData' is assigned a value but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'DialogContent' is defined but never used.","'DialogActions' is defined but never used.","'xData' is defined but never used.","'systemConfigurationData' is assigned a value but never used.","'platform' is assigned a value but never used.","'platformType' is assigned a value but never used.","'platformId' is assigned a value but never used.","'SystemConfiguration' is defined but never used.","'path' is assigned a value but never used.","'AssignType' is defined but never used.","'TreeComponent' is defined but never used.","'history' is assigned a value but never used.","'setquestionsOptions' is assigned a value but never used.","'questionsCost' is assigned a value but never used.","'questionsContinous' is assigned a value but never used.","'updateFinalRowData' is assigned a value but never used.","'nextOption' is assigned a value but never used.","'handleNextChange' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Sidebar' is defined but never used.","'Select' is defined but never used.","'treeDataActions' is defined but never used.","'DialogContentText' is defined but never used.","'filter' is defined but never used.","'components' is assigned a value but never used.","'IconButton' is defined but never used.","'treeData' is defined but never used.","'AgGridReact' is defined but never used.","'phaseData' is assigned a value but never used.","'mData' is assigned a value but never used.","'Fragment' is defined but never used.","'rData' is assigned a value but never used.","'getDatePicker' is assigned a value but never used.","'setDegradationWearLevels' is assigned a value but never used.","'hello' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'addVisualActionRows'. Either include it or remove the dependency array.",["1304"],"'lvlwiseColumnDefs' is assigned a value but never used.","'sbAlarmCols' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["1305"],"'edgesN' is assigned a value but never used.","'groupDataKN' is assigned a value but never used.","'onHandleUpdateKN' is assigned a value but never used.","'Paper' is defined but never used.","'addMoreLifeEstimates' is assigned a value but never used.","'icon' is assigned a value but never used.","'checkedIcon' is assigned a value but never used.","'ReactDOM' is defined but never used.","'ContextMenuTrigger' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"1306","fix":"1307"},{"desc":"1308","fix":"1309"},{"desc":"1310","fix":"1311"},{"desc":"1310","fix":"1312"},{"desc":"1313","fix":"1314"},{"desc":"1315","fix":"1316"},{"desc":"1313","fix":"1317"},{"desc":"1313","fix":"1318"},{"desc":"1319","fix":"1320"},{"desc":"1321","fix":"1322"},{"desc":"1323","fix":"1324"},"Update the dependencies array to be: [locationKeys, history, location.pathname, NextStage, PreviousStage]",{"range":"1325","text":"1326"},"Update the dependencies array to be: [NextStage, PreviousStage, history, locationKeys]",{"range":"1327","text":"1328"},"Update the dependencies array to be: [dispatch, setUserSelectionData]",{"range":"1329","text":"1330"},{"range":"1331","text":"1330"},"Update the dependencies array to be: [dispatch]",{"range":"1332","text":"1333"},"Update the dependencies array to be: [minMax, selectedEqName, selectedParameterName]",{"range":"1334","text":"1335"},{"range":"1336","text":"1333"},{"range":"1337","text":"1333"},"Update the dependencies array to be: [failureModesData, props.matchingId, systemData]",{"range":"1338","text":"1339"},"Update the dependencies array to be: [VisualWearRows, VisualCorrosionRows, addVisualActionRows]",{"range":"1340","text":"1341"},"Update the dependencies array to be: [dispatch, ielements]",{"range":"1342","text":"1343"},[5022,5045],"[locationKeys, history, location.pathname, NextStage, PreviousStage]",[3492,3506],"[NextStage, PreviousStage, history, locationKeys]",[7607,7629],"[dispatch, setUserSelectionData]",[7663,7685],[2356,2358],"[dispatch]",[2925,2941],"[minMax, selectedEqName, selectedParameterName]",[14381,14383],[1751,1753],[1409,1411],"[failureModesData, props.matchingId, systemData]",[1981,2018],"[VisualWearRows, VisualCorrosionRows, addVisualActionRows]",[3420,3431],"[dispatch, ielements]"]